<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ML.Data</name>
    </assembly>
    <members>
        <member name="M:Microsoft.ML.Data.CrossValidationCommand.ApplyAllTransformsToData(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.IDataView,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.IDataView)">
            <summary>
            Callback from the CV method to apply the transforms from the train data to the test and/or validation data.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CrossValidationCommand.CreateRoleMappedData(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.IDataView,Microsoft.ML.ITrainer)">
            <summary>
            Callback from the CV method to apply the transforms to the train data.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CrossValidationCommand.FoldHelper.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.IDataView,System.String,Microsoft.ML.Data.CrossValidationCommand.Arguments,System.Func{Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.IDataView,Microsoft.ML.ITrainer,Microsoft.ML.Data.RoleMappedData},System.Func{Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.IDataView,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.IDataView,Microsoft.ML.Data.RoleMappedData},Microsoft.ML.Runtime.IComponentFactory{Microsoft.ML.IDataView,Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.RoleMappedSchema,Microsoft.ML.Data.IDataScorerTransform},Microsoft.ML.Runtime.IComponentFactory{Microsoft.ML.Data.IMamlEvaluator},System.Func{Microsoft.ML.IDataView},System.Func{Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.IDataView,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.IDataView,Microsoft.ML.Data.RoleMappedData},Microsoft.ML.IPredictor,System.String,Microsoft.ML.Data.ILegacyDataLoader,System.Boolean)">
            <param name="env">The environment.</param>
            <param name="registrationName">The registration name.</param>
            <param name="inputDataView">The input data view.</param>
            <param name="splitColumn">The column to use for splitting data into folds.</param>
            <param name="args">Cross validation arguments.</param>
            <param name="createExamples">The delegate to create RoleMappedData</param>
            <param name="applyTransformsToTestData">The delegate to apply the transforms from the train pipeline to the test data</param>
            <param name="scorer">The scorer</param>
            <param name="evaluator">The evaluator</param>
            <param name="getValidationDataView">The delegate to create validation data view</param>
            <param name="applyTransformsToValidationData">The delegate to apply the transforms from the train pipeline to the validation data</param>
            <param name="inputPredictor">The input predictor, for the continue training option</param>
            <param name="cmd">The command string.</param>
            <param name="loader">Original loader so we can construct correct pipeline for model saving.</param>
            <param name="savePerInstance">Whether to produce the per-instance data view.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Data.CrossValidationCommand.FoldHelper.GetCrossValidationTasks">
            <summary>
            Creates and runs tasks for each fold of cross validation. The split column is used to split the input data into folds.
            There are two cases:
                1. The split column is R4: in this case it assumes that the values are in the interval [0,1] and will split
                this interval into equal width folds. If the values are uniformly distributed it should result in balanced folds.
                2. The split column is key of known cardinality: will split the whole range into equal parts to form folds. If the
                keys are generated by hashing for example, it should result in balanced folds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Data.CrossValidationCommand.ConstructPerFoldName(System.String,System.Int32)">
            <summary>
            Take path to expected output model file and return path to output model file for specific fold.
            Example: \\share\model.zip -> \\share\model.fold001.zip
            </summary>
            <param name="outputModelFile">Path to output model file</param>
            <param name="fold">Current fold</param>
            <returns>Path to output model file for specific fold</returns>
        </member>
        <member name="T:Microsoft.ML.Data.DataCommand">
            <summary>
            This holds useful base classes for commands that ingest a primary dataset and deal with associated model files.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataCommand.ImplBase`1.LoadModelObjects(Microsoft.ML.Runtime.IChannel,System.Nullable{System.Boolean},Microsoft.ML.IPredictor@,System.Boolean,Microsoft.ML.Data.RoleMappedSchema@,Microsoft.ML.Data.ILegacyDataLoader@)">
            <summary>
            Loads multiple artifacts of interest from the input model file, given the context
            established by the command line arguments.
            </summary>
            <param name="ch">The channel to which to provide output.</param>
            <param name="wantPredictor">Whether we want a predictor from the model file. If
            <c>false</c> we will not even attempt to load a predictor. If <c>null</c> we will
            load the predictor, if present. If <c>true</c> we will load the predictor, or fail
            noisily if we cannot.</param>
            <param name="predictor">The predictor in the model, or <c>null</c> if
            <paramref name="wantPredictor"/> was false, or <paramref name="wantPredictor"/> was
            <c>null</c> and no predictor was present.</param>
            <param name="wantTrainSchema">Whether we want the training schema. Unlike
            <paramref name="wantPredictor"/>, this has no "hard fail if not present" option. If
            this is <c>true</c>, it is still possible for <paramref name="trainSchema"/> to remain
            <c>null</c> if there were no role mappings, or pipeline.</param>
            <param name="trainSchema">The training schema if <paramref name="wantTrainSchema"/>
            is true, and there were role mappings stored in the model.</param>
            <param name="pipe">The data pipe constructed from the combination of the
            model and command line arguments.</param>
        </member>
        <member name="M:Microsoft.ML.Data.LoaderUtils.SaveLoader(Microsoft.ML.Data.ILegacyDataLoader,Microsoft.ML.Data.IFileHandle,Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Saves <paramref name="loader"/> to the specified <paramref name="file"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LoaderUtils.SaveLoader(Microsoft.ML.Data.ILegacyDataLoader,System.IO.Stream,Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Saves <paramref name="loader"/> to the specified <paramref name="stream"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DefaultColumnNames">
            <summary>
            A set of string literals intended to be "canonical" names for column names intended for particular purpose.
            While not part of the public API surface, its primary purpose is intended to be used in such a way as to encourage
            uniformity on the public API surface, wherever it is judged where columns with default names should be consumed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetricColumn">
            <summary>
            This class contains information about an overall metric, namely its name and whether it is a vector
            metric or not.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetricColumn.Objective">
            <summary>
            An enum specifying whether the metric should be maximized or minimized while sweeping. 'Info' should be
            used for metrics that are irrelevant to the model's quality (such as the number of positive/negative
            examples etc.).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IEvaluator">
            <summary>
            This is an interface for evaluation. It has two methods: <see cref="M:Microsoft.ML.Data.IEvaluator.Evaluate(Microsoft.ML.Data.RoleMappedData)"/> and <see cref="M:Microsoft.ML.Data.IEvaluator.GetPerInstanceMetrics(Microsoft.ML.Data.RoleMappedData)"/>.
            Both take a <see cref="T:Microsoft.ML.Data.RoleMappedData"/> as input. The <see cref="T:Microsoft.ML.Data.RoleMappedData"/> is assumed to contain all the column
            roles needed for evaluation, including the score column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IEvaluator.Evaluate(Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Compute the aggregate metrics. Return a dictionary from the metric kind
            (overal/per-fold/confusion matrix/PR-curves etc.), to a data view containing the metric.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IEvaluator.GetPerInstanceMetrics(Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Return an <see cref="T:Microsoft.ML.Data.IDataTransform"/> containing the per-instance results.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IEvaluator.GetOverallMetricColumns">
            <summary>
            Get all the overall metrics returned by this evaluator.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SignatureEvaluator">
            <summary>
            Signature for creating an <see cref="T:Microsoft.ML.Data.IEvaluator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SignatureDataScorer">
            <summary>
            Signature for creating an <see cref="T:Microsoft.ML.Data.IDataScorerTransform"/>.
            </summary>
            <param name="data">The data containing the columns to score</param>
            <param name="mapper">The mapper, already bound to the schema column in <paramref name="data"/></param>
            <param name="trainSchema">This parameter holds a snapshot of the role mapped training schema as
            it existed at the point when <paramref name="mapper"/> was trained, or <c>null</c> if it not
            available for some reason</param>
        </member>
        <member name="M:Microsoft.ML.Data.ScoreCommand.ShouldAddColumn(Microsoft.ML.DataViewSchema,System.Int32,System.UInt32,System.Boolean)">
            <summary>
            Whether a column should be added, assuming it's not hidden
            (i.e.: this doesn't check for hidden
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ScoreUtils.GetScorerComponentAndMapper(Microsoft.ML.IPredictor,Microsoft.ML.Runtime.IComponentFactory{Microsoft.ML.IDataView,Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.RoleMappedSchema,Microsoft.ML.Data.IDataScorerTransform},Microsoft.ML.Data.RoleMappedSchema,Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IComponentFactory{Microsoft.ML.IPredictor,Microsoft.ML.Data.ISchemaBindableMapper},Microsoft.ML.Data.ISchemaBoundMapper@)">
            <summary>
            Determines the scorer component factory (if the given one is null or empty), and creates the schema bound mapper.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ScoreUtils.GetScorerComponent(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ISchemaBoundMapper,System.String)">
            <summary>
            Determine the default scorer for a schema bound mapper. This looks for text-valued ScoreColumnKind
            metadata on the first column of the mapper. If that text is found and maps to a scorer loadable class,
            that component is used. Otherwise, the GenericScorer is used.
            </summary>
            <param name="environment">The host environment.</param>.
            <param name="mapper">The schema bound mapper to get the default scorer.</param>.
            <param name="suffix">An optional suffix to append to the default column names.</param>
        </member>
        <member name="M:Microsoft.ML.Data.ScoreUtils.GetSchemaBindableMapper(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IPredictor,Microsoft.ML.Runtime.IComponentFactory{Microsoft.ML.IPredictor,Microsoft.ML.Data.ISchemaBindableMapper},Microsoft.ML.CommandLine.ICommandLineComponentFactory)">
            <summary>
            Given a predictor, an optional mapper factory, and an optional scorer factory settings,
            produces a compatible ISchemaBindableMapper.
            First, it tries to instantiate the bindable mapper using the mapper factory.
            Next, it tries to instantiate the bindable mapper using the <paramref name="scorerFactorySettings"/>
            (this will only succeed if there's a registered BindableMapper creation method with load name equal to the one
            of the scorer).
            If the above fails, it checks whether the predictor implements <see cref="T:Microsoft.ML.Data.ISchemaBindableMapper"/>
            directly.
            If this also isn't true, it will create a 'matching' standard mapper.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ShowSchemaCommand.RunOnData(System.IO.TextWriter,Microsoft.ML.Data.ShowSchemaCommand.Arguments,Microsoft.ML.IDataView)">
            <summary>
            This shows the schema of the given <paramref name="data"/>, ignoring the data specification
            in the <paramref name="args"/> parameter. Test code invokes this, hence it is internal.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ShowSchemaCommand.GetViewChainReversed(Microsoft.ML.IDataView)">
            <summary>
            Returns the sequence of views passed through the transform chain, last to first.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TestCommand">
            <summary>
            This command is essentially chaining together <see cref="T:Microsoft.ML.Data.ScoreCommand"/> and
            <see cref="T:Microsoft.ML.Data.EvaluateCommand"/>, without the need to save the intermediary scored data.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TrainUtils.MatchNameOrDefaultOrNull(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.DataViewSchema,System.String,System.String,System.String)">
            <summary>
            If user name is null or empty, return null.
            Else, if the user name is found in the schema, return the user name.
            Else, if the user name equals the default name return null.
            Else, throw an error.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TrainUtils.SaveModel(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.IFileHandle,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedData,System.String)">
            <summary>
            Save the model to the output path.
            The method saves the loader and the transformations of dataPipe and saves optionally predictor
            and command. It also uses featureColumn, if provided, to extract feature names.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="ch">The communication channel to use.</param>
            <param name="output">The output file handle.</param>
            <param name="predictor">The predictor.</param>
            <param name="data">The training examples.</param>
            <param name="command">The command string.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TrainUtils.SaveModel(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,System.IO.Stream,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedData,System.String)">
            <summary>
            Save the model to the stream.
            The method saves the loader and the transformations of dataPipe and saves optionally predictor
            and command. It also uses featureColumn, if provided, to extract feature names.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="ch">The communication channel to use.</param>
            <param name="outputStream">The output model stream.</param>
            <param name="predictor">The predictor.</param>
            <param name="data">The training examples.</param>
            <param name="command">The command string.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TrainUtils.SaveDataPipe(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.RepositoryWriter,Microsoft.ML.IDataView,System.Boolean)">
            <summary>
            Save the data pipeline defined by dataPipe. If blankLoader is true or the root IDataView is not an IDataLoader,
            this persists the root as a BinaryLoader having the same schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TrainUtils.BacktrackPipe(Microsoft.ML.IDataView,Microsoft.ML.IDataView@)">
            <summary>
            Traces back the .Source chain of the transformation pipe <paramref name="dataPipe"/> up to the moment it no longer can.
            Returns all the transforms of <see cref="T:Microsoft.ML.IDataView"/> and the first data view (a non-transform).
            </summary>
            <param name="dataPipe">The transformation pipe to traverse.</param>
            <param name="pipeStart">The beginning data view of the transform chain</param>
            <returns>The list of the transforms</returns>
        </member>
        <member name="T:Microsoft.ML.Data.DataDebuggerPreview">
            <summary>
            This class represents an eager 'preview' of a <see cref="T:Microsoft.ML.IDataView"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry">
            <summary>
            Each column corresponds to a table of contents entry, describing information about the column
            and how values may be extracted. For columns represented physically within the stream this will
            include its location within the stream and a codec to decode the bytestreams, and for generated
            columns procedures to create them. This structure is used both for those columns that
            we know how to access (called alive columns), and those columns we do not know how to access
            (either because the value codec or compressions scheme is unrecognized, called a dead column).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.Name">
            <summary>
            The name of the column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.Codec">
            <summary>
            The codec we will use to read the values from the stream. This will be null if
            and only if this is a dead or generated column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.Type">
            <summary>
            The column type of the column. This will be null if and only if this is a dead
            column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.Compression">
            <summary>
            The compression scheme used on this column's blocks.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.RowsPerBlock">
            <summary>
            The number of rows in each block (except for the last one).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.LookupOffset">
            <summary>
            The offset into the stream where the lookup table for this column is stored.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.MetadataTocOffset">
            <summary>
            The offset into the stream where the metadata TOC entries for this column are
            stored. This will be 0 if there is no metadata for this column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.ColumnIndex">
            <summary>
            The index of the column. Note that if there are dead columns, this value may
            differ from the corresponding column index as reported by the dataview.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.IsGenerated">
            <summary>
            Whether this is a generated column, that is, something dependent on no actual block data
            in the file.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.#ctor(Microsoft.ML.Data.IO.BinaryLoader,System.String,Microsoft.ML.Data.DataViewType,System.Delegate)">
            <summary>
            Constructor for a generated column, which corresponds to no column in the original file,
            and has no stored blocks associated with it. The input <paramref name="valueMapper"/> must
            be a <c>ValueMapper</c> mapping a <c>long</c> zero based row index, to some value with the
            same type as the raw type in <paramref name="type"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.GetValueMapper``1">
            <summary>
            Returns the value mapper for a generated column. Only a valid call if
            <typeparamref name="T"/> is the same type as <see cref="P:Microsoft.ML.Data.DataViewType.RawType"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.GetLookup">
            <summary>
            Gets an array, one for each block of this column, describing its location within the file.
            This will return null if and only if this is a generated column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.GetMaxBlockSizes(System.Int32@,System.Int32@)">
            <summary>
            Fetches the maximum block sizes for both the compressed and decompressed
            block sizes, for this column. If there are no blocks associated with this
            column, for whatever reason (for example, a data view with no rows, or a generated
            column), this will return 0 in both vlaues.
            </summary>
            <param name="compressed">The maximum value of the compressed block size
            (that is, the actual size of the block in stream) among all blocks for this
            column</param>
            <param name="decompressed">The maximum value of the block size when
            decompressed among all blocks for this column</param>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.GetMetadataTocArray">
            <summary>
            Gets an array containing the metadata TOC entries. This will return null if there
            are no entries stored at all, and empty if there is metadata, but none of it was
            readable. (To inspect attributes of the unreadable metadata, if any, see
            <see cref="M:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.GetDeadMetadataTocArray"/>.) All entries will point to metadata with
            known codecs and compression schemes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.GetDeadMetadataTocArray">
            <summary>
            Gets an array containing the metadata TOC entries for all "dead" pieces of metadata. This
            will return null if there are no metadata stored at all either readable or unreadable, and
            empty if there is no unreadable piece of metadata. A piece of metadata is considered "dead"
            if either its codec or compression kind is unknown. This is primarily for diagnostic purposes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.GetMetadataTocEntryOrNull(System.String)">
            <summary>
            Returns the entry for a valid "live" piece of metadata given a kind.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.TableOfContentsEntry.GetMetadataTocEndOffset">
            <summary>
            Returns the location in the stream just past the end of the metadata table of contents.
            If this column has no metadata table of contents defined, this will return 0. This is
            primarily for diagnostic purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry">
            <summary>
            A column can be associated with metadata, in which case it will have one or more table of contents entries,
            each represented by one of these entries.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.Kind">
            <summary>
            The kind of the metadata, an identifying name.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.Codec">
            <summary>
            The codec we will use to read the metadata value. If this is <c>null</c>,
            the metadata is considered "dead," that is, uninterpretable.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.Compression">
            <summary>
            The compression scheme used on the metadata block. If this is an unknown
            type, the metadata is considered "dead," that is, uninterpretable.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.BlockOffset">
            <summary>
            The offset into the stream where the metadata block begins.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.BlockSize">
            <summary>
            The number of bytes used to store the metadata block.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.GetGetter">
            <summary>
            Return <see cref="T:Microsoft.ML.ValueGetter`1"/> to the stored entry value as <see cref="T:System.Delegate"/>. An example of stored value is
            <see cref="F:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry`1.Value"/>. For implementations of <see cref="M:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.GetGetter"/>, see <see cref="T:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.ImplDead"/>,
            <see cref="T:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.ImplOne`1"/>, and <see cref="T:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.ImplVec`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry.ImplDead">
            <summary>
            Information on a metadata that could not be interpreted for some reason.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry`1.EnsureValue">
            <summary>
            By calling <see cref="M:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry`1.EnsureValue"/>, we make sure <see cref="F:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry`1.Value"/>'s content get loaded definitely.
            Without calling <see cref="M:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry`1.EnsureValue"/>, <see cref="F:Microsoft.ML.Data.IO.BinaryLoader.MetadataTableOfContentsEntry`1.Value"/> could be default value of its type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.ComputeOutputSchema">
            <summary>
            This function returns output schema, <see cref="P:Microsoft.ML.Data.IO.BinaryLoader.Schema"/>, of <see cref="T:Microsoft.ML.Data.IO.BinaryLoader"/> by translating <see cref="F:Microsoft.ML.Data.IO.BinaryLoader._aliveColumns"/> into
            <see cref="T:Microsoft.ML.DataViewSchema.Column"/>s. If a <see cref="T:Microsoft.ML.Data.IO.BinaryLoader"/> loads a text column from the input file, its <see cref="P:Microsoft.ML.Data.IO.BinaryLoader.Schema"/>
            should contains a <see cref="T:Microsoft.ML.DataViewSchema.Column"/> with <see cref="P:Microsoft.ML.Data.TextDataViewType.Instance"/> as its <see cref="T:Microsoft.ML.Data.DataViewType"/>.
            </summary>
            <returns><see cref="P:Microsoft.ML.Data.IO.BinaryLoader.Schema"/> of loaded file.</returns>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.ReaderVersion">
            <summary>
            Upper inclusive bound of versions this reader can read.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.StandardDataTypesVersion">
            <summary>
            The first version that removes DvTypes and uses .NET standard
            data types.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.MissingTextVersion">
            <summary>
            The first version of the format that accommodated DvText.NA.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.MetadataVersion">
            <summary>
            The first version of the format that accommodated arbitrary metadata.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.SlotNamesVersion">
            <summary>
            The first version of the format that accommodated slot names.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.ReaderFirstVersion">
            <summary>
            Low inclusive bound of versions this reader can read.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.IO.BinaryLoader.Arguments,System.IO.Stream,System.Boolean)">
            <summary>
            Constructs a new data view loader.
            </summary>
            <param name="stream">A seekable, readable stream. Note that the data view loader assumes
            that it is the exclusive owner of this stream.</param>
            <param name="args">Arguments</param>
            <param name="env">Host environment</param>
            <param name="leaveOpen">Whether to leave the input stream open</param>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.#ctor(Microsoft.ML.Runtime.IHost,Microsoft.ML.ModelLoadContext,System.IO.Stream)">
            <summary>
            Creates a binary loader from a <see cref="T:Microsoft.ML.ModelLoadContext"/>. Since the loader code
            opens the file, this will always take ownership of the stream, that is, this is always
            akin to <c>leaveOpen</c> in the other constructor being false.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,System.IO.Stream)">
            <summary>
            Creates a binary loader from a stream that is not owned by the loader.
            This creates its own independent copy of input stream for the binary loader.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.SaveParameters(Microsoft.ML.ModelSaveContext,System.Int32,System.Double)">
            <summary>
            Write the parameters of a loader to the save context. Can be called by <see cref="M:Microsoft.ML.Data.IO.BinaryLoader.SaveInstance(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelSaveContext,Microsoft.ML.DataViewSchema)"/>, where there's no actual
            loader, only default parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.SaveSchema(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelSaveContext,Microsoft.ML.DataViewSchema,System.Int32[]@)">
            <summary>
            Save a zero-row dataview that will be used to infer schema information, used in the case
            where the binary loader is instantiated with no input streams.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.SaveInstance(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelSaveContext,Microsoft.ML.DataViewSchema)">
             <summary>
             Given the schema and a model context, save an imaginary instance of a binary loader with the
             specified schema. Deserialization from this context should produce a real binary loader that
             has the specified schema.
            
             This is used in an API scenario, when the data originates from something other than a loader.
             Since our model file requires a loader at the beginning, we have to construct a bogus 'binary' loader
             to begin the pipe with, with the assumption that the user will bypass the loader at deserialization
             time by providing a starting data view.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe.DecompressOne">
            <summary>
            This will attempt to extract a compressed block from the
            <see cref="F:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe`1._toDecompress"/> queue. This returns true if and only if it
            succeeded in extracting an item from the queue (even a sentinel block);
            that is, if it returns false, then there are no more items to extract
            (though, continuing to call this method is entirely possible, and legal,
            if convenient).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe.MoveNextCleanup">
            <summary>
            Necessary to be called in the event of a premature exiting. This executes
            the same recycle-fetch block cycle as <see cref="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe.MoveNext"/>, except that
            nothing is actually done with the resulting block. This should be called
            in a similar fashion as the cursor calls <see cref="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe.MoveNext"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipeGenerated`1.Block.IsSentinel">
            <summary>
            This indicates that this block does not contain any actual information, or
            correspond to an actual block, but it will still contain the
            <see cref="F:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipeGenerated`1.Block.BlockSequence"/> index. Sentinel blocks are used to indicate that
            there will be no more blocks to be decompressed along a particular pipe,
            allowing the pipe worker to perform necessary cleanup.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipeGenerated`1.Block.#ctor(System.Int64)">
            <summary>
            Constructor for a sentinel compressed block. (For example,
            the pipe's last block, which contains no valid data.)
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe`1._toDecompress">
            <summary>
            Calls from the stream reader worker into <see cref="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe`1.PrepAndSendCompressedBlock(System.Int64,System.Int64,System.Int32)"/> will feed
            into this collection, and calls from the decompress worker into <see cref="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe`1.DecompressOne"/>
            will consume this collection.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe`1.CompressedBlock.IsSentinel">
            <summary>
            This indicates that this block does not contain any actual information, or
            correspond to an actual block, but it will still contain the
            <see cref="F:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe`1.CompressedBlock.BlockSequence"/> index. Sentinel blocks are used to indicate that
            there will be no more blocks to be decompressed along a particular pipe,
            allowing the pipe worker to perform necessary cleanup.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe`1.CompressedBlock.#ctor(System.Int64)">
            <summary>
            Constructor for a sentinel compressed block. (For example,
            the pipe's last block, which contains no valid data.)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.ReadPipe`1.#ctor(Microsoft.ML.Data.IO.BinaryLoader.Cursor,System.Int32,System.Int32)">
            <summary>
            This is called through reflection so it will appear to have no references.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinaryLoader.Cursor.GetNoRowGetter(Microsoft.ML.Data.DataViewType)">
            <summary>
            Even in the case with no rows, there still must be valid delegates. This will return
            a delegate that simply always throws.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.BinarySaver.ColumnCodec">
            <summary>
            This is a simple struct to associate a source index with a codec, without having to have
            parallel structures everywhere.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinarySaver.WritePipe.Create(Microsoft.ML.Data.IO.BinarySaver,Microsoft.ML.DataViewRowCursor,Microsoft.ML.Data.IO.BinarySaver.ColumnCodec)">
            <summary>
            Returns an appropriate generic <c>WritePipe{T}</c> for the given column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.BinarySaver.Block">
            <summary>
            A class useful for encapsulating both compressed and uncompressed block data.
            As the mechanism the compress workers communicate with the writer worker, they
            also have a dual usage if <see cref="T:System.Exception"/> is non-null of indicating
            a source worker threw an exception.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinarySaver.Block.BlockData">
            <summary>
            Take one guess.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinarySaver.Block.UncompressedLength">
            <summary>
            The length of the block if uncompressed. This quantity is only intended to be
            meaningful if the block data is compressed.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinarySaver.Block.ColumnIndex">
            <summary>
            The column index, which is the index of the column as being written, which
            may be less than the column from the source dataview if there were preceding
            columns being dropped.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BinarySaver.Block.BlockIndex">
            <summary>
            The block sequence number for this column, starting consecutively from 0.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinarySaver.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.IO.BinarySaver.Arguments)">
            <summary>
            Constructs a saver for a data view.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinarySaver.WriteMetadata(System.IO.BinaryWriter,Microsoft.ML.DataViewSchema,System.Int32,Microsoft.ML.Runtime.IChannel)">
            <summary>
            A helper method to query and write metadata to the stream.
            </summary>
            <param name="writer">A binary writer, which if metadata exists for the
            indicated column the base stream will be positioned just past the end of
            the written metadata table of contents, and if metadata does not exist
            remains unchanged</param>
            <param name="schema">The schema to query for metadat</param>
            <param name="col">The column we are attempting to get metadata for</param>
            <param name="ch">The channel to which we write any diagnostic information</param>
            <returns>The offset of the metadata table of contents, or 0 if there was
            no metadata</returns>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinarySaver.TryWriteTypeDescription(System.IO.Stream,Microsoft.ML.Data.DataViewType,System.Int32@)">
            <summary>
            A utility method to save a column type to a stream, if we have a codec for that.
            </summary>
            <param name="stream">The stream to save the description to</param>
            <param name="type">The type to save</param>
            <param name="bytesWritten">The number of bytes written to the stream, which will
            be zero if we could not save the stream</param>
            <returns>Returns if have the ability to save this column type. If we do, we write
            the description to the stream. If we do not, nothing is written to the stream and
            the stream is not advanced.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinarySaver.LoadTypeDescriptionOrNull(System.IO.Stream)">
            <summary>
            Attempts to load a type description from a stream. In all cases, in the event
            of a properly formatted stream, even if the type-descriptor is not recognized,
            the stream will be at the end of that type descriptor. Note that any detected
            format errors will result in a throw.
            </summary>
            <param name="stream">The stream to load the type description from</param>
            <returns>A non-null value if the type descriptor was recognized, or null if
            it was not</returns>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinarySaver.TryWriteTypeAndValue``1(System.IO.Stream,Microsoft.ML.Data.DataViewType,``0@,System.Int32@)">
            <summary>
            A utility method to save a column type and value to a stream, if we have a codec for that.
            </summary>
            <param name="stream">The stream to write the type and value to</param>
            <param name="type">The type of the codec to write and utilize</param>
            <param name="value">The value to encode and write</param>
            <param name="bytesWritten">The number of bytes written</param>
            <returns>Whether the write was successful or not</returns>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinarySaver.TryLoadTypeAndValue(System.IO.Stream,Microsoft.ML.Data.DataViewType@,System.Object@)">
            <summary>
            Attempts to load a type description and a value of that type from a stream.
            </summary>
            <param name="stream">The stream to load the type description and value from</param>
            <param name="type">A non-null value if the type descriptor was recognized, or null if
            it was not</param>
            <param name="value">A non-null value if the type descriptor was recognized and a value
            read, or null if the type descriptor was not recognized</param>
            <returns>Whether the load of a type description and value was successful</returns>
        </member>
        <member name="M:Microsoft.ML.Data.IO.BinarySaver.LoadValue``1(System.IO.Stream,Microsoft.ML.Data.IO.IValueCodec)">
            <summary>
            Deserializes and returns a value given a stream and codec.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.BlockLookup">
            <summary>
            This structure is utilized by both the binary loader and binary saver to hold
            information on the location of blocks written to an .IDV binary file.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BlockLookup.BlockOffset">
            <summary>The offset of the block into the file.</summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BlockLookup.BlockLength">
            <summary>The byte length of the block on disk.</summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.BlockLookup.DecompressedBlockLength">
            <summary>The byte length of the block if decompressed.</summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.CodecFactory.WriteCodec(System.IO.Stream,Microsoft.ML.Data.IO.IValueCodec)">
            <summary>
            Given a codec, write a type description to a stream, from which this codec can be
            reconstructed later. This returns the number of bytes written, so that, if this
            were a seekable stream, the positions would differ by this amount before and after
            a call to this method.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.CodecFactory.TryReadCodec(System.IO.Stream,Microsoft.ML.Data.IO.IValueCodec@)">
            <summary>
            Attempts to define a codec, given a stream positioned at the start of a serialized
            codec type definition.
            </summary>
            <param name="definitionStream">The input stream, which whether this returns true or false
            will be left at the end of the codec type definition</param>
            <param name="codec">A codec castable to a generic <c>IValueCodec{T}</c> where
            <c>typeof(T)==codec.Type.RawType</c></param>
            <returns>Whether the codec type definition was understood. If true the codec has defined
            value, and should be usable. If false, the name of the codec was unrecognized. Note that
            malformed definitions are detected, this will throw instead of returning either true or
            false.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.IO.CodecFactory.ValueWriterBase`1">
            <summary>
            A convenient base class for value writers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.CodecFactory.ValueReaderBase`1">
            <summary>
            A convenient base class for value readers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.CodecFactory.SimpleCodec`1">
            <summary>
            A simple codec is useful for those types with no parameterizations.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.CodecFactory.UnsafeTypeCodec`1">
            <summary>
            This codec is for use with types that have <c>UnsafeTypeOps</c> operations defined.
            Generally, this corresponds to numeric types that can be safely blitted.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.CodecFactory.BoolCodec">
            <summary>
            This is a boolean code that reads from a form that serialized
            1 bit per value. The old encoding (implemented by a different codec)
            uses 2 bits per value so NA values can be supported.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.CompressionKind">
            <summary>
            A code indicating the kind of compression. It is supposed that each kind of compression is totally
            sufficient to describe how a given stream should be decompressed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.CompressionCodecExtension.CompressStream(Microsoft.ML.Data.IO.CompressionKind,System.IO.Stream)">
            <summary>
            Generate an appropriate wrapping compressing stream for the codec. This
            stream will be closable and disposable, without closing or disposing of
            the passed in stream. The scheme for compression is not in any way
            parameterizable.
            </summary>
            <param name="compression">The compression codec</param>
            <param name="stream">The stream to which compressed data will be written</param>
            <returns>A stream to which the user can write uncompressed data</returns>
        </member>
        <member name="M:Microsoft.ML.Data.IO.CompressionCodecExtension.DecompressStream(Microsoft.ML.Data.IO.CompressionKind,System.IO.Stream)">
            <summary>
            Generate an appropriate wrapping decompressing stream for the codec.
            </summary>
            <param name="compression">The compression codec</param>
            <param name="stream">The stream from which compressed data will be written</param>
            <returns>A stream from which the user can read uncompressed data</returns>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.HeaderSize">
            <summary>
            The fixed header size. This should not be changed even in future versions of the format.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.SignatureValue">
            <summary>
            The header must start with this signature. This number will
            appear as the eight-byte sequence "CML\0DVB\0" if encoded in
            little-endian. (CML DVB is meant to suggest CloudML DataView binary).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.TailSignatureValue">
            <summary>
            The file must end with this value. Is is simply the
            byte-order-reversed version of the head signature.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.WriterVersion">
            <summary>
            The current version of the format this software can write.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.Signature">
            <summary>
            The magic number of this file.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.Version">
            <summary>
            Indicates the version of the data file.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.CompatibleVersion">
            <summary>
            Indicates the minimum reader version that can interpret this file, possibly
            with some data loss.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.TableOfContentsOffset">
            <summary>
            The offset to the table of contents structure where the column type definitions
            are stored.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.TailOffset">
            <summary>
            The eight-byte tail signature starts at this offset. So, the entire dataset
            stream should be considered to have eight plus this value bytes.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.RowCount">
            <summary>
            The number of rows in this data file.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.Header.ColumnCount">
            <summary>
            The number of columns in this data file.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.IValueCodec">
             <summary>
             A value codec encapsulates implementations capable of writing and reading data of some
             type to and from streams. The idea is that one creates a codec using <c>TryGetCodec</c>
             on the appropriate <c>ColumnType</c>, then opens multiple writers to write blocks of data
             to some stream. The idea is that each writer or reader is called on some "manageable chunk"
             of data.
            
             Codecs should be thread safe, though the readers and writers they spawn do not need to
             be thread safe.
             </summary>
        </member>
        <member name="P:Microsoft.ML.Data.IO.IValueCodec.LoadName">
            <summary>
            This is the codec's identifying name. This is utilized both by the codec factory's
            <c>WriteTypeDescription</c> and <c>TryGetCodec</c>, for persisting and recovering
            the codec, respectively.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.IValueCodec.WriteParameterization(System.IO.Stream)">
            <summary>
            Writes the codec parameterization to the stream. (The parameterization
            is the third part of the codec type description, after the name, and length
            of the parameterization.)
            </summary>
            <returns>The number of bytes written to the stream</returns>
        </member>
        <member name="P:Microsoft.ML.Data.IO.IValueCodec.Type">
            <summary>
            The column type for this codec.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.IValueCodec`1">
            <summary>
            The generic value codec.
            </summary>
            <typeparam name="T">The type for which we can spawn readers and writers.
            Note that <c>Type.RawType == typeof(T)</c>.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Data.IO.IValueCodec`1.OpenWriter(System.IO.Stream)">
            <summary>
            Returns a writer for this codec, capable of writing a series of values to a block
            starting at the current position of the indicated writable stream.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.IValueCodec`1.OpenReader(System.IO.Stream,System.Int32)">
            <summary>
            Returns a reader for this codec, capable of reading a series of values to a block
            starting at the current position of the indicated readable stream.
            </summary>
            <param name="stream">Stream on which we open reader.</param>
            <param name="items">The number of items expected to be encoded in the block
            starting from the current position of the stream. Implementors should, if
            possible, throw if it seems if the block contains a different number of
            elements.</param>
        </member>
        <member name="M:Microsoft.ML.Data.IO.IValueWriter.Commit">
            <summary>
            Finishes writing to the stream. No further values should be written using the
            <c>Write</c> methods. Note that failure to commit does not leave the stream in
            a defined state: something or nothing could have already been written to the
            stream, and the writer has no facilities to "rewind" whatever writes it may
            have performed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.IValueWriter.GetCommitLengthEstimate">
            <summary>
            Returns an estimate of the total length that would be written to the stream
            were we to commit right now. This may be called very often in some circumstances,
            so implementors should optimize for speed over accuracy.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.IValueWriter`1">
             <summary>
             A value writer on a particular type. The intent is that implementors of this will
             be spawned from an <seealso cref="T:Microsoft.ML.Data.IO.IValueCodec"/>, its write methods called some
             number of times to write to the stream, and then <c>Commit</c> will be called when
             all values have been written, the stream now being at the end of the written block.
            
             The intended usage of the value writers is that blocks are composed of some small
             number of values (perhaps a few thousand), the idea being that a block is something
             that should easily fit in main memory, both for reading and writing. Some writers
             take advantage of this to organize their values for more efficient reading.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.IValueWriter`1.Write(`0@)">
            <summary>
            Writes a single value to the writer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.IValueWriter`1.Write(System.ReadOnlySpan{`0})">
            <summary>
            Writes a span of values. This should be equivalent to writing each element
            singly, though possibly more efficient than such a naive implementation.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.IValueReader`1">
            <summary>
            A value reader on a particular type. As with writers, implementors of this will be
            spawned form an <seealso cref="T:Microsoft.ML.Data.IO.IValueCodec"/>. Its read methods will be called some
            number of times to read from the stream. The read methods should be used to read
            precisely the same number of times as was written to the block. if you read more,
            then the values returned past the last will be undefined, and in either case the
            stream will be left in an undefined state. Implementors may optionally complain in
            such a case, but many will not, so outside knowledge should be used by the user
            to ensure bad behavior does not happen. (For example, if you have a writer that
            just writes packed binary values with no descriptive information, the corresponding
            read will have no ability to tell when it is supposed to "end.")
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.IValueReader`1.MoveNext">
            <summary>
            Moves to the next element.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.IValueReader`1.Get(`0@)">
            <summary>
            Gets the current element.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.IValueReader`1.Read(`0[],System.Int32,System.Int32)">
            <summary>
            Reads into an array of values. This should be roughly equivalent to calling <c>MoveNext</c>
            then <c>Get</c> into an array on each element singly, though possibly more efficient than
            such a naive implementation. It may also diverge from that, in that <c>Get</c>'s behavior
            before the next <c>MoveNext</c> is undefined when this function is called.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.MemoryStreamCollection.IndexFor(System.Int32)">
            <summary>
            Given a byte size, returns an appropriate index to <see cref="F:Microsoft.ML.Data.IO.MemoryStreamCollection._pools"/>.
            This is a non-decreasing function w.r.t. <paramref name="maxSize"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TextSaver.ValueWriter.WriteData(System.Action{System.Text.StringBuilder,System.Int32},System.Int32@)">
            <summary>
            Write the data to the given stream. This requires that FetchData was previously called.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TextSaver.SeparatorCharToString(System.Char)">
            <summary>
            Returns the string representation of a separator: helpful if it's whitespace or a punctuation mark.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TextSaverUtils.MapText(System.ReadOnlySpan{System.Char},System.Text.StringBuilder@,System.Char)">
            <summary>
            Converts a ReadOnlySpan to a StringBuilder using TextSaver escaping and string quoting rules.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.TransposeLoader">
            <summary>
            The transposed loader reads the transposed binary format. This binary format, at a high level, is nothing more
            than, for a dataview with "c" columns, "c+1" binary IDVs glued together. We call these sub-IDVs. The first of these,
            the master sub-IDV stores the overall schema, and optionally the data in row-wise format.
            </summary>
            <seealso cref="T:Microsoft.ML.Data.IO.TransposeSaver"/>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.HeaderSize">
            <summary>
            The fixed header size. This should not be changed even in future versions of the format.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.SignatureValue">
            <summary>
            The header must start with this signature. This number will
            appear as the eight-byte sequence "XPOSEDDV" if encoded in
            little-endian. (XPOSEDDV is meant to suggest transposed DataView).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.TailSignatureValue">
            <summary>
            The file must end with this value. Is is simply the
            byte-order-reversed version of the head signature.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.WriterVersion">
            <summary>
            The current version of the format this software can write.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.Signature">
            <summary>
            The magic number of this file.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.Version">
            <summary>
            Indicates the version of the data file.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.CompatibleVersion">
            <summary>
            Indicates the minimum reader version that can interpret this file, possibly
            with some data loss.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.SubIdvTableOffset">
            <summary>
            The offset to the list of the directory of the sub-IDV structures.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.TailOffset">
            <summary>
            The eight-byte tail signature starts at this offset. So, the entire dataset
            stream should be considered to have eight plus this value bytes.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.RowCount">
            <summary>
            The number of rows.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.Header.ColumnCount">
            <summary>
            The number of columns. There will be this + 1 entries in the sub-IDV table
            offset structure.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry">
            <summary>
            A sub-IDV entry corresponds to an offset and length within the transposed file, that points
            either to a block binary-IDV formatted data if the offset is positive, or indicates that there
            is no corresponding IDV entry if the offset is zero.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry.HasDataView">
            <summary>
            Is true when this sub-IDV appears to exist, without actually loading that sub-IDV.
            If this returns true, <see cref="M:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry.GetViewOrNull"/> will either return a non-null
            value, or throw some sort of formatting error.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry.#ctor(Microsoft.ML.Data.IO.TransposeLoader,System.IO.BinaryReader)">
            <summary>
            Reads the table of contents entry from the file, advancing the binary loader stream.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry.#ctor(Microsoft.ML.Data.IO.TransposeLoader)">
            <summary>
            Constructs an empty table of contents entry, with no offset.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry.GetViewOrNull">
            <summary>
            Gets the dataview corresponding to this sub-IDV entry. This will
            lazily load the file, if it has not previously been requested. This
            will return <c>null</c> if the offset is 0.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry.VerifyView(Microsoft.ML.IDataView)">
            <summary>
            Called once, to verify that the lazily read dataview is "correct." Called by
            <see cref="M:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry.GetViewOrNull"/> once it has been read. Any problems with the data-view
            should be handle with <see cref="M:Microsoft.ML.Runtime.Contracts.CheckDecode(System.Boolean)"/> or by throwing
            <see cref="M:Microsoft.ML.Runtime.Contracts.ExceptDecode"/>, as we consider the views not adhering to
            standards to be a file formatting issue. Note that this will never be called if
            the offset field is zero.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry.SchemaSubIdv">
            <summary>
            This is the entry corresponding to the first IDV entry in the file, which will hold
            at least the schema information for all columns. There should be one of these per
            file. Optionally, this file can also hold the row-wise data stored as well, in case
            the user wanted to have the hybrid row/slotwise store. For this one, it is illegal
            for the offset to be zero.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry.TransposedSubIdv">
            <summary>
            This is the entry corresponding to the transposed columns. There will be one of
            these per column, though some entries will not actually have a corresponding
            dataview (for example, they will have an offset of 0) if the column was not one selected
            for slot-wise transposition.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TransposeLoader.SubIdvEntry.TransposedSubIdv.#ctor(Microsoft.ML.Data.IO.TransposeLoader,System.Int32)">
            <summary>
            Returns an empty sub-IDV entry for the no-file case.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.ReaderFirstVersion">
            <summary>
            Low inclusive bound of versions this reader can read.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.IO.TransposeLoader.ReaderVersion">
            <summary>
            Upper inclusive bound of versions this reader can read.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.IO.TransposeLoader.HasRowData">
            <summary>
            Whether the master schema sub-IDV has the actual data.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TransposeLoader.SaveSchema(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelSaveContext,Microsoft.ML.DataViewSchema)">
            <summary>
            Save a zero-row dataview that will be used to infer schema information, used in the case
            where the tranpsose loader is instantiated with no input streams.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TransposeLoader.Cursor.Init(System.Int32)">
            <summary>
            Initializes the transpose cursors and getters for a column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TransposeLoader.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TransposeLoader.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.IO.TransposeSaver">
            <summary>
            Saver for a format that can be loaded using the <see cref="T:Microsoft.ML.Data.IO.TransposeLoader"/>.
            </summary>
            <seealso cref="T:Microsoft.ML.Data.IO.TransposeLoader"/>
        </member>
        <member name="M:Microsoft.ML.Data.IO.TransposeSaver.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.IO.TransposeSaver.Arguments)">
            <summary>
            Constructs a saver for a data view.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CompositeDataLoader`2">
            <summary>
            This class represents a data loader that applies a transformer chain after loading.
            It also has methods to save itself to a repository.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.CompositeDataLoader`2.Loader">
            <summary>
            The underlying data loader.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.CompositeDataLoader`2.Transformer">
            <summary>
            The chain of transformers (possibly empty) that are applied to data upon loading.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CompositeDataLoader`2.Load(`0)">
            <summary>
            Produce the data view from the specified input.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual loading happens here, just schema validation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CompositeDataLoader`2.AppendTransformer``1(``0)">
            <summary>
            Append a new transformer to the end.
            </summary>
            <returns>The new composite data loader</returns>
        </member>
        <member name="T:Microsoft.ML.Data.CompositeLoaderEstimator`2">
            <summary>
            An estimator class for composite data loader.
            It can be used to build a 'trainable smart data loader', although this pattern is not very common.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CompositeLoaderEstimator`2.Append``1(Microsoft.ML.IEstimator{``0})">
            <summary>
            Create a new loader estimator, by appending another estimator to the end of this loader estimator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.GetOutputSchema">
            <summary>
            The output <see cref="T:Microsoft.ML.DataViewSchema"/> that will be produced by the loader.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Load(Microsoft.ML.Data.DatabaseSource)">
            <summary>
            Loads data from <paramref name="source"/> into an <see cref="T:Microsoft.ML.IDataView"/>.
            </summary>
            <param name="source">The source from which to load data.</param>
        </member>
        <member name="T:Microsoft.ML.Data.DatabaseLoader.Column">
            <summary>
            Describes how an input column should be mapped to an <see cref="T:Microsoft.ML.IDataView"/> column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Column.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Data.DatabaseLoader.Column"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Column.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Data.DatabaseLoader.Column"/> class.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="dbType"><see cref="T:System.Data.DbType"/> of the items in the column.</param>
            <param name="index">Index of the column.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Column.#ctor(System.String,System.Data.DbType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Data.DatabaseLoader.Column"/> class.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="dbType"><see cref="T:System.Data.DbType"/> of the items in the column.</param>
            <param name="minIndex">The minimum inclusive index of the column.</param>
            <param name="maxIndex">The maximum-inclusive index of the column.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Column.#ctor(System.String,System.Data.DbType,Microsoft.ML.Data.DatabaseLoader.Range[],Microsoft.ML.Data.KeyCount)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Data.DatabaseLoader.Column"/> class.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="dbType"><see cref="T:System.Data.DbType"/> of the items in the column.</param>
            <param name="source">Source index range(s) of the column.</param>
            <param name="keyCount">For a key column, this defines the range of values.</param>
        </member>
        <member name="F:Microsoft.ML.Data.DatabaseLoader.Column.Name">
            <summary>
            Name of the column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.DatabaseLoader.Column.Type">
            <summary>
            <see cref="T:System.Data.DbType"/> of the items in the column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.DatabaseLoader.Column.Source">
            <summary>
            Source index or name range(s) of the column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.DatabaseLoader.Column.KeyCount">
            <summary>
            For a key column, this defines the range of values.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DatabaseLoader.Range">
            <summary>
            Specifies the range of indices or names of input columns that should be mapped to an output column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Range.#ctor(System.Int32)">
            <summary>
            A range representing a single value. Will result in a scalar column.
            </summary>
            <param name="index">The index of the field of the table to read.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Range.#ctor(System.String)">
            <summary>
            A range representing a single value. Will result in a scalar column.
            </summary>
            <param name="name">The name of the field of the table to read.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            A range representing a set of values. Will result in a vector column.
            </summary>
            <param name="min">The minimum inclusive index of the column.</param>
            <param name="max">The maximum-inclusive index of the column.</param>
        </member>
        <member name="F:Microsoft.ML.Data.DatabaseLoader.Range.Min">
            <summary>
             The minimum index of the column, inclusive.
            </summary>
            <remarks>
            This value is ignored if <see cref="F:Microsoft.ML.Data.DatabaseLoader.Range.Name" /> is not <c>null</c>.
            </remarks>
        </member>
        <member name="F:Microsoft.ML.Data.DatabaseLoader.Range.Max">
            <summary>
            The maximum index of the column, inclusive.
            </summary>
            <remarks>
            This value is ignored if <see cref="F:Microsoft.ML.Data.DatabaseLoader.Range.Name" /> is not <c>null</c>.
            </remarks>
        </member>
        <member name="F:Microsoft.ML.Data.DatabaseLoader.Range.Name">
            <summary>
            The name of the input column.
            </summary>
            <remarks>
            This value, if non-<c>null</c>, overrides <see cref="F:Microsoft.ML.Data.DatabaseLoader.Range.Min" /> and <see cref="F:Microsoft.ML.Data.DatabaseLoader.Range.Max" />.
            </remarks>
        </member>
        <member name="F:Microsoft.ML.Data.DatabaseLoader.Range.ForceVector">
            <summary>
            Force scalar columns to be treated as vectors of length one.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DatabaseLoader.Options">
            <summary>
            The settings for <see cref="T:Microsoft.ML.Data.DatabaseLoader"/>
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.DatabaseLoader.Options.Columns">
            <summary>
            Specifies the input columns that should be mapped to <see cref="T:Microsoft.ML.IDataView"/> columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DatabaseLoader.Segment">
            <summary>
            Used as an input column range.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DatabaseLoader.ColInfo">
            <summary>
            Information for an output column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.DatabaseLoader.Bindings.Infos">
            <summary>
            <see cref="F:Microsoft.ML.Data.DatabaseLoader.Bindings.Infos"/>[i] stores the i-th column's name and type. Columns are loaded from the input database.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Bindings.ConstructKeyType(System.Data.DbType,Microsoft.ML.Data.KeyCount)">
            <summary>
            Construct a <see cref="T:Microsoft.ML.Data.KeyDataViewType"/> out of the DbType and the keyCount.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseLoader.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.DatabaseSource">
            <summary>Exposes the data required for opening a database for reading.</summary>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseSource.#ctor(System.Data.Common.DbProviderFactory,System.String,System.String)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.ML.Data.DatabaseSource" /> class.</summary>
            <param name="providerFactory">The factory used to create the <see cref="T:System.Data.Common.DbConnection"/>..</param>
            <param name="connectionString">The string used to open the connection.</param>
            <param name="commandText">The text command to run against the data source.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DatabaseSource.#ctor(System.Data.Common.DbProviderFactory,System.String,System.String,System.Int32)">
            <summary>Creates a new instance of the <see cref="T:Microsoft.ML.Data.DatabaseSource" /> class.</summary>
            <param name="providerFactory">The factory used to create the <see cref="T:System.Data.Common.DbConnection"/>..</param>
            <param name="connectionString">The string used to open the connection.</param>
            <param name="commandText">The text command to run against the data source.</param>
            <param name="commandTimeoutInSeconds">The timeout(in seconds) for database command.</param>
        </member>
        <member name="P:Microsoft.ML.Data.DatabaseSource.CommandTimeoutInSeconds">
            <summary>Gets the timeout for database command.</summary>
        </member>
        <member name="P:Microsoft.ML.Data.DatabaseSource.CommandText">
            <summary>Gets the text command to run against the data source.</summary>
        </member>
        <member name="P:Microsoft.ML.Data.DatabaseSource.ConnectionString">
            <summary>Gets the string used to open the connection.</summary>
        </member>
        <member name="P:Microsoft.ML.Data.DatabaseSource.ProviderFactory">
            <summary>Gets the factory used to create the <see cref="T:System.Data.Common.DbConnection"/>.</summary>
        </member>
        <member name="M:Microsoft.ML.Data.DbExtensions.ToType(System.Data.DbType)">
            <summary>
            Maps a <see cref="T:System.Data.DbType"/> to the associated .Net representation type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DbExtensions.ToDbType(Microsoft.ML.Data.InternalDataKind)">
            <summary>Maps a <see cref="T:Microsoft.ML.Data.InternalDataKind"/> to the associated <see cref="T:System.Data.DbType"/>.</summary>
        </member>
        <member name="T:Microsoft.ML.Data.LoadColumnNameAttribute">
            <summary>
            Allow member to specify mapping to field(s) in database.
            To override name of <see cref="T:Microsoft.ML.IDataView"/> column use <see cref="T:Microsoft.ML.Data.ColumnNameAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LoadColumnNameAttribute.#ctor(System.String)">
            <summary>
            Maps member to specific field in database.
            </summary>
            <param name="fieldName">The name of the field in the database.</param>
        </member>
        <member name="M:Microsoft.ML.Data.LoadColumnNameAttribute.#ctor(System.String[])">
            <summary>
            Maps member to set of fields in database.
            </summary>
            <param name="fieldNames">Distinct database field names to load as part of this column.</param>
        </member>
        <member name="T:Microsoft.ML.Data.EstimatorChain`1">
            <summary>
            Represents a chain (potentially empty) of estimators that end with a <typeparamref name="TLastTransformer"/>.
            If the chain is empty, <typeparamref name="TLastTransformer"/> is always <see cref="T:Microsoft.ML.ITransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EstimatorChain`1.#ctor">
            <summary>
            Create an empty estimator chain.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EstimatorChain`1.AppendCacheCheckpoint(Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Append a 'caching checkpoint' to the estimator chain. This will ensure that the downstream estimators will be trained against
            cached data. It is helpful to have a caching checkpoint before trainers or feature engineering that take multiple data passes.
            It is also helpful to have after a slow operation, for example after dataset loading from a slow source or after feature
            engineering that is slow on its apply phase, if downstream estimators will do multiple passes over the output of this operation.
            Adding a cache checkpoint at the begin or end of an <see cref="T:Microsoft.ML.Data.EstimatorChain`1"/> is meaningless and should be avoided.
            Cache checkpoints should be removed if disk thrashing or OutOfMemory exceptions are seen, which can occur on when the featured
            dataset immediately prior to the checkpoint is larger than available RAM.
            </summary>
            <param name="env">The host environment to use for caching.</param>
        </member>
        <member name="T:Microsoft.ML.Data.DataLoadSave.FakeSchemaFactory">
            <summary>
            A fake schema that is manufactured out of a SchemaShape.
            It will pretend that all vector sizes are equal to 10, all key value counts are equal to 10,
            and all values are defaults (for annotations).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.LegacyCompositeDataLoader">
            <summary>
            A data loader that wraps an underlying loader plus a sequence of transforms.
            It is not valid to have nested <see cref="T:Microsoft.ML.Data.LegacyCompositeDataLoader"/>'s: if a <see cref="T:Microsoft.ML.Data.LegacyCompositeDataLoader"/>
            is an underlying loader, the resulting loader will 'flatten' the structure.
            The family of <c>Create</c> methods only instantiate <see cref="T:Microsoft.ML.Data.LegacyCompositeDataLoader"/>'s
            when there are transforms to keep, otherwise they just return underlying loaders.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.LegacyCompositeDataLoader.View">
            <summary>
            Returns the underlying data view of the composite loader.
            This can be used to programmatically explore the chain of transforms that's inside the composite loader.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LegacyCompositeDataLoader.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.LegacyCompositeDataLoader.Arguments,Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Creates a loader according to the specified <paramref name="args"/>.
            If there are transforms, then the result will be a <see cref="T:Microsoft.ML.Data.LegacyCompositeDataLoader"/>,
            otherwise, it'll be whatever <see cref="T:Microsoft.ML.Data.ILegacyDataLoader"/> is specified in <c>args.loader</c>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LegacyCompositeDataLoader.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ILegacyDataLoader,System.Collections.Generic.KeyValuePair{System.String,Microsoft.ML.Runtime.IComponentFactory{Microsoft.ML.IDataView,Microsoft.ML.Data.IDataTransform}}[])">
            <summary>
            Creates a <see cref="T:Microsoft.ML.Data.LegacyCompositeDataLoader"/> that starts with the <paramref name="srcLoader"/>,
            and follows with transforms created from the <paramref name="transformArgs"/> array.
            If there are no transforms, the <paramref name="srcLoader"/> is returned.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LegacyCompositeDataLoader.ApplyTransforms(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ILegacyDataLoader,System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Func{Microsoft.ML.Runtime.IHostEnvironment,System.Int32,Microsoft.ML.IDataView,Microsoft.ML.IDataView})">
            <summary>
            Appends transforms to the <paramref name="srcLoader"/> and returns a loader that contains these new transforms.
            If there are no transforms to append, returns <paramref name="srcLoader"/> intact, otherwise creates a
            <see cref="T:Microsoft.ML.Data.LegacyCompositeDataLoader"/>. The transforms are created by sequentially invoking the provided lambda,
            one time for each element of <paramref name="tagData"/>.
            </summary>
            <param name="env">The host environment.</param>
            <param name="srcLoader">The source loader.</param>
            <param name="tagData">The array of (tag, creationInfo) pairs. Can be an empty array or null, in which case
            the function returns <paramref name="srcLoader"/>.</param>
            <param name="createTransform">The delegate to invoke at each transform creation.
            Delegate parameters are: host environment, transform index (0 to <c>tagData.Length</c>), source data view.
            It should return the <see cref="T:Microsoft.ML.IDataView"/> that should share the same loader as the source data view.</param>
            <returns>The resulting data loader.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.LegacyCompositeDataLoader.ApplyTransform(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ILegacyDataLoader,System.String,System.String,System.Func{Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,Microsoft.ML.IDataView})">
            <summary>
            Apply one transform to the data loader, and returns a (composite) data loader that contains the result.
            The transform is created by invoking the lambda for a data source, and it should return an
            <see cref="T:Microsoft.ML.IDataView"/> that shares the same loader as the provided source.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LegacyCompositeDataLoader.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Loads the entire composite data loader (loader + transforms) from the context.
            If there are no transforms, the underlying loader is returned.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LegacyCompositeDataLoader.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.Data.ILegacyDataLoader,System.Func{System.String,System.Boolean})">
            <summary>
            Creates a <see cref="T:Microsoft.ML.Data.ILegacyDataLoader"/> from the specified source loader, followed by
            the transforms that are loaded from the <paramref name="ctx"/>, tags filtered by
            by the <paramref name="isTransformTagAccepted"/>.
            If the <paramref name="ctx"/> contains no accepted transforms, the <paramref name="srcLoader"/> is
            returned intact.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LegacyCompositeDataLoader.LoadSelectedTransforms(Microsoft.ML.ModelLoadContext,Microsoft.ML.IDataView,Microsoft.ML.Runtime.IHostEnvironment,System.Func{System.String,System.Boolean})">
            <summary>
            Loads all transforms from the <paramref name="ctx"/> that pass the <paramref name="isTransformTagAccepted"/> test,
            applies them sequentially to the <paramref name="srcView"/>, and returns the resulting data view.
            If there are no transforms in <paramref name="ctx"/> that are accepted, returns the original <paramref name="srcView"/>.
            The difference from the <c>Create</c> method above is that:
            - it doesn't wrap the results into a loader, just returns the last transform in the chain.
            - it accepts <see cref="T:Microsoft.ML.IDataView"/> as input, not necessarily a loader.
            - it throws away the tag information.
            - it doesn't throw if the context is not representing a <see cref="T:Microsoft.ML.Data.LegacyCompositeDataLoader"/>: in this case it's assumed that no transforms
              meet the test, and the <paramref name="srcView"/> is returned.
            Essentially, this is a helper method for the LoadTransform class.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LegacyCompositeDataLoader.LoadTransforms(Microsoft.ML.ModelLoadContext,Microsoft.ML.Data.ILegacyDataLoader,Microsoft.ML.Runtime.IHost,System.Func{System.String,System.Boolean})">
            <summary>
            Loads all transforms from the <paramref name="ctx"/> that pass the <paramref name="isTransformTagAccepted"/> test,
            applies them sequentially to the <paramref name="srcLoader"/>, and returns the (composite) data loader.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LegacyCompositeDataLoader.SavePipe(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelSaveContext,System.Action{Microsoft.ML.ModelSaveContext},System.Collections.Generic.IList{Microsoft.ML.Data.IDataTransform})">
            <summary>
            Save the loader and transforms (if any) to the repository.
            This is intended to be used by API, where the components are not part of the same
            <see cref="T:Microsoft.ML.Data.LegacyCompositeDataLoader"/>.
            </summary>
            <param name="env">Environment context</param>
            <param name="ctx">The context to write to.</param>
            <param name="loaderSaveAction">The code to save the loader.</param>
            <param name="transforms">The transforms. Empty list and null are both allowed.</param>
        </member>
        <member name="T:Microsoft.ML.Data.MultiFileSource">
            <summary>
            Wraps a potentially compound path as an IMultiStreamSource.
            </summary>
            <remarks>Expands wild cards and supports multiple paths separated by +, or loads all the files of a subfolder,
            if the syntax for the path is 'FolderPath/...' (separator would be OS relevant).
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Data.MultiFileSource.#ctor(System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Data.MultiFileSource"/>.
            In case of usage from Maml, the paths would be wildcard concatenated in the first string of <paramref name="paths"/>.
            </summary>
            <param name="paths">The paths of the files to load.</param>
            <remarks>
            The provided <paramref name="paths"/> can utilize wildcards to load all source files. For example:
            paths = "Data/*" includes all files in directory Data
            paths = "DataFolder/.../*" includes all files in all subdirectories inside directory Data.
            paths = "Data1/*", "Data2/*" includes all files in directories Data1 and Data2
            </remarks>
        </member>
        <member name="T:Microsoft.ML.Data.FileHandleSource">
            <summary>
            Wraps an <see cref="T:Microsoft.ML.Data.IFileHandle"/> as an IMultiStreamSource.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.BlockingQueue`1">
            <summary>Provides a thread-safe queue that supports blocking takes when empty and blocking adds when full.</summary>
            <typeparam name="T">Specifies the type of data contained.</typeparam>
        </member>
        <member name="F:Microsoft.ML.Data.BlockingQueue`1._queue">
            <summary>The underlying queue storing all elements.</summary>
        </member>
        <member name="F:Microsoft.ML.Data.BlockingQueue`1._itemsAvailable">
            <summary>A semaphore that can be waited on to know when an item is available for taking.</summary>
        </member>
        <member name="F:Microsoft.ML.Data.BlockingQueue`1._spaceAvailable">
            <summary>A semaphore that can be waited on to know when space is available for adding.</summary>
        </member>
        <member name="M:Microsoft.ML.Data.BlockingQueue`1.#ctor(System.Int32)">
            <summary>Initializes the blocking queue.</summary>
            <param name="boundedCapacity">The maximum number of items the queue may contain.</param>
        </member>
        <member name="M:Microsoft.ML.Data.BlockingQueue`1.Dispose">
            <summary>Cleans up all resources used by the blocking collection.</summary>
        </member>
        <member name="M:Microsoft.ML.Data.BlockingQueue`1.TryAdd(`0,System.Int32)">
            <summary>Adds an item to the blocking collection.</summary>
            <param name="item">The item to add.</param>
            <param name="millisecondsTimeout">The time to wait, in milliseconds, or -1 to wait indefinitely.</param>
            <returns>
            true if the item was successfully added; false if the timeout expired or if the collection were marked
            as complete for adding before the item could be added.
            </returns>
        </member>
        <member name="M:Microsoft.ML.Data.BlockingQueue`1.TryTake(`0@,System.Int32)">
            <summary>Tries to take an item from the blocking collection.</summary>
            <param name="item">The item removed, or default if none could be taken.</param>
            <param name="millisecondsTimeout">The time to wait, in milliseconds, or -1 to wait indefinitely.</param>
            <returns>
            true if the item was successfully taken; false if the timeout expired or if the collection is empty
            and has been marked as complete for adding.
            </returns>
        </member>
        <member name="M:Microsoft.ML.Data.BlockingQueue`1.GetConsumingEnumerable">
            <summary>
            Gets an enumerable for taking all items out of the collection until
            the collection has been marked as complete for adding and is empty.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BlockingQueue`1.CompleteAdding">
            <summary>Mark the collection as complete for adding.</summary>
            <remarks>After this is called, no calls made on this queue will block.</remarks>
        </member>
        <member name="T:Microsoft.ML.Data.BlockingQueue`1.CompletableSemaphore">
            <summary>
            A basic monitor-based semaphore that, in addition to standard Wait/Release semantics,
            also supports marking the semaphore as completed, in which case all waiters immediately
            fail if there's no count remaining.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.BlockingQueue`1.CompletableSemaphore._count">
            <summary>The remaining count in the semaphore.</summary>
        </member>
        <member name="F:Microsoft.ML.Data.BlockingQueue`1.CompletableSemaphore._waiters">
            <summary>The number of threads currently waiting in Wait.</summary>
        </member>
        <member name="M:Microsoft.ML.Data.BlockingQueue`1.CompletableSemaphore.#ctor(System.Int32)">
            <summary>Initializes the semaphore with the specified initial count.</summary>
            <param name="initialCount">The initial count.</param>
        </member>
        <member name="P:Microsoft.ML.Data.BlockingQueue`1.CompletableSemaphore.Completed">
            <summary>Gets whether the semaphore has been marked as completed.</summary>
            <remarks>
            If completed, no calls to Wait will block; if no count remains, regardless of timeout, Waits will
            return immediately with a result of false.
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Data.BlockingQueue`1.CompletableSemaphore.Release">
            <summary>Releases the semaphore once.</summary>
        </member>
        <member name="M:Microsoft.ML.Data.BlockingQueue`1.CompletableSemaphore.Wait(System.Int32)">
            <summary>Blocks the current thread until it can enter the semaphore once.</summary>
            <param name="millisecondsTimeout">The maximum amount of time to wait to enter the semaphore, or -1 to wait indefinitely.</param>
            <returns>true if the semaphore was entered; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.BlockingQueue`1.CompletableSemaphore.Complete">
            <summary>Marks the semaphore as completed, such that no further operations will block.</summary>
        </member>
        <member name="T:Microsoft.ML.Data.LoadColumnAttribute">
            <summary>
            Allow member to specify mapping to field(s) in text file.
            To override name of <see cref="T:Microsoft.ML.IDataView"/> column use <see cref="T:Microsoft.ML.Data.ColumnNameAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LoadColumnAttribute.#ctor(System.Int32)">
            <summary>
            Maps member to specific field in text file.
            </summary>
            <param name="fieldIndex">The index of the field in the text file.</param>
        </member>
        <member name="M:Microsoft.ML.Data.LoadColumnAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Maps member to range of fields in text file.
            </summary>
            <param name="start">The starting field index, for the range.</param>
            <param name="end">The ending field index, for the range.</param>
        </member>
        <member name="M:Microsoft.ML.Data.LoadColumnAttribute.#ctor(System.Int32[])">
            <summary>
            Maps member to set of fields in text file.
            </summary>
            <param name="columnIndexes">Distinct text file field indices to load as part of this column.</param>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader">
            <summary>
            Loads a text file into an IDataView. Supports basic mapping from input columns to <see cref="T:Microsoft.ML.IDataView"/> columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.Column">
            <summary>
            Describes how an input column should be mapped to an <see cref="T:Microsoft.ML.IDataView"/> column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Column.#ctor">
            <summary>
            Describes how an input column should be mapped to an <see cref="T:Microsoft.ML.IDataView"/> column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Column.#ctor(System.String,Microsoft.ML.Data.DataKind,System.Int32)">
            <summary>
            Describes how an input column should be mapped to an <see cref="T:Microsoft.ML.IDataView"/> column.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="dataKind"><see cref="T:Microsoft.ML.Data.DataKind"/> of the items in the column.</param>
            <param name="index">Index of the column.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Column.#ctor(System.String,Microsoft.ML.Data.DataKind,System.Int32,System.Int32)">
            <summary>
            Describes how an input column should be mapped to an <see cref="T:Microsoft.ML.IDataView"/> column.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="dataKind"><see cref="T:Microsoft.ML.Data.DataKind"/> of the items in the column.</param>
            <param name="minIndex">The minimum inclusive index of the column.</param>
            <param name="maxIndex">The maximum-inclusive index of the column.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Column.#ctor(System.String,Microsoft.ML.Data.DataKind,Microsoft.ML.Data.TextLoader.Range[],Microsoft.ML.Data.KeyCount)">
            <summary>
            Describes how an input column should be mapped to an <see cref="T:Microsoft.ML.IDataView"/> column.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="dataKind"><see cref="T:Microsoft.ML.Data.DataKind"/> of the items in the column.</param>
            <param name="source">Source index range(s) of the column.</param>
            <param name="keyCount">For a key column, this defines the range of values.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Column.#ctor(System.String,Microsoft.ML.Data.InternalDataKind,Microsoft.ML.Data.TextLoader.Range[],Microsoft.ML.Data.KeyCount)">
            <summary>
            Describes how an input column should be mapped to an <see cref="T:Microsoft.ML.IDataView"/> column.
            </summary>
            <param name="name">Name of the column.</param>
            <param name="kind"><see cref="T:Microsoft.ML.Data.InternalDataKind"/> of the items in the column.</param>
            <param name="source">Source index range(s) of the column.</param>
            <param name="keyCount">For a key column, this defines the range of values.</param>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Column.Name">
            <summary>
            Name of the column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Column.Type">
            <summary>
            <see cref="T:Microsoft.ML.Data.InternalDataKind"/> of the items in the column. It defaults to float.
            Although <see cref="T:Microsoft.ML.Data.InternalDataKind"/> is internal, <see cref="F:Microsoft.ML.Data.TextLoader.Column.Type"/>'s information can be publicly accessed by <see cref="P:Microsoft.ML.Data.TextLoader.Column.DataKind"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.TextLoader.Column.DataKind">
            <summary>
            <see cref="T:Microsoft.ML.Data.DataKind"/> of the items in the column.
            </summary>
            It's a public interface to access the information in an internal DataKind.
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Column.Source">
            <summary>
            Source index range(s) of the column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Column.KeyCount">
            <summary>
            For a key column, this defines the range of values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Column.IsValid">
            <summary>
             Returns <c>true</c> iff the ranges are disjoint, and each range satisfies 0 &lt;= min &lt;= max.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.Range">
            <summary>
            Specifies the range of indices of input columns that should be mapped to an output column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Range.#ctor(System.Int32)">
            <summary>
            A range representing a single value. Will result in a scalar column.
            </summary>
            <param name="index">The index of the field of the text file to read.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Range.#ctor(System.Int32,System.Nullable{System.Int32})">
            <summary>
            A range representing a set of values. Will result in a vector column.
            </summary>
            <param name="min">The minimum inclusive index of the column.</param>
            <param name="max">The maximum-inclusive index of the column. If <c>null</c>
            indicates that the <see cref="T:Microsoft.ML.Data.TextLoader"/> should auto-detect the legnth
            of the lines, and read until the end.</param>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Range.Min">
            <summary>
             The minimum index of the column, inclusive.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Range.Max">
            <summary>
            The maximum index of the column, inclusive. If <see langword="null"/>
            indicates that the <see cref="T:Microsoft.ML.Data.TextLoader"/> should auto-detect the legnth
            of the lines, and read until the end.
            If max is specified, the fields <see cref="F:Microsoft.ML.Data.TextLoader.Range.AutoEnd"/> and <see cref="F:Microsoft.ML.Data.TextLoader.Range.VariableEnd"/> are ignored.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Range.AutoEnd">
            <summary>
            Whether this range extends to the end of the line, but should be a fixed number of items.
            If <see cref="F:Microsoft.ML.Data.TextLoader.Range.Max"/> is specified, the fields <see cref="F:Microsoft.ML.Data.TextLoader.Range.AutoEnd"/> and <see cref="F:Microsoft.ML.Data.TextLoader.Range.VariableEnd"/> are ignored.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Range.VariableEnd">
            <summary>
            Whether this range extends to the end of the line, which can vary from line to line.
            If <see cref="F:Microsoft.ML.Data.TextLoader.Range.Max"/> is specified, the fields <see cref="F:Microsoft.ML.Data.TextLoader.Range.AutoEnd"/> and <see cref="F:Microsoft.ML.Data.TextLoader.Range.VariableEnd"/> are ignored.
            If <see cref="F:Microsoft.ML.Data.TextLoader.Range.AutoEnd"/> is <see langword="true"/>, then <see cref="F:Microsoft.ML.Data.TextLoader.Range.VariableEnd"/> is ignored.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Range.AllOther">
            <summary>
            Whether this range includes only other indices not specified.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Range.ForceVector">
            <summary>
            Force scalar columns to be treated as vectors of length one.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.Options">
            <summary>
            The settings for <see cref="T:Microsoft.ML.Data.TextLoader"/>
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.AllowQuoting">
            <summary>
            Whether the input may include double-quoted values. This parameter is used to distinguish separator characters
            in an input value from actual separators. When <see langword="true"/>, separators within double quotes are treated as part of the
            input value. When <see langword="false"/>, all separators, even those within quotes, are treated as delimiting a new column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.AllowSparse">
             <summary>
             Whether the input may include sparse representations. For example, a row containing
             "5 2:6 4:3" means that there are 5 columns, and the only non-zero are columns 2 and 4, which have values 6 and 3,
             respectively. Column indices are zero-based, so columns 2 and 4 represent the 3rd and 5th columns.
             A column may also have dense values followed by sparse values represented in this fashion. For example,
             a row containing "1 2 5 2:6 4:3" represents two dense columns with values 1 and 2, followed by 5 sparsely represented
             columns with values 0, 0, 6, 0, and 3. The indices of the sparse columns start from 0, even though 0 represents the third column.
            
             In addition, <see cref="F:Microsoft.ML.Data.TextLoader.Options.InputSize"/> should be used when the number of sparse elements (5 in this example) is not present in each line.
             It should specify the total size, not just the size of the sparse part. However, indices of the spars part are relative to where the sparse part begins.
             If <see cref="F:Microsoft.ML.Data.TextLoader.Options.InputSize"/> is set to 7, the line "1 2 2:6 4:3" will be mapped to "1 2 0 0 6 0 4", but if set to 10, the same line will
             be mapped to "1 2 0 0 6 0 4 0 0 0".
             </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.InputSize">
            <summary>
            Number of source columns in the text data. Default is that sparse rows contain their size information.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.Separators">
            <summary>
            The characters that should be used as separators column separator.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.DecimalMarker">
            <summary>
            The character that should be used as the decimal marker. Default value is '.'. Only '.' and ',' are allowed to be decimal markers.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.Columns">
            <summary>
            Specifies the input columns that should be mapped to <see cref="T:Microsoft.ML.IDataView"/> columns.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.TrimWhitespace">
            <summary>
            Wheter to remove trailing whitespace from lines.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.HasHeader">
            <summary>
            Whether the file has a header with feature names. When <see langword="true"/>, the loader will skip the first line when
            <see cref="M:Microsoft.ML.Data.TextLoader.Load(Microsoft.ML.Data.IMultiStreamSource)"/> is called. The sample can be used to infer slot name annotations if present.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.UseThreads">
            <summary>
            Whether to use separate parsing threads.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.ReadMultilines">
            <summary>
            If true, new line characters are acceptable inside a quoted field, and thus one field can have multiple lines of text inside it
            If <see cref="F:Microsoft.ML.Data.TextLoader.Options.AllowQuoting"/> is false, this option is ignored.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.HeaderFile">
            <summary>
            File containing a header with feature names. If specified, the header defined in the data file is ignored regardless of <see cref="F:Microsoft.ML.Data.TextLoader.Options.HasHeader"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.MaxRows">
            <summary>
            Maximum number of rows to produce.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.EscapeChar">
            <summary>
            Character to use to escape quotes inside quoted fields. It can't be a character used as separator.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Options.MissingRealsAsNaNs">
            <summary>
            If true, missing real fields (i.e. double or single fields) will be loaded as NaN.
            If false, they'll be loaded as 0. Default is false.
            A field is considered "missing" if it's empty, if it only has whitespace, or if there are missing columns
            at the end of a given row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Options.IsValid">
            <summary>
            Checks that all column specifications are valid (that is, ranges are disjoint and have min&lt;=max).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.Segment">
            <summary>
            Used as an input column range.
            A variable length segment (extending to the end of the input line) is represented by Lim == SrcLim.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Segment.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Be careful with this ctor. lim == SrcLim means that this segment extends to
            the end of the input line. If that is not the intent, pass in Min(lim, SrcLim - 1).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Segment.#ctor(System.Int32)">
            <summary>
            Defines a segment that extends from min to the end of input.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.ColInfo">
            <summary>
            Information for an output column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Bindings.Infos">
            <summary>
            <see cref="F:Microsoft.ML.Data.TextLoader.Bindings.Infos"/>[i] stores the i-th column's name and type. Columns are loaded from the input text file.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Bindings._slotNames">
            <summary>
            <see cref="F:Microsoft.ML.Data.TextLoader.Bindings.Infos"/>[i] stores the i-th column's metadata, named <see cref="F:Microsoft.ML.Data.AnnotationUtils.Kinds.SlotNames"/>
            in <see cref="T:Microsoft.ML.DataViewSchema.Annotations"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.Bindings._header">
            <summary>
            Empty if <see cref="F:Microsoft.ML.Data.TextLoader.Options.HasHeader"/> is <see langword="false"/>, no header presents, or upon load
            there was no header stored in the model.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.OptionFlags">
            <summary>
            Option flags. These values are serialized, so changing the values requires
            bumping the version number.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.TextLoader.Options,Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Loads a text file into an <see cref="T:Microsoft.ML.IDataView"/>. Supports basic mapping from input columns to IDataView columns.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="options">Defines the settings of the load operation.</param>
            <param name="dataSample">Allows to expose items that can be used for loading.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.TryParseSchema(Microsoft.ML.Runtime.IHost,Microsoft.ML.Data.IMultiStreamSource,Microsoft.ML.Data.TextLoader.Options@,Microsoft.ML.Data.TextLoader.Column[]@,System.Boolean@)">
            <summary>
            See if we can extract valid arguments from the first data file. If so, update options and set cols to the combined set of columns.
            If not, set error to true if there was an error condition.
            </summary>
            <remarks>
            Not all arguments are extracted from the data file. There are three arguments that can vary from iteration to iteration and that are set
            directly by the user in the options class. These three arguments are:
            <see cref="F:Microsoft.ML.Data.TextLoader.Options.UseThreads"/>,
            <see cref="F:Microsoft.ML.Data.TextLoader.Options.HeaderFile"/>,
            <see cref="F:Microsoft.ML.Data.TextLoader.Options.MaxRows"/>
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.FileContainsValidSchema(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.IMultiStreamSource,Microsoft.ML.Data.TextLoader.Options@)">
            <summary>
            Checks whether the source contains the valid TextLoader.Options depiction.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.LoadFile(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.TextLoader.Options,Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Convenience method to create a <see cref="T:Microsoft.ML.Data.TextLoader"/> and use it to load a specified file.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.GetOutputSchema">
            <summary>
            The output <see cref="T:Microsoft.ML.DataViewSchema"/> that will be produced by the loader.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Load(Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Loads data from <paramref name="source"/> into an <see cref="T:Microsoft.ML.IDataView"/>.
            </summary>
            <param name="source">The source from which to load data.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Load](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/LoadingText.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Cursor.GetEmbeddedArgs(Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Look in the first file for args embedded as comments. This gathers comments
            that come before any data line that start with #@.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.ValueCreatorCache">
            <summary>
            This type exists to provide efficient delegates for creating a ColumnValue specific to a DataKind.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.ParseStats">
            <summary>
            Basic statistics and reporting of unparsable stuff.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.RowSet.#ctor(Microsoft.ML.Data.TextLoader.ParseStats,System.Int32,System.Int32)">
            <summary>
            Takes the number of blocks, number of rows per block, and number of columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.ScanInfo">
            <summary>
            This is info tracked while scanning a line to find "fields". For each line, the first
            several values, Path, Line, LineText, IchMinText, and IchLimText, are unchanging, but the
            remaining values are updated for each field processed.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.Path">
            <summary>
            Path for the input file containing the given line (may be null).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.Line">
            <summary>
            Line number.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.TextBuf">
            <summary>
            The current text for the entire line (all fields), and possibly more.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.IchMinBuf">
            <summary>
            The min position in <see cref="F:Microsoft.ML.Data.TextLoader.ScanInfo.TextBuf"/> to consider (all fields).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.IchLimBuf">
            <summary>
            The lim position in <see cref="F:Microsoft.ML.Data.TextLoader.ScanInfo.TextBuf"/> to consider (all fields).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.IchMinNext">
            <summary>
            Where to start for the next field. This is both an input and
            output to the code that fetches the next field.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.Span">
            <summary>
            The (unquoted) text of the field.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.QuotingError">
            <summary>
            Whether there was a quoting error in the field.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.Index">
            <summary>
            For sparse encoding, this is the index of the field. Otherwise, -1.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.IchMin">
            <summary>
            The start character location in <see cref="F:Microsoft.ML.Data.TextLoader.ScanInfo.TextBuf"/>, including the sparse index
            and quoting, if present. Used for logging.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.TextLoader.ScanInfo.IchLim">
            <summary>
            The end character location in <see cref="F:Microsoft.ML.Data.TextLoader.ScanInfo.TextBuf"/>, including the sparse index
            and quoting, if present. Used for logging.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.ScanInfo.#ctor(System.ReadOnlyMemory{System.Char}@,System.String,System.Int64)">
            <summary>
            Initializes the ScanInfo.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.Parser.FieldSet">
            <summary>
            This holds a set of raw text fields. This is the input into the parsing
            of the individual typed values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Parser.FieldSet.EnsureSpace">
            <summary>
            Make sure there is enough space to add one more item.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Parser.TrimEndWhiteSpace(System.ReadOnlyMemory{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Returns a <see cref="T:System.ReadOnlyMemory`1"/> of <see cref="T:System.Char"/> with trailing whitespace trimmed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TextLoader.Parser.Helper">
            <summary>
            This is an abstraction containing all the useful stuff for splitting a raw line of text
            into a FieldSet. A cursor has one of these that it passes in whenever it wants a line
            parsed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Parser.HelperImpl.IsSep(System.Char)">
            <summary>
            Check if the given char is a separator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TextLoader.Parser.HelperImpl.GatherFields(System.ReadOnlyMemory{System.Char},System.ReadOnlySpan{System.Char},System.String,System.Int64)">
            <summary>
            Process the line of text into fields, stored in the Fields field. Ensures that sparse
            don't precede non-sparse. Returns the lim of the src columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TransformerScope">
            <summary>
            This enum allows for 'tagging' the estimators (and subsequently transformers) in the chain to be used
            'only for training', 'for training and evaluation' etc.
            Most notable example is, transformations over the label column should not be used for scoring, so the scope
            should be <see cref="F:Microsoft.ML.Data.TransformerScope.Training"/> or <see cref="F:Microsoft.ML.Data.TransformerScope.TrainTest"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ITransformerChainAccessor">
            <summary>
            Used to determine if <see cref="T:Microsoft.ML.ITransformer"/> object is of type <see cref="T:Microsoft.ML.Data.TransformerChain"/>
            so that its internal fields can be accessed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TransformerChain`1">
            <summary>
            A chain of transformers (possibly empty) that end with a <typeparamref name="TLastTransformer"/>.
            For an empty chain, <typeparamref name="TLastTransformer"/> is always <see cref="T:Microsoft.ML.ITransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TransformerChain`1.#ctor(System.Collections.Generic.IEnumerable{Microsoft.ML.ITransformer},System.Collections.Generic.IEnumerable{Microsoft.ML.Data.TransformerScope})">
            <summary>
            Create a transformer chain by specifying transformers and their scopes.
            </summary>
            <param name="transformers">Transformers to be chained.</param>
            <param name="scopes">Transformer scopes, parallel to <paramref name="transformers"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TransformerChain`1.#ctor(Microsoft.ML.ITransformer[])">
            <summary>
            Create a transformer chain by specifying all the transformers. The scopes are assumed to be
            <see cref="F:Microsoft.ML.Data.TransformerScope.Everything"/>.
            </summary>
            <param name="transformers"></param>
        </member>
        <member name="M:Microsoft.ML.Data.TransformerChain`1.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext)">
            <summary>
            The loading constructor of transformer chain. Reverse of <see cref="M:Microsoft.ML.ICanSaveModel.Save(Microsoft.ML.ModelSaveContext)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TransformerChain">
            <summary>
            Saving/loading routines for transformer chains.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TransformerChain.SaveTo(Microsoft.ML.ITransformer,Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)">
            <summary>
            Save any transformer to a stream by wrapping it into a transformer chain.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TransformWrapper">
            <summary>
            This is a shim class to present the legacy <see cref="T:Microsoft.ML.Data.IDataTransform"/> interface as an <see cref="T:Microsoft.ML.ITransformer"/>.
            Note that there are some important differences in usages that make this shimming somewhat non-seamless, so the goal
            would be gradual removal of this as we do away with <see cref="T:Microsoft.ML.Data.IDataTransform"/> based code.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TrainedWrapperEstimatorBase">
            <summary>
            Estimator for trained wrapped transformers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TrivialEstimator`1">
             <summary>
             The trivial implementation of <see cref="T:Microsoft.ML.IEstimator`1"/> that already has
             the transformer and returns it on every call to <see cref="M:Microsoft.ML.Data.TrivialEstimator`1.Fit(Microsoft.ML.IDataView)"/>.
            
             Concrete implementations still have to provide the schema propagation mechanism, since
             there is no easy way to infer it from the transformer.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TrivialLoaderEstimator`2">
            <summary>
            The trivial wrapper for a <see cref="T:Microsoft.ML.IDataLoader`1"/> that acts as an estimator and ignores the source.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.AppendRowsDataView">
             <summary>
             This class provides the functionality to combine multiple IDataView objects which share the same schema
             All sources must contain the same number of columns and their column names, sizes, and item types must match.
             The row count of the resulting IDataView will be the sum over that of each individual.
            
             An AppendRowsDataView instance is shuffleable iff all of its sources are shuffleable and their row counts are known.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Data.AppendRowsDataView.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.DataViewSchema,Microsoft.ML.IDataView[])">
             <summary>
             Create a dataview by appending the rows of the sources.
            
             All sources must be consistent with the passed-in schema in the number of columns, column names,
             and column types. If schema is null, the first source's schema will be used.
             </summary>
             <param name="env">The host environment.</param>
             <param name="schema">The schema for the result. If this is null, the first source's schema will be used.</param>
             <param name="sources">The sources to be appended.</param>
             <returns>The resulting IDataView.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.AppendRowsDataView.CursorBase.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.AppendRowsDataView.Cursor">
            <summary>
            The deterministic cursor. It will scan through the sources sequentially.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.AppendRowsDataView.RandCursor">
            <summary>
             A RandCursor will ask each subordinate cursor to shuffle itself.
            Then, at each step, it randomly calls a subordinate to move next with probability (roughly) proportional to
            the number of the subordinate's remaining rows.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.AppendRowsDataView.MultinomialWithoutReplacementSampler">
             <summary>
             Given k classes with counts (N_0, N_2, N_3, ...,  N_{k-1}), the goal of this sampler is to select the i-th
             class with probability N_i/M, where M = N_0 + N_1 + ... + N_{k-1}.
             Once the i-th class is selected, its count will be updated to N_i - 1.
            
             For efficiency consideration, the sampling distribution is only an approximation of the desired distribution.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ArrayDataViewBuilder">
            <summary>
            This is a class for composing an in memory IDataView.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.CheckLength``1(System.String,``0[])">
            <summary>
            Verifies that the input array to one of the add routines is of the same length
            as previously added arrays, assuming there were any.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.AddColumn``1(System.String,Microsoft.ML.Data.PrimitiveDataViewType,``0[])">
            <summary>
            Constructs a new column from an array where values are copied to output simply
            by being assigned. Output values are returned simply by being assigned, so the
            type <typeparamref name="T"/> should be a type where assigning to a different
            value does not compromise the immutability of the source object (so, for example,
            a scalar, string, or <c>ReadOnlyMemory</c> would be perfectly acceptable, but a
            <c>HashSet</c> or <c>VBuffer</c> would not be).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.AddColumn``1(System.String,Microsoft.ML.ValueGetter{Microsoft.ML.Data.VBuffer{System.ReadOnlyMemory{System.Char}}},System.UInt64,``0[])">
            <summary>
            Constructs a new key column from an array where values are copied to output simply
            by being assigned.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="getKeyValues">The delegate that does a reverse lookup based upon the given key. This is for annotation creation</param>
            <param name="keyCount">The count of unique keys specified in values</param>
            <param name="values">The values to add to the column. Note that since this is creating a <see cref="T:Microsoft.ML.Data.KeyDataViewType"/> column, the values will be offset by 1.</param>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.AddColumn``1(System.String,Microsoft.ML.ValueGetter{Microsoft.ML.Data.VBuffer{System.ReadOnlyMemory{System.Char}}},Microsoft.ML.Data.PrimitiveDataViewType,``0[][])">
            <summary>
            Creates a column with slot names from arrays. The added column will be re-interpreted as a buffer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.AddColumn``1(System.String,Microsoft.ML.Data.PrimitiveDataViewType,``0[][])">
            <summary>
            Creates a column from arrays. The added column will be re-interpreted as a buffer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.AddColumn``1(System.String,Microsoft.ML.ValueGetter{Microsoft.ML.Data.VBuffer{System.ReadOnlyMemory{System.Char}}},Microsoft.ML.Data.PrimitiveDataViewType,Microsoft.ML.Data.Combiner{``0},``0[][])">
            <summary>
            Creates a column with slot names from arrays. The added column will be re-interpreted as a buffer and possibly sparsified.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.AddColumn``1(System.String,Microsoft.ML.Data.PrimitiveDataViewType,Microsoft.ML.Data.Combiner{``0},``0[][])">
            <summary>
            Creates a column from arrays. The added column will be re-interpreted as a buffer and possibly sparsified.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.AddColumn``1(System.String,Microsoft.ML.Data.PrimitiveDataViewType,Microsoft.ML.Data.VBuffer{``0}[])">
            <summary>
            Adds a VBuffer{T} valued column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.AddColumn``1(System.String,Microsoft.ML.ValueGetter{Microsoft.ML.Data.VBuffer{System.ReadOnlyMemory{System.Char}}},Microsoft.ML.Data.PrimitiveDataViewType,Microsoft.ML.Data.VBuffer{``0}[])">
            <summary>
            Adds a VBuffer{T} valued column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.AddColumn(System.String,System.String[])">
            <summary>
            Adds a <c>ReadOnlyMemory</c> valued column from an array of strings.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.GetDataView(System.Nullable{System.Int32})">
            <summary>
            Constructs a data view from the columns added so far. Note that it is perfectly acceptable
            to continue adding columns to the builder, but these additions will not be reflected in the
            returned dataview.
            </summary>
            <param name="rowCount"></param>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.DataView.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.DataView.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.Column`1.CopyOut(System.Int32,`0@)">
            <summary>
            Produce the output value given the index.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.Column`2.CopyOut(`0@,`1@)">
            <summary>
            Assigns dst in such a way that the caller has ownership of <c>dst</c> without
            compromising this object's ownership of <c>src</c>. What that operation will be
            will depend on the types.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.Column`2.CopyOut(System.Int32,`1@)">
            <summary>
            Produce the output value given the index. This overload utilizes the <c>CopyOut</c>
            helper function.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ArrayDataViewBuilder.AssignmentColumn`1">
            <summary>
            A column where the input and output types are the same, and simple assignment does
            not compromise ownership of the internal vlaues.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ArrayDataViewBuilder.StringToTextColumn">
            <summary>
            A convenience column for converting strings into textspans.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ArrayDataViewBuilder.VectorColumn`2.InferType(Microsoft.ML.Data.PrimitiveDataViewType,`0[],System.Func{`0,System.Int32})">
            <summary>
            A utility function for subclasses that want to get the type with a dimension based
            on the input value array and some length function over the input type.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ArrayDataViewBuilder.VBufferColumn`1">
            <summary>
            A column of buffers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CacheDataView">
            <summary>
            This is a dataview that wraps another dataview, and does on-demand caching of the
            input columns. When constructed, it caches no data. Whenever a cursor is constructed
            that requests a column that has not yet been cached, any requested uncached columns
            become cached through a background thread worker. A user can provide a hint to the
            constructor to indicate that some columns should be pre-cached. A cursor over this
            dataview will block when moved to a row until such time as all requested columns
            have that row in cache.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.CacheDataView._cacheLock">
            <summary>
            Cursors can be opened from multiple threads simultaneously, so this is used to
            synchronize both at the level of ensuring that only one cache is created per
            column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.CacheDataView._cacheFillerThreads">
            <summary>
            Filler threads. Currently nothing is done with them. Possibly it may be good
            practice to join against them somehow, but IDataViews as this stage are not
            disposed, so it's unclear what would actually have the job of joining against
            them.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.CacheDataView._caches">
            <summary>
            One cache per column. If this column is not being cached or has been cached,
            this column will be null.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.CacheDataView._cacheDefaultWaiter">
            <summary>
            A waiter used for cursors where no columns are actually requested but it's still
            necessary to wait to determine the number of rows.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Int32[])">
            <summary>
            Constructs an on demand cache for the input.
            </summary>
            <param name="env">The host environment</param>
            <param name="input">The input dataview to cache. Note that if we do not know
            how to cache some columns, these columns will not appear in this dataview.</param>
            <param name="prefetch">A list of column indices the cacher should frontload,
            prior to any cursors being requested. This can be null to indicate no
            prefetching.</param>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.SelectCachableColumns(Microsoft.ML.IDataView,Microsoft.ML.Runtime.IHostEnvironment,System.Int32[]@,System.Int32[]@)">
            <summary>
            Since shuffling requires serving up items potentially out of order we need to know
            how to save and then copy out values that we read. This transform knows how to save
            and copy out only primitive and vector valued columns, but nothing else, so any
            other columns are dropped.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.MapInputToCacheColumnIndex(System.Int32)">
            <summary>
            While in typical cases the cache data view will know how to cache all columns,
            the cache data view may not know how to cache certain custom types. User code
            may require a mapping from input data view to cache data view column index space.
            </summary>
            <param name="inputIndex">An input data column index</param>
            <returns>The column index of the corresponding column in the cache data view
            if this was cachable, or else -1 if the column was not cachable</returns>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.GetRowCount">
            <summary>
            Return the number of rows if available.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.GetPermutationOrNull(System.Random)">
            <summary>
            Returns a permutation or null. This function will return null if either <paramref name="rand"/>
            is null, or if the row count of this cache exceeds the maximum array size.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.KickoffFiller(System.Int32[])">
            <summary>
            This is a helper method that, given a list of columns, determines the subset
            that are uncached, and if there are any uncached kicks off a filler worker to
            fill them in, over a row cursor over this subset of columns.
            </summary>
            <param name="columns">The requested set of columns</param>
            <seealso cref="M:Microsoft.ML.Data.CacheDataView.Filler(Microsoft.ML.DataViewRowCursor,Microsoft.ML.Data.CacheDataView.ColumnCache[],Microsoft.ML.Internal.Utilities.OrderedWaiter)"/>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.Filler(Microsoft.ML.DataViewRowCursor,Microsoft.ML.Data.CacheDataView.ColumnCache[],Microsoft.ML.Internal.Utilities.OrderedWaiter)">
            <summary>
            The actual body of the filler worker. The filler worker works fairly simply:
            for each row, it tells each <see cref="T:Microsoft.ML.Data.CacheDataView.ColumnCache"/> instance in
            <paramref name="caches"/> to fill in the value at the current position,
            then increments the <paramref name="waiter"/>, then moves to the next row.
            When it's done, it tells <see cref="T:Microsoft.ML.Data.CacheDataView.ColumnCache"/> to "freeze" itself, since
            there should be no more rows.
            <param name="cursor">The cursor over the rows to cache</param>
            <param name="caches">The caches we must fill and, at the end of the cursor, freeze</param>
            <param name="waiter">The waiter to increment as we cache each additional row</param>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.Wait">
            <summary>
            Joins all the cache filler threads. This method is currently supposed to be called only by tests.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.RowSeeker`1.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.RowSeeker`1.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.IWaiter.Wait(System.Int64)">
             <summary>
             Blocks until that position is either available, or it has been
             determined no such position exists. Implicit in a true return value
             for this is that any values of <paramref name="pos"/> less than are
             also true, that is, if one waits on <c>i</c>, when this returns it
             is equivalent to also having waited on <c>i-1</c>, <c>i-2</c>, etc.
             Note that this is position within the cache, that is, a row index,
             as opposed to position within the cursor.
            
             This method should be thread safe because in the parallel cursor
             case it will be used by multiple threads.
             </summary>
             <param name="pos">The position to wait for, must be positive</param>
             <returns>True if the position can be accessed, false if not</returns>
        </member>
        <member name="T:Microsoft.ML.Data.CacheDataView.TrivialWaiter">
            <summary>
            A waiter for use in situations where there is no real waiting, per se, just a row limit.
            This should be instantiated only if the analogous <see cref="P:Microsoft.ML.Data.CacheDataView.WaiterWaiter.IsTrivial"/>
            returned true.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CacheDataView.WaiterWaiter">
            <summary>
            A waiter that determines the necessary waiters for a set of active columns, and waits
            on all of them.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.CacheDataView.WaiterWaiter.IsTrivial">
            <summary>
            If this is true, then a <see cref="T:Microsoft.ML.Data.CacheDataView.TrivialWaiter"/> could be used instead.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CacheDataView.IIndex">
            <summary>
            A collection of different simple objects that track the index into the cache at
            particular location. Note that this index is, in the shuffled or parallel case,
            very different from the position of the cursor that keeps this indexer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.IIndex.GetIndex">
            <summary>
            The index. Callers should never call this either before one of the move
            methods has returned true, or ever after either has returned false.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.IIndex.GetIdGetter">
            <summary>
            An ID getter, which should be based on the value that would be returned
            from <see cref="M:Microsoft.ML.Data.CacheDataView.IIndex.GetIndex"/>, if valid, and otherwise have undefined behavior.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.IIndex.MoveNext">
            <summary>
            Moves to the next index. Once this has returned false, it should never be called again.
            (This in constrast to public <see cref="T:Microsoft.ML.DataViewRowCursor"/> objects, whose move methods are
            robust to that usage.)
            </summary>
            <returns>Whether the next index is available.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.CacheDataView.SequenceIndex`1">
            <summary>
            An <see cref="T:Microsoft.ML.Data.CacheDataView.IIndex"/> where the indices, while valid, are sequential increasing
            adjacent indices.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CacheDataView.JobScheduler">
             <summary>
             A simple job scheduler that assigns available jobs (batches/blocks for processing) to
             free workers (cursors/threads). This scheduler takes the ids of the completed jobs into
             account when assigning next jobs in order to minimize workers wait time as the consumer
             of the completed jobs (a.k.a consolidator, see: DataViewUtils.ConsolidateGeneric) can
             only consume jobs in order -according to their ids-. Note that workers get assigned
             next job ids before they push the completed jobs to the consumer. So the workers are
             then subject to being blocked until their current completed jobs are fully accepted
             (i.e. added to the to-consume queue).
            
             How it works:
             Suppose we have 7 workers (w0,..,w6) and 14 jobs (j0,..,j13).
             Initially, jobs get assigned to workers using a shared counter.
             Here is an example outcome of using a shared counter:
             w1->j0, w6->j1, w0->j2, w3->j3, w4->j4, w5->j5, w2->j6.
            
             Suppose workers finished jobs in the following order:
             w5->j5, w0->j2, w6->j1, w4->j4, w3->j3,w1->j0, w2->j6.
            
             w5 finishes processing j5 first, but will be blocked until the processing of jobs
             j0,..,j4 completes since the consumer can consume jobs in order only.
             Therefore, the next available job (j7) should not be assigned to w5. It should be
             assigned to the worker whose job *get consumed first* (w1 since it processes j0
             which is the first job) *not* to the worker who completes its job first (w5 in
             this example).
            
             So, a shared counter can be used to assign jobs to workers initially but should
             not be used onwards.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CacheDataView.BlockSequenceIndex`1">
            <summary>
            An <see cref="T:Microsoft.ML.Data.CacheDataView.IIndex"/> that shares a counter among multiple threads. The multiple threads divy up
            the work by blocks of rows rather than splitting row by row simply, both to cut down on interthread
            communication as well as increased locality of thread data access.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CacheDataView.BlockRandomIndex`1">
            <summary>
            An <see cref="T:Microsoft.ML.Data.CacheDataView.IIndex"/> that shares a counter among multiple threads. The multiple threads divy up
            the work by blocks of rows rather than splitting row by row simply, to cut down on interthread
            communication.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.RowCursorSeekerBase.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CacheDataView.ColumnCache">
            <summary>
            A cache of values from a single column. The filler worker fills these in row
            by row, and increments the associated waiter. The consumer for the cache
            waits on the associated waiter (if non-null), then fetches values as it
            determines rows are valid.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.CacheDataView.ColumnCache.Waiter">
            <summary>
            The ordered waiter on row indices, indicating when a row index is valid,
            or null if it is no longer necessary to wait on this column, that is,
            it is completely filled in. Multiple columns can share a single waiter
            since often multiple columns are being cached simultaneously, so this
            object is not unqiue to this column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.ColumnCache.Create(Microsoft.ML.Data.CacheDataView,Microsoft.ML.DataViewRowCursor,System.Int32,Microsoft.ML.Internal.Utilities.OrderedWaiter)">
            <summary>
            Creates a cache pipe, over a particular column in a cursor.
            </summary>
            <param name="parent">The cache data view for which we are a cache</param>
            <param name="input">The cursor to read from</param>
            <param name="srcCol">The column of the cursor we are wrapping.</param>
            <param name="waiter">The waiter for the filler associated with this column</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.ColumnCache.CacheCurrent">
            <summary>
            Utilized by the filler worker, to fill in the cache at the current position of the cursor.
            The filler worker will have moved the cursor to the next row prior to calling this, so
            overrides will merely get the value at the current position of the cursor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.ColumnCache.Freeze">
            <summary>
            Utilized by the filler worker, to indicate to the cache that it will not be receiving
            any more values through <see cref="M:Microsoft.ML.Data.CacheDataView.ColumnCache.CacheCurrent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CacheDataView.ColumnCache`1.Fetch(System.Int32,`0@)">
            <summary>
            Utilized by the consumer to get a value in the cache at an index. The
            consumer should coordinate with the <see cref="P:Microsoft.ML.Data.CacheDataView.ColumnCache.Waiter"/> member to ensure
            that the row is valid.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CompositeRowToRowMapper">
            <summary>
            A row-to-row mapper that is the result of a chained application of multiple mappers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CompositeRowToRowMapper.#ctor(Microsoft.ML.DataViewSchema,Microsoft.ML.Data.IRowToRowMapper[])">
            <summary>
            Out of a series of mappers, construct a seemingly unitary mapper that is able to apply them in sequence.
            </summary>
            <param name="inputSchema">The input schema.</param>
            <param name="mappers">The sequence of mappers to wrap. An empty or <c>null</c> argument
            is legal, and counts as being a no-op application.</param>
        </member>
        <member name="M:Microsoft.ML.Data.CompositeRowToRowMapper.Microsoft#ML#Data#IRowToRowMapper#GetDependencies(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CompositeRowToRowMapper.SubsetActive.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.CompositeRowToRowMapper.SubsetActive.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewConstructionUtils">
            <summary>
            A helper class to create data views based on the user-provided types.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewConstructionUtils.InputRowBase`1">
            <summary>
            A row that consumes items of type <typeparamref name="TRow"/>, and provides an <see cref="T:Microsoft.ML.DataViewRow"/>. This
            is in contrast to <see cref="T:Microsoft.ML.Data.IRowReadableAs`1"/> which consumes a data view row and publishes them as the output type.
            </summary>
            <typeparam name="TRow">The input data type.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewConstructionUtils.InputRowBase`1.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewConstructionUtils.InputRowBase`1.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewConstructionUtils.DataViewBase`1">
            <summary>
            The base class for the data view over items of user-defined type.
            </summary>
            <typeparam name="TRow">The user-defined data type.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewConstructionUtils.DataViewBase`1.WrappedCursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewConstructionUtils.DataViewBase`1.WrappedCursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.DataViewConstructionUtils.DataViewBase`1.DataViewCursorBase.Position">
            <summary>
            Zero-based position of the cursor.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.DataViewConstructionUtils.DataViewBase`1.DataViewCursorBase.IsGood">
            <summary>
            Convenience property for checking whether the cursor is in a good state where values
            can be retrieved, that is, whenever <see cref="P:Microsoft.ML.Data.DataViewConstructionUtils.DataViewBase`1.DataViewCursorBase.Position"/> is non-negative.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewConstructionUtils.DataViewBase`1.DataViewCursorBase.MoveNextCore">
            <summary>
            Core implementation of <see cref="M:Microsoft.ML.Data.DataViewConstructionUtils.DataViewBase`1.DataViewCursorBase.MoveNext"/>, called if no prior call to this method
            has returned <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewConstructionUtils.ListDataView`1">
            <summary>
            An in-memory data view based on the IList of data.
            Supports shuffling.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewConstructionUtils.StreamingDataView`1">
            <summary>
            An in-memory data view based on the IEnumerable of data.
            Doesn't support shuffling.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewConstructionUtils.SingleRowLoopDataView`1">
            <summary>
            This represents the 'infinite data view' over one (mutable) user-defined object.
            The 'current row' object can be updated at any time, this will affect all the
            newly created cursors, but not the ones already existing.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.AnnotationInfo">
            <summary>
            A single instance of annotation information, associated with a column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.AnnotationInfo.AnnotationType">
            <summary>
            The type of the annotation.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.AnnotationInfo.Kind">
            <summary>
            The string identifier of the annotation. Some identifiers have special meaning,
            like "SlotNames", but any other identifiers can be used.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.AnnotationInfo`1">
            <summary>
            Strongly-typed version of <see cref="T:Microsoft.ML.Data.AnnotationInfo"/>, that contains the actual value of the annotation.
            </summary>
            <typeparam name="T">Type of the annotation value.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Data.AnnotationInfo`1.#ctor(System.String,`0,Microsoft.ML.Data.DataViewType)">
            <summary>
            Constructor for annotation of value type T.
            </summary>
            <param name="kind">The string identifier of the annotation. Some identifiers have special meaning,
            like "SlotNames", but any other identifiers can be used.</param>
            <param name="value">Annotation value.</param>
            <param name="annotationType">Type of the annotation.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewExtensions.GetRowCursor(Microsoft.ML.IDataView,Microsoft.ML.DataViewSchema.Column[])">
            <summary>
            Get a row cursor. The <paramref name="columnsNeeded"/> are the active columns.
            The schema of the returned cursor will be the same as the schema of the IDataView, but getting
            a getter for an inactive columns will throw.
            </summary>
            <param name="columnsNeeded">The columns requested by this <see cref="T:Microsoft.ML.DataViewRowCursor"/>, or as otherwise called, the active columns.
            An empty collection indicates that no column is needed.</param>
            <param name="dv">The <see cref="T:Microsoft.ML.IDataView"/> containing the <paramref name="columnsNeeded"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewExtensions.GetRowCursor(Microsoft.ML.IDataView,Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Get a row cursor. The <paramref name="columnNeeded"/> is the active column.
            The schema of the returned cursor will be the same as the schema of the IDataView, but getting
            a getter for the other, inactive columns will throw.
            </summary>
            <param name="columnNeeded">The column requested by this <see cref="T:Microsoft.ML.DataViewRowCursor"/>, or as otherwise called, the active column.</param>
            <param name="dv">The <see cref="T:Microsoft.ML.IDataView"/> containing the <paramref name="columnNeeded"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewExtensions.GetRowCursor(Microsoft.ML.IDataView)">
            <summary>
            Get a row cursor. No colums are needed by this <see cref="T:Microsoft.ML.DataViewRowCursor"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewExtensions.GetRowCursorForAllColumns(Microsoft.ML.IDataView)">
            <summary>
            Get a row cursor including all the columns of the <see cref="T:Microsoft.ML.IDataView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewExtensions.GetRow(Microsoft.ML.Data.IRowToRowMapper,Microsoft.ML.DataViewRow,Microsoft.ML.DataViewSchema.Column[])">
            <summary>
            Extension method.
            </summary>
            <param name="rowMapper"></param>
            <param name="input"></param>
            <param name="activeColumns"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Data.EmptyDataView">
            <summary>
            This implements a data view that has a schema, but no rows.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EmptyDataView.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EmptyDataView.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.InternalSchemaDefinition">
            <summary>
            An internal class that holds the (already validated) mapping between a custom type and an IDataView schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.InternalSchemaDefinition.Column.AssertRep">
            <summary>
            Function that checks whether the InternalSchemaDefinition.Column is a valid one.
            To be valid, the Column must:
                1. Have non-empty values for ColumnName and ColumnType
                2. Have a non-empty value for FieldInfo iff it is a field column, else
                   ReturnParameterInfo and Generator iff it is a computed column
                3. Generator must have the method inputs (TRow rowObject,
                   long position, ref TValue outputValue) in that order.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Data.InternalSchemaDefinition.GetVectorAndItemType(System.Reflection.MemberInfo,System.Boolean@,System.Type@)">
            <summary>
            Given a field or property info on a type, returns whether this appears to be a vector type,
            and also the associated data kind for this type. If a valid data type could not
            be determined, this will throw.
            </summary>
            <param name="memberInfo">The field or property info to inspect.</param>
            <param name="isVector">Whether this appears to be a vector type.</param>
            <param name="itemType">
            The corresponding <see cref="T:Microsoft.ML.Data.PrimitiveDataViewType"/> RawType of the type, or items of this type if vector.
            </param>
        </member>
        <member name="M:Microsoft.ML.Data.InternalSchemaDefinition.GetVectorAndItemType(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Attribute},System.Boolean@,System.Type@)">
            <summary>
            Given a type and name for a variable, returns whether this appears to be a vector type,
            and also the associated data type for this type. If a valid data type could not
            be determined, this will throw.
            </summary>
            <param name="name">The name of the variable to inspect.</param>
            <param name="rawType">The type of the variable to inspect.</param>
            <param name="attributes">Attribute of <paramref name="rawType"/>. It can be <see langword="null"/> if attributes don't exist.</param>
            <param name="isVector">Whether this appears to be a vector type.</param>
            <param name="itemType">
            The corresponding <see cref="T:Microsoft.ML.Data.PrimitiveDataViewType"/> RawType of the type, or items of this type if vector.
            </param>
        </member>
        <member name="T:Microsoft.ML.Data.LambdaColumnMapper">
            <summary>
            This applies the user provided ValueMapper to a column to produce a new column. It automatically
            injects a standard conversion from the actual type of the source column to typeSrc (if needed).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.LambdaFilter">
            <summary>
            This applies the user provided RefPredicate to a column and drops rows that map to false. It automatically
            injects a standard conversion from the actual type of the source column to typeSrc (if needed).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.OpaqueDataView">
            <summary>
            Opaque IDataView implementation to provide a barrier for data pipe optimizations.
            Used in cross validatation to generate the train/test pipelines for each fold.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IRowMapper">
            <summary>
            This interface is used to create a <see cref="T:Microsoft.ML.Data.RowToRowMapperTransform"/>.
            Implementations should be given an <see cref="T:Microsoft.ML.DataViewSchema"/> in their constructor, and should have a
            ctor or Create method with <see cref="T:Microsoft.ML.Data.SignatureLoadRowMapper"/>, along with a corresponding
            <see cref="T:Microsoft.ML.LoadableClassAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IRowMapper.GetDependencies(System.Func{System.Int32,System.Boolean})">
            <summary>
            Returns the input columns needed for the requested output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IRowMapper.CreateGetters(Microsoft.ML.DataViewRow,System.Func{System.Int32,System.Boolean},System.Action@)">
            <summary>
            Returns the getters for the output columns given an active set of output columns. The length of the getters
            array should be equal to the number of columns added by the IRowMapper. It should contain the getter for the
            i'th output column if activeOutput(i) is true, and null otherwise. If creating a <see cref="T:Microsoft.ML.DataViewRow"/> or
            <see cref="T:Microsoft.ML.DataViewRowCursor"/> out of this, the <paramref name="disposer"/> delegate (if non-null) should be called
            from the dispose of either of those instances.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IRowMapper.GetOutputColumns">
            <summary>
            Returns information about the output columns, including their name, type and any metadata information.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IRowMapper.GetTransformer">
            <summary>
            DO NOT USE IT!
            Purpose of this method is to enable legacy loading and unwrapping of RowToRowTransform.
            It should be removed as soon as we get rid of <see cref="T:Microsoft.ML.Data.TrainedWrapperEstimatorBase"/>
            Returns parent transfomer which uses this mapper.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.RowToRowMapperTransform">
            <summary>
            This class is a transform that can add any number of output columns, that depend on any number of input columns.
            It does so with the help of an <see cref="T:Microsoft.ML.Data.IRowMapper"/>, that is given a schema in its constructor, and has methods
            to get the dependencies on input columns and the getters for the output columns, given an active set of output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowMapperTransform.GetActive(System.Func{System.Int32,System.Boolean},System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column}@)">
            <summary>
            Produces the set of active columns for the data view (as a bool[] of length bindings.ColumnCount),
            and the needed active input columns, given a predicate for the needed active output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowMapperTransform.Microsoft#ML#Data#IRowToRowMapper#GetDependencies(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of output columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowMapperTransform.RowImpl.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowMapperTransform.RowImpl.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowMapperTransform.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowMapperTransform.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.SimpleRow">
            <summary>
            An implementation of <see cref="T:Microsoft.ML.DataViewRow"/> that gets its <see cref="P:Microsoft.ML.DataViewRow.Position"/>, <see cref="P:Microsoft.ML.DataViewRow.Batch"/>,
            and <see cref="M:Microsoft.ML.DataViewRow.GetIdGetter"/> from an input row. The constructor requires a schema and array of getter
            delegates. A <see langword="null"/> delegate indicates an inactive column. The delegates are assumed to be
            of the appropriate type (this does not validate the type).
            REVIEW: Should this validate that the delegates are of the appropriate type? It wouldn't be difficult
            to do so.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SimpleRow.#ctor(Microsoft.ML.DataViewSchema,Microsoft.ML.DataViewRow,System.Delegate[],System.Action)">
            <summary>
            Constructor.
            </summary>
            <param name="schema">The schema for the row.</param>
            <param name="input">The row that is being wrapped by this row, where our <see cref="P:Microsoft.ML.DataViewRow.Position"/>,
            <see cref="P:Microsoft.ML.DataViewRow.Batch"/>, <see cref="M:Microsoft.ML.DataViewRow.GetIdGetter"/>.</param>
            <param name="getters">The collection of getter delegates, whose types should map those in a schema.
            If one of these is <see langword="null"/>, the corresponding column is considered inactive.</param>
            <param name="disposer">A method that, if non-null, will be called exactly once during
            <see cref="M:System.IDisposable.Dispose"/>, prior to disposing <paramref name="input"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Data.SimpleRow.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.Transposer">
            <summary>
            This provides a scalable method of getting a "transposed" view of a subset of columns from an
            <see cref="T:Microsoft.ML.IDataView"/>. Instances of <see cref="T:Microsoft.ML.Data.Transposer"/> act like a wrapped version of
            the input dataview, except that an indicated set of columns will be transposable, even if they
            were not transposable before. Note that transposition is a somewhat slow and resource intensive
            operation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Boolean,System.String[])">
            <summary>
            Creates an instance given a list of column names.
            </summary>
            <param name="env">The host environment</param>
            <param name="view">The view whose columns we want to transpose</param>
            <param name="forceSave">Whether the internal transposer should always unconditionally
            save the column we are transposing. Can be useful if the original dataview is possibly
            slow to iterate over that column.</param>
            <param name="columns">The non-empty list of columns to transpose</param>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Boolean,System.Int32[])">
            <summary>
            Creates an instance given a list of column indices.
            </summary>
            <param name="env">The host environment</param>
            <param name="view">The view whose columns we want to transpose</param>
            <param name="forceSave">Whether the internal transposer should always unconditionally
            save the column we are transposing. Can be useful if the original dataview is possibly
            slow to iterate over that column.</param>
            <param name="columns">The non-empty list of columns to transpose</param>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.SlotCursorVec`1.#ctor(Microsoft.ML.Data.Transposer,System.Int32)">
            <summary>
            Constructs a slot cursor.
            </summary>
            <param name="parent">The transposer.</param>
            <param name="col">The index of the transposed column.</param>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.SlotCursorVec`1.EnsureValid">
            <summary>
            Ensures that the column from the source data view stored in our intermediate buffers is the
            current column requested.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.Transposer.DataViewSlicer">
            <summary>
            This takes an input data view, and presents a dataset with "sliced" up columns
            that are partitionings of the original columns. Scalar columns and sufficiently
            small vector columns are just served up as themselves. The idea is that each of
            those slices should be small enough that storing an entire column in memory.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.InColToOutRange(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Given the index of a column we were told to split, get the corresponding range out output
            ranges.
            </summary>
            <param name="incol">The index into the array of column indices.</param>
            <param name="outMin">The minimum output column index corresponding to that split column</param>
            <param name="outLim">The exclusive limit of the output column index corresponding to that
            split column</param>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.OutputColumnToSplitterIndices(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Given an output column index, find which spliter produces it and which spliter column is its source.
            </summary>
            <param name="col">An output column index</param>
            <param name="splitInd"><see cref="F:Microsoft.ML.Data.Transposer.DataViewSlicer._splitters"/>[splitInd] produces the specified output column.</param>
            <param name="splitCol">The specified output column is the splitCol-th column among columns produced by <see cref="F:Microsoft.ML.Data.Transposer.DataViewSlicer._splitters"/>[splitInd].</param>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.CreateInputPredicate(System.Func{System.Int32,System.Boolean},System.Boolean[]@)">
            <summary>
            Given a possibly null predicate for this data view, produce the dependency predicate for the sources,
            as well as a list of all the splitters for which we should produce rowsets.
            </summary>
            <param name="pred">The predicate input into the <see cref="M:Microsoft.ML.Data.Transposer.DataViewSlicer.GetRowCursor(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column},System.Random)"/> method.</param>
            <param name="activeSplitters">A boolean indicator array of length equal to the number of splitters,
            indicating whether that splitter has any active columns in its outputs or not</param>
            <returns>The predicate to use when constructing the row cursor from the source</returns>
        </member>
        <member name="T:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter">
            <summary>
            There is one instance of these per column, implementing the possible splitting
            of one column from a <see cref="T:Microsoft.ML.IDataView"/> into multiple columns. The instance
            describes the resulting split columns through <see cref="P:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.OutputSchema"/>,
            and then can be bound to an <see cref="T:Microsoft.ML.DataViewRow"/> to provide that splitting functionality.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.OutputSchema">
            <summary>
            Output schema of a splitter. A splitter takes a column from input data and then divide it into multiple columns
            to form its output data.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.Create(Microsoft.ML.IDataView,System.Int32)">
            <summary>
            Creates a splitter for a given row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.Bind(Microsoft.ML.DataViewRow,System.Func{System.Int32,System.Boolean})">
            <summary>
            Given an input <see cref="T:Microsoft.ML.DataViewRow"/>, create the <see cref="T:Microsoft.ML.DataViewRow"/> containing the split
            version of the columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.NoSplitter`1">
            <summary>
            A splitter that doesn't split, just passes through the column contents.
            Useful for when we've been told to "split" a column that we don't need
            to split.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.NoSplitter`1.#ctor(Microsoft.ML.IDataView,System.Int32)">
            <summary>
            This is NoSplitter. Thus, the column, indexed by col, which supposes to be splitted will just be copied to an output
            column without splitting.
            </summary>
            <param name="view">Input data whose columns can be splitted.</param>
            <param name="col">The selected column's index.</param>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.NoSplitter`1.RowImpl.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.NoSplitter`1.RowImpl.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.ColumnSplitter`1">
            <summary>
            This splitter enables the partition of a single column into two or more
            columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.ColumnSplitter`1.#ctor(Microsoft.ML.IDataView,System.Int32,System.Int32[])">
            <summary>
            Provide a column partitioner that partitions a vector column into multiple
            vector columns.
            </summary>
            <param name="view">The view where we are slicing one column</param>
            <param name="col">The column we are slicing</param>
            <param name="lims">Equal in length to the number of slices, this is
            the limit of the indices of each slice, where the successive slice
            starts with that limit as its minimum index. So slice i comes from
            source slot indices from <c><paramref name="lims"/>[i-1]</c> inclusive to
            <c><paramref name="lims"/>[i]</c> exclusive, with slice 0 starting at 0.</param>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.ColumnSplitter`1.RowImpl.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.ColumnSplitter`1.RowImpl.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.Transposer.DataViewSlicer.Cursor">
            <summary>
            The cursor implementation creates the <see cref="T:Microsoft.ML.DataViewRow"/>s using <see cref="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Splitter.Bind(Microsoft.ML.DataViewRow,System.Func{System.Int32,System.Boolean})"/>,
            then collates the results from those rows as effectively one big row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Transposer.DataViewSlicer.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TransposerUtils.GetSingleSlotValue``1(Microsoft.ML.Data.ITransposeDataView,System.Int32,Microsoft.ML.Data.VBuffer{``0}@)">
            <summary>
            This is a convenience method that extracts a single slot value's vector,
            while simultaneously verifying that there is exactly one value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TransposerUtils.GetGetterWithVectorType``1(Microsoft.ML.Data.SlotCursor,Microsoft.ML.Runtime.IExceptionContext)">
            <summary>
            The <see cref="M:Microsoft.ML.Data.SlotCursor.GetGetter``1"/> is parameterized by a type that becomes the
            type parameter for a <see cref="T:Microsoft.ML.Data.VBuffer`1"/>, and this is generally preferable and more
            sensible but for various reasons it's often a lot simpler to have a get-getter be over
            the actual type returned by the getter, that is, parameterize this by the actual
            <see cref="T:Microsoft.ML.Data.VBuffer`1"/> type.
            </summary>
            <typeparam name="TValue">The type, must be a <see cref="T:Microsoft.ML.Data.VBuffer`1"/> generic type,
            though enforcement of this has to be done only at runtime for practical reasons</typeparam>
            <param name="cursor">The cursor to get the getter for</param>
            <param name="ctx">The exception contxt</param>
            <returns>The value getter</returns>
        </member>
        <member name="M:Microsoft.ML.Data.TransposerUtils.GetRowCursorShim(Microsoft.ML.Runtime.IChannelProvider,Microsoft.ML.Data.SlotCursor)">
            <summary>
            Given a slot cursor, construct a single-column equivalent row cursor, with the single column
            active and having the same type. This is useful to exploit the many utility methods that exist
            to handle <see cref="T:Microsoft.ML.DataViewRowCursor"/> and <see cref="T:Microsoft.ML.DataViewRow"/> but that know nothing about
            <see cref="T:Microsoft.ML.Data.SlotCursor"/>, without having to rewrite all of them. This is, however, rather
            something of a hack; whenever possible or reasonable the slot cursor should be used directly.
            The name of this column is always "Waffles".
            </summary>
            <param name="provider">The channel provider used in creating the wrapping row cursor</param>
            <param name="cursor">The slot cursor to wrap</param>
            <returns>A row cursor with a single active column with the same type as the slot type</returns>
        </member>
        <member name="T:Microsoft.ML.Data.TransposerUtils.SlotDataView">
            <summary>
            Presents a single transposed column as a single-column dataview.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TransposerUtils.SlotDataView.Cursor`1.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TransposerUtils.SlotDataView.Cursor`1.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TransposerUtils.SlotRowCursorShim`1.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TransposerUtils.SlotRowCursorShim`1.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.IRowReadableAs`1">
            <summary>
            This interface is an <see cref="T:Microsoft.ML.DataViewRow"/> with 'strongly typed' binding.
            It can populate the user-supplied object's fields with the values of the current row.
            </summary>
            <typeparam name="TRow">The user-defined type that is being populated while cursoring.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Data.IRowReadableAs`1.FillValues(`0)">
            <summary>
            Populates the fields of the user-supplied <paramref name="row"/> object with the values of the current row.
            </summary>
            <param name="row">The row object. Cannot be null.</param>
        </member>
        <member name="T:Microsoft.ML.Data.RowCursor`1">
            <summary>
            This interface provides cursoring through a <see cref="T:Microsoft.ML.IDataView"/> via a 'strongly typed' binding.
            It can populate the user-supplied object's fields with the values of the current row.
            </summary>
            <typeparam name="TRow">The user-defined type that is being populated while cursoring.</typeparam>
        </member>
        <member name="T:Microsoft.ML.Data.ICursorable`1">
            <summary>
            This interface allows to create strongly typed cursors over a <see cref="T:Microsoft.ML.IDataView"/>.
            </summary>
            <typeparam name="TRow">The user-defined type that is being populated while cursoring.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Data.ICursorable`1.GetCursor">
            <summary>
            Get a new cursor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ICursorable`1.GetRandomizedCursor(System.Int32)">
            <summary>
            Get a new randomized cursor.
            </summary>
            <param name="randomSeed">The random seed to use.</param>
        </member>
        <member name="T:Microsoft.ML.Data.TypedCursorable`1">
            <summary>
            Implementation of the strongly typed Cursorable.
            Similarly to the 'DataView{T}, this class uses IL generation to create the 'poke' methods that
            write directly into the fields of the user-defined type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TypedCursorable`1.IsCompatibleType(Microsoft.ML.Data.DataViewType,System.Reflection.MemberInfo)">
            <summary>
            Returns whether the column type <paramref name="colType"/> can be bound to field <paramref name="memberInfo"/>.
            They must both be vectors or scalars, and the raw data type should match.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TypedCursorable`1.GetCursor">
            <summary>
            Create and return a new cursor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TypedCursorable`1.GetRandomizedCursor(System.Int32)">
            <summary>
            Create and return a new randomized cursor.
            </summary>
            <param name="randomSeed">The random seed to use.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TypedCursorable`1.GetCursor(System.Func{System.Int32,System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Create a new cursor with additional active columns.
            </summary>
            <param name="additionalColumnsPredicate">Predicate that denotes which additional columns to include in the cursor,
            in addition to the columns that are needed for populating the <typeparamref name="TRow"/> object.</param>
            <param name="randomSeed">The random seed to use. If <c>null</c>, the cursor will be non-randomized.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TypedCursorable`1.GetCursorSet(System.Func{System.Int32,System.Boolean},System.Int32,System.Random)">
            <summary>
            Create a set of cursors with additional active columns.
            </summary>
            <param name="additionalColumnsPredicate">Predicate that denotes which additional columns to include in the cursor,
            in addition to the columns that are needed for populating the <typeparamref name="TRow"/> object.</param>
            <param name="n">Number of cursors to create</param>
            <param name="rand">Random generator to use</param>
        </member>
        <member name="M:Microsoft.ML.Data.TypedCursorable`1.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Boolean,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            Create a Cursorable object on a given data view.
            </summary>
            <param name="env">Host environment.</param>
            <param name="data">The underlying data view.</param>
            <param name="ignoreMissingColumns">Whether to ignore missing columns in the data view.</param>
            <param name="schemaDefinition">The optional user-provided schema.</param>
            <returns>The constructed Cursorable.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TypedCursorable`1.TypedRowBase.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TypedCursorable`1.RowCursorImplementation.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.TypedCursorable`1.RowCursorImplementation.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CursoringUtils">
            <summary>
            Utility methods that facilitate strongly-typed cursoring.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CursoringUtils.AsCursorable``1(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Boolean,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            Generate a strongly-typed cursorable wrapper of the <see cref="T:Microsoft.ML.IDataView"/>.
            </summary>
            <typeparam name="TRow">The user-defined row type.</typeparam>
            <param name="env">The environment.</param>
            <param name="data">The underlying data view.</param>
            <param name="ignoreMissingColumns">Whether to ignore the case when a requested column is not present in the data view.</param>
            <param name="schemaDefinition">Optional user-provided schema definition. If it is not present, the schema is inferred from the definition of T.</param>
            <returns>The cursorable wrapper of <paramref name="data"/>.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.ZipBinding">
            <summary>
            A convenience class for concatenating several schemas together.
            This would be necessary when combining IDataViews through any type of combining operation, for example, zip.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ZipBinding.GetInputPredicates(System.Func{System.Int32,System.Boolean})">
            <summary>
            Returns an array of input predicated for sources, corresponding to the input predicate.
            The returned array size is equal to the number of sources, but if a given source is not needed at all,
            the corresponding predicate will be null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ZipBinding.CheckColumnInRange(System.Int32)">
            <summary>
            Checks whether the column index is in range.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ZipDataView">
            <summary>
            This is a data view that is a 'zip' of several data views.
            The length of the zipped data view is equal to the shortest of the lengths of the components.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ZipDataView.GetMinimumCursor(Microsoft.ML.IDataView)">
            <summary>
            Create an <see cref="T:Microsoft.ML.DataViewRowCursor"/> with no requested columns on a data view.
            Potentially, this can be optimized by calling GetRowCount(lazy:true) first, and if the count is not known,
            wrapping around GetCursor().
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ZipDataView.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ZipDataView.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.BufferBuilder`1">
            <summary>
            Helper base class for building feature vectors (sparse or dense). Note that this is abstract
            with some of the esoteric stuff "protected" instead of "public". This is so callees can't
            abuse an instance of it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BufferBuilder`1.ResetImpl(System.Int32,System.Boolean)">
            <summary>
            This resets the FeatureSet to be used again. This functionality is for memory
            efficiency - we can keep pools of these to be re-used.
            Dense indicates whether this should start out dense. It can, of course,
            become dense when it makes sense to do so.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BufferBuilder`1.SetActiveRangeImpl(System.Int32,System.Int32)">
            <summary>
            This sets the active sub-range of the feature index space. For example, when asking
            a feature handler to add features, we call this so the feature handler can use zero-based
            indexing for the features it is generating. This also prohibits the feature handler from
            messing with a different index range. Note that this is protected so a non-abstract derived
            type can choose how to use it, but a feature handler can't directly mess with the active
            range.
            </summary>
            <param name="ifeat">The min feature index of the active range</param>
            <param name="cfeat">The number of feature indices in the active range</param>
        </member>
        <member name="M:Microsoft.ML.Data.BufferBuilder`1.AddFeature(System.Int32,`0)">
            <summary>
            Adds a feature to the current active range. If the index is a duplicate, this adds the
            given value to any previously provided value(s).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BufferBuilder`1.SortAndSumDups">
            <summary>
            Sort the indices/values (by index) and sum the values for duplicate indices. This asserts that
            _sorted is false and _dense is false. It also asserts that _count > 1.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BufferBuilder`1.MakeDense">
            <summary>
            Convert a sorted non-dense representation to dense.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BufferBuilder`1.TryGetFeature(System.Int32,`0@)">
            <summary>
            Try to get the value for the given feature. Returns false if the feature index is not found.
            Note that this respects the "active range", just as AddFeature does.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.Conversion.Conversions">
            <summary>
            This type exists to provide efficient delegates for conversion between standard ColumnTypes,
            as discussed in the IDataView Type System Specification. This is a singleton class.
            Some conversions are "standard" conversions, conforming to the details in the spec.
            Others are auxiliary conversions. The use of auxiliary conversions should be limited to
            situations that genuinely require them and have been well designed in the particular context.
            For example, this contains non-standard conversions from the standard primitive types to
            text (and StringBuilder). These are needed by the standard TextSaver, which handles
            differences between sparse and dense inputs in a semantically invariant way.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.GetStandardConversion``2(Microsoft.ML.Data.DataViewType,Microsoft.ML.Data.DataViewType,System.Boolean@)">
            <summary>
            Return a standard conversion delegate from typeSrc to typeDst. If there is no such standard
            conversion, this throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryGetStandardConversion``2(Microsoft.ML.Data.DataViewType,Microsoft.ML.Data.DataViewType,Microsoft.ML.Data.ValueMapper{``0,``1}@,System.Boolean@)">
            <summary>
            Determine whether there is a standard conversion from typeSrc to typeDst and if so,
            set conv to the conversion delegate. The type parameters TSrc and TDst must match
            the raw types of typeSrc and typeDst.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.GetStandardConversion(Microsoft.ML.Data.DataViewType,Microsoft.ML.Data.DataViewType)">
            <summary>
            Return a standard conversion delegate from typeSrc to typeDst. If there is no such standard
            conversion, this throws an exception.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryGetStandardConversion(Microsoft.ML.Data.DataViewType,Microsoft.ML.Data.DataViewType,System.Delegate@,System.Boolean@)">
            <summary>
            Determine whether there is a standard conversion from typeSrc to typeDst and if so,
            set conv to the conversion delegate.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.GetNAOrDefault``1(Microsoft.ML.Data.DataViewType)">
            <summary>
            Returns the NA value of the given type, if it has one, otherwise, it returns
            default of the type. This only knows about NA values of standard scalar types
            and key types.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.GetNAOrDefault``1(Microsoft.ML.Data.DataViewType,System.Boolean@)">
            <summary>
            Returns the NA value of the given type, if it has one, otherwise, it returns
            default of the type. This only knows about NA values of standard scalar types
            and key types. Returns whether the returned value is the default value or not.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.GetNAOrDefaultGetter``1(Microsoft.ML.Data.DataViewType)">
            <summary>
            Returns a ValueGetter{T} that produces the NA value of the given type, if it has one,
            otherwise, it produces default of the type. This only knows about NA values of standard
            scalar types and key types.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.Byte@)">
            <summary>
            This produces zero for empty. It returns false if the text is not parsable or overflows.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.UInt16@)">
            <summary>
            This produces zero for empty. It returns false if the text is not parsable or overflows.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.UInt32@)">
            <summary>
            This produces zero for empty. It returns false if the text is not parsable or overflows.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.UInt64@)">
            <summary>
            This produces zero for empty. It returns false if the text is not parsable or overflows.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,Microsoft.ML.Data.DataViewRowId@)">
            <summary>
            A parse method that transforms a 34-length string into a <see cref="T:Microsoft.ML.Data.DataViewRowId"/>.
            </summary>
            <param name="src">What should be a 34-length hexadecimal representation, including a 0x prefix,
            of the 128-bit number</param>
            <param name="dst">The result</param>
            <returns>Whether the input string was parsed successfully, that is, it was exactly length 32
            and had only digits and the letters 'a' through 'f' or 'A' through 'F' as characters</returns>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.IsStdMissing(System.ReadOnlySpan{System.Char}@)">
            <summary>
            Return true if the span contains a standard text representation of NA
            other than the standard TX missing representation - callers should
            have already dealt with that case and the case of empty.
            The standard representations are any casing of:
               ?  NaN  NA  N/A
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParseKey(System.ReadOnlyMemory{System.Char}@,System.UInt64,System.UInt64@)">
            <summary>
            Utility to assist in parsing key-type values. The max value defines
            the legal input value bound. The output dst value is "normalized" by adding 1
            so max is mapped to 1 + max.
            Unparsable or out of range values are mapped to zero with a false return.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.SByte@)">
            <summary>
            This produces zero for empty. It returns false if the text is not parsable or overflows.
            On failure, it sets dst to the default value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.Int16@)">
            <summary>
            This produces zero for empty. It returns false if the text is not parsable or overflows.
            On failure, it sets dst to the default value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.Int32@)">
            <summary>
            This produces zero for empty. It returns false if the text is not parsable or overflows.
            On failure, it sets dst to the defualt value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.Int64@)">
            <summary>
            This produces zero for empty. It returns false if the text is not parsable or overflows.
            On failure, it sets dst to the default value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParseNonNegative(System.ReadOnlySpan{System.Char},System.Int64@)">
            <summary>
            Returns false if the text is not parsable as an non-negative long or overflows.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParseSigned(System.Int64,System.ReadOnlyMemory{System.Char}@,System.Nullable{System.Int64}@)">
            <summary>
            This produces zero for empty. It returns false if the text is not parsable as a signed integer
            or the result overflows. The min legal value is -max. The NA value null.
            When it returns false, result is set to the NA value. The result can be NA on true return,
            since some representations of NA are not considered parse failure.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.Single@)">
            <summary>
            This produces zero for empty, or NaN depending on the <see cref="F:Microsoft.ML.Internal.Utilities.DoubleParser.OptionFlags.EmptyAsNaN"/> used.
            It returns false if the text is not parsable.
            On failure, it sets dst to the NA value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.Double@)">
            <summary>
            This produces zero for empty, or NaN depending on the <see cref="F:Microsoft.ML.Internal.Utilities.DoubleParser.OptionFlags.EmptyAsNaN"/> used.
            It returns false if the text is not parsable.
            On failure, it sets dst to the NA value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.TimeSpan@)">
            <summary>
            This produces default for empty.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.DateTime@)">
            <summary>
            This produces default for empty.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.DateTimeOffset@)">
            <summary>
            This produces default for empty.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.Conversion.Conversions.TryParse(System.ReadOnlyMemory{System.Char}@,System.Boolean@)">
            <summary>
            Try parsing a TX to a BL. This returns false for NA (span.IsMissing).
            Otherwise, it trims the span, then succeeds on all casings of the strings:
            * false, f, no, n, 0, -1, - => false
            * true, t, yes, y, 1, +1, + => true
            Empty string (but not missing string) succeeds and maps to false.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewTypeManager">
            <summary>
            A singleton class for managing the map between ML.NET <see cref="T:Microsoft.ML.Data.DataViewType"/> and C# <see cref="T:System.Type"/>.
            To support custom column type in <see cref="T:Microsoft.ML.IDataView"/>, the column's underlying type (e.g., a C# class's type)
            should be registered with a class derived from <see cref="T:Microsoft.ML.Data.DataViewType"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.DataViewTypeManager._bannedRawTypes">
            <summary>
            Types have been used in ML.NET type systems. They can have multiple-to-one type mapping.
            For example, UInt32 and Key can be mapped to <see langword="uint"/>. This class enforces one-to-one mapping for all
            user-registered types.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.DataViewTypeManager._rawTypeToDataViewTypeMap">
            <summary>
            Mapping from a <see cref="T:System.Type"/> plus its <see cref="T:System.Attribute"/>s to a <see cref="T:Microsoft.ML.Data.DataViewType"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.DataViewTypeManager._dataViewTypeToRawTypeMap">
            <summary>
            Mapping from a <see cref="T:Microsoft.ML.Data.DataViewType"/> to a <see cref="T:System.Type"/> plus its <see cref="T:System.Attribute"/>s.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.DataViewTypeManager._lock">
            <summary>
            The lock that one should acquire if the state of <see cref="T:Microsoft.ML.Data.DataViewTypeManager"/> will be accessed or modified.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewTypeManager.GetDataViewType(System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Returns the <see cref="T:Microsoft.ML.Data.DataViewType"/> registered for <paramref name="type"/> and its <paramref name="typeAttributes"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewTypeManager.Knows(System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            If <paramref name="type"/> has been registered with a <see cref="T:Microsoft.ML.Data.DataViewType"/>, this function returns <see langword="true"/>.
            Otherwise, this function returns <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewTypeManager.Knows(Microsoft.ML.Data.DataViewType)">
            <summary>
            If <paramref name="dataViewType"/> has been registered with a <see cref="T:System.Type"/>, this function returns <see langword="true"/>.
            Otherwise, this function returns <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewTypeManager.Register(Microsoft.ML.Data.DataViewType,System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            This function tells that <paramref name="dataViewType"/> should be representation of data in <paramref name="type"/> in
            ML.NET's type system. The registered <paramref name="type"/> must be a standard C# object's type.
            </summary>
            <param name="type">Native type in C#.</param>
            <param name="dataViewType">The corresponding type of <paramref name="type"/> in ML.NET's type system.</param>
            <param name="typeAttributes">The <see cref="T:System.Attribute"/>s attached to <paramref name="type"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewTypeManager.Register(Microsoft.ML.Data.DataViewType,System.Type,Microsoft.ML.Data.DataViewTypeAttribute)">
            <summary>
            This function tells that <paramref name="dataViewType"/> should be representation of data in <paramref name="type"/> in
            ML.NET's type system. The registered <paramref name="type"/> must be a standard C# object's type.
            </summary>
            <param name="type">Native type in C#.</param>
            <param name="dataViewType">The corresponding type of <paramref name="type"/> in ML.NET's type system.</param>
            <param name="typeAttribute">The <see cref="T:Microsoft.ML.Data.DataViewTypeAttribute"/> attached to <paramref name="type"/>.</param>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes">
            <summary>
            An instance of <see cref="T:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes"/> represents an unique key of its <see cref="P:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes.TargetType"/> and <see cref="F:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes._associatedAttribute"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes.TargetType">
            <summary>
            The underlying type.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes._associatedAttribute">
            <summary>
            The underlying type's attributes. Together with <see cref="P:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes.TargetType"/>, <see cref="F:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes._associatedAttribute"/> uniquely defines
            a key when using <see cref="T:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes"/> as the key type in <see cref="T:System.Collections.Generic.Dictionary`2"/>. Note that the
            uniqueness is determined by <see cref="M:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes.Equals(System.Object)"/> and <see cref="M:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes.GetHashCode"/> below.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewTypeManager.TypeWithAttributes.GetHashCode">
            <summary>
            This function computes a hashing ID from <see name="TargetType"/> and attributes attached to it.
            If a type is defined as a member in a <see langword="class"/>, <see name="Attributes"/> can be obtained by calling
            <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.GetTempColumnName(Microsoft.ML.DataViewSchema,System.String)">
            <summary>
            Generate a unique temporary column name for the given schema.
            Use tag to independently create multiple temporary, unique column
            names for a single transform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.GetTempColumnNames(Microsoft.ML.DataViewSchema,System.Int32,System.String)">
            <summary>
            Generate n unique temporary column names for the given schema.
            Use tag to independently create multiple temporary, unique column
            names for a single transform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.ComputeRowCount(Microsoft.ML.IDataView)">
            <summary>
            Get the row count from the input view by any means necessary, even explicit enumeration
            and counting if <see cref="M:Microsoft.ML.IDataView.GetRowCount"/> insists on returning <c>null</c>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.GetThreadCount(System.Int32,System.Boolean)">
            <summary>
            Get the target number of threads to use, given an indicator of thread count.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.TryCreateConsolidatingCursor(Microsoft.ML.DataViewRowCursor@,Microsoft.ML.IDataView,System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column},Microsoft.ML.Runtime.IHost,System.Random)">
            <summary>
            Try to create a cursor set from upstream and consolidate it here. The host determines
            the target cardinality of the cursor set.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.CreateSplitCursors(Microsoft.ML.Runtime.IChannelProvider,Microsoft.ML.DataViewRowCursor,System.Int32)">
            <summary>
            From the given input cursor, split it into a cursor set with the given
            cardinality. If not all the active columns are cachable, this will only
            produce the given input cursor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.AllCacheable(Microsoft.ML.DataViewSchema,System.Func{Microsoft.ML.DataViewSchema.Column,System.Boolean})">
            <summary>
            Return whether all the active columns, as determined by the predicate, are
            cachable - either primitive types or vector types.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.AllCacheable(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Return whether all the active columns, as determined by the predicate, are
            cachable - either primitive types or vector types.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.IsCacheable(Microsoft.ML.Data.DataViewType)">
            <summary>
            Determine whether the given type is cachable - either a primitive type or a vector type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.SameSchemaAndActivity(Microsoft.ML.DataViewRowCursor[])">
            <summary>
            Tests whether the cursors are mutually compatible for consolidation,
            that is, they all are non-null, have the same schemas, and the same
            set of columns are active.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.ConsolidateGeneric(Microsoft.ML.Runtime.IChannelProvider,Microsoft.ML.DataViewRowCursor[],System.Int32)">
            <summary>
            Given a parallel cursor set, this consolidates them into a single cursor. The batchSize
            is a hint used for efficiency.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewUtils.Splitter">
             <summary>
             A convenience class to facilitate the creation of a split, as well as a convenient
             place to store shared resources that can be reused among multiple splits of a cursor
             with the same schema. Since splitting also returns a consolidator, this also contains
             a consolidating logic.
            
             In a very rough sense, both the splitters and consolidators are written in the same way:
             For all input cursors, and all active columns, an "in pipe" is created. A worker thread
             per input cursor busily retrieves values from the cursors and stores them in the "in
             pipe." At appropriate times, "batch" objects are synthesized from the inputs consumed
             thusfar, and inserted into a blocking collection. The output cursor or cursors likewise
             have a set of "out pipe" instances, one per each of the active columns, through which
             successive batches are presented for consumption by the user of the output cursors. Of
             course, both split and consolidate have many details from which they differ, for example, the
             consolidator must accept batches as they come and reconcile them among multiple inputs,
             while the splitter is more free.
            
             It is ideal if a data view that could be split retains one of these objects itself,
             so that multiple splittings will have the capability of sharing buffers from cursoring
             to cursoring, but this is not required.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewUtils.Splitter.ExtraIndex">
            <summary>
            Pipes, in addition to column values, will also communicate extra information
            enumerated within this. This enum serves the purpose of providing nice readable
            indices to these "extra" information in pipes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.CreateInPipe``1(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            An in pipe creator intended to be used from the splitter only.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.CreateIdInPipe(Microsoft.ML.DataViewRow)">
            <summary>
            An in pipe creator intended to be used from the splitter only.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewUtils.Splitter.InPipe">
            <summary>
            There is one of these created per input cursor, per "channel" of information
            (necessary channels include values from active columns, as well as additional
            side information), in both splitting and consolidating. This is a running buffer
            of the input cursor's values. It is used to create <see cref="T:Microsoft.ML.Data.DataViewUtils.Splitter.BatchColumn"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.InPipe.CreateOutPipe(Microsoft.ML.Data.DataViewType)">
            <summary>
            Creates an out pipe corresponding to the in pipe. This is useful for the splitter,
            when we are creating an in pipe.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewUtils.Splitter.BatchColumn">
            <summary>
            These are objects continuously created by the <see cref="T:Microsoft.ML.Data.DataViewUtils.Splitter.InPipe"/> to spin off the
            values they have collected. They are collected into a <see cref="T:Microsoft.ML.Data.DataViewUtils.Splitter.Batch"/>
            object, and eventually one is consumed by an <see cref="T:Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewUtils.Splitter.Batch">
             <summary>
             This holds a collection of <see cref="T:Microsoft.ML.Data.DataViewUtils.Splitter.BatchColumn"/> objects, which together hold all
             the values from a set of rows from the input cursor. These are produced as needed
             by the input cursor reader, and consumed by each of the output cursors.
            
             This class also serves a secondary role in marshalling exceptions thrown in the workers
             producing batches, into the threads consuming these batches.
             <see cref="P:Microsoft.ML.Data.DataViewUtils.Splitter.Batch.HasException"/> lets us know if this is one of these "special" batches.
             If it is, then the <see cref="M:Microsoft.ML.Data.DataViewUtils.Splitter.Batch.SetAll(Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe[])"/> method will throw whenever it is called, by the
             consumer of the batches.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.Batch.#ctor(Microsoft.ML.Internal.Utilities.MadeObjectPool{Microsoft.ML.Data.DataViewUtils.Splitter.BatchColumn[]},Microsoft.ML.Data.DataViewUtils.Splitter.BatchColumn[],System.Int32,System.Int64)">
            <summary>
            Construct a batch object to communicate the <see cref="T:Microsoft.ML.Data.DataViewUtils.Splitter.BatchColumn"/> objects to consumers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.Batch.#ctor(System.Exception)">
            <summary>
            Construct a batch object to communicate that something went wrong. In this case all other fields
            will have default values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.Batch.SetAll(Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe[])">
             <summary>
             Gives all of the batch columns to the output pipes. This should be called only once,
             per batch object, because the the batch columns will be returned to the pool.
            
             If this was an exception bearing batch, that exception will be propagated and thrown
             in this.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe">
            <summary>
            This helps a cursor present the results of a <see cref="T:Microsoft.ML.Data.DataViewUtils.Splitter.BatchColumn"/>. Practically its role
            really is to just provide a stable delegate for the <see cref="M:Microsoft.ML.DataViewRow.GetGetter``1(Microsoft.ML.DataViewSchema.Column)"/>.
            There is one of these created per column, per output cursor, i.e., in splitting
            there are <c>n</c> of these created per column, and when consolidating only one of these
            is created per column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe.CreateInPipe(System.Delegate)">
            <summary>
            Creates an in pipe corresponding to this out pipe. Useful for the consolidator,
            when we are creating many in pipes from a single out pipe.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe.Set(Microsoft.ML.Data.DataViewUtils.Splitter.BatchColumn)">
            <summary>
            Sets this <see cref="T:Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe"/> to start presenting the output of a batch column.
            Note that this positions the output on the first item, not before the first item,
            so it is not necessary to call <see cref="M:Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe.MoveNext"/> to get the first value.
            </summary>
            <param name="batchCol">The batch column whose values we should start presenting.</param>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe.MoveNext">
            <summary>
            Moves to the next value. Note that this should be called only when we are certain that
            we have a next value to move to, that is, when <see cref="P:Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe.Remaining"/> is non-zero.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewUtils.Splitter.Cursor">
            <summary>
            A cursor used by both the splitter and consolidator, that iteratively consumes
            <see cref="P:Microsoft.ML.Data.DataViewUtils.Splitter.Cursor.Batch"/> objects from the input blocking collection, and yields the
            values stored therein through the help of <see cref="T:Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe"/> objects.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.Cursor.#ctor(Microsoft.ML.Runtime.IChannelProvider,Microsoft.ML.DataViewSchema,System.Int32[],System.Int32[],Microsoft.ML.Data.DataViewUtils.Splitter.OutPipe[],System.Collections.Concurrent.BlockingCollection{Microsoft.ML.Data.DataViewUtils.Splitter.Batch},System.Action)">
            <summary>
            Constructs one of the split cursors.
            </summary>
            <param name="provider">The channel provider.</param>
            <param name="schema">The schema.</param>
            <param name="activeToCol">The mapping from active indices, to input column indices.</param>
            <param name="colToActive">The reverse mapping from input column indices to active indices,
            where -1 is present if this column is not active.</param>
            <param name="pipes">The output pipes, one per channel of information</param>
            <param name="batchInputs"></param>
            <param name="quitAction"></param>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.Splitter.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.DataViewUtils.SynchronousConsolidatingCursor">
            <summary>
            This is a consolidating cursor that is usable even with cursors that are uncachable,
            at the cost of being totally synchronous, that is, there is no parallel benefit from
            having split the input cursors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.SynchronousConsolidatingCursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.DataViewUtils.SynchronousConsolidatingCursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.IMultiStreamSource">
            <summary>
            An interface for exposing some number of items that can be opened for reading.
            </summary>
            REVIEW: Reconcile this with the functionality exposed by IHostEnvironment. For example,
            we could simply replace this with an array of IFileHandle.
        </member>
        <member name="P:Microsoft.ML.Data.IMultiStreamSource.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IMultiStreamSource.GetPathOrNull(System.Int32)">
            <summary>
            Return a string representing the "path" to the index'th stream. May return null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IMultiStreamSource.Open(System.Int32)">
            <summary>
            Opens the indicated item and returns a readable stream on it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IMultiStreamSource.OpenTextReader(System.Int32)">
            <summary>
            Opens the indicated item and returns a text stream reader on it.
            </summary>
            REVIEW: Consider making this an extension method.
        </member>
        <member name="T:Microsoft.ML.Data.SignatureDataLoader">
            <summary>
            Signature for creating an <see cref="T:Microsoft.ML.Data.ILegacyDataLoader"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SignatureLoadDataLoader">
            <summary>
            Signature for loading an <see cref="T:Microsoft.ML.Data.ILegacyDataLoader"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ILegacyDataLoader">
            <summary>
            Interface for a data loader. An <see cref="T:Microsoft.ML.Data.ILegacyDataLoader"/> can save its model information
            and is instantiatable from arguments and an <see cref="T:Microsoft.ML.Data.IMultiStreamSource"/> .
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IDataSaver.IsColumnSavable(Microsoft.ML.Data.DataViewType)">
            <summary>
            Check if the column can be saved.
            </summary>
            <returns>True if the column is savable.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.IDataSaver.SaveData(System.IO.Stream,Microsoft.ML.IDataView,System.Int32[])">
            <summary>
            Save the data into the given stream. The stream should be kept open.
            </summary>
            <param name="stream">The stream that the data will be written.</param>
            <param name="data">The data to be saved.</param>
            <param name="cols">The list of column indices to be saved.</param>
        </member>
        <member name="T:Microsoft.ML.Data.SignatureDataTransform">
            <summary>
            Signature for creating an <see cref="T:Microsoft.ML.Data.IDataTransform"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SignatureLoadDataTransform">
            <summary>
            Signature for loading an <see cref="T:Microsoft.ML.Data.IDataTransform"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IDataTransform">
            <summary>
            Interface for a data transform. An <see cref="T:Microsoft.ML.Data.IDataTransform"/> can save its model information
            and is instantiatable from arguments and an input <see cref="T:Microsoft.ML.IDataView"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ITransformTemplate">
            <summary>
            Data transforms need to be able to apply themselves to a different input IDataView.
            This interface allows them to implement custom rebinding logic.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IRowSeekable">
            <summary>
            Represents a data view that supports random access to a specific row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.RowSeeker">
            <summary>
            Represents a row seeker with random access that can retrieve a specific row by the row index.
            For <see cref="T:Microsoft.ML.Data.RowSeeker"/>, when the state is valid (that is when <see cref="M:Microsoft.ML.Data.RowSeeker.MoveTo(System.Int64)"/>
            returns <see langword="true"/>), it returns the current row index. Otherwise it's -1.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowSeeker.MoveTo(System.Int64)">
            <summary>
            Moves the seeker to a row at a specific row index.
            If the row index specified is out of range (less than zero or not less than the
            row count), it returns false and sets its Position property to -1.
            </summary>
            <param name="rowIndex">The row index to move to.</param>
            <returns>True if a row with specified index is found; false otherwise.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.ITransposeDataView">
             <summary>
             A view of data where columns can optionally be accessed slot by slot, as opposed to row
             by row in a typical dataview. A slot-accessible column can be accessed with a slot-by-slot
             cursor via an <see cref="T:Microsoft.ML.Data.SlotCursor"/> returned by <see cref="M:Microsoft.ML.Data.ITransposeDataView.GetSlotCursor(System.Int32)"/>
             (naturally, as opposed to row-by-row through an <see cref="T:Microsoft.ML.DataViewRowCursor"/>). This interface
             is intended to be implemented by classes that want to provide an option for an alternate
             way of accessing the data stored in a <see cref="T:Microsoft.ML.IDataView"/>.
            
             The interface only advertises that columns may be accessible in slot-wise fashion. The i-th column
             is accessible in this fashion iff <see cref="M:Microsoft.ML.Data.ITransposeDataView.GetSlotType(System.Int32)"/> with col=i doesn't return <see langword="null"/>.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ITransposeDataView.GetSlotCursor(System.Int32)">
            <summary>
            Presents a cursor over the slots of a transposable column, or throws if the column
            is not transposable.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ITransposeDataView.GetSlotType(System.Int32)">
            <summary>
            <see cref="M:Microsoft.ML.Data.ITransposeDataView.GetSlotType(System.Int32)"/> (input argument is named col) specifies the type of all values at the col-th column of
            <see cref="T:Microsoft.ML.IDataView"/>.  For example, if <see cref="P:Microsoft.ML.IDataView.Schema"/>[i] is a scalar float column, then
            <see cref="M:Microsoft.ML.Data.ITransposeDataView.GetSlotType(System.Int32)"/> with col=i may return a <see cref="T:Microsoft.ML.Data.VectorDataViewType"/> whose <see cref="P:Microsoft.ML.Data.VectorDataViewType.ItemType"/>
            field is <see cref="P:Microsoft.ML.Data.NumberDataViewType.Single"/>. If the i-th column can't be iterated column-wisely, this function may
            return <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.GetGetterAsDelegate(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Returns an appropriate <see cref="T:Microsoft.ML.ValueGetter`1"/> for a row given an active column
            index, but as a delegate. The type parameter for the delegate will correspond to the
            raw type of the column.
            </summary>
            <param name="row">The row to get the getter for</param>
            <param name="col">The column index, which must be active on that row</param>
            <returns>The getter as a delegate</returns>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.GetGetterAs(Microsoft.ML.Data.DataViewType,Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Given a destination type, <see cref="T:Microsoft.ML.DataViewRow"/>, and column index, return a ValueGetter for the column
            with a conversion to typeDst, if needed. This is a weakly typed version of
            <see cref="M:Microsoft.ML.Data.RowCursorUtils.GetGetterAs``1(Microsoft.ML.Data.DataViewType,Microsoft.ML.DataViewRow,System.Int32)"/>.
            </summary>
            <seealso cref="M:Microsoft.ML.Data.RowCursorUtils.GetGetterAs``1(Microsoft.ML.Data.DataViewType,Microsoft.ML.DataViewRow,System.Int32)"/>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.GetGetterAs``1(Microsoft.ML.Data.DataViewType,Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Given a destination type, <see cref="T:Microsoft.ML.DataViewRow"/>, and column index, return a ValueGetter{TDst} for the column
            with a conversion to typeDst, if needed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.GetGetterAsStringBuilder(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Given a <see cref="T:Microsoft.ML.DataViewRow"/>, and column index, return a function that utilizes the
            <see cref="M:Microsoft.ML.Data.Conversion.Conversions.GetStringConversion``1(Microsoft.ML.Data.DataViewType)"/> on the input
            rows to map the values in the column, whatever type they may be, into a string
            builder. This method will obviously succeed only if there is a string conversion
            into the required type. This method can be useful if you want to output a value
            as a string in a generic way, but don't really care how you do it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.GetVecGetterAs(Microsoft.ML.Data.PrimitiveDataViewType,Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Given the item type, typeDst, a row, and column index, return a ValueGetter for the vector-valued
            column with a conversion to a vector of typeDst, if needed. This is the weakly typed version of
            <see cref="M:Microsoft.ML.Data.RowCursorUtils.GetVecGetterAs``1(Microsoft.ML.Data.PrimitiveDataViewType,Microsoft.ML.DataViewRow,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.GetVecGetterAs``1(Microsoft.ML.Data.PrimitiveDataViewType,Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            Given the item type, typeDst, a row, and column index, return a ValueGetter{VBuffer{TDst}} for the
            vector-valued column with a conversion to a vector of typeDst, if needed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.GetVecGetterAs``1(Microsoft.ML.Data.PrimitiveDataViewType,Microsoft.ML.Data.SlotCursor)">
            <summary>
            Given the item type, typeDst, and a slot cursor, return a ValueGetter{VBuffer{TDst}} for the
            vector-valued column with a conversion to a vector of typeDst, if needed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.RowCursorUtils.GetterFactory">
            <summary>
            A convenience wrapper to generalize the operation of fetching a <see cref="T:Microsoft.ML.ValueGetter`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.GetIsNewGroupDelegate(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            This method returns a small helper delegate that returns whether we are at the start
            of a new group, that is, we have just started, or the key-value at indicated column
            is different than it was, in the last call. This is practically useful for determining
            group boundaries. Note that the delegate will return true on the first row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.Fetch``1(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.DataViewRow,System.String)">
            <summary>
            Fetches the value of the column by name, in the given row.
            Used by the evaluators to retrieve the metrics from the results IDataView.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.RowAsDataView(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.DataViewRow)">
            <summary>
            Given a row, returns a one-row data view. This is useful for cases where you have a row, and you
            wish to use some facility normally only exposed to dataviews. (For example, you have an <see cref="T:Microsoft.ML.DataViewRow"/>
            but want to save it somewhere using a <see cref="T:Microsoft.ML.Data.IO.BinarySaver"/>.)
            Note that it is not possible for this method to ensure that the input <paramref name="row"/> does not
            change, so users of this convenience must take care of what they do with the input row or the data
            source it came from, while the returned dataview is potentially being used.
            </summary>
            <param name="env">An environment used to create the host for the resulting data view</param>
            <param name="row">A row, whose columns must all be active</param>
            <returns>A single-row data view incorporating that row</returns>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.FromColumnsToPredicate(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column},Microsoft.ML.DataViewSchema)">
            <summary>
            Given a collection of <see cref="T:Microsoft.ML.DataViewSchema.Column"/>, that is a subset of the Schema of the data, create a predicate,
            that when passed a column index, will return <langword>true</langword> or <langword>false</langword>, based on whether
            the column with the given <see cref="P:Microsoft.ML.DataViewSchema.Column.Index"/> is part of the <paramref name="columnsNeeded"/>.
            </summary>
            <param name="columnsNeeded">The subset of columns from the <see cref="T:Microsoft.ML.DataViewSchema"/> that are needed from this <see cref="T:Microsoft.ML.DataViewRowCursor"/>.</param>
            <param name="sourceSchema">The <see cref="T:Microsoft.ML.DataViewSchema"/> from where the columnsNeeded originate.</param>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.OneRowDataView.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.RowCursorUtils.OneRowDataView.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.RowCursorUtils.FetchValueStateError">
            <summary>
            This is an error message meant to be used in the situation where a user calls a delegate as returned from
            <see cref="M:Microsoft.ML.DataViewRow.GetIdGetter"/> or <see cref="M:Microsoft.ML.DataViewRow.GetGetter``1(Microsoft.ML.DataViewSchema.Column)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SchemaAnnotationsExtensions">
            <summary>
            Extension methods to facilitate easy consumption of popular contents of <see cref="P:Microsoft.ML.DataViewSchema.Column.Annotations"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SchemaAnnotationsExtensions.HasSlotNames(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns <see langword="true"/> if the input column is of <see cref="T:Microsoft.ML.Data.VectorDataViewType"/>, and that has
            <c>SlotNames</c> annotation of a <see cref="T:Microsoft.ML.Data.VectorDataViewType"/> whose <see cref="P:Microsoft.ML.Data.VectorDataViewType.ItemType"/>
            is of <see cref="T:Microsoft.ML.Data.TextDataViewType"/>, and further whose <see cref="P:Microsoft.ML.Data.VectorDataViewType.Size"/> matches
            this input vector size.
            </summary>
            <param name="column">The column whose <see cref="P:Microsoft.ML.DataViewSchema.Column.Annotations"/> will be queried.</param>
            <seealso cref="M:Microsoft.ML.Data.SchemaAnnotationsExtensions.GetSlotNames(Microsoft.ML.DataViewSchema.Column,Microsoft.ML.Data.VBuffer{System.ReadOnlyMemory{System.Char}}@)"/>
        </member>
        <member name="M:Microsoft.ML.Data.SchemaAnnotationsExtensions.GetSlotNames(Microsoft.ML.DataViewSchema.Column,Microsoft.ML.Data.VBuffer{System.ReadOnlyMemory{System.Char}}@)">
            <summary>
            Stores the slots names of the input column into the provided buffer, if there are slot names.
            Otherwise it will throw an exception.
            </summary>
            <seealso cref="M:Microsoft.ML.Data.SchemaAnnotationsExtensions.HasSlotNames(Microsoft.ML.DataViewSchema.Column)"/>
            <param name="column">The column whose <see cref="P:Microsoft.ML.DataViewSchema.Column.Annotations"/> will be queried.</param>
            <param name="slotNames">The <see cref="T:Microsoft.ML.Data.VBuffer`1"/> into which the slot names will be stored.</param>
        </member>
        <member name="M:Microsoft.ML.Data.SchemaAnnotationsExtensions.HasKeyValues(Microsoft.ML.DataViewSchema.Column,Microsoft.ML.Data.PrimitiveDataViewType)">
            <summary>
            Returns <see langword="true"/> if the input column is of <see cref="T:Microsoft.ML.Data.VectorDataViewType"/>, and that has
            <c>SlotNames</c> annotation of a <see cref="T:Microsoft.ML.Data.VectorDataViewType"/> whose <see cref="P:Microsoft.ML.Data.VectorDataViewType.ItemType"/>
            is of <see cref="T:Microsoft.ML.Data.TextDataViewType"/>, and further whose <see cref="P:Microsoft.ML.Data.VectorDataViewType.Size"/> matches
            this input vector size.
            </summary>
            <param name="column">The column whose <see cref="P:Microsoft.ML.DataViewSchema.Column.Annotations"/> will be queried.</param>
            <param name="keyValueItemType">The type of the individual key-values to query. A common,
            though not universal, type to provide is <see cref="P:Microsoft.ML.Data.TextDataViewType.Instance"/>, so if left unspecified
            this will be assumed to have the value <see cref="P:Microsoft.ML.Data.TextDataViewType.Instance"/>.</param>
            <seealso cref="M:Microsoft.ML.Data.SchemaAnnotationsExtensions.GetKeyValues``1(Microsoft.ML.DataViewSchema.Column,Microsoft.ML.Data.VBuffer{``0}@)"/>
        </member>
        <member name="M:Microsoft.ML.Data.SchemaAnnotationsExtensions.GetKeyValues``1(Microsoft.ML.DataViewSchema.Column,Microsoft.ML.Data.VBuffer{``0}@)">
            <summary>
            Stores the key values of the input column into the provided buffer, if this is of key type and whose
            key values are of <see cref="P:Microsoft.ML.Data.VectorDataViewType.ItemType"/> whose <see cref="P:Microsoft.ML.Data.DataViewType.RawType"/> matches
            <typeparamref name="TValue"/>. If there is no matching key valued annotation this will throw an exception.
            </summary>
            <typeparam name="TValue">The type of the key values.</typeparam>
            <param name="column">The column whose <see cref="P:Microsoft.ML.DataViewSchema.Column.Annotations"/> will be queried.</param>
            <param name="keyValues">The <see cref="T:Microsoft.ML.Data.VBuffer`1"/> into which the key values will be stored.</param>
        </member>
        <member name="M:Microsoft.ML.Data.SchemaAnnotationsExtensions.IsNormalized(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns <see langword="true"/> if and only if <paramref name="column"/> has <c>IsNormalized</c> annotation
            set to <see langword="true"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.KeyTypeAttribute">
            <summary>
            Allow member to be marked as a <see cref="T:Microsoft.ML.Data.KeyDataViewType"/>.
            </summary>
            <remarks>
            Can be applied only for member of following types: <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.UInt64"/>
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Data.KeyTypeAttribute.#ctor">
            <summary>
            Marks member as <see cref="T:Microsoft.ML.Data.KeyDataViewType"/>.
            </summary>
            <remarks>
            Cardinality of <see cref="T:Microsoft.ML.Data.KeyDataViewType"/> would be maximum legal value of member type.
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Data.KeyTypeAttribute.#ctor(System.UInt64)">
            <summary>
            Marks member as <see cref="T:Microsoft.ML.Data.KeyDataViewType"/> and specifies <see cref="T:Microsoft.ML.Data.KeyDataViewType"/> cardinality.
            In case of the attribute being used with int types, the <paramref name="count"/> should be set to one more than
            the maximum value to account for counting starting at 1 (0 is reserved for the missing KeyType). E.g the cardinality of the
            0-9 range is 10.
            If the values are outside of the specified cardinality they will be mapped to the missing value representation: 0.
            </summary>
            <param name="count">Cardinality of <see cref="T:Microsoft.ML.Data.KeyDataViewType"/>.</param>
        </member>
        <member name="P:Microsoft.ML.Data.KeyTypeAttribute.KeyCount">
            <summary>
            The key count.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.VectorTypeAttribute">
            <summary>
            Allows a member to be marked as a <see cref="T:Microsoft.ML.Data.VectorDataViewType"/>, primarily allowing one to set
            the dimensionality of the resulting array.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.VectorTypeAttribute.Dims">
            <summary>
            The length of the vectors from this vector valued field.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.VectorTypeAttribute.#ctor">
            <summary>
            Mark member as single-dimensional array with unknown size.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.VectorTypeAttribute.#ctor(System.Int32)">
            <summary>
            Mark member as single-dimensional array with specified size.
            </summary>
            <param name="size">Expected size of array. A zero value indicates that the vector type is considered to have unknown length.</param>
        </member>
        <member name="M:Microsoft.ML.Data.VectorTypeAttribute.#ctor(System.Int32[])">
            <summary>
            Mark member with expected dimensions of array. Notice that this attribute is expected to be added to one dimensional arrays,
            and it shouldn't be added to multidimensional arrays. Internally, ML.NET will use the shape information provided as the
            "dimensions" param of this constructor, to use it as a multidimensional array.
            </summary>
            <param name="dimensions">Dimensions of array. All values should be non-negative.
            A zero value indicates that the vector type is considered to have unknown length along that dimension.</param>
        </member>
        <member name="T:Microsoft.ML.Data.ColumnNameAttribute">
            <summary>
            Allows a member to specify <see cref="T:Microsoft.ML.IDataView"/> column name directly, as opposed to the default
            behavior of using the member name as the column name.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ColumnNameAttribute.Name">
            <summary>
            Column name.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnNameAttribute.#ctor(System.String)">
            <summary>
            Allows one to specify a name to expose this column as, as opposed to the default
            behavior of using the member name as the column name.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.NoColumnAttribute">
            <summary>
            Mark this member as not being exposed as a <see cref="T:Microsoft.ML.IDataView"/> column in the <see cref="T:Microsoft.ML.DataViewSchema"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CursorChannelAttribute">
            <summary>
            Mark a member that implements exactly IChannel as being permitted to receive
            channel information from an external channel.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.CursorChannelAttribute.TrySetCursorChannel``1(Microsoft.ML.Runtime.IExceptionContext,``0,Microsoft.ML.Runtime.IChannel)">
             <summary>
             When passed some object, and a channel, it attempts to pass the channel to the object. It
             passes the channel to the object iff the object has exactly one field marked with the
             CursorChannelAttribute, and that field implements only the IChannel interface.
            
             The function returns the modified object, as well as a boolean indicator of whether it was
             able to pass the channel to the object.
             </summary>
             <param name="obj">The object that attempts to acquire the channel.</param>
             <param name="channel">The channel to pass to the object.</param>
             <param name="ectx">The exception context.</param>
             <returns>1. A boolean indicator of whether the channel was successfully passed to the object.
             2. The object passed in (only modified by the addition of the channel to the field
             with the CursorChannelAttribute, if the channel was added successfully).</returns>
        </member>
        <member name="T:Microsoft.ML.Data.SchemaDefinition">
            <summary>
            This class defines a schema of a typed data view.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SchemaDefinition.Column">
            <summary>
            One column of the data view.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.SchemaDefinition.Column.MemberName">
            <summary>
            The name of the member the column is taken from. The API
            requires this to not be null, and a valid name of a member of
            the type for which we are creating a schema.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.SchemaDefinition.Column.ColumnName">
            <summary>
            The name of the column that's created in the data view. If this
            is null, the API uses the <see cref="P:Microsoft.ML.Data.SchemaDefinition.Column.MemberName"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.SchemaDefinition.Column.ColumnType">
            <summary>
            The column type. If this is null, the API attempts to derive a type
            from the member's type.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.SchemaDefinition.Column.Generator">
            <summary>
            The generator function. if the column is computed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SchemaDefinition.Column.AddAnnotation``1(System.String,``0,Microsoft.ML.Data.DataViewType)">
            <summary>
            Add annotation to the column.
            </summary>
            <typeparam name="T">Type of annotation being added. Types sported as entries in columns
            are also supported as entries in Annotations. Multiple annotations may be added to one column.
            </typeparam>
            <param name="kind">The string identifier of the annotation.</param>
            <param name="value">Value of annotation.</param>
            <param name="annotationType">Type of value.</param>
        </member>
        <member name="P:Microsoft.ML.Data.SchemaDefinition.Column.Annotations">
            <summary>
            Returns annotations kind and type associated with this column.
            </summary>
            <returns>A dictionary with the kind of the annotation as the key, and the
            annotation type as the associated value.</returns>
        </member>
        <member name="P:Microsoft.ML.Data.SchemaDefinition.Item(System.String)">
            <summary>
            Get or set the column definition by column name.
            If there's no such column:
            - get returns null,
            - set adds a new column.
            If there's more than one column with the same name:
            - get returns the first column,
            - set replaces the first column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SchemaDefinition.Create(System.Type,Microsoft.ML.Data.SchemaDefinition.Direction)">
            <summary>
            Create a schema definition by enumerating all public fields of the given type.
            </summary>
            <param name="userType">The type to base the schema on.</param>
            <param name="direction">Accept fields and properties based on their direction.</param>
            <returns>The generated schema definition.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.SlotCursor">
            <summary>
            A cursor that allows slot-by-slot access of data. This is to <see cref="T:Microsoft.ML.Data.ITransposeDataView"/>
            what <see cref="T:Microsoft.ML.DataViewRowCursor"/> is to <see cref="T:Microsoft.ML.IDataView"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.SlotCursor.IsGood">
            <summary>
            Whether the cursor is in a state where it can serve up data, that is, <see cref="M:Microsoft.ML.Data.SlotCursor.MoveNext"/>
            has been called and returned <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.SlotCursor.SlotIndex">
            <summary>
            The slot index. Incremented by one when <see cref="M:Microsoft.ML.Data.SlotCursor.MoveNext"/> is called and returns <see langword="true"/>.
            When initially created, or after <see cref="M:Microsoft.ML.Data.SlotCursor.MoveNext"/> returns <see langword="false"/>, this will be <c>-1</c>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SlotCursor.MoveNext">
            <summary>
            Advance to the next slot. When the cursor is first created, this method should be called to
            move to the first slot. Returns <see langword="false"/> if there are no more slots.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SlotCursor.GetSlotType">
            <summary>
            The slot type for this cursor. Note that this should equal the
            <see cref="M:Microsoft.ML.Data.ITransposeDataView.GetSlotType(System.Int32)"/> for the column from which this slot cursor
            was created.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SlotCursor.GetGetter``1">
            <summary>
            A getter delegate for the slot values. The type <typeparamref name="TValue"/> must correspond
            to the item type from <see cref="M:Microsoft.ML.Data.ITransposeDataView.GetSlotType(System.Int32)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SlotCursor.SynchronizedSlotCursor">
            <summary>
            For wrapping another slot cursor from which we get <see cref="P:Microsoft.ML.Data.SlotCursor.SynchronizedSlotCursor.SlotIndex"/> and <see cref="M:Microsoft.ML.Data.SlotCursor.SynchronizedSlotCursor.MoveNext"/>,
            but not the data or type accesors. Somewhat analogous to the <see cref="T:Microsoft.ML.Data.SynchronizedCursorBase"/>
            for <see cref="T:Microsoft.ML.DataViewRowCursor"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SlotCursor.RootSlotCursor">
            <summary>
            A useful base class for common <see cref="T:Microsoft.ML.Data.SlotCursor"/> implementations, somewhat
            analogous to the <see cref="T:Microsoft.ML.Data.RootCursorBase"/> for <see cref="T:Microsoft.ML.DataViewRowCursor"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SlotCursor.RootSlotCursor.MoveNextCore">
            <summary>
            Core implementation of <see cref="M:Microsoft.ML.Data.SlotCursor.RootSlotCursor.MoveNext"/>. This is called only if this method
            has not yet previously returned <see langword="false"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._sources">
            <summary>
            A collection of source column indices after removing those we want to drop. Specifically, j=_sources[i] means
            that the i-th output column in the output schema is the j-th column in the input schema.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._sourceSchema">
            <summary>
            Input schema of this transform. It's useful when determining column dependencies and other
            relations between input and output schemas.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._selectedColumnIndexes">
            <summary>
            Some column indexes in the input schema. <see cref="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._sources"/> is computed from <see cref="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._selectedColumnIndexes"/>
            and <see cref="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._drop"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._drop">
            <summary>
            True, if this transform drops selected columns indexed by <see cref="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._selectedColumnIndexes"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings.ComputeSources(System.Boolean,System.Int32[],Microsoft.ML.DataViewSchema,System.Int32[]@)">
            <summary>
            Common method of computing <see cref="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._sources"/> from necessary parameters. This function is used in constructors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings.ComputeOutputSchema">
            <summary>
            After <see cref="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._sourceSchema"/> and <see cref="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._sources"/> are set, pick up selected columns from <see cref="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._sourceSchema"/> to create <see cref="P:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings.OutputSchema"/>
            Note that <see cref="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._sources"/> tells us what columns in <see cref="F:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings._sourceSchema"/> are put into <see cref="P:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings.OutputSchema"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Bindings.GetSourceColumnIndex(System.Int32)">
            <summary>
            Given the column index in the output schema, this function returns its source column's index in the input schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ChooseColumnsByIndexTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ChooseColumnsByIndexTransform.Options,Microsoft.ML.IDataView)">
            <summary>
            Public constructor corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ChooseColumnsByIndexTransform.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="F:Microsoft.ML.Data.AnomalyDetectionEvaluator.TopKResults">
            <summary>
            The anomaly detection evaluator outputs a data view by this name, which contains the the examples
            with the top scores in the test set. It contains the three columns listed below, with each row corresponding
            to one test example.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.AnomalyDetectionEvaluator.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String)">
            <summary>
            Evaluates scored anomaly detection data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="label">The name of the label column in <paramref name="data"/>.</param>
            <param name="score">The name of the score column in <paramref name="data"/>.</param>
            <param name="predictedLabel">The name of the predicted label column in <paramref name="data"/>.</param>
            <returns>The evaluation results for these outputs.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.EvaluatorBase`1">
            <summary>
            This is a base class for TLC evaluators. It implements both of the <see cref="T:Microsoft.ML.Data.IEvaluator"/> methods: <see cref="T:Microsoft.ML.Data.Evaluate"/> and
             <see cref="M:Microsoft.ML.Data.EvaluatorBase`1.GetPerInstanceMetricsCore(Microsoft.ML.Data.RoleMappedData)"/>. Note that the input <see cref="T:Microsoft.ML.Data.RoleMappedData"/> is assumed to contain all the column
            roles needed for evaluation, including the score column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.UnweightedAuPrcAggregator.ComputeWeightedAuPrcCore(System.Double@)">
            <summary>
            Compute the AUPRC using the "lower trapesoid" estimator, as described in the paper
            <a href="https://www.ecmlpkdd2013.org/wp-content/uploads/2013/07/aucpr_2013ecml_corrected.pdf">https://www.ecmlpkdd2013.org/wp-content/uploads/2013/07/aucpr_2013ecml_corrected.pdf</a>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.WeightedAuPrcAggregator.ComputeWeightedAuPrcCore(System.Double@)">
            <summary>
            Compute the AUPRC using the "lower trapesoid" estimator, as described in the paper
            <a href="https://www.ecmlpkdd2013.org/wp-content/uploads/2013/07/aucpr_2013ecml_corrected.pdf">https://www.ecmlpkdd2013.org/wp-content/uploads/2013/07/aucpr_2013ecml_corrected.pdf</a>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.CheckColumnTypes(Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Checks the column types of the evaluator's input columns. The base class implementation checks only the type
            of the weight column, and all other columns should be checked by the deriving classes in <see cref="M:Microsoft.ML.Data.EvaluatorBase`1.CheckCustomColumnTypesCore(Microsoft.ML.Data.RoleMappedSchema)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.CheckScoreAndLabelTypes(Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Check that the types of the score and label columns are as expected by the evaluator. The <see cref="T:Microsoft.ML.Data.RoleMappedSchema"/>
            is assumed to contain the label column (if it exists) and the score column.
            Access the label column with the <see cref="P:Microsoft.ML.Data.RoleMappedSchema.Label"/> property, and the score column with the
            <see cref="M:Microsoft.ML.Data.RoleMappedSchema.GetUniqueColumn(Microsoft.ML.Data.RoleMappedSchema.ColumnRole)"/> or <see cref="M:Microsoft.ML.Data.RoleMappedSchema.GetColumns(Microsoft.ML.Data.RoleMappedSchema.ColumnRole)"/> methods.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.CheckCustomColumnTypesCore(Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Check the types of any other columns needed by the evaluator. Only override if the evaluator uses
            columns other than label, score and weight.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.GetActiveColsCore(Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Used in the Evaluate() method, to get the predicate for cursoring over the data.
            The base class implementation activates the score column, the label column if it exists, the weight column if it exists
            and the stratification columns.
            Override if other input columns need to be activated.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.GetAggregator(Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Get an aggregator for the specific evaluator given the current RoleMappedSchema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.GetAggregatorDictionaries(Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            For each stratification column, get an aggregator dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.GetAggregatorConsolidationFuncs(`0,Microsoft.ML.Data.EvaluatorBase{`0}.AggregatorDictionaryBase[],System.Action{System.UInt32,System.ReadOnlyMemory{System.Char},`0}@,System.Func{System.Collections.Generic.Dictionary{System.String,Microsoft.ML.IDataView}}@)">
            <summary>
            This method returns two functions used to create the data views of metrics computed by the different
            aggregators (the overall one, and any stratified ones if they exist). The <paramref name="addAgg"/>
            function is called for every aggregator, and it is where the aggregators should finish their aggregations
            and the aggregator results should be stored. The <paramref name="consolidate"/> function
            is called after <paramref name="addAgg"/> has been called on all the aggregators, and it returns
            the dictionary of metric data views.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.EvaluatorBase`1.AggregatorBase">
            <summary>
            This is a helper class for evaluators deriving from EvaluatorBase, used for computing aggregate metrics.
            Aggregators should keep track of the number of passes done. The <see cref="M:Microsoft.ML.Data.EvaluatorBase`1.AggregatorBase.InitializeNextPass(Microsoft.ML.DataViewRow,Microsoft.ML.Data.RoleMappedSchema)"/> method should get
            the input getters of the given <see cref="T:Microsoft.ML.DataViewRow"/> that are needed for the current pass, assuming that all the needed column
            information is stored in the given <see cref="T:Microsoft.ML.Data.RoleMappedSchema"/>.
            In <see cref="M:Microsoft.ML.Data.EvaluatorBase`1.AggregatorBase.ProcessRow"/> the aggregator should call the getters once, and process the input as needed.
            <see cref="M:Microsoft.ML.Data.EvaluatorBase`1.AggregatorBase.FinishPass"/> increments the pass count after each pass.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.AggregatorBase.InitializeNextPass(Microsoft.ML.DataViewRow,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            This method should get the getters of the new <see cref="T:Microsoft.ML.DataViewRow"/> that are needed for the next pass.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.AggregatorBase.ProcessRow">
            <summary>
            Call the getters once, and process the input as necessary.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.AggregatorBase.FinishPass">
            <summary>
            Increment the pass count. Return true if additional passes are needed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.AggregatorBase.GetWarnings(System.Collections.Generic.Dictionary{System.String,Microsoft.ML.IDataView},Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Returns a dictionary from metric kinds to data views containing the metrics.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.AggregatorDictionaryBase.Reset(Microsoft.ML.DataViewRow)">
            <summary>
            Gets the stratification column getter for the new <see cref="T:Microsoft.ML.DataViewRow"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.AggregatorDictionaryBase.Get">
            <summary>
            This method calls the getter of the stratification column, and returns the aggregator corresponding to
            the stratification value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluatorBase`1.AggregatorDictionaryBase.GetAll">
            <summary>
            This method returns the aggregators corresponding to all the stratification values seen so far.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.BinaryClassifierEvaluator.PrCurve">
            <summary>
            Binary classification evaluator outputs a data view with this name, which contains the p/r data.
            It contains the columns listed below, and in case data also contains a weight column, it contains
            also columns for the weighted values.
            and false positive rate.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BinaryClassifierEvaluator.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String,System.String)">
            <summary>
            Evaluates scored binary classification data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="label">The name of the label column in <paramref name="data"/>.</param>
            <param name="score">The name of the score column in <paramref name="data"/>.</param>
            <param name="probability">The name of the probability column in <paramref name="data"/>, the calibrated version of <paramref name="score"/>.</param>
            <param name="predictedLabel">The name of the predicted label column in <paramref name="data"/>.</param>
            <returns>The evaluation results for these calibrated outputs.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.BinaryClassifierEvaluator.EvaluateWithPRCurve(Microsoft.ML.IDataView,System.String,System.String,System.String,System.String,System.Collections.Generic.List{Microsoft.ML.Data.BinaryPrecisionRecallDataPoint}@)">
            <summary>
            Evaluates scored binary classification data and generates precision recall curve data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="label">The name of the label column in <paramref name="data"/>.</param>
            <param name="score">The name of the score column in <paramref name="data"/>.</param>
            <param name="probability">The name of the probability column in <paramref name="data"/>, the calibrated version of <paramref name="score"/>.</param>
            <param name="predictedLabel">The name of the predicted label column in <paramref name="data"/>.</param>
            <param name="prCurve">The generated precision recall curve data. Up to 100000 of samples are used for p/r curve generation.</param>
            <returns>The evaluation results for these calibrated outputs.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.BinaryClassifierEvaluator.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String)">
            <summary>
            Evaluates scored binary classification data, without probability-based metrics.
            </summary>
            <param name="data">The scored data.</param>
            <param name="label">The name of the label column in <paramref name="data"/>.</param>
            <param name="score">The name of the score column in <paramref name="data"/>.</param>
            <param name="predictedLabel">The name of the predicted label column in <paramref name="data"/>.</param>
            <returns>The evaluation results for these uncalibrated outputs.</returns>
            <seealso cref="M:Microsoft.ML.Data.BinaryClassifierEvaluator.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.ML.Data.BinaryClassifierEvaluator.EvaluateWithPRCurve(Microsoft.ML.IDataView,System.String,System.String,System.String,System.Collections.Generic.List{Microsoft.ML.Data.BinaryPrecisionRecallDataPoint}@)">
            <summary>
            Evaluates scored binary classification data, without probability-based metrics
            and generates precision recall curve data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="label">The name of the label column in <paramref name="data"/>.</param>
            <param name="score">The name of the score column in <paramref name="data"/>.</param>
            <param name="predictedLabel">The name of the predicted label column in <paramref name="data"/>.</param>
            <param name="prCurve">The generated precision recall curve data. Up to 100000 of samples are used for p/r curve generation.</param>
            <returns>The evaluation results for these uncalibrated outputs.</returns>
            <seealso cref="M:Microsoft.ML.Data.BinaryClassifierEvaluator.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.ML.Data.ClusteringEvaluator.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String)">
            <summary>
            Evaluates scored clustering data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="score">The name of the score column in <paramref name="data"/>.</param>
            <param name="label">The name of the optional label column in <paramref name="data"/>.</param>
            <param name="features">The name of the optional feature column in <paramref name="data"/>.</param>
            <returns>The evaluation results.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.PerInstanceEvaluatorBase">
            <summary>
            This is a helper class for creating the per-instance IDV.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.PerInstanceEvaluatorBase.SaveModel(Microsoft.ML.ModelSaveContext)">
            <summary>
            Derived class, for example A, should overwrite <see cref="M:Microsoft.ML.Data.PerInstanceEvaluatorBase.SaveModel(Microsoft.ML.ModelSaveContext)"/> so that ((<see cref="T:Microsoft.ML.ICanSaveModel"/>)A).Save(ctx) can correctly dump A.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.GetScoreColumn(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.DataViewSchema,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Find the score column to use. If <paramref name="name"/> is specified, that is used. Otherwise, this searches
            for the most recent score set of the given <paramref name="kind"/>. If there is no such score set and
            <paramref name="defName"/> is specifed it uses <paramref name="defName"/>. Otherwise, it throws.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.GetOptAuxScoreColumn(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.DataViewSchema,System.String,System.String,System.Int32,System.String,System.Func{Microsoft.ML.Data.DataViewType,System.Boolean})">
            <summary>
            Find the optional auxiliary score column to use. If <paramref name="name"/> is specified, that is used.
            Otherwise, if <paramref name="colScore"/> is part of a score set, this looks in the score set for a column
            with the given <paramref name="valueKind"/>. If none is found, it returns <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.GetColName(System.String,System.Nullable{Microsoft.ML.DataViewSchema.Column},System.String)">
            <summary>
            If <paramref name="str"/> is non-empty, returns it. Otherwise if <paramref name="info"/> is non-<see langword="null"/>,
            returns its <see cref="P:Microsoft.ML.DataViewSchema.Column.Name"/>. Otherwise, returns <paramref name="def"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.GetMetrics(Microsoft.ML.IDataView,System.Boolean)">
            <summary>
            Helper method to get an IEnumerable of double metrics from an overall metrics IDV produced by an evaluator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.AddFoldIndex(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Int32)">
            <summary>
            Add a text column containing a fold index to a data view.
            </summary>
            <param name="env">The host environment.</param>
            <param name="input">The data view to which we add the column</param>
            <param name="curFold">The current fold this data view belongs to.</param>
            <returns>The input data view with an additional text column containing the current fold index.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.AddFoldIndex(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Int32,System.Int32)">
            <summary>
            Add a key type column containing a fold index to a data view.
            </summary>
            <param name="env">The host environment.</param>
            <param name="input">The data view to which we add the column</param>
            <param name="curFold">The current fold this data view belongs to.</param>
            <param name="numFolds">The total number of folds.</param>
            <returns>The input data view with an additional key type column containing the current fold index.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.ReconcileSlotNames``1(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView[],System.String,Microsoft.ML.Data.PrimitiveDataViewType,``0)">
            <summary>
            This method takes an array of data views and a specified input vector column, and adds a new output column to each of the data views.
            First, we find the union set of the slot names in the different data views. Next we define a new vector column for each
            data view, indexed by the union of the slot names. For each data view, every slot value is the value in the slot corresponding
            to its slot name in the original column. If a reconciled slot name does not exist in an input column, the value in the output
            column is def.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.ReconcileKeyValues(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView[],System.String,Microsoft.ML.Data.DataViewType)">
            <summary>
            This method takes an array of data views and a specified input key column, and adds a new output column to each of the data views.
            First, we find the union set of the key values in the different data views. Next we define a new key column for each
            data view, with the union of the key values as the new key values. For each data view, the value in the output column is the value
            corresponding to the key value in the original column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.ReconcileKeyValuesWithNoNames(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView[],System.String,System.UInt64)">
            <summary>
            This method takes an array of data views and a specified input key column, and adds a new output column to each of the data views.
            First, we find the union set of the key values in the different data views. Next we define a new key column for each
            data view, with the union of the key values as the new key values. For each data view, the value in the output column is the value
            corresponding to the key value in the original column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.ReconcileVectorKeyValues(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView[],System.String,Microsoft.ML.Data.DataViewType)">
            <summary>
            This method is similar to <see cref="M:Microsoft.ML.Data.EvaluateUtils.ReconcileKeyValues(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView[],System.String,Microsoft.ML.Data.DataViewType)"/>, but it reconciles the key values over vector
            input columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.ConcatenatePerInstanceDataViews(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.IMamlEvaluator,System.Boolean,System.Boolean,Microsoft.ML.Data.RoleMappedData[],System.String[]@)">
            <summary>
            This method gets the per-instance metrics from multiple scored data views and either returns them as an
            array or combines them into a single data view, based on user specifications.
            </summary>
            <param name="env">A host environment.</param>
            <param name="eval">The evaluator to use for getting the per-instance metrics.</param>
            <param name="collate">If true, data views are combined into a single data view. Otherwise, data views
            are returned as an array.</param>
            <param name="outputFoldIndex">If true, a column containing the fold index is added to the returned data views.</param>
            <param name="perInstance">The array of scored data views to evaluate. These are passed as <see cref="T:Microsoft.ML.Data.RoleMappedData"/>
            so that the evaluator can know the role mappings it needs.</param>
            <param name="variableSizeVectorColumnNames">A list of column names that are not included in the combined data view
            since their types do not match.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.ConcatenateOverallMetrics(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView[])">
            <summary>
            Create an output data view that is the vertical concatenation of the metric data views.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.EvaluateUtils.CombineFoldMetricsDataViews(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Int32)">
            <summary>
            Takes a data view containing one or more rows of metrics, and returns a data view containing additional
            rows with the average and the standard deviation of the metrics in the input data view.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetricWriter.GetConfusionTableAsFormattedString(Microsoft.ML.Runtime.IHost,Microsoft.ML.IDataView,System.String@,System.Boolean,System.Int32)">
            <summary>
            Get the confusion tables as strings to be printed to the Console.
            </summary>
            <param name="host">The host is used for getting the random number generator for sampling classes</param>
            <param name="confusionDataView">The data view containing the confusion matrix. It should contain a text column
            with the label names named "LabelNames", and an R8 vector column named "Count" containing the counts: in the row
            corresponding to label i, slot j should contain the number of class i examples that were predicted as j by the predictor.</param>
            <param name="weightedConfusionTable">If there is an R8 vector column named "Weight" containing the weighted counts, this parameter
            is assigned the string representation of the weighted confusion table. Otherwise it is assigned null.</param>
            <param name="binary">Indicates whether the confusion table is for binary classification.</param>
            <param name="sample">Indicates how many classes to sample from the confusion table (-1 indicates no sampling)</param>
        </member>
        <member name="M:Microsoft.ML.Data.MetricWriter.GetPerFoldResults(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String@)">
            <summary>
            This method returns the per-fold metrics as a string. If weighted metrics are present they are returned in a separate string.
            </summary>
            <param name="env">An IHostEnvironment.</param>
            <param name="fold">The data view containing the per-fold metrics. Each row in the data view represents a set of metrics
            calculated either on the whole dataset or on a subset of it defined by a stratification column. If the data view contains
            stratified metrics, it must contain two text columns named "StratCol" and "StratVal", containing the stratification column
            name, and a text description of the value. In this case, the value of column StratVal in the row corresponding to the entire
            dataset should contain the text "overall", and the value of column StratCol should be DvText.NA. If weighted metrics are present
            then the data view should also contain a bool column named "IsWeighted".</param>
            <param name="weightedMetrics">If the IsWeighted column exists, this is assigned the string representation of the weighted
            metrics. Otherwise it is assigned null.</param>
        </member>
        <member name="M:Microsoft.ML.Data.MetricWriter.PrintOverallMetrics(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,System.String,Microsoft.ML.IDataView,System.Int32)">
            <summary>
            Print the overall results to the Console. The overall data view should contain rows from all the folds being averaged.
            If filename is not null then also save the results to the specified file. The first row in the file is the averaged
            results, followed by the results of each fold.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetricWriter.PrintWarnings(Microsoft.ML.Runtime.IChannel,System.Collections.Generic.Dictionary{System.String,Microsoft.ML.IDataView})">
            <summary>
            Searches for a warning dataview in the given dictionary, and if present, prints the warnings to the given channel. The warning dataview
            should contain a text column named "WarningText".
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetricWriter.SavePerInstance(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,System.String,Microsoft.ML.IDataView,System.Boolean,System.Boolean)">
            <summary>
             Save the given data view using text saver.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetricWriter.GetNonStratifiedMetrics(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView)">
            <summary>
            Filter out the stratified results from overall and drop the stratification columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetricKinds">
            <summary>
            This is a list of string constants denoting 'standard' metric kinds.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.MetricKinds.ConfusionMatrix">
            <summary>
            This data view contains the confusion matrix for N-class classification. It has N rows, and each row has
            the following columns:
            * Count (vector indicating how many examples of this class were predicted as each one of the classes). This column
            should have metadata containing the class names.
            * (Optional) Weight (vector with the total weight of the examples of this class that were predicted as each one of the classes).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.MetricKinds.OverallMetrics">
            <summary>
            This is a data view with 'global' dataset-wise metrics in its columns. It has one row containing the overall metrics,
            and optionally more rows for weighted metrics, and stratified metrics.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.MetricKinds.PrCurve">
            <summary>
            This is a data view with precision recall data in its columns. It has four columns: Threshold, Precision, Recall and Fpr.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.MetricKinds.Warnings">
            <summary>
            This data view contains a single text column, with warnings about bad input values encountered by the evaluator during
            the aggregation of metrics. Each warning is in a separate row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetricKinds.ColumnNames">
            <summary>
            Names for the columns in the data views output by evaluators.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IMamlEvaluator">
            <summary>
            This interface is used by Maml components (the <see cref="T:Microsoft.ML.Data.EvaluateCommand"/>, the <see cref="T:Microsoft.ML.Data.CrossValidationCommand"/>
            and the <see cref="T:Microsoft.ML.Data.EvaluateTransform"/> to evaluate, print and save the results.
            The input <see cref="T:Microsoft.ML.Data.RoleMappedData"/> to the <see cref="M:Microsoft.ML.Data.IEvaluator.Evaluate(Microsoft.ML.Data.RoleMappedData)"/> and the <see cref="M:Microsoft.ML.Data.IEvaluator.GetPerInstanceMetrics(Microsoft.ML.Data.RoleMappedData)"/> methods
            should be assumed to contain only the following column roles: label, group, weight and name. Any other columns needed for
            evaluation should be searched for by name in the <see cref="P:Microsoft.ML.Data.RoleMappedData.Schema"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IMamlEvaluator.PrintFoldResults(Microsoft.ML.Runtime.IChannel,System.Collections.Generic.Dictionary{System.String,Microsoft.ML.IDataView})">
            <summary>
            Print the aggregate metrics to the console.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IMamlEvaluator.GetOverallResults(Microsoft.ML.IDataView[])">
            <summary>
            Combine the overall metrics from multiple folds into a single data view.
            </summary>
            <param name="metrics"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Data.IMamlEvaluator.PrintAdditionalMetrics(Microsoft.ML.Runtime.IChannel,System.Collections.Generic.Dictionary{System.String,Microsoft.ML.IDataView}[])">
            <summary>
            Handles custom metrics (such as p/r curves for binary classification, or group summary results for ranking) from one
            or more folds. Implementations of this method typically creates a single data view for the custom metric and saves it
            to a user specified file.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IMamlEvaluator.GetPerInstanceDataViewToSave(Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Create a data view containing only the columns that are saved as per-instance results by Maml commands.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MamlEvaluatorBase">
            <summary>
            A base class implementation of <see cref="T:Microsoft.ML.Data.IMamlEvaluator"/>. The <see cref="T:Microsoft.ML.Data.Evaluate"/> and <see cref="M:Microsoft.ML.Data.IEvaluator.GetPerInstanceMetrics(Microsoft.ML.Data.RoleMappedData)"/>
            methods create a new <see cref="T:Microsoft.ML.Data.RoleMappedData"/> containing all the columns needed for evaluation, and call the corresponding
            methods on an <see cref="T:Microsoft.ML.Data.IEvaluator"/> of the appropriate type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MamlEvaluatorBase.GetInputColumnRolesCore(Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            All the input columns needed by an evaluator should be added here.
            The base class implementation gets the score column, the label column (if exists) and the weight column (if exists).
            Override if additional columns are needed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MamlEvaluatorBase.PrintFoldResultsCore(Microsoft.ML.Runtime.IChannel,System.Collections.Generic.Dictionary{System.String,Microsoft.ML.IDataView})">
            <summary>
            This method simply prints the overall metrics using EvaluateUtils.PrintConfusionMatrixAndPerFoldResults.
            Override if something else is needed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MamlEvaluatorBase.PrintAdditionalMetricsCore(Microsoft.ML.Runtime.IChannel,System.Collections.Generic.Dictionary{System.String,Microsoft.ML.IDataView}[])">
            <summary>
            This method simply prints the overall metrics using EvaluateUtils.PrintOverallMetrics.
            Override if something else is needed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MamlEvaluatorBase.GetPerInstanceMetricsCore(Microsoft.ML.IDataView,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            The perInst dataview contains all a name column (called Instance), the FoldId, Label and Weight columns if
            they exist, and all the columns returned by <see cref="M:Microsoft.ML.Data.MamlEvaluatorBase.GetPerInstanceColumnsToSave(Microsoft.ML.Data.RoleMappedSchema)"/>.
            It should be overridden only if additional processing is needed, such as dropping slots in the "top k scores" column
            in the multi-class case.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MamlEvaluatorBase.GetPerInstanceColumnsToSave(Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Returns the names of the columns that should be saved in the per-instance results file. These can include
            the columns generated by the corresponding <see cref="T:Microsoft.ML.Data.IRowMapper"/>, or any of the input columns used by
            it. The Name and Weight columns should not be included, since the base class includes them automatically.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.AnomalyDetectionMetrics">
            <summary>
            Evaluation results for anomaly detection(unsupervised learning algorithm).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.AnomalyDetectionMetrics.AreaUnderRocCurve">
            <summary>
            Gets the area under the ROC curve.
            </summary>
            <remarks>
            The area under the ROC curve is equal to the probability that the algorithm ranks
            a randomly chosen positive instance higher than a randomly chosen negative one
            (assuming 'positive' ranks higher than 'negative'). Area under the ROC curve ranges between
            0 and 1, with a value closer to 1 indicating a better model.
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.AnomalyDetectionMetrics.DetectionRateAtFalsePositiveCount">
            <summary>
            Detection rate at K false positives. This gives the ratio of correctly identified anomalies given
            the specified number of false positives. A value closer to 1 indicates a better model.
            </summary>
            <remarks>
            This is computed as follows:
            1.Sort the test examples by the output of the anomaly detector in descending order of scores.
            2.Among the top K False Positives,  compute ratio :  (True Positive @ K)  / (Total anomalies in test data)
            Example confusion matrix for anomaly detection:
                                       Anomalies (in test data)  | Non-Anomalies (in test data)
             Predicted Anomalies     :         TP                |           FP
             Predicted Non-Anomalies :         FN                |           TN
             </remarks>
        </member>
        <member name="T:Microsoft.ML.Data.BinaryClassificationMetrics">
            <summary>
            Evaluation results for binary classifiers, excluding probabilistic metrics.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetrics.AreaUnderRocCurve">
             <summary>
             Gets the area under the ROC curve.
             </summary>
             <remarks>
             The area under the ROC curve is equal to the probability that the classifier ranks
             a randomly chosen positive instance higher than a randomly chosen negative one
             (assuming 'positive' ranks higher than 'negative'). Area under the ROC curve ranges between
             0 and 1, with a value closer to 1 indicating a better model.
            
             <a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve">Area Under ROC Curve</a>
             </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetrics.Accuracy">
            <summary>
            Gets the accuracy of a classifier which is the proportion of correct predictions in the test set.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetrics.PositivePrecision">
            <summary>
            Gets the positive precision of a classifier which is the proportion of correctly predicted
            positive instances among all the positive predictions (i.e., the number of positive instances
            predicted as positive, divided by the total number of instances predicted as positive).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetrics.PositiveRecall">
            <summary>
            Gets the positive recall of a classifier which is the proportion of correctly predicted
            positive instances among all the positive instances (i.e., the number of positive instances
            predicted as positive, divided by the total number of positive instances).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetrics.NegativePrecision">
            <summary>
            Gets the negative precision of a classifier which is the proportion of correctly predicted
            negative instances among all the negative predictions (i.e., the number of negative instances
            predicted as negative, divided by the total number of instances predicted as negative).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetrics.NegativeRecall">
            <summary>
            Gets the negative recall of a classifier which is the proportion of correctly predicted
            negative instances among all the negative instances (i.e., the number of negative instances
            predicted as negative, divided by the total number of negative instances).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetrics.F1Score">
            <summary>
            Gets the F1 score of the classifier, which is a measure of the classifier's quality considering
            both precision and recall.
            </summary>
            <remarks>
            F1 score is the harmonic mean of precision and recall: 2 * precision * recall / (precision + recall).
            F1 ranges between 0 and 1, with a value of 1 indicating perfect precision and recall.
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetrics.AreaUnderPrecisionRecallCurve">
            <summary>
            Gets the area under the precision/recall curve of the classifier.
            </summary>
            <remarks>
            The area under the precision/recall curve is a single number summary of the information in the
            precision/recall curve. It is increasingly used in the machine learning community, particularly
            for imbalanced datasets where one class is observed more frequently than the other. On these
            datasets, <see cref="P:Microsoft.ML.Data.BinaryClassificationMetrics.AreaUnderPrecisionRecallCurve"/> can highlight performance differences that
            are lost with <see cref="P:Microsoft.ML.Data.BinaryClassificationMetrics.AreaUnderRocCurve"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryClassificationMetrics.ConfusionMatrix">
            <summary>
            The <a href="https://en.wikipedia.org/wiki/Confusion_matrix">confusion matrix</a> giving the counts of the
            true positives, true negatives, false positives and false negatives for the two classes of data.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.BinaryPrecisionRecallDataPoint">
            <summary>
            This class represents one data point on Precision-Recall curve for binary classification.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryPrecisionRecallDataPoint.Threshold">
            <summary>
            Gets the threshold for this data point.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryPrecisionRecallDataPoint.Precision">
            <summary>
            Gets the precision for the current threshold.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryPrecisionRecallDataPoint.Recall">
            <summary>
            Gets the recall for the current threshold.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryPrecisionRecallDataPoint.TruePositiveRate">
            <summary>
            Gets the true positive rate for the current threshold.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.BinaryPrecisionRecallDataPoint.FalsePositiveRate">
            <summary>
            Gets the false positive rate for the given threshold.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.CalibratedBinaryClassificationMetrics">
            <summary>
            Evaluation results for binary classifiers, including probabilistic metrics.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.CalibratedBinaryClassificationMetrics.LogLoss">
            <summary>
            Gets the log-loss of the classifier. Log-loss measures the performance of a classifier
            with respect to how much the predicted probabilities diverge from the true class label. Lower
            log-loss indicates a better model. A perfect model, which predicts a probability of 1 for the
            true class, will have a log-loss of 0.
            </summary>
            <remarks>
            <format type="text/markdown"><![CDATA[
            The log-loss metric, is computed as follows:
            $LogLoss = - \frac{1}{m} \sum{i = 1}^m ln(p_i)$
            where m is the number of instances in the test set and
            $p_i$ is the probability returned by the classifier if the instance belongs to class 1,
            and 1 minus the probability returned by the classifier if the instance belongs to class 0.
            ]]>
            </format>
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.CalibratedBinaryClassificationMetrics.LogLossReduction">
            <summary>
            Gets the log-loss reduction (also known as relative log-loss, or reduction in information gain - RIG)
            of the classifier. It gives a measure of how much a model improves on a model that gives random predictions.
            Log-loss reduction closer to 1 indicates a better model.
            </summary>
            <remarks>
            <format type="text/markdown"><![CDATA[
            The log-loss reduction is scaled relative to a classifier that predicts the prior for every example:
            $LogLossReduction = \frac{LogLoss(prior) - LogLoss(classifier)}{LogLoss(prior)}$
            This metric can be interpreted as the advantage of the classifier over a random prediction.
            For example, if the RIG equals 0.2, it can be interpreted as "the probability of a correct prediction is
            20% better than random guessing".
            ]]>
            </format>
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.CalibratedBinaryClassificationMetrics.Entropy">
            <summary>
            Gets the test-set entropy, which is the prior log-loss based on the proportion of positive
            and negative instances in the test set. A classifier's <see cref="P:Microsoft.ML.Data.CalibratedBinaryClassificationMetrics.LogLoss"/> lower than
            the entropy indicates that a classifier does better than predicting the proportion of positive
            instances as the probability for each instance.
            </summary>
            <remarks>
            <format type="text/markdown"><![CDATA[
            $Entropy = -p log_2(p) - (1 - p) log_2(1 - p)$, where $p$ is the proportion of the positive class
            in the test set.
            ]]>
            </format>
            </remarks>
        </member>
        <member name="T:Microsoft.ML.Data.ClusteringMetrics">
            <summary>
            The metrics generated after evaluating the clustering predictions.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ClusteringMetrics.NormalizedMutualInformation">
            <summary>
            Normalized Mutual Information is a measure of the mutual dependence of the variables.
            This metric is only calculated if the Label column is provided.
            </summary>
            <value> Its value ranges from 0 to 1, where higher numbers are better.</value>
            <remarks><a href="http://en.wikipedia.org/wiki/Mutual_information#Normalized_variants">Normalized variants.</a></remarks>
        </member>
        <member name="P:Microsoft.ML.Data.ClusteringMetrics.AverageDistance">
            <summary>
            Average Score. For the K-Means algorithm, the &apos;score&apos; is the distance from the centroid to the example.
            The average score is, therefore, a measure of proximity of the examples to cluster centroids.
            In other words, it is a measure of &apos;cluster tightness&apos;.
            Note however, that this metric will only decrease if the number of clusters is increased,
            and in the extreme case (where each distinct example is its own cluster) it will be equal to zero.
            </summary>
            <value>Distance is to the nearest centroid.</value>
        </member>
        <member name="P:Microsoft.ML.Data.ClusteringMetrics.DaviesBouldinIndex">
            <summary>
            Davies-Bouldin Index is measure of the how much scatter is in the cluster and the cluster separation.
            </summary>
            <remarks><a href="https://en.wikipedia.org/wiki/Davies%E2%80%93Bouldin_index">Davies-Bouldin Index.</a></remarks>
        </member>
        <member name="T:Microsoft.ML.Data.ConfusionMatrix">
            <summary>
            Represents the <a href="https://en.wikipedia.org/wiki/Confusion_matrix">confusion matrix</a> of the classification results.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ConfusionMatrix.PerClassPrecision">
            <summary>
            The calculated value of <a href="https://en.wikipedia.org/wiki/Precision_and_recall#Precision">precision</a> for each class.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ConfusionMatrix.PerClassRecall">
            <summary>
            The calculated value of <a href="https://en.wikipedia.org/wiki/Precision_and_recall#Recall">recall</a> for each class.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ConfusionMatrix.Counts">
            <summary>
            The confusion matrix counts for the combinations actual class/predicted class.
            The actual classes are in the rows of the table (stored in the outer <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>), and the predicted classes
             in the columns(stored in the inner <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ConfusionMatrix.NumberOfClasses">
            <summary>
            The indicators of the predicted classes.
            It might be the classes names, or just indices of the predicted classes, if the name mapping is missing.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.ConfusionMatrix.PredictedClassesIndicators">
            <summary>
            The indicators of the predicted classes.
            It might be the classes names, or just indices of the predicted classes, if the name mapping is missing.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ConfusionMatrix.#ctor(Microsoft.ML.Runtime.IHost,System.Double[],System.Double[],System.Double[][],System.Collections.Generic.List{System.ReadOnlyMemory{System.Char}},System.Boolean,System.Boolean)">
            <summary>
            The confusion matrix as a structured type, built from the counts of the confusion table <see cref="T:Microsoft.ML.IDataView"/> that the <see cref="T:Microsoft.ML.Data.BinaryClassifierEvaluator"/> or
            the <see cref="T:Microsoft.ML.Data.MulticlassClassificationEvaluator"/> constructor.
            </summary>
            <param name="host">The IHost instance. </param>
            <param name="precision">The values of precision per class.</param>
            <param name="recall">The vales of recall per class.</param>
            <param name="confusionTableCounts">The counts of the confusion table. The actual classes values are in the rows of the 2D array,
            and the counts of the predicted classes are in the columns.</param>
            <param name="labelNames">The predicted classes names, or the indexes of the classes, if the names are missing.</param>
            <param name="isSampled">Whether the classes are sampled.</param>
            <param name="isBinary">Whether the confusion table is the result of a binary classification. </param>
        </member>
        <member name="M:Microsoft.ML.Data.ConfusionMatrix.GetFormattedConfusionTable">
            <summary>
            Returns a human readable representation of the confusion table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Data.ConfusionMatrix.GetCountForClassPair(System.Int32,System.Int32)">
            <summary>
            Gets the confusion table count for the pair <paramref name="predictedClassIndicatorIndex"/>/<paramref name="actualClassIndicatorIndex"/>.
            </summary>
            <param name="predictedClassIndicatorIndex">The index of the predicted label indicator, in the <see cref="F:Microsoft.ML.Data.ConfusionMatrix.PredictedClassesIndicators"/>.</param>
            <param name="actualClassIndicatorIndex">The index of the actual label indicator, in the <see cref="F:Microsoft.ML.Data.ConfusionMatrix.PredictedClassesIndicators"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Data.MulticlassClassificationMetrics">
            <summary>
            Evaluation results for multi-class classification trainers.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetrics.LogLoss">
            <summary>
            Gets the average log-loss of the classifier. Log-loss measures the performance of a classifier
            with respect to how much the predicted probabilities diverge from the true class label. Lower
            log-loss indicates a better model. A perfect model, which predicts a probability of 1 for the
            true class, will have a log-loss of 0.
            </summary>
            <remarks>
            <format type="text/markdown"><![CDATA[
            The log-loss metric is computed as follows:
            $LogLoss = - \frac{1}{m} \sum_{i = 1}^m log(p_i)$,
            where $m$ is the number of instances in the test set and
            $p_i$ is the probability returned by the classifier
            of the instance belonging to the true class.
            ]]>
            </format>
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetrics.LogLossReduction">
            <summary>
            Gets the log-loss reduction (also known as relative log-loss, or reduction in information gain - RIG)
            of the classifier. It gives a measure of how much a model improves on a model that gives random predictions.
            Log-loss reduction closer to 1 indicates a better model.
            </summary>
            <remarks>
            <format type="text/markdown"><![CDATA[
            The log-loss reduction is scaled relative to a classifier that predicts the prior for every example:
            $LogLossReduction = \frac{LogLoss(prior) - LogLoss(classifier)}{LogLoss(prior)}$
            This metric can be interpreted as the advantage of the classifier over a random prediction.
            For example, if the RIG equals 0.2, it can be interpreted as "the probability of a correct prediction is
            20% better than random guessing".
            ]]>
            </format>
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetrics.MacroAccuracy">
             <summary>
             Gets the macro-average accuracy of the model.
             </summary>
             <remarks>
             The macro-average is the average accuracy at the class level. The accuracy for each class is computed
             and the macro-accuracy is the average of these accuracies.
            
             The macro-average metric gives the same weight to each class, no matter how many instances from
             that class the dataset contains.
             </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetrics.MicroAccuracy">
            <summary>
            Gets the micro-average accuracy of the model.
            </summary>
            <remarks>
            The micro-average is the fraction of instances predicted correctly across all classes. Micro-average can
            be a more useful metric than macro-average if class imbalance is suspected (i.e. one class has many more
            instances than the rest).
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetrics.TopKAccuracy">
            <summary>
            Convenience method for "TopKAccuracyForAllK[TopKPredictionCount - 1]". If <see cref="P:Microsoft.ML.Data.MulticlassClassificationMetrics.TopKPredictionCount"/> is positive,
            this is the relative number of examples where
            the true label is one of the top K predicted labels by the predictor.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetrics.TopKPredictionCount">
            <summary>
            If positive, this indicates the K in <see cref="P:Microsoft.ML.Data.MulticlassClassificationMetrics.TopKAccuracy"/> and <see cref="P:Microsoft.ML.Data.MulticlassClassificationMetrics.TopKAccuracyForAllK"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetrics.TopKAccuracyForAllK">
            <summary>
            Returns the top K accuracy for all K from 1 to the value of TopKPredictionCount.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetrics.PerClassLogLoss">
            <summary>
            Gets the log-loss of the classifier for each class. Log-loss measures the performance of a classifier
            with respect to how much the predicted probabilities diverge from the true class label. Lower
            log-loss indicates a better model. A perfect model, which predicts a probability of 1 for the
            true class, will have a log-loss of 0.
            </summary>
            <remarks>
            The log-loss metric is computed as $-\frac{1}{m} \sum_{i=1}^m \log(p_i)$,
            where $m$ is the number of instances in the test set.
            $p_i$ is the probability returned by the classifier if the instance belongs to the class,
            and 1 minus the probability returned by the classifier if the instance does not belong to the class.
            </remarks>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[LogLoss](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/LogLossPerClass.cs)]
            ]]></format>
            </example>
        </member>
        <member name="P:Microsoft.ML.Data.MulticlassClassificationMetrics.ConfusionMatrix">
            <summary>
            The <a href="https://en.wikipedia.org/wiki/Confusion_matrix">confusion matrix</a> giving the counts of the
            predicted classes versus the actual classes.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.RankingMetrics">
            <summary>
            Evaluation results for rankers.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RankingMetrics.NormalizedDiscountedCumulativeGains">
             <summary>
             <format type="text/markdown"><![CDATA[
             List of normalized discounted cumulative gains (NDCG), where the N-th element represents NDCG@N.
             Search resuls vary in length depending on query, so different rankers cannot be consistently compared
             using DCG alone unless the DCG is normalized. This is done by calculating the maximum DCG (also known
             as Ideal DCG), which is the DCG for the ideal ordering of search results sorted by their relative relevance.
            
             $NDCG@N = \frac{DCG@N}{MaxDCG@N}$
             ]]>
             </format>
             </summary>
             <remarks>
             <a href="https://en.wikipedia.org/wiki/Discounted_cumulative_gain#Normalized_DCG">Normalized Discounted Cumulative Gain</a>
             </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.RankingMetrics.DiscountedCumulativeGains">
             <summary>
             <format type="text/markdown"><![CDATA[
             List of discounted cumulative gains (DCG), where the N-th element represents DCG@N.
             Discounted Cumulative Gain is the sum of the relevance gains up to the N-th position for all the instances i,
             normalized by the natural logarithm of the instance + 1. DCG is an increasing metric,
             with a higher value indicating a better model.
             Note that unlike the Wikipedia article, ML.NET uses the natural logarithm.
            
             $DCG@N = \sum_{i = 1}^N \frac{g_i}{ln(i + 1)}$, where $g_i$ is the relevance gain at the i-th position.
             ]]>
             </format>
             </summary>
             <remarks>
             <a href="https://en.wikipedia.org/wiki/Discounted_cumulative_gain">Discounted Cumulative Gain</a>
             </remarks>
        </member>
        <member name="T:Microsoft.ML.Data.RegressionMetrics">
            <summary>
            Evaluation results regression algorithms (supervised learning algorithm).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RegressionMetrics.MeanAbsoluteError">
             <summary>
             Gets the absolute loss of the model.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             The absolute loss is defined as
             $L1 = \frac{1}{m} \sum_{i = 1}^m | y_i - \hat{y}_i |$,
             where $m$ is the number of instances in the test set,
             $\hat{y}_i$ are the predicted labels for each instance,
             and $y_i$ are the correct labels of each instance.
            
             L1 loss is a non-negative, decreasing metric. Smaller values indicate a better model with respect to this metric.
             ]]>
             </format>
             </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.RegressionMetrics.MeanSquaredError">
             <summary>
             Gets the squared loss of the model.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             The squared loss is defined as
             $L2 = \frac{1}{m} \sum_{i = 1}^m (y_i - \hat{y}_i)^2$,
             where $m$ is the number of instances in the test set,
             \hat{y}_i are the predicted labels for each instance,
             and y_i are the correct labels of each instance.
            
             L2 loss is a non-negative, decreasing metric. Smaller values indicate a better model with respect to this metric.
             ]]>
             </format>
             </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.RegressionMetrics.RootMeanSquaredError">
            <summary>
            Gets the root mean square loss (or RMS) which is the square root of the L2 loss <see cref="P:Microsoft.ML.Data.RegressionMetrics.MeanSquaredError"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RegressionMetrics.LossFunction">
            <summary>
            Gets the result of user defined loss function.
            </summary>
            <remarks>
            This is the average of a loss function defined by the user,
            computed over all the instances in the test set.
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Data.RegressionMetrics.RSquared">
            <summary>
            Gets the R-squared value of the model, which is also known as
            the <a href="https://en.wikipedia.org/wiki/Coefficient_of_determination">coefficient of determination​</a>.
            R-Squared closer to 1 indicates a better fitted model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationEvaluator.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String)">
            <summary>
            Evaluates scored multiclass classification data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="label">The name of the label column in <paramref name="data"/>.</param>
            <param name="score">The name of the score column in <paramref name="data"/>.</param>
            <param name="predictedLabel">The name of the predicted label column in <paramref name="data"/>.</param>
            <returns>The evaluation results for these outputs.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.RankingEvaluatorOptions">
            <summary>
             Options to control the output of the RankingEvaluator
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.RankingEvaluatorOptions.DcgTruncationLevel">
            <value>
            Maximum truncation level for computing (N)DCG
            </value>
        </member>
        <member name="F:Microsoft.ML.Data.RankingEvaluatorOptions.LabelGains">
            <value>
            Label relevance gains
            </value>
        </member>
        <member name="F:Microsoft.ML.Data.RankingEvaluator.GroupSummary">
            <value>
            The ranking evaluator outputs a data view by this name, which contains metrics aggregated per group.
            It contains four columns: GroupId, NDCG, DCG and MaxDCG. Each row in the data view corresponds to one
            group in the scored data.
            </value>
        </member>
        <member name="M:Microsoft.ML.Data.RankingEvaluator.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String)">
            <summary>
            Evaluates scored regression data.
            </summary>
            <param name="data">The data to evaluate.</param>
            <param name="label">The name of the label column.</param>
            <param name="groupId">The name of the groupId column.</param>
            <param name="score">The name of the predicted score column.</param>
            <returns>The evaluation metrics for these outputs.</returns>
        </member>
        <member name="P:Microsoft.ML.Data.RankingPerInstanceTransform.Microsoft#ML#IDataView#Schema">
            <summary>
            Explicit implementation prevents Schema from being accessed from derived classes.
            It's our first step to separate data produced by transform from transform.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.RankingPerInstanceTransform.OutputSchema">
            <summary>
            Shape information of the produced output. Note that the input and the output of this transform (and their types) are identical.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RankingUtils.QueryMaxDcg(System.Double[],System.Int32,System.Double[],System.Collections.Generic.List{System.Int16},System.Collections.Generic.List{System.Single},System.Double[])">
            <summary>
            Calculates natural-based max DCG at all truncations from 1 to truncationLevel.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RegressionEvaluator.Evaluate(Microsoft.ML.IDataView,System.String,System.String)">
            <summary>
            Evaluates scored regression data.
            </summary>
            <param name="data">The data to evaluate.</param>
            <param name="label">The name of the label column.</param>
            <param name="score">The name of the predicted score column.</param>
            <returns>The evaluation metrics for these outputs.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.IModelCombiner">
            <summary>
            An interface that combines multiple predictors into a single predictor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BinaryClassifierScorer.WrapIfNeeded(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            This function performs a number of checks on the inputs and, if appropriate and possible, will produce
            a mapper with slots names on the output score column properly mapped. If this is not possible for any
            reason, it will just return the input bound mapper.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BinaryClassifierScorer.CanWrap(Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.DataViewType)">
            <summary>
            This is a utility method used to determine whether <see cref="T:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper"/>
            can or should be used to wrap <paramref name="mapper"/>. This will not throw, since the
            desired behavior in the event that it cannot be wrapped, is to just back off to the original
            "unwrapped" bound mapper.
            </summary>
            <param name="mapper">The mapper we are seeing if we can wrap</param>
            <param name="labelNameType">The type of the label names from the metadata (either
            originating from the key value metadata of the training label column, or deserialized
            from the model of a bindable mapper)</param>
            <returns>Whether we can call <see cref="M:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper.CreateBound``1(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ISchemaBoundRowMapper,Microsoft.ML.Data.VectorDataViewType,System.Delegate,System.String,System.Func{Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.DataViewType,System.Boolean})"/> with
            this mapper and expect it to succeed</returns>
        </member>
        <member name="T:Microsoft.ML.Data.FeatureContributionScorer">
            <summary>
            Used only by the command line API for scoring and calculation of feature contribution.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.FeatureContributionScorer.BindableMapper">
            <summary>
            Holds the definition of the getters for the FeatureContribution column. It also contains the generic mapper that is used to score the Predictor.
            This is only used by the command line API.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.FeatureContributionScorer.RowMapper">
            <summary>
            Maps a schema from input columns to output columns. Keeps track of the input columns that are needed for the mapping.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.FeatureContributionScorer.RowMapper.Microsoft#ML#Data#ISchemaBoundRowMapper#GetDependenciesForNewColumns(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Returns the input columns needed for the requested output columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.GenericScorer">
            <summary>
            This class is a scorer that passes through all the ISchemaBound columns without adding any "derived columns".
            It also passes through all metadata (except for possibly changing the score column kind), and adds the
            score set id metadata.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.GenericScorer.Bindings.#ctor(Microsoft.ML.DataViewSchema,Microsoft.ML.Data.ISchemaBoundRowMapper,System.String,System.Boolean)">
            <summary>
            The one and only constructor for Bindings.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.GenericScorer.Bindings.Create(Microsoft.ML.DataViewSchema,Microsoft.ML.Data.ISchemaBoundRowMapper,System.String,System.Boolean)">
            <summary>
            Create the bindings given the input schema, bound mapper, and column name suffix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.GenericScorer.Bindings.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ISchemaBindableMapper,Microsoft.ML.DataViewSchema,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.ML.Data.RoleMappedSchema.ColumnRole,System.String}},System.String,System.Boolean)">
            <summary>
            Create the bindings given the env, bindable, input schema, column roles, and column name suffix.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.GenericScorer.Bindings.ApplyToSchema(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.DataViewSchema)">
            <summary>
            Create a new Bindings from this one, but based on a potentially different schema.
            Used by the ITransformTemplate.ApplyToData implementation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.GenericScorer.Bindings.Create(Microsoft.ML.ModelLoadContext,Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ISchemaBindableMapper,Microsoft.ML.DataViewSchema)">
            <summary>
            Deserialize the bindings, given the env, bindable and input schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.GenericScorer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ScorerArgumentsBase,Microsoft.ML.IDataView,Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            The <see cref="T:Microsoft.ML.Data.SignatureDataScorer"/> entry point for creating a <see cref="T:Microsoft.ML.Data.GenericScorer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.GenericScorer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.GenericScorer,Microsoft.ML.IDataView)">
            <summary>
            Constructor for <see cref="M:Microsoft.ML.Data.GenericScorer.ApplyToDataCore(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView)"/> method.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.GenericScorer.#ctor(Microsoft.ML.Runtime.IHost,Microsoft.ML.ModelLoadContext,Microsoft.ML.IDataView)">
            <summary>
            Constructor for deserialization.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.GenericScorer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.IDataView)">
            <summary>
            <see cref="T:Microsoft.ML.Data.SignatureLoadDataTransform"/> entry point - for deserialization.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper">
            <summary>
            This bindable mapper facilitates the serialization and rebinding of the special bound
            mapper that attaches the label metadata to the slot names of the output score column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext)">
            <summary>
            Method corresponding to <see cref="T:Microsoft.ML.SignatureLoadModel"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper.Bound`1._mapper">
            <summary>The mapper we are wrapping.</summary>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper.Bound`1.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ISchemaBoundRowMapper,Microsoft.ML.Data.VectorDataViewType,Microsoft.ML.ValueGetter{Microsoft.ML.Data.VBuffer{`0}},System.String,System.Func{Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.DataViewType,System.Boolean})">
            <summary>
            This is the constructor called for the initial wrapping.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper.Bound`1.DecorateOutputSchema(Microsoft.ML.DataViewSchema,System.Int32,Microsoft.ML.Data.VectorDataViewType,Microsoft.ML.ValueGetter{Microsoft.ML.Data.VBuffer{`0}},System.String)">
            <summary>
            Append label names to score column as its metadata.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper.Bound`1.Microsoft#ML#Data#ISchemaBoundRowMapper#GetDependenciesForNewColumns(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper.Bound`1.RowImpl.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper.Bound`1.RowImpl.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationScorer.WrapIfNeeded(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            This function performs a number of checks on the inputs and, if appropriate and possible, will produce
            a mapper with slots names on the output score column properly mapped. If this is not possible for any
            reason, it will just return the input bound mapper.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationScorer.CanWrapTrainingLabels(Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.DataViewType)">
            <summary>
            This is a utility method used to determine whether <see cref="T:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper"/>
            can or should be used to wrap <paramref name="mapper"/>. This will not throw, since the
            desired behavior in the event that it cannot be wrapped, is to just back off to the original
            "unwrapped" bound mapper.
            </summary>
            <param name="mapper">The mapper we are seeing if we can wrap</param>
            <param name="labelNameType">The type of the label names from the metadata (either
            originating from the key value metadata of the training label column, or deserialized
            from the model of a bindable mapper)</param>
            <returns>Whether we can call <see cref="M:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper.CreateBound``1(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ISchemaBoundRowMapper,Microsoft.ML.Data.VectorDataViewType,System.Delegate,System.String,System.Func{Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.DataViewType,System.Boolean})"/> with
            this mapper and expect it to succeed</returns>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationScorer.CanWrapSlotNames(Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.DataViewType)">
            <summary>
            This is a utility method used to determine whether <see cref="T:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper"/>
            can or should be used to wrap <paramref name="mapper"/>. This will not throw, since the
            desired behavior in the event that it cannot be wrapped, is to just back off to the original
            "unwrapped" bound mapper.
            </summary>
            <param name="mapper">The mapper we are seeing if we can wrap</param>
            <param name="labelNameType">The type of the label names from the metadata (either
            originating from the key value metadata of the training label column, or deserialized
            from the model of a bindable mapper)</param>
            <returns>Whether we can call <see cref="M:Microsoft.ML.Data.MulticlassClassificationScorer.LabelNameBindableMapper.CreateBound``1(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ISchemaBoundRowMapper,Microsoft.ML.Data.VectorDataViewType,System.Delegate,System.String,System.Func{Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.DataViewType,System.Boolean})"/> with
            this mapper and expect it to succeed</returns>
        </member>
        <member name="M:Microsoft.ML.Data.MulticlassClassificationScorer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.IDataView)">
            <summary>
            Corresponds to <see cref="T:Microsoft.ML.Data.SignatureLoadDataTransform"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.PredictedLabelScorerBase">
            <summary>
            Class for scorers that compute on additional "PredictedLabel" column from the score column.
            Currently, this scorer is used for binary classification, multi-class classification, and clustering.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.PredictionTransformerBase`1">
            <summary>
            Base class for transformers with no feature column, or more than one feature columns.
            </summary>
            <typeparam name="TModel">The type of the model parameters used by this prediction transformer.</typeparam>
        </member>
        <member name="P:Microsoft.ML.Data.PredictionTransformerBase`1.Model">
            <summary>
            The model.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.PredictionTransformerBase`1.Microsoft#ML#ITransformer#IsRowToRowMapper">
            <summary>
            Whether a call to <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.ML.DataViewSchema)"/> should succeed, on an
            appropriate schema.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.PredictionTransformerBase`1.Scorer">
            <summary>
            This class is more or less a thin wrapper over the <see cref="T:Microsoft.ML.Data.IDataScorerTransform"/> implementing
            <see cref="T:Microsoft.ML.Data.RowToRowScorerBase"/>, which publicly is a deprecated concept as far as the public API is
            concerned. Nonetheless, until we move all internal infrastructure to be truely transform based, we
            retain this as a wrapper. Even though it is mutable, subclasses of this should set this only in
            their constructor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.PredictionTransformerBase`1.GetOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
            Gets the output schema resulting from the <see cref="M:Microsoft.ML.Data.PredictionTransformerBase`1.Transform(Microsoft.ML.IDataView)"/>
            </summary>
            <param name="inputSchema">The <see cref="T:Microsoft.ML.DataViewSchema"/> of the input data.</param>
            <returns>The resulting <see cref="T:Microsoft.ML.DataViewSchema"/>.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.PredictionTransformerBase`1.Transform(Microsoft.ML.IDataView)">
            <summary>
            Transforms the input data.
            </summary>
            <param name="input">The input data.</param>
            <returns>The transformed <see cref="T:Microsoft.ML.IDataView"/></returns>
        </member>
        <member name="M:Microsoft.ML.Data.PredictionTransformerBase`1.Microsoft#ML#ITransformer#GetRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Gets a IRowToRowMapper instance.
            </summary>
            <param name="inputSchema"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Data.SingleFeaturePredictionTransformerBase`1">
            <summary>
            The base class for all the transformers implementing the <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/>.
            Those are all the transformers that work with one feature column.
            </summary>
            <typeparam name="TModel">The model used to transform the data.</typeparam>
        </member>
        <member name="P:Microsoft.ML.Data.SingleFeaturePredictionTransformerBase`1.FeatureColumnName">
            <summary>
            The name of the feature column used by the prediction transformer.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.SingleFeaturePredictionTransformerBase`1.FeatureColumnType">
            <summary>
            The type of the prediction transformer
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SingleFeaturePredictionTransformerBase`1.#ctor(Microsoft.ML.Runtime.IHost,`0,Microsoft.ML.DataViewSchema,System.String)">
            <summary>
            Initializes a new reference of <see cref="T:Microsoft.ML.Data.SingleFeaturePredictionTransformerBase`1"/>.
            </summary>
            <param name="host">The local instance of <see cref="T:Microsoft.ML.Runtime.IHost"/>.</param>
            <param name="model">The model used for scoring.</param>
            <param name="trainSchema">The schema of the training data.</param>
            <param name="featureColumn">The feature column name.</param>
        </member>
        <member name="M:Microsoft.ML.Data.SingleFeaturePredictionTransformerBase`1.GetOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
             Schema propagation for this prediction transformer.
            </summary>
            <param name="inputSchema">The input schema to attempt to map.</param>
            <returns>The output schema of the data, given an input schema like <paramref name="inputSchema"/>.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.AnomalyPredictionTransformer`1">
            <summary>
            Base class for the <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/> working on anomaly detection tasks.
            </summary>
            <typeparam name="TModel">An implementation of the <see cref="T:Microsoft.ML.IPredictorProducing`1"/></typeparam>
        </member>
        <member name="T:Microsoft.ML.Data.BinaryPredictionTransformer`1">
            <summary>
            Base class for the <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/> working on binary classification tasks.
            </summary>
            <typeparam name="TModel">An implementation of the <see cref="T:Microsoft.ML.IPredictorProducing`1"/></typeparam>
        </member>
        <member name="T:Microsoft.ML.Data.MulticlassPredictionTransformer`1">
            <summary>
            Base class for the <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/> working on multi-class classification tasks.
            </summary>
            <typeparam name="TModel">An implementation of the <see cref="T:Microsoft.ML.IPredictorProducing`1"/></typeparam>
        </member>
        <member name="T:Microsoft.ML.Data.RegressionPredictionTransformer`1">
            <summary>
            Base class for the <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/> working on regression tasks.
            </summary>
            <typeparam name="TModel">An implementation of the <see cref="T:Microsoft.ML.IPredictorProducing`1"/></typeparam>
        </member>
        <member name="T:Microsoft.ML.Data.RankingPredictionTransformer`1">
            <summary>
            Base class for the <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/> working on ranking tasks.
            </summary>
            <typeparam name="TModel">An implementation of the <see cref="T:Microsoft.ML.IPredictorProducing`1"/></typeparam>
        </member>
        <member name="T:Microsoft.ML.Data.ClusteringPredictionTransformer`1">
            <summary>
            Base class for the <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/> working on clustering tasks.
            </summary>
            <typeparam name="TModel">An implementation of the <see cref="T:Microsoft.ML.IPredictorProducing`1"/></typeparam>
        </member>
        <member name="M:Microsoft.ML.Data.QuantileRegressionScorerTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.QuantileRegressionScorerTransform.Arguments,Microsoft.ML.IDataView,Microsoft.ML.Data.ISchemaBoundMapper,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Constructor corresponding to <see cref="T:Microsoft.ML.Data.SignatureDataScorer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.QuantileRegressionScorerTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.QuantileRegressionScorerTransform.Arguments,Microsoft.ML.IPredictor)">
            <summary>
            Constructor corresponding to <see cref="T:Microsoft.ML.Data.SignatureBindableMapper"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.RowToRowScorerBase">
            <summary>
            Base class for scoring rows independently. This assumes that all columns produced by the
            underlying <see cref="T:Microsoft.ML.Data.ISchemaBoundRowMapper"/> should be exposed, as well as zero or more
            "derived" columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowScorerBase.SaveCore(Microsoft.ML.ModelSaveContext)">
            <summary>
            The main save method handles saving the _bindable. This should do everything else.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowScorerBase.GetBindings">
            <summary>
            Derived classes provide the specific bindings object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowScorerBase.GetActive(Microsoft.ML.Data.RowToRowScorerBase.BindingsBase,System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column},System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column}@,System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column}@)">
            <summary>
            Produces the set of active columns for the scorer (as a bool[] of length bindings.ColumnCount).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowScorerBase.ShouldUseParallelCursors(System.Func{System.Int32,System.Boolean})">
            <summary>
            This produces either "true" or "null" according to whether <see cref="M:Microsoft.ML.Data.RowToRowScorerBase.WantParallelCursors(System.Func{System.Int32,System.Boolean})"/>
            returns true or false. Note that this will never return false. Any derived class
            must support (but not necessarily prefer) parallel cursors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowScorerBase.WantParallelCursors(System.Func{System.Int32,System.Boolean})">
            <summary>
            This should return true iff parallel cursors are advantageous. Typically, this
            will return true iff some columns added by this scorer are active.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowScorerBase.GetGetters(Microsoft.ML.DataViewRow,System.Func{System.Int32,System.Boolean})">
            <summary>
            Create and fill an array of getters of size InfoCount. The indices of the non-null entries in the
            result should be exactly those for which predicate(iinfo) is true.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowScorerBase.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowScorerBase.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.ScorerBindingsBase">
            <summary>
            Base bindings for a scorer based on an <see cref="T:Microsoft.ML.Data.ISchemaBoundMapper"/>. This assumes that input schema columns
            are echoed, followed by zero or more derived columns, followed by the mapper generated columns.
            The names of the derived columns and mapper generated columns have an optional suffix appended.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.ScorerBindingsBase.Mapper">
            <summary>
            The schema bound mapper.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.ScorerBindingsBase.Suffix">
            <summary>
            The column name suffix. Non-null, but may be empty.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.ScorerBindingsBase.DerivedColumnCount">
            <summary>
            The number of derived columns. InfoCount == DerivedColumnCount + Mapper.OutputSchema.ColumnCount.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ScorerBindingsBase.GetActiveMapperColumns(System.Boolean[])">
            <summary>
            Returns a predicate indicating which Mapper columns are active based on the active scorer columns.
            This is virtual so scorers with computed columns can do the right thing.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SchemaBindablePredictorWrapperBase">
            <summary>
            This is a base class for wrapping <see cref="T:Microsoft.ML.IPredictor"/>s in an <see cref="T:Microsoft.ML.Data.ISchemaBindableMapper"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SchemaBindablePredictorWrapperBase.SingleValueRowMapper">
            <summary>
            The <see cref="T:Microsoft.ML.Data.ISchemaBoundRowMapper"/> implementation for predictor wrappers that produce a
            single output column. Note that the Bindable wrapper should do any input schema validation.
            This class doesn't care. It DOES care that the role mapped schema specifies a unique Feature column.
            It also requires that the output schema has ColumnCount == 1.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SchemaBindablePredictorWrapperBase.SingleValueRowMapper.Microsoft#ML#Data#ISchemaBoundRowMapper#GetDependenciesForNewColumns(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SchemaBindablePredictorWrapper">
            <summary>
            This class is a wrapper for all <see cref="T:Microsoft.ML.IPredictor"/>s except for quantile regression predictors,
            and calibrated binary classification predictors.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SchemaBindableBinaryPredictorWrapper">
            <summary>
            This is an <see cref="T:Microsoft.ML.Data.ISchemaBindableMapper"/> wrapper for calibrated binary classification predictors.
            They need a separate wrapper because they return two values instead of one: the raw score and the probability.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SchemaBindableBinaryPredictorWrapper.CalibratedRowMapper">
            <summary>
            The <see cref="T:Microsoft.ML.Data.ISchemaBoundRowMapper"/> implementation for distribution predictor wrappers that produce
            two float-valued output columns. Note that the Bindable wrapper does input schema validation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SchemaBindableBinaryPredictorWrapper.CalibratedRowMapper.Microsoft#ML#Data#ISchemaBoundRowMapper#GetDependenciesForNewColumns(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SchemaBindableQuantileRegressionPredictor">
            <summary>
            This is an <see cref="T:Microsoft.ML.Data.ISchemaBindableMapper"/> wrapper for quantile regression predictors. They need a separate
            wrapper because they need the quantiles to create the <see cref="T:Microsoft.ML.Data.ISchemaBoundMapper"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ScoreSchemaFactory">
            <summary>
            This class contains method for creating commonly used <see cref="T:Microsoft.ML.DataViewSchema"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ScoreSchemaFactory.Create(Microsoft.ML.Data.DataViewType,System.String,System.String)">
            <summary>
            Return a <see cref="T:Microsoft.ML.DataViewSchema"/> which contains a single score column.
            </summary>
            <param name="scoreType">The type of the score column.</param>
            <param name="scoreColumnKindValue">The kind of the score column. It's the value of <see cref="F:Microsoft.ML.Data.AnnotationUtils.Kinds.ScoreColumnKind"/> in the score column's metadata.</param>
            <param name="scoreColumnName">The score column's name in the generated <see cref="T:Microsoft.ML.DataViewSchema"/>.</param>
            <returns><see cref="T:Microsoft.ML.DataViewSchema"/> which contains only one column.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ScoreSchemaFactory.CreateBinaryClassificationSchema(System.String,System.String)">
            <summary>
            Create a <see cref="T:Microsoft.ML.DataViewSchema"/> with two columns for binary classifier. The first column, indexed by 0, is the score column.
            The second column is the probability column. For example, for linear support vector machine, score column stands for the inner product
            of linear coefficients and the input feature vector and we convert score column to probability column using a calibrator.
            </summary>
            <param name="scoreColumnName">Column name of score column</param>
            <param name="probabilityColumnName">Column name of probability column</param>
            <returns><see cref="T:Microsoft.ML.DataViewSchema"/> of binary classifier's output.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ScoreSchemaFactory.CreateQuantileRegressionSchema(Microsoft.ML.Data.DataViewType,System.Double[])">
            <summary>
            This is very similar to <see cref="M:Microsoft.ML.Data.ScoreSchemaFactory.Create(Microsoft.ML.Data.DataViewType,System.String,System.String)"/> but adds one extra metadata field to the only score column.
            </summary>
            <param name="scoreType">Output element's type of quantile regressor. Note that a quantile regressor can produce an array of <see cref="T:Microsoft.ML.Data.PrimitiveDataViewType"/>.</param>
            <param name="quantiles">Quantiles used in quantile regressor.</param>
            <returns><see cref="T:Microsoft.ML.DataViewSchema"/> of quantile regressor's output.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ScoreSchemaFactory.CreateSequencePredictionSchema(Microsoft.ML.Data.DataViewType,System.String,Microsoft.ML.Data.VBuffer{System.ReadOnlyMemory{System.Char}})">
            <summary>
            This function returns a schema for sequence predictor's output. Its output column is always called <see cref="F:Microsoft.ML.Data.AnnotationUtils.Const.ScoreValueKind.PredictedLabel"/>.
            </summary>
            <param name="scoreType">Score column's type produced by sequence predictor.</param>
            <param name="scoreColumnKindValue">A metadata value of score column. It's the value associated with key
            <see cref="F:Microsoft.ML.Data.AnnotationUtils.Kinds.ScoreColumnKind"/>.</param>
            <param name="keyNames">Sequence predictor usually generates integer outputs. This field tells the tags of all possible output values.
            For example, output integer 0 could be mapped to "Sell" and 0 to "Buy" when predicting stock trend.</param>
            <returns><see cref="T:Microsoft.ML.DataViewSchema"/> of sequence predictor's output.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.BindingsWrappedRowCursor">
            <summary>
            A class for mapping an input to an output cursor assuming no output columns
            are requested, given a bindings object. This can be useful for transforms
            utilizing the <see cref="T:Microsoft.ML.Data.ColumnBindingsBase"/>, but for which it is
            inconvenient or inefficient to handle the "no output selected" case in their
            own implementation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BindingsWrappedRowCursor.#ctor(Microsoft.ML.Runtime.IChannelProvider,Microsoft.ML.DataViewRowCursor,Microsoft.ML.Data.ColumnBindingsBase)">
            <summary>
            Creates a wrapped version of the cursor
            </summary>
            <param name="provider">Channel provider</param>
            <param name="input">The input cursor</param>
            <param name="bindings">The bindings object, </param>
        </member>
        <member name="M:Microsoft.ML.Data.BindingsWrappedRowCursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.BindingsWrappedRowCursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.CatalogUtils">
            <summary>
            Convenience method to more easily extract an <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/> from an <see cref="T:Microsoft.ML.Data.IInternalCatalog"/>
            implementor without requiring an explicit cast.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IInternalCatalog">
            <summary>
            An internal interface for the benefit of those <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>-bearing objects accessible through
            <see cref="T:Microsoft.ML.MLContext"/>. Because this is meant to consumed by component authors implementations of this interface
            should be explicit.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SourceNameColumnBase.TryParse(System.String)">
            <summary>
            For parsing from a string. This supports "name" and "name:source".
            Derived classes that want to provide parsing functionality to the CmdParser need to implement
            a static Parse method. That method can call this (directly or indirectly) to handle the supported
            syntax.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SourceNameColumnBase.TryParse(System.String,System.String@)">
            <summary>
            For parsing from a string. This supports "name" and "name:source" and "name:extra:source". For the last
            form, the out extra parameter is sort accordingly. For the other forms, extra is set to null.
            Derived classes that want to provide parsing functionality to the CmdParser need to implement
            a static Parse method. That method can call this (directly or indirectly) to handle the supported
            syntax.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SourceNameColumnBase.TryUnparseCore(System.Text.StringBuilder)">
            <summary>
            The core unparsing functionality, for generating succinct command line forms "name" and "name:source".
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SourceNameColumnBase.TryUnparseCore(System.Text.StringBuilder,System.String)">
            <summary>
            The core unparsing functionality, for generating the succinct command line form "name:extra:source".
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.SourceNameColumnBase.TrySanitize">
            <summary>
            If both of name and source are null or white-space, return false.
            Otherwise, if one is null or white-space, assign that one the other's value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ManyToOneColumn.TryParse(System.String)">
            <summary>
            The parsing functionality for custom parsing from a string. This supports "name" and "name:sources",
            where sources is a comma separated list of source column names.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ManyToOneColumn.TryParse(System.String,System.String@)">
            <summary>
            Parsing functionality for custom parsing from a string with an "extra" value between name and sources.
            This supports "name", "name:sources" and "name:extra:sources".
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ColumnBindingsBase">
            <summary>
            Base class that abstracts passing input columns through (with possibly different indices) and adding
            InfoCount additional columns. If an added column has the same name as a non-hidden input column, it hides
            the input column, and is placed immediately after the input column. Otherwise, the added column is placed
            at the end. By default, newly added columns have no annotations (but this can be overridden).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindingsBase.#ctor(Microsoft.ML.DataViewSchema,System.Boolean,System.String[])">
            <summary>
            Constructor taking the input schema and new column names. Names must be non-empty and
            each name must be non-white-space. The names must be unique but can match existing names
            in schemaInput. For error reporting, this assumes that the names come from a user-supplied
            parameter named "column". This takes ownership of the params array of names.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ColumnBindingsBase.InfoCount">
            <summary>
            The number of added columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindingsBase.MapColumnIndex(System.Boolean@,System.Int32)">
            <summary>
            This maps a column index for this schema to either a source column index (when
            <paramref name="isSrcColumn"/> is true), or to an "iinfo" index of an added column
            (when <paramref name="isSrcColumn"/> is false).
            </summary>
            <param name="isSrcColumn">Whether the return index is for a source column</param>
            <param name="col">The column index for this schema</param>
            <returns>The index (either source index or iinfo index)</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindingsBase.MapIinfoToCol(System.Int32)">
            <summary>
            This maps from an index to an added column "info" to a column index.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindingsBase.GetActive(System.Func{System.Int32,System.Boolean})">
            <summary>
            The given predicate maps from output column index to whether the column is active.
            This builds an array of bools of length ColumnCount containing the results of calling
            predicate on each column index.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindingsBase.GetActive(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            This builds an array of bools of length ColumnCount indicating the index of the active column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindingsBase.GetActiveInput(System.Func{System.Int32,System.Boolean})">
            <summary>
            The given predicate maps from output column index to whether the column is active.
            This builds an array of bools of length Input.ColumnCount containing the results of calling
            predicate on the output column index corresponding to each input column index.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindingsBase.GetActiveInput(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            This builds an array of bools of length Input.ColumnCount containing indicating the index of the
            active input columns, given the actual columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindingsBase.AnyNewColumnsActive(System.Func{System.Int32,System.Boolean})">
            <summary>
            Determine whether any columns generated by this transform are active.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ColumnBindings">
            <summary>
            Class that encapsulates passing input columns through (with possibly different indices) and adding
            additional columns. If an added column has the same name as a non-hidden input column, it hides
            the input column, and is placed immediately after the input column. Otherwise, the added column is placed
            at the end.
            This class is intended to simplify predicate propagation for this case.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ColumnBindings.AddedColumnIndices">
            <summary>
            The indices of added columns in the <see cref="P:Microsoft.ML.Data.ColumnBindings.Schema"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ColumnBindings.InputSchema">
            <summary>
            The input schema.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ColumnBindings.Schema">
            <summary>
            The merged schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindings.#ctor(Microsoft.ML.DataViewSchema,Microsoft.ML.DataViewSchema.DetachedColumn[])">
            <summary>
            Create a new instance of <see cref="T:Microsoft.ML.Data.ColumnBindings"/>.
            </summary>
            <param name="input">The input schema that we're adding columns to.</param>
            <param name="addedColumns">The columns being added.</param>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindings.MapColumnIndex(System.Boolean@,System.Int32)">
            <summary>
            This maps a column index for this schema to either a source column index (when
            <paramref name="isSrcColumn"/> is true), or to an "iinfo" index of an added column
            (when <paramref name="isSrcColumn"/> is false).
            </summary>
            <param name="isSrcColumn">Whether the return index is for a source column</param>
            <param name="col">The column index for this schema</param>
            <returns>The index (either source index or iinfo index)</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnBindings.GetActiveInput(System.Func{System.Int32,System.Boolean})">
            <summary>
            The given predicate maps from output column index to whether the column is active.
            This builds an array of bools of length Input.ColumnCount containing the results of calling
            predicate on the output column index corresponding to each input column index.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ColumnParsingUtils">
            <summary>
            Parsing utilities for converting between transform column argument objects and
            command line representations.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnParsingUtils.TryParse(System.String,System.String@,System.String@)">
            <summary>
            For parsing name and source from a string. This supports "name" and "name:source".
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnParsingUtils.TryParse(System.String,System.String@,System.String@,System.String@)">
            <summary>
            For parsing name and source from a string. This supports "name" and "name:source" and "name:extra:source".
            For the last form, the out extra parameter is set accordingly. For the other forms, extra is set to null.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ColumnConcatenatingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting an <see cref="T:Microsoft.ML.Transforms.ColumnConcatenatingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.ColumnOptions.#ctor(System.String,System.String[])">
            <summary>
            This denotes a concatenation of all <paramref name="inputColumnNames"/> into column called <paramref name="name"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.ColumnOptions.#ctor(System.String,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            This denotes a concatenation of input columns into one column called <paramref name="name"/>.
            For each input column, an 'alias' can be specified, to be used in constructing the resulting slot names.
            If the alias is not specified, it defaults to be column name.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.ColumnConcatenatingTransformer.Columns">
            <summary>
            The names of the output and input column pairs for the transformation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String[])">
            <summary>
            Concatename columns in <paramref name="inputColumnNames"/> into one column <paramref name="outputColumnName"/>.
            Original columns are also preserved.
            The column types must match, and the output column type is always a vector.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ColumnConcatenatingTransformer.ColumnOptions[])">
            <summary>
            Concatenates multiple groups of columns, each group is denoted by one of <paramref name="columns"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext)">
            <summary>
            Factory method for SignatureLoadModel.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ColumnConcatenatingTransformer.Options,Microsoft.ML.IDataView)">
            <summary>
             Factory method for SignatureDataTransform.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.ColumnConcatenatingTransformer.TaggedOptions,Microsoft.ML.IDataView)">
            <summary>
            Factory method corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.IDataView)">
            <summary>
            Factory method for SignatureLoadDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnConcatenatingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.DataViewSchema)">
            <summary>
            Factory method for SignatureLoadRowMapper.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ColumnConcatenatingTransformer.Mapper.BoundColumn">
            <summary>
            This represents the column information bound to the schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.InvertHashUtils.ClearDst(System.Text.StringBuilder@)">
            <summary>
            Clears a destination StringBuilder. If it is currently null, allocates it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.InvertHashUtils.GetSimpleMapper``1(Microsoft.ML.DataViewSchema,System.Int32)">
            <summary>
            Gets the mapping from T into a StringBuilder representation, using various heuristics.
            This StringBuilder representation will be a component of the composed KeyValues for the
            hash outputs.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.InvertHashCollector`1.Pair">
            <summary>
            This is a small struct that is meant to compare akin to the value,
            but also maintain the order in which it was inserted, assuming that
            we're using something like a hashset where order is not preserved.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.InvertHashCollector`1.#ctor(System.Int32,System.Int32,Microsoft.ML.Data.ValueMapper{`0,System.Text.StringBuilder},System.Collections.Generic.IEqualityComparer{`0},Microsoft.ML.Data.ValueMapper{`0,`0})">
            <summary>
            Constructs an invert hash collector that collects unique keys per slot, then is able
            to build a textual description out of that.
            </summary>
            <param name="slots">The maximum number of slots</param>
            <param name="maxCount">The number of distinct keys we can accumulate per slot</param>
            <param name="mapper">Utilized in composing the final description, once we have done
            collecting the distinct keys.</param>
            <param name="comparer">For detecting uniqueness of the keys we're collecting per slot.</param>
            <param name="copier">For copying input values into a value to actually store. Useful for
            types of objects where it is possible to do a comparison relatively quickly on some sort
            of "unsafe" object, but for which when we decide to actually store it we need to provide
            a "safe" version of the object. Utilized in the n-gram hash transform, for example.</param>
        </member>
        <member name="T:Microsoft.ML.Data.TextModelHelper">
            <summary>
            Simple utility class for saving a <see cref="T:Microsoft.ML.Data.VBuffer`1"/> of ReadOnlyMemory
            as a model, both in a binary and more easily human readable form.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetadataDispatcherBase">
            <summary>
            Base class for handling the schema metadata API.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetadataDispatcherBase.ColInfo">
            <summary>
            Information for a column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetadataDispatcherBase.GetterInfo">
            <summary>
            Base class for metadata getters.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetadataDispatcherBase.GetterInfo`1">
            <summary>
            Strongly typed base class for metadata getters. Introduces the abstract Get method.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetadataDispatcherBase.GetterInfoDelegate`1">
            <summary>
            A delegate based metadata getter.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetadataDispatcherBase.GetterInfoPrimitive`1">
            <summary>
            A primitive value based metadata getter.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.MetadataDispatcherBase.ColCount">
            <summary>
            The number of columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcherBase.CreateInfo(Microsoft.ML.DataViewSchema,System.Int32,System.Func{System.String,System.Int32,System.Boolean})">
            <summary>
            Create a ColInfo with the indicated information and no GetterInfos. This doesn't
            register a column, only creates a ColInfo. Note that multiple columns can share
            the same ColInfo, if desired. Simply call RegisterColumn multiple times, passing
            the same ColInfo but different index values. This can only be called before Seal is called.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcherBase.RegisterColumn(System.Int32,Microsoft.ML.Data.MetadataDispatcherBase.ColInfo)">
            <summary>
            Register the given ColInfo as the metadata handling information for the given
            column index. Throws if the given column index already has a ColInfo registered for it.
            This can only be called before Seal is called.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcherBase.Seal">
            <summary>
            Seals this dispatcher from further column registrations. This must be called before any
            metadata methods are called, otherwise an exception is thrown.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcherBase.GetColInfoOrNull(System.Int32)">
            <summary>
            Returns the ColInfo registered for the given column index, if there is one. This may be called
            before or after Seal is called.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcherBase.GetMetadataTypes(System.Int32)">
            <summary>
            Gets the metadata kinds and types for the given column index.
            This can only be called after Seal is called.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcherBase.GetMetadataTypeOrNull(System.String,System.Int32)">
            <summary>
            Gets the metadata type for the given metadata kind and column index, if there is one.
            This can only be called after Seal is called.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcherBase.GetMetadata``1(Microsoft.ML.Runtime.IExceptionContext,System.String,System.Int32,``0@)">
            <summary>
            Gets the metadata for the given metadata kind and column index. Throws if there isn't any.
            This can only be called after Seal is called.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetadataDispatcher">
            <summary>
            For handling the schema metadata API. Call one of the BuildMetadata methods to get
            a builder for a particular column. Wrap the return in a using statement. Disposing the builder
            records the metadata for the column. Call Seal() once all metadata is constructed.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcher.BuildMetadata(System.Int32)">
            <summary>
            Start building metadata for a column that doesn't pass through any metadata from
            a source column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcher.BuildMetadata(System.Int32,Microsoft.ML.DataViewSchema,System.Int32)">
            <summary>
            Start building metadata for a column that passes through all metadata from
            a source column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcher.BuildMetadata(System.Int32,Microsoft.ML.DataViewSchema,System.Int32,System.Func{System.String,System.Int32,System.Boolean})">
            <summary>
            Start building metadata for a column that passes through metadata of certain kinds from
            a source column. The kinds that are passed through are those for which
            <paramref name="filterSrc"/> returns true.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcher.BuildMetadata(System.Int32,Microsoft.ML.DataViewSchema,System.Int32,System.String)">
            <summary>
            Start building metadata for a column that passes through metadata of the given kind from
            a source column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcher.BuildMetadata(System.Int32,Microsoft.ML.DataViewSchema,System.Int32,System.String[])">
            <summary>
            Start building metadata for a column that passes through metadata of the given kinds from
            a source column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.MetadataDispatcher.Builder">
            <summary>
            The builder for metadata for a particular column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcher.Builder.#ctor(Microsoft.ML.Data.MetadataDispatcher,System.Int32,Microsoft.ML.DataViewSchema,System.Int32,System.Func{System.String,System.Int32,System.Boolean})">
            <summary>
            This should really be private to MetadataDispatcher, but C#'s accessibility model doesn't
            allow restricting to an outer class.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcher.Builder.AddGetter``1(System.String,Microsoft.ML.Data.DataViewType,Microsoft.ML.Data.AnnotationUtils.AnnotationGetter{``0})">
            <summary>
            Add metadata of the given kind. When requested, the metadata is fetched by calling the given delegate.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcher.Builder.AddPrimitive``1(System.String,Microsoft.ML.Data.DataViewType,``0)">
            <summary>
            Add metadata of the given kind, with the given value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.MetadataDispatcher.Builder.Dispose">
            <summary>
            Close out the builder. This registers the metadata with the dispatcher.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.NopTransform">
            <summary>
            A transform that does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.NopTransform.CreateIfNeeded(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView)">
            <summary>
            Creates a NopTransform if the input is not an IDataTransform.
            Otherwise it returns the input.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.NopTransform.Microsoft#ML#IDataView#Schema">
            <summary>
            Explicit implementation prevents Schema from being accessed from derived classes.
            It's our first step to separate data produced by transform from transform.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.NopTransform.OutputSchema">
            <summary>
            Shape information of the produced output. Note that the input and the output of this transform (and their types) are identical.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.NopTransform.Microsoft#ML#Data#IRowToRowMapper#GetDependencies(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.SignatureLoadColumnFunction">
            <summary>
            Signature for a repository based loader of an <see cref="T:Microsoft.ML.Data.IColumnFunction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IColumnFunctionBuilder.ProcessValue">
            <summary>
            Trains on the current value.
            </summary>
            <returns>True if it can use more values for training.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.IColumnFunctionBuilder.CreateColumnFunction">
            <summary>
            Finishes training and returns a column function.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.IColumnAggregator`1">
            <summary>
            Interface to define an aggregate function over values
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IColumnAggregator`1.ProcessValue(`0@)">
            <summary>
            Updates the aggregate function with a value
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.IColumnAggregator`1.Finish">
            <summary>
            Finishes the aggregation
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.Normalize">
            <summary>
            This contains entry-point definitions related to <see cref="T:Microsoft.ML.Transforms.NormalizeTransform"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.OneToOneTransformerBase">
            <summary>
            Base class for transformer which operates on pairs input and output columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.PerGroupTransformBase`3">
            <summary>
            This is a base implementation for a transform that in order to compute its output columns, needs to look
            at an entire group of consecutive input examples. For each example in the group, it looks at the value of
            two input columns and after seeing the entire group it computes the output column values. The output values
            are the same for every example in the same group.
            </summary>
            <typeparam name="TLabel">The type of the values in the first input column</typeparam>
            <typeparam name="TScore">The type of the values in the second input column</typeparam>
            <typeparam name="TState">Each class deriving from this transform should implement a state class that knows
            how to return the current group's output column values.</typeparam>
        </member>
        <member name="T:Microsoft.ML.Data.PerGroupTransformBase`3.BindingsBase">
            <summary>
            Deriving classes only need to implement <see cref="M:Microsoft.ML.Data.ColumnBindingsBase.GetColumnTypeCore(System.Int32)"/>.
            If any of the output columns have metadata, then the metadata methods should be overridden.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.PerGroupTransformBase`3.CreateGetters(`2,System.Func{System.Int32,System.Boolean})">
            <summary>
            Creates the getters for the transform's output columns. It can be assumed that when the getters are called, the state
            object contains the current values of the output columns.
            </summary>
            <param name="state">The state object, containing the current group's output values.</param>
            <param name="predicate">Which output columns are active.</param>
        </member>
        <member name="M:Microsoft.ML.Data.PerGroupTransformBase`3.GetLabelGetter(Microsoft.ML.DataViewRow)">
            <summary>
            Get the getter for the first input column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.PerGroupTransformBase`3.GetScoreGetter(Microsoft.ML.DataViewRow)">
            <summary>
            Get the getter for the second input column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.PerGroupTransformBase`3.InitializeState(Microsoft.ML.DataViewRow)">
            <summary>
            Return a new state object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.PerGroupTransformBase`3.ProcessExample(`2,`0,`1)">
            <summary>
            Update the state object with one example.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.PerGroupTransformBase`3.UpdateState(`2)">
            <summary>
            This method is called after processing a whole group of examples. In this method the
            state object should compute the output values for the group just seen.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.PerGroupTransformBase`3.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.PerGroupTransformBase`3.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Data.RowToRowTransformerBase">
            <summary>
            Base class for transformer which produce new columns, but doesn't affect existing ones.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TransformBase">
            <summary>
            Base class for transforms.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Data.TransformBase.Microsoft#ML#IDataView#Schema">
             <summary>
             The field is the type information of the produced IDataView of this transformer.
            
             Explicit interface implementation hides <see cref="P:Microsoft.ML.IDataView.Schema"/> in all derived classes. The reason
             is that a transformer should know the type it will produce but shouldn't contain the type of the data it produces.
             Thus, this field will be eventually removed while legacy code can still access <see cref="P:Microsoft.ML.IDataView.Schema"/> for now.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TransformBase.ShouldUseParallelCursors(System.Func{System.Int32,System.Boolean})">
            <summary>
            This returns false when this transform cannot support parallel cursors, null when it
            doesn't care, and true when it benefits from parallel cursors. For example, a transform
            that simply affects metadata, but not column values should return null, while a transform
            that does a bunch of computation should return true (if legal).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TransformBase.GetRowCursorCore(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column},System.Random)">
            <summary>
            Create a single (non-parallel) row cursor.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.RowToRowTransformBase">
            <summary>
            Base class for transforms that map single input row to single output row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.FilterBase">
            <summary>
            Base class for transforms that filter out rows without changing the schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowMapperTransformBase.Microsoft#ML#Data#IRowToRowMapper#GetDependencies(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowMapperTransformBase.RowImpl.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.RowToRowMapperTransformBase.RowImpl.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.OneToOneTransformBase">
            <summary>
            Base class for transforms that operate row by row with each destination column using one
            source column. It provides an extension mechanism to allow a destination column to depend
            on multiple input columns.
            The implementation of TransformBase's OutputSchema and GetRowCursorCore are found here.
            Because of this, classes deriving from OneToOneTransformerBase do not need to worry about creating
            a <see cref="T:Microsoft.ML.DataViewSchema"/> or a <see cref="T:Microsoft.ML.DataViewRowCursor"/>,
            since <see cref="F:Microsoft.ML.Data.OneToOneTransformBase._bindings"/> has an AsSchema property which returns the schema, and the nested <see cref="T:Microsoft.ML.Data.OneToOneTransformBase.Cursor"/> class
            is used by all classes deriving from OneToOneTransformBase when getting the row cursor.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.OneToOneTransformBase.ColInfo">
            <summary>
            Information about an added column - the name of the new column, the index of the
            source column and the type of the source column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Data.OneToOneTransformBase.Bindings.Infos">
            <summary>
            Information about each added column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.Bindings.GetDependencies(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.Data.OneToOneTransformBase,Microsoft.ML.IDataView,System.Func{Microsoft.ML.Data.DataViewType,System.String})">
            <summary>
            Re-applying constructor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.SaveAsPfaCore(Microsoft.ML.Model.Pfa.BoundPfaContext,System.Int32,Microsoft.ML.Data.OneToOneTransformBase.ColInfo,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Called by <see cref="M:Microsoft.ML.Model.Pfa.ISaveAsPfa.SaveAsPfa(Microsoft.ML.Model.Pfa.BoundPfaContext)"/>. Should be implemented by subclasses that return
            <c>true</c> from <see cref="P:Microsoft.ML.Model.Pfa.ICanSavePfa.CanSavePfa"/>. Will be called
            </summary>
            <param name="ctx">The context. Can be used to declare cells, access other information,
            and whatnot. This method should not actually, however, declare the variable corresponding
            to the output column. The calling method will do that.</param>
            <param name="iinfo">The index of the output column whose PFA is being composed</param>
            <param name="info">The column info</param>
            <param name="srcToken">The token in the PFA corresponding to the source col</param>
            <returns>Shuold return the declaration corresponding to the value of this column. Will
            return <c>null</c> in the event that we do not know how to express this column as PFA</returns>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.ColumnIndex(System.Int32)">
            <summary>
            Return the (destination) column index for the indicated added column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.ActivateSourceColumns(System.Int32,System.Boolean[])">
            <summary>
            Activates the source column.
            Override when you don't need the source column to generate the value for this column or when you need
            other auxiliary source columns that iinfo destination column depends on.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.GetGetterCore(Microsoft.ML.Runtime.IChannel,Microsoft.ML.DataViewRow,System.Int32,System.Action@)">
            <summary>
            Sub-classes implement this to provide, for a cursor, a getter delegate and optional disposer.
            If no action is needed when the cursor is Disposed, the override should set disposer to null,
            otherwise it should be set to a delegate to be invoked by the cursor's Dispose method. It's best
            for this action to be idempotent - calling it multiple times should be equivalent to calling it once.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.ShouldUseParallelCursors(System.Func{System.Int32,System.Boolean})">
            <summary>
            This produces either "true" or "null" according to whether <see cref="M:Microsoft.ML.Data.OneToOneTransformBase.WantParallelCursors(System.Func{System.Int32,System.Boolean})"/>
            returns true or false. Note that this will never return false. Any derived class
            must support (but not necessarily prefer) parallel cursors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.WantParallelCursors(System.Func{System.Int32,System.Boolean})">
            <summary>
            This should return true iff parallel cursors are advantageous. The default implementation
            returns true iff some columns added by this transform are active.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.ExceptGetSlotCursor(System.Int32)">
            <summary>
            Returns a standard exception for responding to an invalid call to <see cref="M:Microsoft.ML.Data.ITransposeDataView.GetSlotCursor(System.Int32)"/>
            implementation in <see langword="this"/> on a column that is not transposable.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.GetSlotCursorCore(System.Int32)">
            <summary>
            Implementors should note this only called if <see cref="M:Microsoft.ML.Data.OneToOneTransformBase.GetSlotTypeCore(System.Int32)"/>
            returns a non-null value for this <paramref name="iinfo"/>, so in principle
            it should always return a valid value, if called. This implementation throws,
            since the default implementation of <see cref="M:Microsoft.ML.Data.OneToOneTransformBase.GetSlotTypeCore(System.Int32)"/> will return
            null for all new columns, and so reaching this is only possible if there is a
            bug.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Data.OneToOneTransformBase.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.ApplyTransformUtils">
            <summary>
            Utilities to rebind data transforms
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ApplyTransformUtils.ApplyTransformToData(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.IDataTransform,Microsoft.ML.IDataView)">
            <summary>
            Attempt to apply the data transform to a different data view source.
            If the transform in question implements <see cref="T:Microsoft.ML.Data.ITransformTemplate"/>, <see cref="M:Microsoft.ML.Data.ITransformTemplate.ApplyToData(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView)"/>
            is called. Otherwise, the transform is serialized into a byte array and then deserialized.
            </summary>
            <param name="env">The host to use</param>
            <param name="transform">The transform to apply.</param>
            <param name="newSource">The data view to apply the transform to.</param>
            <returns>The resulting data view.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ApplyTransformUtils.ApplyAllTransformsToData(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,Microsoft.ML.IDataView,Microsoft.ML.IDataView)">
            <summary>
            Walks back the Source chain of the <see cref="T:Microsoft.ML.Data.IDataTransform"/> up to the <paramref name="oldSource"/>
            (or <see cref="T:Microsoft.ML.Data.ILegacyDataLoader"/> if <paramref name="oldSource"/> is <c>null</c>),
            and reapplies all transforms in the chain, to produce the same chain but bound to the different data.
            It is valid to have no transforms: in this case the result will be equal to <paramref name="newSource"/>
            If <paramref name="oldSource"/> is specified and not found in the pipe, an exception is thrown.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="chain">The end of the chain.</param>
            <param name="newSource">The new data to attach the chain to.</param>
            <param name="oldSource">The 'old source' of the pipe, that doesn't need to be reapplied. If null, all transforms are reapplied.</param>
            <returns>The resulting data view.</returns>
        </member>
        <member name="T:Microsoft.ML.Data.ColumnCursorExtensions">
            <summary>
            Extension methods that allow to extract values of a single column of an <see cref="T:Microsoft.ML.IDataView"/> as an
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnCursorExtensions.GetColumn``1(Microsoft.ML.IDataView,System.String)">
            <summary>
            Extract all values of one column of the data view in a form of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the values. This must match the actual column type.</typeparam>
            <param name="data">The data view to get the column from.</param>
            <param name="columnName">The name of the column to be extracted.</param>
        </member>
        <member name="M:Microsoft.ML.Data.ColumnCursorExtensions.GetColumn``1(Microsoft.ML.IDataView,Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Extract all values of one column of the data view in a form of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the values. This must match the actual column type.</typeparam>
            <param name="data">The data view to get the column from.</param>
            <param name="column">The column to be extracted.</param>
        </member>
        <member name="T:Microsoft.ML.Data.ComponentCreation">
            <summary>
            This class defines extension methods for an <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/> to facilitate creating
            components (loaders, transforms, trainers, scorers, evaluators, savers).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.Zip(Microsoft.ML.Runtime.IHostEnvironment,System.Collections.Generic.IEnumerable{Microsoft.ML.IDataView})">
            <summary>
            Create a new data view which is obtained by appending all columns of all the source data views.
            If the data views are of different length, the resulting data view will have the length equal to the
            length of the shortest source.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="sources">A non-empty collection of data views to zip together.</param>
            <returns>The resulting data view.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.CreateExamples(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Microsoft.ML.Data.RoleMappedSchema.ColumnRole,System.String}})">
            <summary>
            Generate training examples for training a predictor or instantiating a scorer.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="data">The data to use for training or scoring.</param>
            <param name="features">The name of the features column. Can be null.</param>
            <param name="label">The name of the label column. Can be null.</param>
            <param name="group">The name of the group ID column (for ranking). Can be null.</param>
            <param name="weight">The name of the weight column. Can be null.</param>
            <param name="custom">Additional column mapping to be passed to the trainer or scorer (specific to the prediction type). Can be null or empty.</param>
            <returns>The constructed examples.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.LoadTransforms(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream,Microsoft.ML.IDataView)">
            <summary>
            Load the transforms (but not loader) from the model steram and apply them to the specified data.
            It is acceptable to have no transforms in the model stream: in this case the original
            <paramref name="data"/> will be returned.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="modelStream">The model stream to load from.</param>
            <param name="data">The data to apply transforms to.</param>
            <returns>The transformed data.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.CreateLoader``1(Microsoft.ML.Runtime.IHostEnvironment,``0,Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Creates a data loader from the arguments object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.CreateLoader(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Creates a data loader from the 'LoadName{settings}' string.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.CreateSaver``1(Microsoft.ML.Runtime.IHostEnvironment,``0)">
            <summary>
            Creates a data saver from the arguments object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.CreateSaver(Microsoft.ML.Runtime.IHostEnvironment,System.String)">
            <summary>
            Creates a data saver from the 'LoadName{settings}' string.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.CreateTransform``1(Microsoft.ML.Runtime.IHostEnvironment,``0,Microsoft.ML.IDataView)">
            <summary>
            Creates a data transform from the arguments object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.CreateTransform(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.IDataView)">
            <summary>
            Creates a data transform from the 'LoadName{settings}' string.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.CreateScorer(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Creates a data scorer from the 'LoadName{settings}' string.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="settings">The settings string.</param>
            <param name="data">The data to score.</param>
            <param name="predictor">The predictor to score.</param>
            <param name="trainSchema">The training data schema from which the scorer can optionally extract
            additional information, for example, label names. If this is <c>null</c>, no information will be
            extracted.</param>
            <returns>The scored data.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.CreateDefaultScorer(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Creates a default data scorer appropriate to the predictor's prediction kind.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="data">The data to score.</param>
            <param name="predictor">The predictor to score.</param>
            <param name="trainSchema">The training data schema from which the scorer can optionally extract
            additional information, for example, label names. If this is <c>null</c>, no information will be
            extracted.</param>
            <returns>The scored data.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.ComponentCreation.LoadPredictorOrNull(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)">
            <summary>
            Loads a predictor from the model stream. Returns null iff there's no predictor.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="modelStream">The model stream.</param>
        </member>
        <member name="T:Microsoft.ML.Data.LocalEnvironment">
            <summary>
            An ML.NET environment for local execution.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LocalEnvironment.#ctor(System.Nullable{System.Int32})">
            <summary>
            Create an ML.NET <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/> for local execution.
            </summary>
            <param name="seed">Random seed. Set to <c>null</c> for a non-deterministic environment.</param>
        </member>
        <member name="M:Microsoft.ML.Data.LocalEnvironment.AddListener(System.Action{Microsoft.ML.Runtime.IMessageSource,Microsoft.ML.Runtime.ChannelMessage})">
            <summary>
            Add a custom listener to the messages of ML.NET components.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.LocalEnvironment.RemoveListener(System.Action{Microsoft.ML.Runtime.IMessageSource,Microsoft.ML.Runtime.ChannelMessage})">
            <summary>
            Remove a previously added a custom listener.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.TypeParsingUtils">
            <summary>
            Utilities to parse command-line representations of <see cref="T:Microsoft.ML.IDataView"/> types.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.TypeParsingUtils.TryParseDataKind(System.String,Microsoft.ML.Data.InternalDataKind@,Microsoft.ML.Data.KeyCount@)">
            <summary>
            Attempt to parse the string into a data kind and (optionally) a keyCount. This method does not check whether
            the returned <see cref="T:Microsoft.ML.Data.InternalDataKind"/> can really be made into a key with the specified <paramref name="keyCount"/>.
            </summary>
            <param name="str">The string to parse.</param>
            <param name="dataKind">The parsed data kind.</param>
            <param name="keyCount">The parsed key count, or null if there's no key specification.</param>
            <returns>Whether the parsing succeeded or not.</returns>
        </member>
        <member name="M:Microsoft.ML.Data.TypeParsingUtils.ConstructKeyType(System.Nullable{Microsoft.ML.Data.InternalDataKind},Microsoft.ML.Data.KeyCount)">
            <summary>
            Construct a <see cref="T:Microsoft.ML.Data.KeyDataViewType"/> out of the data kind and the keyCount.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Data.KeyCount">
            <summary>
            Defines the cardinality, or count, of valid values of a <see cref="T:Microsoft.ML.Data.KeyDataViewType"/> column. This needs to be strictly positive.
            It is used by <see cref="T:Microsoft.ML.Data.TextLoader"/> and <see cref="T:Microsoft.ML.Transforms.TypeConvertingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.KeyCount.#ctor">
            <summary>
            Initializes the cardinality, or count, of valid values of a <see cref="T:Microsoft.ML.Data.KeyDataViewType"/> column to the
            largest integer that can be expresed by the underlying datatype of the <see cref="T:Microsoft.ML.Data.KeyDataViewType"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.KeyCount.#ctor(System.UInt64)">
            <summary>
            Initializes the cardinality, or count, of valid values of a <see cref="T:Microsoft.ML.Data.KeyDataViewType"/> column to <paramref name="count"/>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Data.KeyCount.Parse(System.String)">
            <summary>
            Parses the string format for a KeyCount, also supports the old KeyRange format for backwards compatibility.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Tools.SavePredictorCommand.CreateFile(System.String)">
            <summary>
            Create a file handle from path if it was not empty.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Tools.SavePredictorCommand.CreateStrm(Microsoft.ML.Data.IFileHandle)">
            <summary>
            Create the write stream from the file, if not null.
            </summary>
        </member>
        <member name="T:Microsoft.ML.BinaryLoaderSaverCatalog">
            <summary>
            Collection of extension methods for the <see cref="T:Microsoft.ML.DataOperationsCatalog"/> to create instances of
            components to save and read <see cref="T:Microsoft.ML.IDataView"/> objects to and from a high-performance binary format.
            </summary>
        </member>
        <member name="M:Microsoft.ML.BinaryLoaderSaverCatalog.LoadFromBinary(Microsoft.ML.DataOperationsCatalog,Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Load a <see cref="T:Microsoft.ML.IDataView"/> from an <see cref="T:Microsoft.ML.Data.IMultiStreamSource"/> on a binary file.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual loading happens here, just schema validation.
            </summary>
            <param name="catalog">The catalog.</param>
            <param name="fileSource">The file source to load from. This can be a <see cref="T:Microsoft.ML.Data.MultiFileSource"/>, for example.</param>
        </member>
        <member name="M:Microsoft.ML.BinaryLoaderSaverCatalog.LoadFromBinary(Microsoft.ML.DataOperationsCatalog,System.String)">
            <summary>
            Load a <see cref="T:Microsoft.ML.IDataView"/> from a binary file.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual loading happens here, just schema validation.
            </summary>
            <param name="catalog">The catalog.</param>
            <param name="path">The path to the file to load from.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LoadFromBinary](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/SaveAndLoadFromBinary.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.BinaryLoaderSaverCatalog.SaveAsBinary(Microsoft.ML.DataOperationsCatalog,Microsoft.ML.IDataView,System.IO.Stream,System.Boolean)">
            <summary>
            Save the <see cref="T:Microsoft.ML.IDataView"/> into a binary stream.
            </summary>
            <param name="catalog">The catalog.</param>
            <param name="data">The data view to save.</param>
            <param name="stream">The stream to write to.</param>
            <param name="keepHidden">Whether to keep hidden columns in the dataset.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SaveAsBinary](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/SaveAndLoadFromBinary.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="T:Microsoft.ML.Internal.Internallearn.UnsafeTypeOps`1">
            <summary>
            Represents some common global operations over a type
            including many unsafe operations.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.FeatureNameCollection.Sparse.#ctor(System.Int32,System.String[],System.Int32)">
            <summary>
            This does NOT take ownership of the names array.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.FeatureNameCollection.Sparse.#ctor(System.Int32,System.Int32,System.Int32[],System.String[])">
            <summary>
            This takes ownership of the arrays.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Internal.Internallearn.PredictionUtil">
            <summary>
            Various utilities
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.PredictionUtil.ParseArguments(Microsoft.ML.Runtime.IHostEnvironment,System.Object,System.String,System.String)">
            <summary>
            generic method for parsing arguments using CommandLine. If there's a problem, it throws an InvalidOperationException, with a message giving usage.
            </summary>
            <param name="env">The host environment</param>
            <param name="args">The argument object</param>
            <param name="settings">The settings string (for example, "threshold-")</param>
            <param name="name">The name is used for error reporting only</param>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.PredictionUtil.Array2String(System.Single[],System.String)">
            <summary>
            Make a string representation of an array
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.PredictionUtil.SeparatorFromString(System.String)">
            <summary>
            Convert string representation of char separator(s)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.PredictionUtil.SepCharFromString(System.String)">
            <summary>
            Convert from a string representation of separator to a char
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.PredictorUtils.SaveSummary(Microsoft.ML.Runtime.IChannel,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedSchema,System.IO.TextWriter)">
            <summary>
            Save the model summary.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.PredictorUtils.SaveText(Microsoft.ML.Runtime.IChannel,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedSchema,System.IO.TextWriter)">
            <summary>
            Save the model in text format (if it can save itself)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.PredictorUtils.SaveBinary(Microsoft.ML.Runtime.IChannel,Microsoft.ML.IPredictor,System.IO.BinaryWriter)">
            <summary>
            Save the model in binary format (if it can save itself).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.PredictorUtils.SaveIni(Microsoft.ML.Runtime.IChannel,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedSchema,System.IO.TextWriter)">
            <summary>
            Save the model in text format (if it can save itself)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.PredictorUtils.SaveCode(Microsoft.ML.Runtime.IChannel,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedSchema,System.IO.TextWriter)">
            <summary>
            Save the model in text format (if it can save itself)
            </summary>
        </member>
        <member name="T:Microsoft.ML.Internal.Internallearn.SlotDropper">
            <summary>
            Drops slots from a fixed or variable sized column based on slot ranges.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Internal.Internallearn.SlotDropper.DstLength">
            <summary>
            Returns -1 for non vector and unknown length vectors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.SlotDropper.#ctor(System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Constructs slot dropper. It expects the slot ranges to be in sorted order and not overlap.
            </summary>
            <param name="srcLength">0 indicates variable sized vector.</param>
            <param name="slotsMin">Low limit of ranges to be dropped.</param>
            <param name="slotsMax">Upper limit of ranges to be dropped. </param>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.SlotDropper.SubsetGetter``1(Microsoft.ML.ValueGetter{Microsoft.ML.Data.VBuffer{``0}})">
            <summary>
            Returns a getter that drops slots.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Internallearn.SlotDropper.DropSlots``1(Microsoft.ML.Data.VBuffer{``0}@,Microsoft.ML.Data.VBuffer{``0}@)">
            <summary>
            Drops slots from src and populates the dst with the resulting vector. Slots are
            dropped based on min and max slots that were passed at the constructor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Utilities.StreamUtils.Expand(System.String)">
            <summary>
            Expand an extended wildcard pattern into a set of file paths.
            </summary>
            <param name="pattern">the pattern to expand</param>
            <returns>the set of file paths matching the pattern</returns>
            <remarks>
            The wildcard pattern accepts the standard "*" and "?" placeholders.
            "..." also refers to a recursive search over subdirectories.
            "+" can also be used to make a union of several filenames or patterns.
            Names of files that do not exist will be excluded.
            </remarks>
        </member>
        <member name="T:Microsoft.ML.Internal.Utilities.TimerScope">
            <summary>
            A timer scope class that starts a <see cref="T:System.Diagnostics.Stopwatch"/> when created, calculates and prints elapsed time, physical and virtual memory usages before sending these to the telemetry when disposed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Internal.Utilities.SequencePool">
            <summary>
            A dictionary of uint sequences of variable length. Stores the sequences as
            byte sequences encoded with LEB128. Empty sequences (or null) are also valid.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Internal.Utilities.SequencePool.TryAdd(System.UInt32[],System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns true if the sequence was added, or false if it was already in the pool.
            </summary>
            <param name="sequence">The array containing the sequence to add to the pool.</param>
            <param name="min">The location in the array of the first sequence element.</param>
            <param name="lim">The exclusive end of the sequence.</param>
            <param name="id">To be populated with the id of the added sequence.</param>
            <returns>True if the sequence was added, false if the sequence was already present in the pool.</returns>
        </member>
        <member name="M:Microsoft.ML.Internal.Utilities.SequencePool.Get(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Find the given sequence in the pool. If not found, returns -1.
            </summary>
            <param name="sequence">An integer sequence</param>
            <param name="min">The starting index of the sequence to find in the pool</param>
            <param name="lim">The length of the sequence to find in the pool</param>
            <returns>The ID of the sequence if it is found, -1 otherwise</returns>
        </member>
        <member name="M:Microsoft.ML.Internal.Utilities.SequencePool.AddCore(System.UInt32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Adds the item. Does NOT check for whether the item is already present.
            </summary>
        </member>
        <member name="T:Microsoft.ML.DatabaseLoaderCatalog">
            <summary>
            Collection of extension methods for the <see cref="T:Microsoft.ML.DataOperationsCatalog"/> to read from databases.
            </summary>
        </member>
        <member name="M:Microsoft.ML.DatabaseLoaderCatalog.CreateDatabaseLoader(Microsoft.ML.DataOperationsCatalog,Microsoft.ML.Data.DatabaseLoader.Column[])">
            <summary>Create a database loader <see cref="T:Microsoft.ML.Data.DatabaseLoader"/>.</summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="columns">Array of columns <see cref="T:Microsoft.ML.Data.DatabaseLoader.Column"/> defining the schema.</param>
        </member>
        <member name="M:Microsoft.ML.DatabaseLoaderCatalog.CreateDatabaseLoader(Microsoft.ML.DataOperationsCatalog,Microsoft.ML.Data.DatabaseLoader.Options)">
            <summary>Create a database loader <see cref="T:Microsoft.ML.Data.DatabaseLoader"/>.</summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="options">Defines the settings of the load operation.</param>
        </member>
        <member name="M:Microsoft.ML.DatabaseLoaderCatalog.CreateDatabaseLoader``1(Microsoft.ML.DataOperationsCatalog)">
            <summary>Create a database loader <see cref="T:Microsoft.ML.Data.DatabaseLoader"/>.</summary>
            <typeparam name="TInput">Defines the schema of the data to be loaded. Use public fields or properties
            decorated with <see cref="T:Microsoft.ML.Data.LoadColumnAttribute"/> (and possibly other attributes) to specify the column
            names and their data types in the schema of the loaded data.</typeparam>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
        </member>
        <member name="T:Microsoft.ML.DataLoaderExtensions">
            <summary>
            Class used to load data from one or more files.
            </summary>
        </member>
        <member name="M:Microsoft.ML.DataLoaderExtensions.Load(Microsoft.ML.IDataLoader{Microsoft.ML.Data.IMultiStreamSource},System.String[])">
            <summary>
            Loads data from one or more file <paramref name="path"/> into an <see cref="T:Microsoft.ML.IDataView"/>.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual loading happens here, just schema validation.
            </summary>
            <param name="loader">The loader to use.</param>
            <param name="path">One or more paths from which to load data.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Load](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/LoadingText.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="T:Microsoft.ML.DataOperationsCatalog">
            <summary>
            Class used to create components that operate on data, but are not part of the model training pipeline.
            Includes components to load, save, cache, filter, shuffle, and split data.
            </summary>
        </member>
        <member name="T:Microsoft.ML.DataOperationsCatalog.TrainTestData">
            <summary>
            A pair of datasets, for the train and test set.
            </summary>
        </member>
        <member name="F:Microsoft.ML.DataOperationsCatalog.TrainTestData.TrainSet">
            <summary>
            Training set.
            </summary>
        </member>
        <member name="F:Microsoft.ML.DataOperationsCatalog.TrainTestData.TestSet">
            <summary>
            Testing set.
            </summary>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.TrainTestData.#ctor(Microsoft.ML.IDataView,Microsoft.ML.IDataView)">
            <summary>
            Create pair of datasets.
            </summary>
            <param name="trainSet">Training set.</param>
            <param name="testSet">Testing set.</param>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.LoadFromEnumerable``1(System.Collections.Generic.IEnumerable{``0},Microsoft.ML.Data.SchemaDefinition)">
             <summary>
             Create a new <see cref="T:Microsoft.ML.IDataView"/> over an enumerable of the items of user-defined type.
             The user maintains ownership of the <paramref name="data"/> and the resulting data view will
             never alter the contents of the <paramref name="data"/>.
             Since <see cref="T:Microsoft.ML.IDataView"/> is assumed to be immutable, the user is expected to support
             multiple enumerations of the <paramref name="data"/> that would return the same results, unless
             the user knows that the data will only be cursored once.
            
             One typical usage for streaming data view could be: create the data view that lazily loads data
             as needed, then apply pre-trained transformations to it and cursor through it for transformation
             results.
             </summary>
             <typeparam name="TRow">The user-defined item type.</typeparam>
             <param name="data">The enumerable data containing type <typeparamref name="TRow"/> to convert to a <see cref="T:Microsoft.ML.IDataView"/>.</param>
             <param name="schemaDefinition">The optional schema definition of the data view to create. If <c>null</c>,
             the schema definition is inferred from <typeparamref name="TRow"/>.</param>
             <returns>The constructed <see cref="T:Microsoft.ML.IDataView"/>.</returns>
             <example>
             <format type="text/markdown">
             <![CDATA[
             [!code-csharp[LoadFromEnumerable](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/LoadFromEnumerable.cs)]
             ]]>
             </format>
             </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.LoadFromEnumerable``1(System.Collections.Generic.IEnumerable{``0},Microsoft.ML.DataViewSchema)">
            <summary>
            Create a new <see cref="T:Microsoft.ML.IDataView"/> over an enumerable of the items of user-defined type using the provided <see cref="T:Microsoft.ML.DataViewSchema"/>,
            which might contain more information about the schema than the type can capture.
            </summary>
            <remarks>
            The user maintains ownership of the <paramref name="data"/> and the resulting data view will
            never alter the contents of the <paramref name="data"/>.
            Since <see cref="T:Microsoft.ML.IDataView"/> is assumed to be immutable, the user is expected to support
            multiple enumerations of the <paramref name="data"/> that would return the same results, unless
            the user knows that the data will only be cursored once.
            One typical usage for streaming data view could be: create the data view that lazily loads data
            as needed, then apply pre-trained transformations to it and cursor through it for transformation
            results.
            One practical usage of this would be to supply the feature column names through the <see cref="T:Microsoft.ML.DataViewSchema.Annotations"/>.
            </remarks>
            <typeparam name="TRow">The user-defined item type.</typeparam>
            <param name="data">The enumerable data containing type <typeparamref name="TRow"/> to convert to an <see cref="T:Microsoft.ML.IDataView"/>.</param>
            <param name="schema">The schema of the returned <see cref="T:Microsoft.ML.IDataView"/>.</param>
            <returns>An <see cref="T:Microsoft.ML.IDataView"/> with the given <paramref name="schema"/>.</returns>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.CreateEnumerable``1(Microsoft.ML.IDataView,System.Boolean,System.Boolean,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            Convert an <see cref="T:Microsoft.ML.IDataView"/> into a strongly-typed <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TRow">The user-defined item type.</typeparam>
            <param name="data">The underlying data view.</param>
            <param name="reuseRowObject">Whether to return the same object on every row, or allocate a new one per row.</param>
            <param name="ignoreMissingColumns">Whether to ignore the case when a requested column is not present in the data view.</param>
            <param name="schemaDefinition">Optional user-provided schema definition. If it is not present, the schema is inferred from the definition of T.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that holds the data in <paramref name="data"/>. It can be enumerated multiple times.</returns>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CreateEnumerable](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/DataViewEnumerable.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.BootstrapSample(Microsoft.ML.IDataView,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Take an approximate bootstrap sample of <paramref name="input"/>.
            </summary>
            <remarks>
            This sampler is a streaming version of <a href="https://en.wikipedia.org/wiki/Bootstrapping_(statistics)">bootstrap resampling</a>.
            Instead of taking the whole dataset into memory and resampling, <see cref="M:Microsoft.ML.DataOperationsCatalog.BootstrapSample(Microsoft.ML.IDataView,System.Nullable{System.Int32},System.Boolean)"/> streams through the dataset and
            uses a <a href="https://en.wikipedia.org/wiki/Poisson_distribution">Poisson</a>(1) distribution to select the number of times a
            given row will be added to the sample. The <paramref name="complement"/> parameter allows for the creation of a bootstap sample
            and complementary out-of-bag sample by using the same <paramref name="seed"/>.
            </remarks>
            <param name="input">The input data.</param>
            <param name="seed">The random seed. If unspecified, the random state will be instead derived from the <see cref="T:Microsoft.ML.MLContext"/>.</param>
            <param name="complement">Whether this is the out-of-bag sample, that is, all those rows that are not selected by the transform.
            Can be used to create a complementary pair of samples by using the same seed.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[BootstrapSample](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/BootstrapSample.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.Cache(Microsoft.ML.IDataView,System.String[])">
            <summary>
            Creates a lazy in-memory cache of <paramref name="input"/>.
            </summary>
            <remarks>
            Caching happens per-column. A column is only cached when it is first accessed.
            In addition, <paramref name="columnsToPrefetch"/> are considered 'always needed', so these columns
            will be cached the first time any data is requested.
            </remarks>
            <param name="input">The input data.</param>
            <param name="columnsToPrefetch">The columns that must be cached whenever anything is cached. An empty array or null
            value means that columns are cached upon their first access.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Cache](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/Cache.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.FilterRowsByColumn(Microsoft.ML.IDataView,System.String,System.Double,System.Double)">
            <summary>
            Filter the dataset by the values of a numeric column.
            </summary>
            <remarks>
            Keep only those rows that satisfy the range condition: the value of column <paramref name="columnName"/>
            must be between <paramref name="lowerBound"/> (inclusive) and <paramref name="upperBound"/> (exclusive).
            </remarks>
            <param name="input">The input data.</param>
            <param name="columnName">The name of a column to use for filtering.</param>
            <param name="lowerBound">The inclusive lower bound.</param>
            <param name="upperBound">The exclusive upper bound.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[FilterRowsByColumn](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/FilterRowsByColumn.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.FilterRowsByKeyColumnFraction(Microsoft.ML.IDataView,System.String,System.Double,System.Double)">
            <summary>
            Filter the dataset by the values of a <see cref="T:Microsoft.ML.Data.KeyDataViewType"/> column.
            </summary>
            <remarks>
            Keep only those rows that satisfy the range condition: the value of a key column <paramref name="columnName"/>
            (treated as a fraction of the entire key range) must be between <paramref name="lowerBound"/> (inclusive) and <paramref name="upperBound"/> (exclusive).
            This filtering is useful if the <paramref name="columnName"/> is a key column obtained by some 'stable randomization',
            for example, hashing.
            </remarks>
            <param name="input">The input data.</param>
            <param name="columnName">The name of a column to use for filtering.</param>
            <param name="lowerBound">The inclusive lower bound.</param>
            <param name="upperBound">The exclusive upper bound.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[FilterRowsByKeyColumnFraction](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/FilterRowsByKeyColumnFraction.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.FilterRowsByMissingValues(Microsoft.ML.IDataView,System.String[])">
            <summary>
            Drop rows where any column in <paramref name="columns"/> contains a missing value.
            </summary>
            <param name="input">The input data.</param>
            <param name="columns">Name of the columns to filter on. If a row is has a missing value in any of
            these columns, it will be dropped from the dataset.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[FilterRowsByMissingValues](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/FilterRowsByMissingValues.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.ShuffleRows(Microsoft.ML.IDataView,System.Nullable{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Shuffle the rows of <paramref name="input"/>.
            </summary>
            <remarks>
            <see cref="M:Microsoft.ML.DataOperationsCatalog.ShuffleRows(Microsoft.ML.IDataView,System.Nullable{System.Int32},System.Int32,System.Boolean)"/> will shuffle the rows of any input <see cref="T:Microsoft.ML.IDataView"/> using a streaming approach.
            In order to not load the entire dataset in memory, a pool of <paramref name="shufflePoolSize"/> rows will be used
            to randomly select rows to output. The pool is constructed from the first <paramref name="shufflePoolSize"/> rows
            in <paramref name="input"/>. Rows will then be randomly yielded from the pool and replaced with the next row from <paramref name="input"/>
            until all the rows have been yielded, resulting in a new <see cref="T:Microsoft.ML.IDataView"/> of the same size as <paramref name="input"/>
            but with the rows in a randomized order.
            If the <see cref="P:Microsoft.ML.IDataView.CanShuffle"/> property of <paramref name="input"/> is true, then it will also be read into the
            pool in a random order, offering two sources of randomness.
            </remarks>
            <param name="input">The input data.</param>
            <param name="seed">The random seed. If unspecified, the random state will be instead derived from the <see cref="T:Microsoft.ML.MLContext"/>.</param>
            <param name="shufflePoolSize">The number of rows to hold in the pool. Setting this to 1 will turn off pool shuffling and
            <see cref="M:Microsoft.ML.DataOperationsCatalog.ShuffleRows(Microsoft.ML.IDataView,System.Nullable{System.Int32},System.Int32,System.Boolean)"/> will only perform a shuffle by reading <paramref name="input"/> in a random order.</param>
            <param name="shuffleSource">If <see langword="false"/>, the transform will not attempt to read <paramref name="input"/> in a random order and only use
            pooling to shuffle. This parameter has no effect if the <see cref="P:Microsoft.ML.IDataView.CanShuffle"/> property of <paramref name="input"/> is <see langword="false"/>.
            </param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[ShuffleRows](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/ShuffleRows.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.SkipRows(Microsoft.ML.IDataView,System.Int64)">
            <summary>
            Skip <paramref name="count"/> rows in <paramref name="input"/>.
            </summary>
            <remarks>
            Skips the first <paramref name="count"/> rows from <paramref name="input"/> and returns an <see cref="T:Microsoft.ML.IDataView"/> with all other rows.
            </remarks>
            <param name="input">The input data.</param>
            <param name="count">Number of rows to skip.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SkipRows](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/SkipRows.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.TakeRows(Microsoft.ML.IDataView,System.Int64)">
            <summary>
            Take <paramref name="count"/> rows from <paramref name="input"/>.
            </summary>
            <remarks>
            Returns returns an <see cref="T:Microsoft.ML.IDataView"/> with the first <paramref name="count"/> rows from <paramref name="input"/>.
            </remarks>
            <param name="input">The input data.</param>
            <param name="count">Number of rows to take.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[TakeRows](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/TakeRows.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.TrainTestSplit(Microsoft.ML.IDataView,System.Double,System.String,System.Nullable{System.Int32})">
            <summary>
            Split the dataset into the train set and test set according to the given fraction.
            Respects the <paramref name="samplingKeyColumnName"/> if provided.
            </summary>
            <param name="data">The dataset to split.</param>
            <param name="testFraction">The fraction of data to go into the test set.</param>
            <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName"/>,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            Note that when performing a Ranking Experiment, the <paramref name="samplingKeyColumnName"/> must be the GroupId column.
            If <see langword="null"/> no row grouping will be performed.</param>
            <param name="seed">Seed for the random number generator used to select rows for the train-test split.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[TrainTestSplit](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/TrainTestSplit.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.CrossValidationSplit(Microsoft.ML.IDataView,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Split the dataset into cross-validation folds of train set and test set.
            Respects the <paramref name="samplingKeyColumnName"/> if provided.
            </summary>
            <param name="data">The dataset to split.</param>
            <param name="numberOfFolds">Number of cross-validation folds.</param>
            <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName"/>,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            Note that when performing a Ranking Experiment, the <paramref name="samplingKeyColumnName"/> must be the GroupId column.
            If <see langword="null"/> no row grouping will be performed.</param>
            <param name="seed">Seed for the random number generator used to select rows for cross-validation folds.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CrossValidationSplit](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/CrossValidationSplit.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.CrossValidationSplit(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.Int32)">
            <summary>
            Splits the data based on the splitColumn, and drops that column as it is only
            intended to be used for splitting the data, and shouldn't be part of the output schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.DataOperationsCatalog.CreateSplitColumn(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView@,System.String,System.Nullable{System.Int32},System.Boolean)">
             <summary>
             Based on the input samplingKeyColumn creates a new splitColumn that will be used by the callers to apply a RangeFilter that will produce train-test splits
             or cross-validation splits.
            
             Notice that the new splitColumn might get dropped by the callers of this method after using it, as it wasn't part of
             the input DataView schema.
             </summary>
             <param name="env">IHostEnvironment of the caller</param>
             <param name="data">DataView that should contain the "samplingKeyColumn". The new splitColumn will be added to this DataView.</param>
             <param name="samplingKeyColumn">Name of the column that will be used as base of the new splitColumn.
             Notice that in other places in the code the samplingKeyColumn, and/or the splitColumn this method creates,
             are refered to as "SamplingKeyColumn", "StratificationColumn", "SplitColumn", "GroupPreservationColumn" or similar names. </param>
             <param name="seed">The seed that might be used by the transformers that will create the new splitColumn</param>
             <param name="fallbackInEnvSeed">If seed = null, then should we use the env seed? If seed = null, and this parameter is false, then we won't use a seed.</param>
             <return>The name of the new column</return>
        </member>
        <member name="T:Microsoft.ML.LearningPipelineExtensions">
            <summary>
            Extension methods that allow chaining of estimator and transformer pipelines.
            </summary>
        </member>
        <member name="M:Microsoft.ML.LearningPipelineExtensions.Append``2(Microsoft.ML.IDataLoaderEstimator{``0,Microsoft.ML.IDataLoader{``0}},Microsoft.ML.IEstimator{``1})">
            <summary>
            Create a new composite loader estimator, by appending another estimator to the end of this data loader estimator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.LearningPipelineExtensions.Append``2(Microsoft.ML.IDataLoader{``0},Microsoft.ML.IEstimator{``1})">
            <summary>
            Create a new composite loader estimator, by appending an estimator to this data loader.
            </summary>
        </member>
        <member name="M:Microsoft.ML.LearningPipelineExtensions.Append``1(Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},Microsoft.ML.IEstimator{``0},Microsoft.ML.Data.TransformerScope)">
            <summary>
            Create a new estimator chain, by appending another estimator to the end of this estimator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.LearningPipelineExtensions.AppendCacheCheckpoint``1(Microsoft.ML.IEstimator{``0},Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Append a 'caching checkpoint' to the estimator chain. This will ensure that the downstream estimators will be trained against
            cached data. It is helpful to have a caching checkpoint before trainers that take multiple data passes.
            </summary>
            <param name="start">The starting estimator</param>
            <param name="env">The host environment to use for caching.</param>
        </member>
        <member name="M:Microsoft.ML.LearningPipelineExtensions.Append``2(Microsoft.ML.IDataLoader{``0},``1)">
            <summary>
            Create a new composite loader, by appending a transformer to this data loader.
            </summary>
        </member>
        <member name="M:Microsoft.ML.LearningPipelineExtensions.Append``1(Microsoft.ML.ITransformer,``0)">
            <summary>
            Create a new transformer chain, by appending another transformer to the end of this transformer chain.
            </summary>
        </member>
        <member name="M:Microsoft.ML.LearningPipelineExtensions.WithOnFitDelegate``1(Microsoft.ML.IEstimator{``0},System.Action{``0})">
            <summary>
            Given an estimator, return a wrapping object that will call a delegate once <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)"/>
            is called. It is often important for an estimator to return information about what was fit, which is why the
            <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)"/> method returns a specifically typed object, rather than just a general
            <see cref="T:Microsoft.ML.ITransformer"/>. However, at the same time, <see cref="T:Microsoft.ML.IEstimator`1"/> are often formed into pipelines
            with many objects, so we may need to build a chain of estimators via <see cref="T:Microsoft.ML.Data.EstimatorChain`1"/> where the
            estimator for which we want to get the transformer is buried somewhere in this chain. For that scenario, we can through this
            method attach a delegate that will be called once fit is called.
            </summary>
            <typeparam name="TTransformer">The type of <see cref="T:Microsoft.ML.ITransformer"/> returned by <paramref name="estimator"/></typeparam>
            <param name="estimator">The estimator to wrap</param>
            <param name="onFit">The delegate that is called with the resulting <typeparamref name="TTransformer"/> instances once
            <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)"/> is called. Because <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)"/>
            may be called multiple times, this delegate may also be called multiple times.</param>
            <returns>A wrapping estimator that calls the indicated delegate whenever fit is called</returns>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[OnFit](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/WithOnFitDelegate.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="T:Microsoft.ML.TextLoaderSaverCatalog">
            <summary>
            Collection of extension methods for the <see cref="T:Microsoft.ML.DataOperationsCatalog"/> to read from delimited text
            files such as csv and tsv.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TextLoaderSaverCatalog.CreateTextLoader(Microsoft.ML.DataOperationsCatalog,Microsoft.ML.Data.TextLoader.Column[],System.Char,System.Boolean,Microsoft.ML.Data.IMultiStreamSource,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a text loader <see cref="T:Microsoft.ML.Data.TextLoader"/>.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="columns">Array of columns <see cref="T:Microsoft.ML.Data.TextLoader.Column"/> defining the schema.</param>
            <param name="separatorChar">The character used as separator between data points in a row. By default the tab character is used as separator.</param>
            <param name="hasHeader">Whether the file has a header with feature names. When a <see paramref="dataSample"/> is provided, <see langword="true"/>
            indicates that the first line in the <see paramref="dataSample"/> will be used for feature names, and that when <see cref="M:Microsoft.ML.Data.TextLoader.Load(Microsoft.ML.Data.IMultiStreamSource)"/>
            is called, the first line will be skipped. When there is no <see paramref="dataSample"/> provided, <see langword="true"/> just indicates that the loader should
            skip the first line when <see cref="M:Microsoft.ML.Data.TextLoader.Load(Microsoft.ML.Data.IMultiStreamSource)"/> is called, but columns will not have slot names annotations. This is
            because the output schema is made when the loader is created, and not when <see cref="M:Microsoft.ML.Data.TextLoader.Load(Microsoft.ML.Data.IMultiStreamSource)"/> is called.</param>
            <param name="dataSample">The optional location of a data sample. The sample can be used to infer slot name annotations if present, and also the number
            of slots in a column defined with <see cref="T:Microsoft.ML.Data.TextLoader.Range"/> with <see langword="null"/> maximum index.
            If the sample has been saved with ML.NET's <see cref="M:Microsoft.ML.TextLoaderSaverCatalog.SaveAsText(Microsoft.ML.DataOperationsCatalog,Microsoft.ML.IDataView,System.IO.Stream,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>,
            it will also contain the schema information in the header that the loader can read even if <paramref name="columns"/> is <see langword="null"/>.
            In order to use the schema defined in the file, all other arguments sould be left with their default values.</param>
            <param name="allowQuoting">Whether the input may include double-quoted values. This parameter is used to distinguish separator characters
            in an input value from actual separators. When <see langword="true"/>, separators within double quotes are treated as part of the
            input value. When <see langword="false"/>, all separators, even those within quotes, are treated as delimiting a new column.</param>
            <param name="trimWhitespace">Remove trailing whitespace from lines.</param>
            <param name="allowSparse">Whether the input may include sparse representations. For example, a row containing
            "5 2:6 4:3" means that there are 5 columns, and the only non-zero are columns 2 and 4, which have values 6 and 3,
            respectively. Column indices are zero-based, so columns 2 and 4 represent the 3rd and 5th columns.
            A column may also have dense values followed by sparse values represented in this fashion. For example,
            a row containing "1 2 5 2:6 4:3" represents two dense columns with values 1 and 2, followed by 5 sparsely represented
            columns with values 0, 0, 6, 0, and 3. The indices of the sparse columns start from 0, even though 0 represents the third column.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CreateTextLoader](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/LoadingText.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextLoaderSaverCatalog.CreateTextLoader(Microsoft.ML.DataOperationsCatalog,Microsoft.ML.Data.TextLoader.Options,Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Create a text loader <see cref="T:Microsoft.ML.Data.TextLoader"/>.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="options">Defines the settings of the load operation.</param>
            <param name="dataSample">The optional location of a data sample. The sample can be used to infer slot name annotations if present, and also the number
            of slots in <see cref="F:Microsoft.ML.Data.TextLoader.Options.Columns"/> defined with <see cref="T:Microsoft.ML.Data.TextLoader.Range"/> with <see langword="null"/> maximum index.
            If the sample has been saved with ML.NET's <see cref="M:Microsoft.ML.TextLoaderSaverCatalog.SaveAsText(Microsoft.ML.DataOperationsCatalog,Microsoft.ML.IDataView,System.IO.Stream,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>,
            it will also contain the schema information in the header that the loader can read even if <see cref="F:Microsoft.ML.Data.TextLoader.Options.Columns"/> are not specified.
            In order to use the schema defined in the file, all other <see cref="T:Microsoft.ML.Data.TextLoader.Options"/> sould be left with their default values.</param>
        </member>
        <member name="M:Microsoft.ML.TextLoaderSaverCatalog.CreateTextLoader``1(Microsoft.ML.DataOperationsCatalog,System.Char,System.Boolean,Microsoft.ML.Data.IMultiStreamSource,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a text loader <see cref="T:Microsoft.ML.Data.TextLoader"/> by inferencing the dataset schema from a data model type.
            </summary>
            <typeparam name="TInput">Defines the schema of the data to be loaded. Use public fields or properties
            decorated with <see cref="T:Microsoft.ML.Data.LoadColumnAttribute"/> (and possibly other attributes) to specify the column
            names and their data types in the schema of the loaded data.</typeparam>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="separatorChar">Column separator character. Default is '\t'</param>
            <param name="hasHeader">Whether the file has a header with feature names. When a <see paramref="dataSample"/> is provided, <see langword="true"/>
            indicates that the first line in the <see paramref="dataSample"/> will be used for feature names, and that when <see cref="M:Microsoft.ML.Data.TextLoader.Load(Microsoft.ML.Data.IMultiStreamSource)"/>
            is called, the first line will be skipped. When there is no <see paramref="dataSample"/> provided, <see langword="true"/> just indicates that the loader should
            skip the first line when <see cref="M:Microsoft.ML.Data.TextLoader.Load(Microsoft.ML.Data.IMultiStreamSource)"/> is called, but columns will not have slot names annotations. This is
            because the output schema is made when the loader is created, and not when <see cref="M:Microsoft.ML.Data.TextLoader.Load(Microsoft.ML.Data.IMultiStreamSource)"/> is called.</param>
            <param name="dataSample">The optional location of a data sample. The sample can be used to infer slot name annotations if present.</param>
            <param name="allowQuoting">Whether the input may include double-quoted values. This parameter is used to distinguish separator characters
            in an input value from actual separators. When <see langword="true"/>, separators within double quotes are treated as part of the
            input value. When <see langword="false"/>, all separators, even those whitin quotes, are treated as delimiting a new column.</param>
            <param name="trimWhitespace">Remove trailing whitespace from lines.</param>
            <param name="allowSparse">Whether the input may include sparse representations. For example, a row containing
            "5 2:6 4:3" means that there are 5 columns, and the only non-zero are columns 2 and 4, which have values 6 and 3,
            respectively. Column indices are zero-based, so columns 2 and 4 represent the 3rd and 5th columns.
            A column may also have dense values followed by sparse values represented in this fashion. For example,
            a row containing "1 2 5 2:6 4:3" represents two dense columns with values 1 and 2, followed by 5 sparsely represented
            columns with values 0, 0, 6, 0, and 3. The indices of the sparse columns start from 0, even though 0 represents the third column.</param>
        </member>
        <member name="M:Microsoft.ML.TextLoaderSaverCatalog.CreateTextLoader``1(Microsoft.ML.DataOperationsCatalog,Microsoft.ML.Data.TextLoader.Options,Microsoft.ML.Data.IMultiStreamSource)">
            <summary>
            Create a text loader <see cref="T:Microsoft.ML.Data.TextLoader"/> by inferencing the dataset schema from a data model type.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="options">Defines the settings of the load operation. Defines the settings of the load operation. No need to specify a Columns field,
            as columns will be infered by this method.</param>
            <param name="dataSample">The optional location of a data sample. The sample can be used to infer information
            about the columns, such as slot names.</param>
        </member>
        <member name="M:Microsoft.ML.TextLoaderSaverCatalog.LoadFromTextFile(Microsoft.ML.DataOperationsCatalog,System.String,Microsoft.ML.Data.TextLoader.Column[],System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Load a <see cref="T:Microsoft.ML.IDataView"/> from a text file using <see cref="T:Microsoft.ML.Data.TextLoader"/>.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual loading happens here, just schema validation.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="path">The path to the file(s).</param>
            <param name="columns">The columns of the schema.</param>
            <param name="separatorChar">The character used as separator between data points in a row. By default the tab character is used as separator.</param>
            <param name="hasHeader">Whether the file has a header. When <see langword="true"/>, the loader will skip the first line when
            <see cref="M:Microsoft.ML.Data.TextLoader.Load(Microsoft.ML.Data.IMultiStreamSource)"/> is called.</param>
            <param name="allowQuoting">Whether the input may include double-quoted values. This parameter is used to distinguish separator characters
            in an input value from actual separators. When <see langword="true"/>, separators within double quotes are treated as part of the
            input value. When <see langword="false"/>, all separators, even those whitin quotes, are treated as delimiting a new column.
            It is also used to distinguish empty values from missing values. When <see langword="true"/>, missing value are denoted by consecutive
            separators and empty values by \"\". When <see langword="false"/>, empty values are denoted by consecutive separators and missing
            values by the default missing value for each type documented in <see cref="T:Microsoft.ML.Data.DataKind"/>.</param>
            <param name="trimWhitespace">Remove trailing whitespace from lines.</param>
            <param name="allowSparse">Whether the input may include sparse representations. For example, a row containing
            "5 2:6 4:3" means that there are 5 columns, and the only non-zero are columns 2 and 4, which have values 6 and 3,
            respectively. Column indices are zero-based, so columns 2 and 4 represent the 3rd and 5th columns.
            A column may also have dense values followed by sparse values represented in this fashion. For example,
            a row containing "1 2 5 2:6 4:3" represents two dense columns with values 1 and 2, followed by 5 sparsely represented
            columns with values 0, 0, 6, 0, and 3. The indices of the sparse columns start from 0, even though 0 represents the third column.</param>
            <returns>The data view.</returns>
        </member>
        <member name="M:Microsoft.ML.TextLoaderSaverCatalog.LoadFromTextFile(Microsoft.ML.DataOperationsCatalog,System.String,Microsoft.ML.Data.TextLoader.Options)">
            <summary>
            Load a <see cref="T:Microsoft.ML.IDataView"/> from a text file using <see cref="T:Microsoft.ML.Data.TextLoader"/>.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual loading happens here, just schema validation.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="path">Specifies a file or path of files from which to load.</param>
            <param name="options">Defines the settings of the load operation.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[LoadFromTextFile](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/SaveAndLoadFromText.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextLoaderSaverCatalog.LoadFromTextFile``1(Microsoft.ML.DataOperationsCatalog,System.String,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Load a <see cref="T:Microsoft.ML.IDataView"/> from a text file using <see cref="T:Microsoft.ML.Data.TextLoader"/>.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual loading happens here, just schema validation.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="path">The path to the file(s).</param>
            <param name="separatorChar">Column separator character. Default is '\t'</param>
            <param name="hasHeader">Whether the file has a header. When <see langword="true"/>, the loader will skip the first line when
            <see cref="M:Microsoft.ML.Data.TextLoader.Load(Microsoft.ML.Data.IMultiStreamSource)"/> is called.</param>
            <param name="allowQuoting">Whether the input may include double-quoted values. This parameter is used to distinguish separator characters
            in an input value from actual separators. When <see langword="true"/>, separators within double quotes are treated as part of the
            input value. When <see langword="false"/>, all separators, even those whitin quotes, are treated as delimiting a new column.
            It is also used to distinguish empty values from missing values. When <see langword="true"/>, missing value are denoted by consecutive
            separators and empty values by \"\". When <see langword="false"/>, empty values are denoted by consecutive separators and missing
            values by the default missing value for each type documented in <see cref="T:Microsoft.ML.Data.DataKind"/>.</param>
            <param name="trimWhitespace">Remove trailing whitespace from lines.</param>
            <param name="allowSparse">Whether the input may include sparse representations. For example, a row containing
            "5 2:6 4:3" means that there are 5 columns, and the only non-zero are columns 2 and 4, which have values 6 and 3,
            respectively. Column indices are zero-based, so columns 2 and 4 represent the 3rd and 5th columns.
            A column may also have dense values followed by sparse values represented in this fashion. For example,
            a row containing "1 2 5 2:6 4:3" represents two dense columns with values 1 and 2, followed by 5 sparsely represented
            columns with values 0, 0, 6, 0, and 3. The indices of the sparse columns start from 0, even though 0 represents the third column.</param>
            <returns>The data view.</returns>
        </member>
        <member name="M:Microsoft.ML.TextLoaderSaverCatalog.LoadFromTextFile``1(Microsoft.ML.DataOperationsCatalog,System.String,Microsoft.ML.Data.TextLoader.Options)">
            <summary>
            Load a <see cref="T:Microsoft.ML.IDataView"/> from a text file using <see cref="T:Microsoft.ML.Data.TextLoader"/>.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual loading happens here, just schema validation.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="path">Specifies a file or path of files from which to load.</param>
            <param name="options">Defines the settings of the load operation. No need to specify a Columns field,
            as columns will be infered by this method.</param>
            <returns>The data view.</returns>
        </member>
        <member name="M:Microsoft.ML.TextLoaderSaverCatalog.SaveAsText(Microsoft.ML.DataOperationsCatalog,Microsoft.ML.IDataView,System.IO.Stream,System.Char,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Save the <see cref="T:Microsoft.ML.IDataView"/> as text.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.DataOperationsCatalog"/> catalog.</param>
            <param name="data">The data view to save.</param>
            <param name="stream">The stream to write to.</param>
            <param name="separatorChar">The column separator.</param>
            <param name="headerRow">Whether to write the header row.</param>
            <param name="schema">Whether to write the header comment with the schema.</param>
            <param name="keepHidden">Whether to keep hidden columns in the dataset.</param>
            <param name="forceDense">Whether to save columns in dense format even if they are sparse vectors.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SaveAsText](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/DataOperations/SaveAndLoadFromText.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TextLoaderSaverCatalog.CheckValidPathContents(System.String)">
            <summary>
            Checks the validity of a given path, and whether or not it is a
            valid path to a data file, or a path to a directory of files.
            </summary>
            <param name="path">Specifies a file or path of files from which to load.</param>
        </member>
        <member name="T:Microsoft.ML.DebuggerExtensions">
            <summary>
            Class used to create instances of preview objects for debugging.
            Note: this class and all methods should only be used for debugging and not in production code.
            </summary>
        </member>
        <member name="M:Microsoft.ML.DebuggerExtensions.Preview(Microsoft.ML.IDataView,System.Int32)">
            <summary>
            Extract a 'head' of the data view in a view that is convenient to debug.
            </summary>
            <param name="data">The data view to preview</param>
            <param name="maxRows">Maximum number of rows to pull</param>
        </member>
        <member name="M:Microsoft.ML.DebuggerExtensions.Preview(Microsoft.ML.ITransformer,Microsoft.ML.IDataView,System.Int32)">
            <summary>
            Preview an effect of the <paramref name="transformer"/> on a given <paramref name="data"/>.
            </summary>
            <param name="transformer">The transformer which effect we are previewing</param>
            <param name="data">The data view to use for preview</param>
            <param name="maxRows">Maximum number of rows to pull</param>
        </member>
        <member name="M:Microsoft.ML.DebuggerExtensions.Preview(Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},Microsoft.ML.IDataView,System.Int32,System.Int32)">
            <summary>
            Preview an effect of the <paramref name="estimator"/> on a given <paramref name="data"/>.
            </summary>
            <param name="estimator">The estimator which effect we are previewing</param>
            <param name="data">The data view to use for preview</param>
            <param name="maxRows">Maximum number of rows to show in preview</param>
            <param name="maxTrainingRows">Maximum number of rows to fit the estimator</param>
        </member>
        <member name="M:Microsoft.ML.DebuggerExtensions.Preview``1(Microsoft.ML.IDataLoader{``0},``0,System.Int32)">
            <summary>
            Preview an effect of the <paramref name="loader"/> on a given <paramref name="source"/>.
            </summary>
            <param name="loader">The data loader to preview</param>
            <param name="source">The source to pull the data from</param>
            <param name="maxRows">Maximum number of rows to pull</param>
        </member>
        <member name="T:Microsoft.ML.Numeric.VectorUtils">
            <summary>
            A series of vector utility functions, generally operating over arrays or <see cref="T:Microsoft.ML.Data.VBuffer`1"/>
            structures. The convention is that if a array or buffer is not modified, that is, it is treated
            as a constant, it might have the name <c>a</c> or <c>b</c> or <c>src</c>, but in a situation
            where the vector structure might be changed the parameter might have the name <c>dst</c>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.NormSquared(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Returns the L2 norm squared of the vector (sum of squares of the components).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.NormSquared(System.ReadOnlySpan{System.Single})">
            <summary>
            Returns the L2 norm squared of the vector (sum of squares of the components).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.Norm(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Returns the L2 norm of the vector.
            </summary>
            <returns>L2 norm of the vector</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.L1Norm(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Returns the L1 norm of the vector.
            </summary>
            <returns>L1 norm of the vector</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.MaxNorm(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Returns the L-infinity norm of the vector (i.e., the maximum absolute value).
            </summary>
            <returns>L-infinity norm of the vector</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.Sum(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Returns the sum of elements in the vector.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.ScaleBy(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single)">
            <summary>
            Scales the vector by a real value.
            </summary>
            <param name="dst">Incoming vector</param>
            <param name="c">Value to multiply vector with</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.ScaleBy(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single)">
            <summary>
            Scales the vector by a real value.
            <c><paramref name="dst"/> = <paramref name="c"/> * <paramref name="src"/></c>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.Add(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Perform in-place vector addition <c><paramref name="dst"/> += <paramref name="src"/></c>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.AddMult(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Perform in-place scaled vector addition
            <c><paramref name="dst"/> += <paramref name="c"/> * <paramref name="src"/></c>.
            If either vector is dense, <paramref name="dst"/> will be dense, unless
            <paramref name="c"/> is 0 in which case this method does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.AddMult(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Perform scalar vector addition
            <c><paramref name="res"/> = <paramref name="c"/> * <paramref name="src"/> + <paramref name="dst"/></c>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.AddMultInto(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Calculate
            <c><paramref name="a"/> + <paramref name="c"/> * <paramref name="b"/></c>
            and store the result in <paramref name="dst"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.AddMultWithOffset(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Data.VBuffer{System.Single}@,System.Int32)">
            <summary>
            Perform in-place scaled vector addition
            <c><paramref name="dst"/> += <paramref name="c"/> * <paramref name="src"/></c>,
            except that this takes place in the section of <paramref name="dst"/> starting
            at slot <paramref name="offset"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.ScaleInto(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Perform in-place scaling of a vector into another vector as
            <c><paramref name="dst"/> = <paramref name="src"/> * <paramref name="c"/></c>.
            This is more or less equivalent to performing the same operation with
            <see cref="M:Microsoft.ML.Internal.Utilities.VBufferUtils.ApplyInto``3(Microsoft.ML.Data.VBuffer{``0}@,Microsoft.ML.Data.VBuffer{``1}@,Microsoft.ML.Data.VBuffer{``2}@,System.Func{System.Int32,``0,``1,``2})"/> except perhaps more efficiently,
            with one exception: if <paramref name="c"/> is 0 and <paramref name="src"/>
            is sparse, <paramref name="dst"/> will have a count of zero, instead of the
            same count as <paramref name="src"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.SparsifyNormalize(Microsoft.ML.Data.VBuffer{System.Single}@,System.Int32,System.Int32,System.Boolean)">
            <summary>
             Sparsify vector A (keep at most <paramref name="top"/>+<paramref name="bottom"/> values)
            and optionally rescale values to the [-1, 1] range.
            <param name="a">Vector to be sparsified and normalized.</param>
            <param name="top">How many top (positive) elements to preserve after sparsification.</param>
            <param name="bottom">How many bottom (negative) elements to preserve after sparsification.</param>
            <param name="normalize">Whether to normalize results to [-1,1] range.</param>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.MulElementWise(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Multiplies arrays Dst *= A element by element and returns the result in <paramref name="dst"/> (Hadamard product).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.DotProductWithOffset(Microsoft.ML.Data.VBuffer{System.Single}@,System.Int32,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Computes the dot product of two arrays
            Where "offset" is considered to be a's zero index
            </summary>
            <param name="a">one array</param>
            <param name="b">the second array (given as a VBuffer)</param>
            <param name="offset">offset in 'a'</param>
            <returns>the dot product</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.DotProductWithOffset(System.Single[],System.Int32,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Computes the dot product of two arrays
            Where "offset" is considered to be a's zero index
            </summary>
            <param name="a">one array</param>
            <param name="b">the second array (given as a VBuffer)</param>
            <param name="offset">offset in 'a'</param>
            <returns>the dot product</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.L1Distance(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Computes the L1 distance between two VBuffers
            </summary>
            <param name="a">one VBuffer</param>
            <param name="b">another VBuffer</param>
            <returns>L1 Distance from a to b</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.Distance(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Computes the Euclidean distance between two VBuffers
            </summary>
            <param name="a">one VBuffer</param>
            <param name="b">another VBuffer</param>
            <returns>Distance from a to b</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.L2DistSquared(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Computes the Euclidean distance squared between two VBuffers
            </summary>
            <param name="a">one VBuffer</param>
            <param name="b">another VBuffer</param>
            <returns>Distance from a to b</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.L2DistSquared(System.Single[],Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Given two vectors a and b, calculate their L2 distance squared (|a-b|^2).
            </summary>
            <param name="a">The first vector, given as an array</param>
            <param name="b">The second vector, given as a VBuffer{float}</param>
            <returns>The squared L2 distance between a and b</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.Add(System.Single[],System.Single[])">
            <summary>
            Perform in-place vector addition <c><paramref name="dst"/> += <paramref name="src"/></c>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.AddMult(Microsoft.ML.Data.VBuffer{System.Single}@,System.Span{System.Single},System.Single)">
            <summary>
            Adds a multiple of a <see cref="T:Microsoft.ML.Data.VBuffer`1"/> to a <see cref="T:System.Single"/> array.
            </summary>
            <param name="src">Buffer to add</param>
            <param name="dst">Span to add to</param>
            <param name="c">Coefficient</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.AddMultWithOffset(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single[],System.Int32,System.Single)">
            <summary>
            Adds a multiple of a <see cref="T:Microsoft.ML.Data.VBuffer`1"/> to a <see cref="T:System.Single"/> array, with an offset into the destination.
            </summary>
            <param name="src">Buffer to add</param>
            <param name="dst">Array to add to</param>
            <param name="offset">The offset into <paramref name="dst"/> at which to add</param>
            <param name="c">Coefficient</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.AddMult(System.Single[],System.Single[],System.Single)">
            <summary>
            Adds a multiple of an array to a second array.
            </summary>
            <param name="src">Array to add</param>
            <param name="dst">Array to add to</param>
            <param name="c">Multiple</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.Norm(System.Single[])">
            <summary>
            Returns the L2 norm of the vector (sum of squares of the components).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.Sum(System.Single[])">
            <summary>
            Returns sum of elements in array
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.VectorUtils.ScaleBy(System.Single[],System.Single)">
            <summary>
            Multiples the array by a real value
            </summary>
            <param name="dst">The array</param>
            <param name="c">Value to multiply vector with</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.ILossFunction`2.Loss(`0,`1)">
            <summary>
            Computes the loss given the output and the ground truth.
            Note that the return value has type Double because the loss is usually accumulated over many instances.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.IScalarLoss.Derivative(System.Single,System.Single)">
            <summary>
            Derivative of the loss function with respect to output
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SignatureClassificationLoss">
            <summary>
            Delegate signature for standardized classification loss functions.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SignatureRegressionLoss">
            <summary>
            Delegate signature for standardized regression loss functions.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.ModelParametersBase`1">
            <summary>
            Generic base class for all model parameters.
            </summary>
            <typeparam name="TOutput"> Output type produced by the model.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Trainers.ModelParametersBase`1.WarnOnOldNormalizer(Microsoft.ML.ModelLoadContext,System.Type,Microsoft.ML.Runtime.IChannelProvider)">
            <summary>
            This emits a warning if there is Normalizer sub-model.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.IFeatureContributionMapper">
            <summary>
            Interface for mapping input values to corresponding feature contributions.
            This interface is commonly implemented by predictors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.IFeatureContributionMapper.GetFeatureContributionMapper``2(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get a delegate for mapping Contributions to Features.
            Result will contain vector with topN positive contributions(if available) and
            bottomN negative contributions (if available).
            For example linear predictor will have both negative and positive contributions.
            For trees we will not have negative contributions, so bottom param will be ignored.
            If normalization is requested that resulting values will be normalized to [-1, 1].
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.ICalculateFeatureContribution">
            <summary>
            Allows support for feature contribution calculation by model parameters.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.FeatureContributionCalculator">
            <summary>
            Support for feature contribution calculation.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.ITrainerEstimator`2">
            <summary>
            Interface for the Trainer Estimator.
            </summary>
            <typeparam name="TTransformer">The type of the transformer returned by the estimator.</typeparam>
            <typeparam name="TModel">The type of the model parameters.</typeparam>
        </member>
        <member name="P:Microsoft.ML.Trainers.ITrainerEstimator`2.Info">
            <summary>
            Gets the <see cref="T:Microsoft.ML.TrainerInfo"/> information about the trainer.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.TrainerEstimatorBase`2">
            <summary>
            This represents a basic class for 'simple trainer'.
            A 'simple trainer' accepts one feature column and one label column, also optionally a weight column.
            It produces a 'prediction transformer'.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerEstimatorBase`2.NoTrainingInstancesMessage">
            <summary>
            A standard string to use in errors or warnings by subclasses, to communicate the idea that no valid
            instances were able to be found.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerEstimatorBase`2.FeatureColumn">
            <summary>
            The feature column that the trainer expects.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerEstimatorBase`2.LabelColumn">
            <summary>
            The label column that the trainer expects. Can be <c>null</c>, which indicates that label
            is not used for training.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerEstimatorBase`2.WeightColumn">
            <summary>
            The weight column that the trainer expects. Can be <c>null</c>, which indicates that weight is
            not used for training.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.TrainerEstimatorBase`2.Info">
            <summary>
            The information about the trainer: whether it benefits from normalization, caching etc.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerEstimatorBase`2.Fit(Microsoft.ML.IDataView)">
            <summary> Trains and returns a <see cref="T:Microsoft.ML.ITransformer"/>.</summary>
            <remarks>
            Derived class can overload this function.
            For example, it could take an additional dataset to train with a separate validation set.
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerEstimatorBase`2.GetOutputColumnsCore(Microsoft.ML.SchemaShape)">
            <summary>
            The columns that will be created by the fitted transformer.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.TrainerEstimatorBaseWithGroupId`2">
            <summary>
            This represents a basic class for 'simple trainer'.
            A 'simple trainer' accepts one feature column and one label column, also optionally a weight column.
            It produces a 'prediction transformer'.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerEstimatorBaseWithGroupId`2.GroupIdColumn">
            <summary>
            The optional groupID column that the ranking trainers expects.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.TrainerInputBase">
            <summary>
            The base class for all trainer inputs.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerInputBase.TrainingData">
            <summary>
            The data to be used for training. Used only in entry-points, since in the API the expected mechanism is
            that the user will use the <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)"/> or some other train
            method.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerInputBase.FeatureColumnName">
            <summary>
            Column to use for features.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerInputBase.NormalizeFeatures">
            <summary>
            Normalize option for the feature column. Used only in entry-points, since in the API the user is expected to do this themselves.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerInputBase.Caching">
            <summary>
            Whether trainer should cache input training data. Used only in entry-points, since the intended API mechanism
            is that the user will use the <see cref="M:Microsoft.ML.DataOperationsCatalog.Cache(Microsoft.ML.IDataView,System.String[])"/> or other method
            like <see cref="M:Microsoft.ML.Data.EstimatorChain`1.AppendCacheCheckpoint(Microsoft.ML.Runtime.IHostEnvironment)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.TrainerInputBaseWithLabel">
            <summary>
            The base class for all trainer inputs that support a Label column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerInputBaseWithLabel.LabelColumnName">
            <summary>
            Column to use for labels.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.TrainerInputBaseWithWeight">
            <summary>
            The base class for all trainer inputs that support a weight column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerInputBaseWithWeight.ExampleWeightColumnName">
            <summary>
            Column to use for example weight.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.UnsupervisedTrainerInputBaseWithWeight">
            <summary>
            The base class for all unsupervised trainer inputs that support a weight column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.UnsupervisedTrainerInputBaseWithWeight.ExampleWeightColumnName">
            <summary>
            Column to use for example weight.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.TrainerInputBaseWithGroupId">
            <summary>
            The base class for all trainer inputs that support a group column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.TrainerInputBaseWithGroupId.RowGroupColumnName">
            <summary>
            Column to use for example groupId.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.CursOpt">
            <summary>
            Options for creating a <see cref="T:Microsoft.ML.Trainers.TrainingCursorBase"/> from a <see cref="T:Microsoft.ML.Data.RoleMappedData"/> with specified standard columns active.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.CheckFeatureFloatVector(Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Check for a standard (known-length vector of float) feature column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.CheckFeatureFloatVector(Microsoft.ML.Data.RoleMappedData,System.Int32@)">
            <summary>
            Check for a standard (known-length vector of float) feature column and determine its length.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.CheckBinaryLabel(Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Check for a standard binary classification label.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.CheckRegressionLabel(Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Check for a standard regression label.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.CheckMulticlassLabel(Microsoft.ML.Data.RoleMappedData,System.Int32@)">
            <summary>
            Check for a standard multi-class label and determine its cardinality. If the column is a
            key type, it must have known cardinality. For other numeric types, this scans the data
            to determine the cardinality.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.CheckMultiOutputRegressionLabel(Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Check for a standard regression label.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.CreateRowCursor(Microsoft.ML.Data.RoleMappedData,Microsoft.ML.Trainers.CursOpt,System.Random,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create a row cursor for the RoleMappedData with the indicated standard columns active.
            This does not verify that the columns exist, but merely activates the ones that do exist.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.CreateRowCursorSet(Microsoft.ML.Data.RoleMappedData,Microsoft.ML.Trainers.CursOpt,System.Int32,System.Random,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Create a row cursor set for the <see cref="T:Microsoft.ML.Data.RoleMappedData"/> with the indicated standard columns active.
            This does not verify that the columns exist, but merely activates the ones that do exist.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.GetFeatureFloatVectorGetter(Microsoft.ML.DataViewRow,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Get the getter for the feature column, assuming it is a vector of float.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.GetFeatureFloatVectorGetter(Microsoft.ML.DataViewRow,Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Get the getter for the feature column, assuming it is a vector of float.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.GetLabelFloatGetter(Microsoft.ML.DataViewRow,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Get a getter for the label as a float. This assumes that the label column type
            has already been validated as appropriate for the kind of training being done.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.GetLabelFloatGetter(Microsoft.ML.DataViewRow,Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Get a getter for the label as a float. This assumes that the label column type
            has already been validated as appropriate for the kind of training being done.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.GetOptWeightFloatGetter(Microsoft.ML.DataViewRow,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Get the getter for the weight column, or null if there is no weight column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.GetOptGroupGetter(Microsoft.ML.DataViewRow,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Get the getter for the group column, or null if there is no group column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.MakeBoolScalarLabel(System.String)">
            <summary>
            The <see cref="T:Microsoft.ML.SchemaShape.Column"/> for the label column for binary classification tasks.
            </summary>
            <param name="labelColumn">name of the label column</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.MakeR4ScalarColumn(System.String)">
            <summary>
            The <see cref="T:Microsoft.ML.SchemaShape.Column"/> for the float type columns.
            </summary>
            <param name="columnName">name of the column</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.MakeU4ScalarColumn(System.String)">
            <summary>
            The <see cref="T:Microsoft.ML.SchemaShape.Column"/> for the label column for regression tasks.
            </summary>
            <param name="columnName">name of the weight column</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.MakeR4VecFeature(System.String)">
            <summary>
            The <see cref="T:Microsoft.ML.SchemaShape.Column"/> for the feature column.
            </summary>
            <param name="featureColumn">name of the feature column</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.MakeR4ScalarWeightColumn(System.String)">
            <summary>
            The <see cref="T:Microsoft.ML.SchemaShape.Column"/> for the weight column.
            </summary>
            <param name="weightColumn">name of the weight column</param>
        </member>
        <member name="T:Microsoft.ML.Trainers.TrainerUtils.TrainerEstimatorToTrainerShim`2">
            <summary>
            This is a shim class to translate the more contemporaneous <see cref="T:Microsoft.ML.Trainers.ITrainerEstimator`2"/>
            style transformers into the older now disfavored <see cref="T:Microsoft.ML.ITrainer`1"/> idiom, for components that still
            need to operate via that older mechanism. (Mostly command line invocations, and so on.).
            </summary>
            <typeparam name="TModel">The type of the new model parameters.</typeparam>
            <typeparam name="TPredictor">The type corresponding to the legacy predictor.</typeparam>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainerUtils.MapTrainerEstimatorToTrainer``3(Microsoft.ML.Runtime.IHostEnvironment,``0)">
            <summary>
            This is a shim for legacy code that takes the more modern <see cref="T:Microsoft.ML.Trainers.ITrainerEstimator`2"/>
            interface, and maps it to the legacy code that wants an <see cref="T:Microsoft.ML.ITrainer`1"/>. The goal should be to
            remove reliance on that interface if possible, but this may not be practical in the immediate term, so for the benefit
            of scenarios like this we have this convenience function.
            </summary>
            <typeparam name="T">The trainer estimator type.</typeparam>
            <typeparam name="TModel">The type of the model produced by the estimator.</typeparam>
            <typeparam name="TPredictor">The type of the predictor to be produced by the predictor.</typeparam>
            <param name="env">The host environment.</param>
            <param name="trainer">The trainer estimator.</param>
            <returns>An implementation of the legacy trainer interface.</returns>
        </member>
        <member name="T:Microsoft.ML.Trainers.TrainingCursorBase">
            <summary>
            This is the base class for a data cursor. Data cursors are specially typed
            "convenience" cursor-like objects, less general than a <see cref="T:Microsoft.ML.DataViewRowCursor"/> but
            more convenient for common access patterns that occur in machine learning. For
            example, the common idiom of iterating over features/labels/weights while skipping
            "bad" features, labels, and weights. There will be two typical access patterns for
            users of the cursor. The first is just creation of the cursor using a constructor;
            this is best for one-off accesses of the data. The second access pattern, best for
            repeated accesses, is to use a cursor factory (usually a nested class of the cursor
            class). This keeps track of what filtering options were actually useful.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainingCursorBase.#ctor(Microsoft.ML.DataViewRowCursor,System.Action{Microsoft.ML.Trainers.CursOpt})">
            <summary>
            The base constructor class for the factory-based cursor creation.
            </summary>
            <param name="input"></param>
            <param name="signal">This method is called </param>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainingCursorBase.CursoringCompleteFlags">
             <summary>
             This method is called by <see cref="M:Microsoft.ML.Trainers.TrainingCursorBase.MoveNext"/> in the event we have reached the end
             of the cursoring. The intended usage is that it returns what flags will be passed to the signal
             delegate of the cursor, indicating what additional options should be specified on subsequent
             passes over the data. The base implementation checks if any rows were skipped, and if none were
             skipped, it signals the context that it needn't bother with any filtering checks.
            
             Because the result will be "or"-red, a perfectly acceptable implementation is that this
             return the default <see cref="T:Microsoft.ML.Trainers.CursOpt"/>, in which case the flags will not ever change.
            
             If the cursor was created with a signal delegate, the return value of this method will be sent
             to that delegate.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainingCursorBase.MoveNext">
            <summary>
            Calls Cursor.MoveNext() and this.Accept() repeatedly until this.Accept() returns true.
            Returns false if Cursor.MoveNext() returns false. If you call Cursor.MoveNext() directly,
            also call this.Accept() to fetch the values of the current row. Note that if this.Accept()
            returns false, it's possible that not all values were fetched.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainingCursorBase.Accept">
            <summary>
            This fetches and validates values for the standard active columns.
            It is called automatically by MoveNext(). Client code should only need
            to deal with this if it calls MoveNext() on the underlying
            <see cref="T:Microsoft.ML.DataViewRowCursor"/> directly. That is, this is only for very advanced scenarios.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.TrainingCursorBase.FactoryBase`1">
            <summary>
            This is the base class for a data cursor factory. The factory is a reusable object,
            created with data and cursor options. From external non-implementing users it will
            appear to be more or less stateless, but internally it is keeping track of what sorts
            of filtering it needs to perform. For example, if we construct the factory with the
            option that it needs to filter out rows with bad feature values, but on the first
            iteration it is revealed there are no bad feature values, then it would be a complete
            waste of time to check on subsequent iterations over the data whether there are bad
            feature values again.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainingCursorBase.FactoryBase`1.Create(System.Random,System.Int32[])">
            <summary>
            The typed analog to <see cref="M:Microsoft.ML.IDataView.GetRowCursor(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column},System.Random)"/>.
            </summary>
            <param name="rand">Non-null if we are requesting a shuffled cursor.</param>
            <param name="extraCols">The extra columns to activate on the row cursor
            in addition to those required by the factory's options.</param>
            <returns>The wrapping typed cursor.</returns>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainingCursorBase.FactoryBase`1.CreateSet(System.Int32,System.Random,System.Int32[])">
            <summary>
            The typed analog to <see cref="M:Microsoft.ML.IDataView.GetRowCursorSet(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column},System.Int32,System.Random)"/>, this provides a
            partitioned cursoring of the data set, appropriate to multithreaded algorithms
            that want to consume parallel cursors without any consolidation.
            </summary>
            <param name="n">Suggested degree of parallelism.</param>
            <param name="rand">Non-null if we are requesting a shuffled cursor.</param>
            <param name="extraCols">The extra columns to activate on the row cursor
            in addition to those required by the factory's options.</param>
            <returns>The cursor set. Note that this needn't necessarily be of size
            <paramref name="n"/>.</returns>
        </member>
        <member name="M:Microsoft.ML.Trainers.TrainingCursorBase.FactoryBase`1.CreateCursorCore(Microsoft.ML.DataViewRowCursor,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.Trainers.CursOpt,System.Action{Microsoft.ML.Trainers.CursOpt})">
            <summary>
            Called by both the <see cref="M:Microsoft.ML.Trainers.TrainingCursorBase.FactoryBase`1.Create(System.Random,System.Int32[])"/> and <see cref="M:Microsoft.ML.Trainers.TrainingCursorBase.FactoryBase`1.CreateSet(System.Int32,System.Random,System.Int32[])"/> factory methods. Implementors
            should instantiate the particular wrapping cursor.
            </summary>
            <param name="input">The row cursor we will wrap.</param>
            <param name="data">The data from which the row cursor was instantiated.</param>
            <param name="opt">The cursor options this row cursor was created with.</param>
            <param name="signal">The action that our wrapping cursor will call. Implementors of the cursor
            do not usually call it directly, but instead override
            <see cref="M:Microsoft.ML.Trainers.TrainingCursorBase.CursoringCompleteFlags"/>, whose return value is used to call
            this action.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Trainers.TrainingCursorBase.FactoryBase`1.AndAccumulator">
            <summary>
            Accumulates signals from cursors, anding them together. Once it has
            all of the information it needs to signal the factory itself, it will
            do so.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.StandardScalarCursor">
            <summary>
            This supports Weight (float), Group (ulong), and Id (RowId) columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.FeatureFloatVectorCursor">
            <summary>
            This derives from <see cref="T:Microsoft.ML.Trainers.StandardScalarCursor"/> and adds the feature column
            as a <see cref="T:Microsoft.ML.Data.VBuffer`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.FloatLabelCursor">
            <summary>
            This derives from the FeatureFloatVectorCursor and adds the Label (float) column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.MulticlassLabelCursor">
            <summary>
            This derives from the FeatureFloatVectorCursor and adds the Label (int) column,
            enforcing multi-class semantics.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.ISupportSdcaLoss">
            <summary>
            The loss function may know the close-form solution to the optimal dual update
            Ref: Sec(6.2) of http://jmlr.org/papers/volume14/shalev-shwartz13a/shalev-shwartz13a.pdf
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.ISupportSdcaLoss.DualUpdate(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Compute the dual update (\Delta\alpha_i) in SDCA
            - alpha: dual variable at the specified instance
            - lambdaN: L2 const x number of instances
            - cached invariant, hinted by the method above
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.ISupportSdcaLoss.DualLoss(System.Single,System.Single)">
            <summary>
            The dual loss function for a training example.
            If f(x) denotes the loss function on an individual training example,
            then this function returns -f*(-x*), where f*(x*) is the Fenchel conjugate
            of f(x).
            </summary>
            <param name="label">The label of the example.</param>
            <param name="dual">The dual variable of the example.</param>
        </member>
        <member name="T:Microsoft.ML.Trainers.LogLoss">
             <summary>
             The Log Loss, also known as the Cross Entropy Loss. It is commonly used in classification tasks.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             The Log Loss function is defined as:
            
             $L(p(\hat{y}), y) = -y ln(\hat{y}) - (1 - y) ln(1 - \hat{y})$
            
             where $\hat{y}$ is the predicted score, $p(\hat{y})$ is the probability of belonging to the positive class by applying a [sigmoid function](https://en.wikipedia.org/wiki/Sigmoid_function) to the score, and $y \in \\{0, 1\\}$ is the true label.
            
             Note that the labels used in this calculation are 0 and 1, unlike [Hinge Loss](xref:Microsoft.ML.Trainers.HingeLoss) and [Exponential Loss](xref:Microsoft.ML.Trainers.ExpLoss), where the labels used are -1 and 1.
            
             The Log Loss function provides a measure of how *certain* a classifier's predictions are, instead of just measuring how *correct* they are.
             For example, a predicted probability of 0.80 for a true label of 1 gets penalized more than a predicted probability of 0.99.
            
             ]]>
             </format>
             </remarks>
        </member>
        <member name="T:Microsoft.ML.Trainers.HingeLoss">
             <summary>
             Hinge Loss, commonly used in classification tasks.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             The Hinge Loss function is defined as:
            
             $L(\hat{y}, y) = max(0, m - y\hat{y})$
            
             where $\hat{y}$ is the predicted score, $y \in \\{-1, 1\\}$ is the true label, and $m$ is the margin parameter set to 1 by default.
            
             Note that the labels used in this calculation are -1 and 1, unlike [Log Loss](xref:Microsoft.ML.Trainers.LogLoss), where the labels used are 0 and 1.
             Also unlike [Log Loss](xref:Microsoft.ML.Trainers.LogLoss), $\hat{y}$ is the raw predicted score, not the predicted probability (which is calculated by applying a [sigmoid function](https://en.wikipedia.org/wiki/Sigmoid_function) to the predicted score).
            
             While the hinge loss function is both convex and continuous, it is not smooth (that is not differentiable) at $y\hat{y} = m$.
             Consequently, it cannot be used with gradient descent methods or stochastic gradient descent methods, which rely on differentiability over the entire domain.
            
             For more, see [Hinge Loss for classification](https://en.wikipedia.org/wiki/Loss_functions_for_classification#Hinge_loss).
            
             ]]>
             </format>
             </remarks>
        </member>
        <member name="T:Microsoft.ML.Trainers.SmoothedHingeLoss">
             <summary>
             A smooth version of the <see cref="T:Microsoft.ML.Trainers.HingeLoss"/> function, commonly used in classification tasks.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             Let $f(\hat{y}, y) = 1 - y\hat{y}$, where $\hat{y}$ is the predicted score and $y \in \\{-1, 1\\}$ is the true label. $f(\hat{y}, y)$ here is the non-zero portion of the [Hinge Loss](xref:Microsoft.ML.Trainers.HingeLoss).
            
             Note that the labels used in this calculation are -1 and 1, unlike [Log Loss](xref:Microsoft.ML.Trainers.LogLoss), where the labels used are 0 and 1.
             Also unlike [Log Loss](xref:Microsoft.ML.Trainers.LogLoss), $\hat{y}$ is the raw predicted score, not the predicted probability (which is calculated by applying a [sigmoid function](https://en.wikipedia.org/wiki/Sigmoid_function) to the predicted score).
            
             The Smoothed Hinge Loss function is then defined as:
            
             $
             L(f(\hat{y}, y)) =
             \begin{cases}
             0                                  & \text{if } f(\hat{y}, y) < 0 \\\\
             \frac{(f(\hat{y}, y))^2}{2\alpha}  & \text{if } f(\hat{y}, y) < \alpha \\\\
             f(\hat{y}, y) - \frac{\alpha}{2}   & \text{otherwise}
             \end{cases}
             $
            
             where $\alpha$ is a smoothing parameter set to 1 by default.
            
             ]]>
             </format>
             </remarks>
        </member>
        <member name="M:Microsoft.ML.Trainers.SmoothedHingeLoss.#ctor(System.Single)">
            <summary>
            Constructor for smoothed hinge losee.
            </summary>
            <param name="smoothingConstant">The smoothing constant.</param>
        </member>
        <member name="T:Microsoft.ML.Trainers.ExpLoss">
             <summary>
             Exponential Loss, commonly used in classification tasks.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             The Exponential Loss function is defined as:
            
             $L(\hat{y}, y) = e^{-\beta y \hat{y}}$
            
             where $\hat{y}$ is the predicted score, $y \in \\{-1, 1\\}$ is the true label, and $\beta$ is a scale factor set to 1 by default.
            
             Note that the labels used in this calculation are -1 and 1, unlike [Log Loss](xref:Microsoft.ML.Trainers.LogLoss), where the labels used are 0 and 1.
             Also unlike [Log Loss](xref:Microsoft.ML.Trainers.LogLoss), $\hat{y}$ is the raw predicted score, not the predicted probability (which is calculated by applying a [sigmoid function](https://en.wikipedia.org/wiki/Sigmoid_function) to the predicted score).
            
             The Exponential Loss function penalizes incorrect predictions more than the [Hinge Loss](xref:Microsoft.ML.Trainers.HingeLoss) and has a larger gradient.
            
             ]]>
             </format>
             </remarks>
        </member>
        <member name="T:Microsoft.ML.Trainers.SquaredLoss">
             <summary>
             The Squared Loss, commonly used in regression tasks.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             The Squared Loss function is defined as:
            
             $L(\hat{y}, y) = (\hat{y} - y)^2$
            
             where $\hat{y}$ is the predicted value and $y$ is the true value.
            
             ]]>
             </format>
             </remarks>
        </member>
        <member name="T:Microsoft.ML.Trainers.PoissonLoss">
             <summary>
             Poisson Loss function for Poisson Regression.
             </summary>
             <remarks type="text/markdown"><![CDATA[
            
             The Poisson Loss function is defined as:
            
             $L(\hat{y}, y) = e^{\hat{y}} - y\hat{y}$
            
             where $\hat{y}$ is the predicted value, $y$ is the true label.
            
             ]]>
             </remarks>
        </member>
        <member name="T:Microsoft.ML.Trainers.TweedieLoss">
             <summary>
             Tweedie loss, based on the log-likelihood of the Tweedie distribution. This loss function is used in Tweedie regression.
             </summary>
             <remarks type="text/markdown"><![CDATA[
            
             The Tweedie Loss function is defined as:
            
             $
             L(\hat{y}, y, i) =
             \begin{cases}
             \hat{y} - y ln(\hat{y}) + ln(\Gamma(y))                                                                                     & \text{if } i = 1 \\\\
             \hat{y} + \frac{y}{\hat{y}} - \sqrt{y}                                                                                      & \text{if } i = 2 \\\\
             \frac{(\hat{y})^{2 - i}}{2 - i} - y \frac{(\hat{y})^{1 - i}}{1 - i} - (\frac{y^{2 - i}}{2 - i} - y\frac{y^{1 - i}}{1 - i})  & \text{otherwise}
             \end{cases}
             $
            
             where $\hat{y}$ is the predicted value, $y$ is the true label, $\Gamma$ is the [Gamma function](https://en.wikipedia.org/wiki/Gamma_function), and $i$ is the index parameter for the [Tweedie distribution](https://en.wikipedia.org/wiki/Tweedie_distribution), in the range [1, 2].
             $i$ is set to 1.5 by default. $i = 1$ is Poisson loss, $i = 2$ is gamma loss, and intermediate values are compound Poisson-Gamma loss.
            
             ]]>
             </remarks>
        </member>
        <member name="M:Microsoft.ML.Trainers.TweedieLoss.#ctor(System.Double)">
            <summary>
            Constructor for Tweedie loss.
            </summary>
            <param name="index">Index parameter for the Tweedie distribution, in the range [1, 2].
            1 is Poisson loss, 2 is gamma loss, and intermediate values are compound Poisson loss.</param>
        </member>
        <member name="T:Microsoft.ML.Model.IParameterMixer">
            <summary>
            A generic interface for models that can average parameters from multiple instance of self
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.IParameterMixer`1">
            <summary>
            A generic interface for models that can average parameters from multiple instance of self
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.IQuantileRegressionPredictor">
            <summary>
            Predictor that can specialize for quantile regression. It will produce a <see cref="T:Microsoft.ML.Data.ISchemaBindableMapper"/>, given
            an array of quantiles.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.IDistribution`1">
            <summary>
            A generic interface for probability distributions
            </summary>
            <typeparam name="TResult">Type of statistics result</typeparam>
        </member>
        <member name="M:Microsoft.ML.Model.ISampleableDistribution`1.GetSupportSample(`0[]@)">
            <summary>
            Returns Support sample for the distribution.
            </summary>
            <param name="weights">Weights for the distribution.It will be null if the distribution is uniform.</param>
            <returns>Returns Support sample</returns>
        </member>
        <member name="T:Microsoft.ML.Model.ICanSaveInTextFormat">
            <summary>
            Predictors that can output themselves in a human-readable text format
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.ICanSaveInIniFormat">
            <summary>
            Predictors that can output themselves in the Bing ini format.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.ICanSaveSummary">
            <summary>
            Predictors that can output Summary.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.ICanGetSummaryInKeyValuePairs">
            <summary>
            Predictors that can output Summary in key value pairs.
            The content of value 'object' can be any type such as integer, float, string or an array of them.
            It is up the caller to check and decide how to consume the values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ICanGetSummaryInKeyValuePairs.GetSummaryInKeyValuePairs(Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Gets model summary including model statistics (if exists) in key value pairs.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.ICanSaveInSourceCode">
            <summary>
            Predictors that can output themselves in C#/C++ code.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.SignatureFeatureScorerTrainer">
            <summary>
            Signature for trainers that produce predictors that in turn can be use to score features.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.IHaveFeatureWeights">
            <summary>
            Interface implemented by components that can assign weights to features.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.IHaveFeatureWeights.GetFeatureWeights(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Returns the weights for the features.
            There should be at most as many weights as there are features.
            If there are less weights, it is implied that the remaining features have a weight of zero.
            The larger the absolute value of a weights, the more informative/important the feature.
            A weights of zero signifies that the feature is not used by the model.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.IPredictorWithFeatureWeights`1">
            <summary>
            Interface implemented by predictors that can score features.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.ICanGetTrainingLabelNames">
            <summary>
            Interface for predictors that can return a string array containing the label names from the label column they were trained on.
            If the training label is a key with text key value metadata, it should return this metadata. The order of the labels should be consistent
            with the key values. Otherwise, it returns null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.ICanSaveOnnx.CanSaveOnnx(Microsoft.ML.Model.OnnxConverter.OnnxContext)">
            <summary>
            Whether this object really is capable of saving itself as part of an ONNX
            pipeline. An implementor of this object might implement this interface,
            but still return <c>false</c> if there is some characteristic of this object
            only detectable during runtime that would prevent its being savable. (For example,
            it may wrap some other object that may or may not be savable.)
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.OnnxConverter.ISaveAsOnnx">
            <summary>
            This component know how to save himself in ONNX format.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.ISaveAsOnnx.SaveAsOnnx(Microsoft.ML.Model.OnnxConverter.OnnxContext)">
            <summary>
            Save as ONNX.
            </summary>
            <param name="ctx">The ONNX program being built</param>
        </member>
        <member name="T:Microsoft.ML.Model.OnnxConverter.ITransformCanSaveOnnx">
            <summary>
            This data model component is savable as ONNX.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.OnnxConverter.IBindableCanSaveOnnx">
            <summary>
            This <see cref="T:Microsoft.ML.Data.ISchemaBindableMapper"/> is savable in ONNX. Note that this is
            typically called within an <see cref="T:Microsoft.ML.Data.IDataScorerTransform"/> that is wrapping
            this mapper, and has already been bound to it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.IBindableCanSaveOnnx.SaveAsOnnx(Microsoft.ML.Model.OnnxConverter.OnnxContext,Microsoft.ML.Data.RoleMappedSchema,System.String[])">
            <summary>
            Save as ONNX. If <see cref="M:Microsoft.ML.Model.OnnxConverter.ICanSaveOnnx.CanSaveOnnx(Microsoft.ML.Model.OnnxConverter.OnnxContext)"/> is
            <c>false</c> this should not be called. This method is intended to be called
            by the wrapping scorer transform, and is intended to produce enough information
            for that purpose.
            </summary>
            <param name="ctx">The ONNX program being built</param>
            <param name="schema">The role mappings that was passed to this bindable
            object, when the <see cref="T:Microsoft.ML.Data.ISchemaBoundMapper"/> was created that this transform
            is wrapping</param>
            <param name="outputNames">Since this method is called from a scorer transform,
            it is that transform that controls what the output column names will be, of
            the outputs produced by this bindable mapper. This is the array that holds
            those names, so that implementors of this method know what to produce in
            <paramref name="ctx"/>.</param>
        </member>
        <member name="T:Microsoft.ML.Model.OnnxConverter.ISingleCanSaveOnnx">
            <summary>
            For simple mappers. Intended to be used for <see cref="T:Microsoft.ML.Data.IValueMapper"/> and
            <see cref="T:Microsoft.ML.Calibrators.ICalibrator"/> instances.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.OnnxConverter.IDistCanSaveOnnx">
            <summary>
            For simple mappers. Intended to be used for <see cref="T:Microsoft.ML.Data.IValueMapperDist"/>
            instances.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.OnnxConverter.OnnxContext">
            <summary>
            A context for defining a ONNX output. The context internally contains the model-in-progress being built. This
            same context object is iteratively given to exportable components via the <see cref="T:Microsoft.ML.Model.OnnxConverter.ICanSaveOnnx"/> interface
            and subinterfaces, that attempt to express their operations as ONNX nodes, if they can. At the point that it is
            given to a component, all other components up to that component have already attempted to express themselves in
            this context, with their outputs possibly available in the ONNX graph.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.GetNodeName(System.String)">
            <summary>
            Generates a unique name for the node based on a prefix.
            </summary>
            <param name="prefix">The prefix for the node</param>
            <returns>A name that has not yet been returned from this function, starting with <paramref name="prefix"/></returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.IsVariableDefined(System.String)">
            <summary>
            Determine if a string has been used as ONNX variable name somewhere.
            </summary>
            <param name="variableName">examined string</param>
            <returns>True if the input argument has been used to denote an ONNX variable. Otherwise, False.</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.ContainsColumn(System.String)">
            <summary>
            Looks up whether a given data view column has a mapping in the ONNX context. Once confirmed, callers can
            safely call <see cref="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.GetVariableName(System.String)"/>.
            </summary>
            <param name="colName">The data view column name</param>
            <returns>Whether the column is mapped in this context</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.CheckOpSetVersion(System.Int32,System.String)">
            <summary>
            Check the required OpSet version satisfies our requirement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.RemoveColumn(System.String,System.Boolean)">
            <summary>
            Stops tracking a column.
            </summary>
            <param name="colName">Column name to stop tracking</param>
            <param name="removeVariable">Remove associated ONNX variable. This is useful in the event where an output
            variable is created through <see cref="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddIntermediateVariable(Microsoft.ML.Data.DataViewType,System.String,System.Boolean)"/>before realizing
            the transform cannot actually save as ONNX.</param>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.RemoveVariable(System.String,System.Boolean)">
            <summary>
            Removes an ONNX variable. If removeColumn is true then it also removes the tracking for the <see
            cref="T:Microsoft.ML.IDataView"/> column associated with it.
            </summary>
            <param name="variableName">ONNX variable to remove. Note that this is an ONNX variable name, not an <see
            cref="T:Microsoft.ML.IDataView"/> column name</param>
            <param name="removeColumn">IDataView column to stop tracking</param>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.RemoveInputVariable(System.String)">
            <summary>
            Removes a variable from the input columns list. This function is used only by the ColumnSelectingTransformer.
            </summary>
            <param name="variableName">ONNX variable to remove. </param>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.GetVariableName(System.String)">
            <summary>
            ONNX variables are referred to by name. At each stage of a ML.NET pipeline, the corresponding
            <see cref="T:Microsoft.ML.IDataView"/>'s column names will map to a variable in the ONNX graph if the intermediate steps
            used to calculate that value are things we knew how to save as ONNX. Retrieves the variable name that maps
            to the <see cref="T:Microsoft.ML.IDataView"/> column name at a given point in the pipeline execution. Callers should
            probably confirm with <see cref="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.ContainsColumn(System.String)"/> whether a mapping for that data view column
            already exists.
            </summary>
            <param name="colName">The data view column name</param>
            <returns>The ONNX variable name corresponding to that data view column</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddIntermediateVariable(Microsoft.ML.Data.DataViewType,System.String,System.Boolean)">
            <summary>
            Establishes a new mapping from an data view column in the context, if necessary generates a unique name, and
            returns that newly allocated name.
            </summary>
            <param name="type">The data view type associated with this column name</param>
            <param name="colName">The data view column name</param>
            <param name="skip">Whether we should skip the process of establishing the mapping from data view column to
            ONNX variable name.</param>
            <returns>The returned value is the name of the variable corresponding </returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.CreateNode(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Creates an ONNX node
            </summary>
            <param name="opType">The name of the ONNX operator to apply</param>
            <param name="inputs">The names of the variables as inputs</param>
            <param name="outputs">The names of the variables to create as outputs,
            which ought to have been something returned from <see cref="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddIntermediateVariable(Microsoft.ML.Data.DataViewType,System.String,System.Boolean)"/></param>
            <param name="name">The name of the operator, which ought to be something returned from <see cref="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.GetNodeName(System.String)"/></param>
            <param name="domain">The domain of the ONNX operator, if non-default</param>
            <returns>A node added to the in-progress ONNX graph, that attributes can be set on</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.CreateNode(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Convenience alternative to <see cref="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.CreateNode(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String)"/>
            for the case where there is exactly one input and output.
            </summary>
            <param name="opType">The name of the ONNX operator to apply</param>
            <param name="input">The name of the variable as input</param>
            <param name="output">The name of the variable as output,
            which ought to have been something returned from <see cref="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddIntermediateVariable(Microsoft.ML.Data.DataViewType,System.String,System.Boolean)"/></param>
            <param name="name">The name of the operator, which ought to be something returned from <see cref="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.GetNodeName(System.String)"/></param>
            <param name="domain">The domain of the ONNX operator, if non-default</param>
            <returns>A node added to the in-progress ONNX graph, that attributes can be set on</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.GetOnnxVersion">
            <summary>
            Get the targeted ONNX version string. Only two values are allowed now: "Stable" and "Experimental".
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.RetrieveShapeOrNull(System.String)">
            <summary>
            Retrieve the shape of an ONNX variable. Returns null if no shape for the specified variable can be found.
            </summary>
            <param name="variableName">The ONNX name of the returned shape</param>
            <returns>The shape of the retrieved variable</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Boolean,System.String,System.Boolean)">
            <summary>
            Call this function to declare a global bool scalar
            </summary>
            <param name="value">The boolean value which is going to be added</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Single,System.String,System.Boolean)">
            <summary>
            Call this function to declare a global float scalar
            </summary>
            <param name="value">The float number which is going to be added</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Int32,System.Type,System.String,System.Boolean)">
            <summary>
            Call this function to declare a global integer scalar or smaller types
            </summary>
            <param name="value">The float number which is going to be added</param>
            <param name="type">The type of integer to be added, e.g. typeof(short). Use this for all integer types Int32 and smaller</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.String,System.String,System.Boolean)">
            <summary>
            Call this function to declare a global string scalar
            </summary>
            <param name="value">The string which is going to be added into the ONNX graph</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Int64,System.String,System.Boolean)">
            <summary>
            Call this function to declare a global long scalar
            </summary>
            <param name="value">The long number which is going to be added into the ONNX graph</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Double,System.String,System.Boolean)">
            <summary>
            Call this function to declare a global double scalar
            </summary>
            <param name="value">The double number which is going to be added into the ONNX graph</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.UInt64,System.Boolean,System.String,System.Boolean)">
            <summary>
            Call this function to declare a global ulong or uint scalar
            </summary>
            <param name="value">The long number which is going to be added into the ONNX graph</param>
            <param name="isUint64">true if value contains a ulong value and false if it contains uint </param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Boolean)">
            <summary>
            Call this function to declare a global bool tensor
            </summary>
            <param name="values">The boolean values which are going to be added into the ONNX graph</param>
            <param name="dims">The shape of values</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Boolean)">
            <summary>
            Call this function to declare a global float tensor
            </summary>
            <param name="values">The floats which are going to be added into the ONNX graph</param>
            <param name="dims">The shape of values</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Collections.Generic.IEnumerable{System.Int32},System.Type,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Boolean)">
            <summary>
            Call this function to declare a global tensor of integer or smaller types
            </summary>
            <param name="values">The ints which are going to be added into the ONNX graph</param>
            <param name="type">The type of ints which are going to be added into the ONNX graph, e.g. typeof(short). Use this for adding array initializers of integer types smaller than Int32</param>
            <param name="dims">The shape of values</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Boolean)">
            <summary>
            Call this function to declare a global string tensor
            </summary>
            <param name="values">The strings which are going to be added into the ONNX graph</param>
            <param name="dims">The shape of values</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Boolean)">
            <summary>
            Call this function to declare a global long tensor
            </summary>
            <param name="values">The longs which are going to be added into the ONNX graph</param>
            <param name="dims">The shape of values</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Boolean)">
            <summary>
            Call this function to declare a global double tensor
            </summary>
            <param name="values">The doubles which are going to be added into the ONNX graph</param>
            <param name="dims">The shape of values</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.AddInitializer(System.Collections.Generic.IEnumerable{System.UInt64},System.Boolean,System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Boolean)">
            <summary>
            Call this function to declare a global ulong tensor
            </summary>
            <param name="values">The unsigned integers which are going to be added into the ONNX graph</param>
            <param name="isUint64">Set to true if values contain ulong values false if they contain uint values</param>
            <param name="dims">The shape of values</param>
            <param name="name">A string used as a seed to generate this initializer's name in the ONNX graph.</param>
            <param name="makeUniqueName">Whether a unique name should be picked for this initializer.</param>
            <returns>The initializer's ONNX name</returns>
        </member>
        <member name="T:Microsoft.ML.Model.OnnxConverter.OnnxNode">
            <summary>
            An abstraction for an ONNX node as created by
            <see cref="M:Microsoft.ML.Model.OnnxConverter.OnnxContext.CreateNode(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String)"/>.
            That method creates a with inputs and outputs, but this object can modify the node further
            by adding attributes (in ONNX parlance, attributes are more or less constant parameterizations).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.Pfa.BoundPfaContext">
            <summary>
            This wraps a <see cref="T:Microsoft.ML.Model.Pfa.PfaContext"/>, except with auxiliary information
            that enables its inclusion relative to the <see cref="T:Microsoft.ML.IDataView"/> ecosystem.
            The idea is that one starts with a context built from some starting point,
            then subsequent transforms via <see cref="T:Microsoft.ML.Model.Pfa.ITransformCanSavePfa"/> augment this context.
            Beyond what is offered in <see cref="T:Microsoft.ML.Model.Pfa.PfaContext"/>, <see cref="T:Microsoft.ML.Model.Pfa.BoundPfaContext"/>
            has facilities to remember what column name in <see cref="T:Microsoft.ML.IDataView"/> maps to
            what token in the PFA being built up.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Model.Pfa.BoundPfaContext.Pfa">
            <summary>
            The internal PFA context, for an escape hatch.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Model.Pfa.BoundPfaContext._nameToVarName">
            <summary>
            This will map from the "current" name of a data view column, to a corresponding
            token string.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Model.Pfa.BoundPfaContext._unavailable">
            <summary>
            This contains a map of those names in
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.BoundPfaContext.Finalize(Microsoft.ML.DataViewSchema,System.String[])">
            <summary>
            This call will set <see cref="P:Microsoft.ML.Model.Pfa.PfaContext.OutputType"/> to an appropriate output type based
            on the columns requested.
            </summary>
            <param name="schema">The schema corresponding to what we are outputting</param>
            <param name="toOutput">The columns to output</param>
            <returns>Returns a complete PFA program, where the output will correspond to the subset
            of columns from <paramref name="schema"/>.</returns>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.BoundPfaContext.DeclareVar(System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken}[])">
            <summary>
            Attempts to declare variables corresponding to a given column name. This
            will attempt to produce a PFA <c>let</c>/<c>set</c> declaration, and also
            do name mapping. The idea is that any transform implementing <see cref="T:Microsoft.ML.Model.Pfa.ITransformCanSavePfa"/>
            will call this method to say, "hey, I produce this column, and this is the equivalent
            PFA for it."
            </summary>
            <param name="vars">The map from requested name, usually a dataview name,
            to the declaration</param>
            <returns>An array of assigned names in the PFA corresponding to the items in
            vars</returns>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.BoundPfaContext.Hide(System.String[])">
            <summary>
            As a complimentary operation to <see cref="M:Microsoft.ML.Model.Pfa.BoundPfaContext.DeclareVar(System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken}[])"/>,
            this provides a mechanism for a transform to say, "hey, I am producing this column, but I
            am not writing any PFA for it, so if anyone asks for this column downstream don't say I
            have it."
            </summary>
            <param name="names">The names to hide</param>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.BoundPfaContext.TokenOrNullForName(System.String)">
            <summary>
            Given an <see cref="T:Microsoft.ML.IDataView"/> column name, return the string for referencing the corresponding
            token in the PFA, or <c>null</c> if such a thing does not exist.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.BoundPfaContext.IsInput(System.String)">
            <summary>
            Given an <see cref="T:Microsoft.ML.IDataView"/> column name, return whether in the PFA being built up
            whether the corresponding PFA variable is still the input. This will return <c>false</c>
            also in the event that the column is hidden, or simply not present.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Model.Pfa.ICanSavePfa.CanSavePfa">
            <summary>
            Whether this object really is capable of saving itself as part of a PFA
            pipeline. An implementor of this object might implement this interface,
            but still return <c>false</c> if there is some characteristic of this object
            only detectable during runtime that would prevent its being savable. (For example,
            it may wrap some other object that may or may not be savable.)
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.Pfa.ISaveAsPfa">
            <summary>
            This component know how to save himself in Pfa format.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.ISaveAsPfa.SaveAsPfa(Microsoft.ML.Model.Pfa.BoundPfaContext)">
            <summary>
            Save as PFA. For any columns that are output, this interface should use
            <see cref="M:Microsoft.ML.Model.Pfa.BoundPfaContext.DeclareVar(System.String,Newtonsoft.Json.Linq.JToken)"/> to declare themselves,
            while any unwritable columns should be registered <see cref="M:Microsoft.ML.Model.Pfa.BoundPfaContext.Hide(System.String[])"/>.
            If <see cref="P:Microsoft.ML.Model.Pfa.ICanSavePfa.CanSavePfa"/> is <c>false</c> this should not be called.
            </summary>
            <param name="ctx">The PFA program being built</param>
        </member>
        <member name="T:Microsoft.ML.Model.Pfa.ITransformCanSavePfa">
            <summary>
            This data model component is savable as PFA. See https://dmg.org/pfa/ .
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.Pfa.IBindableCanSavePfa">
            <summary>
            This <see cref="T:Microsoft.ML.Data.ISchemaBindableMapper"/> is savable as a PFA. Note that this is
            typically called within an <see cref="T:Microsoft.ML.Data.IDataScorerTransform"/> that is wrapping
            this mapper, and has already been bound to it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.IBindableCanSavePfa.SaveAsPfa(Microsoft.ML.Model.Pfa.BoundPfaContext,Microsoft.ML.Data.RoleMappedSchema,System.String[])">
            <summary>
            Save as PFA. If <see cref="P:Microsoft.ML.Model.Pfa.ICanSavePfa.CanSavePfa"/> is
            <c>false</c> this should not be called. This method is intended to be called
            by the wrapping scorer transform, and is intended to produce enough information
            for that purpose.
            </summary>
            <param name="ctx">The PFA program being built</param>
            <param name="schema">The role mappings that was passed to this bindable
            object, when the <see cref="T:Microsoft.ML.Data.ISchemaBoundMapper"/> was created that this transform
            is wrapping</param>
            <param name="outputNames">Since this method is called from a scorer transform,
            it is that transform that controls what the output column names will be, of
            the outputs produced by this bindable mapper. This is the array that holds
            those names, so that implementors of this method know what to produce in
            <paramref name="ctx"/>.</param>
        </member>
        <member name="T:Microsoft.ML.Model.Pfa.ISingleCanSavePfa">
            <summary>
            For simple mappers. Intended to be used for <see cref="T:Microsoft.ML.Data.IValueMapper"/> and
            <see cref="T:Microsoft.ML.Calibrators.ICalibrator"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.ISingleCanSavePfa.SaveAsPfa(Microsoft.ML.Model.Pfa.BoundPfaContext,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Implementors of this method are responsible for providing the PFA expression that
            computes the output of this object. Note that this method does not control what name
            will be given to the output, and is not responsible for declaring the variable into
            which the output will be returned. (Though, the method may of course declare other
            variables, cells, or such to enable this computation.)
            </summary>
            <param name="ctx">The PFA context</param>
            <param name="input">The PFA token representing the input. In the case of
            a predictor, for example, this would be a reference to the variable holding
            the features array.</param>
            <returns>A PFA expression</returns>
        </member>
        <member name="T:Microsoft.ML.Model.Pfa.IDistCanSavePfa">
            <summary>
            For simple mappers. Intended to be used for <see cref="T:Microsoft.ML.Data.IValueMapperDist"/>
            instances.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.IDistCanSavePfa.SaveAsPfa(Microsoft.ML.Model.Pfa.BoundPfaContext,Newtonsoft.Json.Linq.JToken,System.String,Newtonsoft.Json.Linq.JToken@,System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            The call for distribution predictors. Unlike <see cref="M:Microsoft.ML.Model.Pfa.ISingleCanSavePfa.SaveAsPfa(Microsoft.ML.Model.Pfa.BoundPfaContext,Newtonsoft.Json.Linq.JToken)"/>,
            this method requires this method to handle the declaration of the variables for their
            outputs, into the names <paramref name="score"/> and <paramref name="prob"/> provided.
            </summary>
            <param name="ctx">The PFA context</param>
            <param name="input">The PFA token representing the input. In nearly all cases this will
            be the name of the variable holding the features array.</param>
            <param name="score">The name of the column where the implementing method should
            save the expression, through <see cref="M:Microsoft.ML.Model.Pfa.BoundPfaContext.DeclareVar(System.String,Newtonsoft.Json.Linq.JToken)"/>,
            or if <c>null</c></param>
            <param name="scoreToken"></param>
            <param name="prob">Similar to <paramref name="score"/>, except the probability expression.</param>
            <param name="probToken"></param>
        </member>
        <member name="T:Microsoft.ML.Model.Pfa.PfaContext">
            <summary>
            A context for defining a restricted sort of PFA output.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.PfaContext.CreateFuncBlock(Newtonsoft.Json.Linq.JArray,Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            For creating an anonymous function block. This in itself will not modify the context.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.PfaContext.RegisterType(System.String)">
             <summary>
             PFA is weird in that you do not declare types separately, you declare them as part of a variable
             declaration. So, if you use a record type three times, that means one of the three usages must be
             accompanied by a full type declaration, whereas the other two can just then identify it by name.
             This is extremely silly, but there you go.
            
             Anyway: this will attempt to add a type to the list of registered types. If it returns <c>true</c>
             then the caller is responsible, then, for ensuring that their PFA code they are generating contains
             not only a reference of the type, but a declaration of the type. If however this returns <c>false</c>
             then it can just refer to the type by name, since it has already been declared.
             </summary>
             <param name="name">The type to register</param>
             <returns>If this name was not already registered</returns>
             <seealso cref="M:Microsoft.ML.Model.Pfa.PfaContext.ContainsType(System.String)"/>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.PfaUtils.Call(System.String,Newtonsoft.Json.Linq.JToken[])">
            <summary>
            Generic facilities for calling a function.
            </summary>
            <param name="func">The function to call</param>
            <param name="prms">The parameters for the function</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.PfaUtils.VectorCase(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken,System.String,Newtonsoft.Json.Linq.JToken,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Builds a "cast" statement to the two vector types.
            </summary>
            <param name="itemType">The type of the item in the vector</param>
            <param name="src">The token we are casting</param>
            <param name="asMapName">The name for the token as it will appear in the <paramref name="mapDo"/></param>
            <param name="mapDo">The map case expression</param>
            <param name="asArrName">The name for the token as it will appear in the <paramref name="arrDo"/></param>
            <param name="arrDo">The array case expression</param>
            <returns>The cast/case expression</returns>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.PfaUtils.EnsureCount(Microsoft.ML.Model.Pfa.PfaContext,Newtonsoft.Json.Linq.JToken)">
            <summary>
            This ensures that there is a function formatted as "count_type" (for example, "count_double"),
            that takes either a map or array and returns the number of items in that map or array.
            </summary>
            <param name="ctx">The context to check for the existence of this</param>
            <param name="itemType">The item type this will operate on</param>
        </member>
        <member name="M:Microsoft.ML.Model.Pfa.PfaUtils.EnsureHasChars(Microsoft.ML.Model.Pfa.PfaContext)">
            <summary>
            A string -> bool function for determining whether a string has content.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.ModelFileUtils">
            <summary>
            This class provides utilities for loading components from the model file generated by MAML commands.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadPipeline(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream,Microsoft.ML.Data.IMultiStreamSource,System.Boolean)">
            <summary>
            Loads and returns the loader and transforms from the specified model stream.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="modelStream">The model stream.</param>
            <param name="files">The data source to initialize the loader with.</param>
            <param name="extractInnerPipe">Whether to extract the transforms and loader from the wrapped CompositeDataLoader.</param>
            <returns>The created data view.</returns>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadPipeline(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.RepositoryReader,Microsoft.ML.Data.IMultiStreamSource,System.Boolean)">
            <summary>
            Loads and returns the loader and transforms from the specified repository reader.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="rep">The repository reader.</param>
            <param name="files">The data source to initialize the loader with.</param>
            <param name="extractInnerPipe">Whether to extract the transforms and loader from the wrapped CompositeDataLoader.</param>
            <returns>The created data view.</returns>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadTransforms(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.IO.Stream)">
            <summary>
            Loads all transforms from the model stream, applies them sequentially to the provided data, and returns
            the resulting data. If there are no transforms in the stream, or if there's no DataLoader stream at all
            (this can happen if the model is produced by old TL), returns the source data.
            If the DataLoader stream is invalid, throws.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="data">The starting data view.</param>
            <param name="modelStream">The model stream.</param>
            <returns>The resulting data view.</returns>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadTransforms(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,Microsoft.ML.RepositoryReader)">
            <summary>
            Loads all transforms from the model stream, applies them sequentially to the provided data, and returns
            the resulting data. If there are no transforms in the stream, or if there's no DataLoader stream at all
            (this can happen if the model is produced by old TL), returns the source data.
            If the DataLoader stream is invalid, throws.
            </summary>
            <param name="env">The host environment to use.</param>
            <param name="data">The starting data view.</param>
            <param name="rep">The repository reader.</param>
            <returns>The resulting data view.</returns>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadPredictorOrNull(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)">
            <summary>
            Loads a predictor from the model stream. Returns null iff there's no predictor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadPredictorOrNull(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.RepositoryReader)">
            <summary>
            Loads a predictor from the repository. Returns null iff there's no predictor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.GetDataModelSavingContext(Microsoft.ML.RepositoryWriter)">
            <summary>
            Given a repository, returns the save context for saving the data loader model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadLoader(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.RepositoryReader,Microsoft.ML.Data.IMultiStreamSource,System.Boolean)">
            <summary>
            Loads data view (loader and transforms) from <paramref name="rep"/> if <paramref name="loadTransforms"/> is set to true,
            otherwise loads loader only.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.TryLoadFeatureNames(Microsoft.ML.Internal.Internallearn.FeatureNameCollection@,Microsoft.ML.RepositoryReader)">
            <summary>
            REVIEW: consider adding an overload that returns <see cref="T:System.ReadOnlyMemory`1"/> of <see cref="T:System.Char"/>
            Loads optionally feature names from the repository directory.
            Returns false iff no stream was found for feature names, iff result is set to null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.SaveRoleMappings(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.RoleMappedSchema,Microsoft.ML.RepositoryWriter)">
            <summary>
            Save schema associations of role/column-name in <paramref name="rep"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadRoleMappingsOrNull(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)">
            <summary>
            Return role/column-name pairs loaded from <paramref name="modelStream"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadRoleMappingsOrNull(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.RepositoryReader)">
            <summary>
            Return role/column-name pairs loaded from a repository.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadRoleMappedSchemaOrNull(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.Data.RoleMappedSchema"/> from a model stream, or <c>null</c> if there were no
            role mappings present.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Model.ModelFileUtils.LoadRoleMappedSchemaOrNull(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.RepositoryReader)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.Data.RoleMappedSchema"/> from a repository, or <c>null</c> if there were no
            role mappings present.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.ModelFileUtils.RepositoryStreamWrapper">
            <summary>
            The RepositoryStreamWrapper is a IMultiStreamSource wrapper of a Stream object in a repository.
            It is used to deserialize RoleMappings.txt from a model zip file.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Model.ModelFileUtils.RepositoryStreamWrapper.EntryStream">
            <summary>
            A custom entry stream wrapper that includes custom dispose logic for disposing the entry
            when the stream is disposed.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs">
            <summary>
            Common output classes for trainers and transform entry-points.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.TransformOutput">
            <summary>
            The common output class for all transforms.
            The output consists of the transformed dataset and the transformation model.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.ITransformOutput">
            <summary>
            Interface that all API transform output classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.TrainerOutput">
            <summary>
            The common output class for all trainers.
            The output is a trained predictor model.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.CalibratorOutput">
            <summary>
            The common output for calibrators.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.ICalibratorOutput">
            <summary>
            Marker interface for calibrators output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.BinaryClassificationOutput">
            <summary>
            The common output for binary classification trainers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.IBinaryClassificationOutput">
            <summary>
            Marker interface for binary classification trainer output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.MulticlassClassificationOutput">
            <summary>
            The common output for multiclass classification trainers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.IMulticlassClassificationOutput">
            <summary>
            Marker interface for multiclass classification trainer output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.RegressionOutput">
            <summary>
            The common output for regression trainers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.IRegressionOutput">
            <summary>
            Marker interface for regression trainer output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.MultiRegressionOutput">
            <summary>
            The common output for multi regression trainers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.IMultiRegressionOutput">
            <summary>
            Marker interface for multi regression trainer output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.ClusteringOutput">
            <summary>
            The common output for clustering trainers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.IClusteringOutput">
            <summary>
            Marker interface for clustering trainer output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.AnomalyDetectionOutput">
            <summary>
            The common output for anomaly detection trainers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.IAnomalyDetectionOutput">
            <summary>
            Marker interface for anomaly detection trainer output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.RankingOutput">
            <summary>
            The common output for ranking trainers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.IRankingOutput">
            <summary>
            Marker interface for ranking trainer output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.SequencePredictionOutput">
            <summary>
            The common output for sequence prediction trainers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.ISequencePredictionOutput">
            <summary>
            Marker interface for sequence prediction trainer output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.ITrainerOutput">
            <summary>
            Interface that all API trainer output classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.MacroOutput">
            <summary>
            Macro output class base.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.MacroOutput`1">
            <summary>
            The common output class for all macro entry points.
            The output class is the type parameter. The expansion must guarantee
            that the generated graph will generate all the outputs.
            </summary>
            <typeparam name="TOut">The output class of the macro.</typeparam>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.EvaluateOutputBase">
            <summary>
            The common output class for all evaluators.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.ClassificationEvaluateOutput">
            <summary>
            The output class for classification evaluators.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.CommonEvaluateOutput">
            <summary>
            The output class for regression evaluators.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.IEvaluatorOutput">
            <summary>
            Interface that all API evaluator output classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonOutputs.IClassificationEvaluatorOutput">
            <summary>
            Interface that all API evaluator output classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.Var`1">
            <summary>
            Marker class for the arguments that can be used as variables
            in an entry point graph.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.ArrayVar`1">
            <summary>
            Marker class for the arguments that can be used as array output variables
            in an entry point graph.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.DictionaryVar`1">
            <summary>
            Marker class for the arguments that can be used as dictionary output variables
            in an entry point graph.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.EntryPointVariable">
            <summary>
            A descriptor of one 'variable' of the graph (input or output that is referenced as a $variable in the graph definition).
            </summary>
        </member>
        <member name="P:Microsoft.ML.EntryPoints.EntryPointVariable.Value">
            <summary>
            The value. It will originally start as null, and then assigned to the value,
            once it is available. The type is one of the valid types according to <see cref="M:Microsoft.ML.EntryPoints.EntryPointVariable.IsValidType(System.Type)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.EntryPointVariable.IsValidType(System.Type)">
            <summary>
            Whether the given type is a valid one to be a variable.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.EntryPointVariable.SetValue(System.Object)">
            <summary>
            Set the value. It is only allowed once.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.RunContext">
            <summary>
            A collection of all known variables, with an interface to add new variables, get values based on names etc.
            This is populated by individual nodes when they parse their respective JSON definitions, and then the values are updated
            during the node execution.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.RunContext.AddOutputVariable(System.String,System.Type)">
            <summary>
            Returns true if added new variable, false if variable already exists.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.EntryPointNode">
            <summary>
            A representation of one graph node.
            </summary>
        </member>
        <member name="P:Microsoft.ML.EntryPoints.EntryPointNode.StageId">
            <summary>
            An alphanumeric string indicating the stage of a node.
            The fact that the nodes share the same stage ID hints that they should be executed together whenever possible.
            </summary>
        </member>
        <member name="P:Microsoft.ML.EntryPoints.EntryPointNode.Checkpoint">
            <summary>
            Hints that the output of this node should be checkpointed.
            </summary>
        </member>
        <member name="P:Microsoft.ML.EntryPoints.EntryPointNode.Cost">
            <summary>
            The cost of running this node. NaN indicates unknown.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.EntryPointNode.CheckAndSetInputValue(System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Checks the given JSON object key-value pair is a valid EntryPoint input and
            extracts out any variables that need to be populated. These variables will be
            added to the EntryPoint context. Input parameters that are not set to variables
            will be immediately set using the input builder instance.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.EntryPointNode.CheckAndMarkOutputValue(System.Collections.Generic.KeyValuePair{System.String,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Checks the given JSON object key-value pair is a valid EntryPoint output.
            Extracts out any variables that need to be populated and adds them to the
            EntryPoint context.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.EntryPointNode.CanStart">
            <summary>
            Whether the node can run right now.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.VariableBinding">
            <summary>
            Represents a delayed binding in a JSON graph to an <see cref="T:Microsoft.ML.EntryPoints.EntryPointVariable"/>.
            The subclasses allow us to express that we either desire the variable itself,
            or a array-indexed or dictionary-keyed value from the variable, assuming it is
            of an Array or Dictionary type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.VariableBinding.IsValidVariableName(Microsoft.ML.Runtime.IExceptionContext,System.String)">
            <summary>
            Verifies that the name of the graph variable is a valid one
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.ParameterBinding">
            <summary>
            Represents the l-value assignable destination of a <see cref="T:Microsoft.ML.EntryPoints.VariableBinding"/>.
            Subclasses exist to express the needed bindings for subslots
            of a yet-to-be-constructed array or dictionary EntryPoint input parameter
            (for example, "myVar": ["$var1", "$var2"] would yield two <see cref="T:Microsoft.ML.EntryPoints.ArrayIndexParameterBinding"/>: (myVar, 0), (myVar, 1))
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.EvaluateInputBase">
            <summary>
            The base class for all evaluators inputs.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonInputs">
            <summary>
            Common input interfaces for TLC components.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonInputs.ITransformInput">
            <summary>
            Interface that all API transform input classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonInputs.IFeaturizerInput">
            <summary>
            Interface that all API trainable featurizers will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonInputs.ITrainerInput">
            <summary>
            Interface that all API trainer input classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonInputs.ITrainerInputWithLabel">
            <summary>
            Interface that all API trainer input classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonInputs.IUnsupervisedTrainerWithWeight">
            <summary>
            Interface that all API trainer input classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonInputs.ITrainerInputWithWeight">
            <summary>
            Interface that all API trainer input classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonInputs.ITrainerInputWithGroupId">
            <summary>
            Interface that all API trainer input classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonInputs.ICalibratorInput">
            <summary>
            Interface that all API calibrator input classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.CommonInputs.IEvaluatorInput">
            <summary>
            Interface that all API evaluator input classes will implement.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.InputBuilder">
            <summary>
            The class that creates and wraps around an instance of an input object and gradually populates all fields, keeping track of missing
            required values. The values can be set from their JSON representation (during the graph parsing stage), as well as directly
            (in the process of graph execution).
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.InputBuilder.GetFieldIndex(System.String)">
            <summary>
            Retreives the field index for a field with the given alias, or -1 if
            that field alias is not found.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.InputBuilder.GetFieldTypeOrNull(System.String)">
            <summary>
            Returns the Type of the given field, unwrapping any option
            types to be of their inner type. If the given alias doesn't exist
            this method returns null.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.InputBuilder.GetMissingValues">
            <summary>
            Returns the array of required values that were not specified using <see cref="M:Microsoft.ML.EntryPoints.InputBuilder.TrySetValue(System.String,System.Object)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.InputBuilder.TrySetValueJson(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Set a value of a field specified by <paramref name="name"/> by parsing <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.InputBuilder.TrySetValue(System.String,System.Object)">
            <summary>
            Set a value of a field specified by <paramref name="name"/> directly to <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.InputBuilder.GetFieldAssignableValue(Microsoft.ML.Runtime.IExceptionContext,System.Type,System.Object)">
            <summary>
            Ensures that the given value can be assigned to an entry point field with
            type <paramref name="type"/>. This method will wrap the value in the option
            type if needed and throw an exception if the value isn't assignable.
            </summary>
            <param name="ectx">The exception context.</param>
            <param name="type">Type type of the field this value is to be assigned to.</param>
            <param name="value">The value, typically originates from either ParseJsonValue, or is an external, user-provided object.</param>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.InputBuilder.MakeOptionalIfNeeded(Microsoft.ML.Runtime.IExceptionContext,System.Object,System.Type)">
            <summary>
            If outerType is an Optional{T}, the innerValue is wrapped in a constructed, explicit
            Optional instance, otherwise the value is directly returned.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.InputBuilder.GetInstance">
            <summary>
            Returns the created instance.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.OutputHelper">
            <summary>
            This class wraps around the output object type, does not create an instance, and provides utility methods for field type checking
            and extracting values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.OutputHelper.ExtractValues(System.Object)">
            <summary>
            Extract all values of a specified output object.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.FieldNames">
            <summary>
            These are the common field names used in the JSON objects for defining the manifest.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.FieldNames.Range">
            <summary>
            Range specific field names.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.FieldNames.Deprecated">
            <summary>
            Obsolete Attribute specific field names.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.FieldNames.SweepableLongParam">
            <summary>
            SweepableLongParam specific field names.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.FieldNames.SweepableFloatParam">
            <summary>
            SweepableFloatParam specific field names.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.FieldNames.SweepableDiscreteParam">
            <summary>
            SweepableDiscreteParam specific field names.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.PredictorModelImpl">
            <summary>
            This class encapsulates the predictor and a preceding transform model, as the concrete and hidden
            implementation of <see cref="T:Microsoft.ML.EntryPoints.PredictorModel"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.SelectRows">
            <summary>
            Entry point methods for row filtering and selection.
            </summary>
        </member>
        <member name="T:Microsoft.ML.EntryPoints.TransformModelImpl">
            <summary>
            This encapsulates zero or more transform models. It does this by recording
            the initial schema, together with the sequence of transforms applied to that
            schema.
            </summary>
        </member>
        <member name="F:Microsoft.ML.EntryPoints.TransformModelImpl._chain">
            <summary>
            This contains the transforms to save instantiated on an <see cref="T:Microsoft.ML.IDataView"/> with
            appropriate initial schema. Note that the "root" of this is typically either
            an empty <see cref="T:Microsoft.ML.IDataView"/> or a <see cref="T:Microsoft.ML.Data.IO.BinaryLoader"/> with no rows. However, other root
            types are possible, since we don't insist on this when loading a model
            from a zip file. However, whenever we save, we force a <see cref="T:Microsoft.ML.Data.IO.BinaryLoader"/> to
            be serialized for the root.
            </summary>
        </member>
        <member name="P:Microsoft.ML.EntryPoints.TransformModelImpl.InputSchema">
            <summary>
            The input schema that this transform model was originally instantiated on.
            Note that the schema may have columns that aren't needed by this transform model.
            If an <see cref="T:Microsoft.ML.IDataView"/> exists with this schema, then applying this transform model to it
            shouldn't fail because of column type issues.
            REVIEW: Would be nice to be able to trim this to the minimum needed somehow. Note
            however that doing so may cause issues for composing transform models. For example,
            if transform model A needs column X and model B needs Y, that is NOT produced by A,
            then trimming A's input schema would cause composition to fail.
            </summary>
        </member>
        <member name="P:Microsoft.ML.EntryPoints.TransformModelImpl.OutputSchema">
            <summary>
            The resulting schema once applied to this model. The <see cref="P:Microsoft.ML.EntryPoints.TransformModelImpl.InputSchema"/> might have
            columns that are not needed by this transform and these columns will be seen in the
            <see cref="P:Microsoft.ML.EntryPoints.TransformModelImpl.OutputSchema"/> produced by this transform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.TransformModelImpl.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,Microsoft.ML.IDataView)">
            <summary>
            Create a TransformModel containing the transforms from "result" back to "input".
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.TransformModelImpl.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.DataViewSchema,Microsoft.ML.Data.IDataTransform[])">
            <summary>
            Create a TransformModel containing the given (optional) transforms applied to the
            given root schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.TransformModelImpl.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)">
            <summary>
            Load a transform model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.TransformModelImpl.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView)">
            <summary>
            Apply this transform model to the given input data.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.TransformModelImpl.Apply(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.EntryPoints.TransformModel)">
            <summary>
            Apply this transform model to the given input transform model to produce a composite transform model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.TransformModelImpl.Save(Microsoft.ML.Runtime.IHostEnvironment,System.IO.Stream)">
            <summary>
            Save this transform model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.EntryPoints.TransformModelImpl.CompositeRowToRowMapper.Microsoft#ML#Data#IRowToRowMapper#GetDependencies(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.LoggingEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.ML.MLContext.Log"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.ML.LoggingEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.LoggingEventArgs"/> class.
            </summary>
            <param name="message">The message being logged.</param>
        </member>
        <member name="M:Microsoft.ML.LoggingEventArgs.#ctor(System.String,Microsoft.ML.Runtime.ChannelMessageKind,System.String)">
            <summary>
            Initializes a new instane of <see cref="T:Microsoft.ML.LoggingEventArgs"/> class that includes the kind and source of the message
            </summary>
            <param name="message"> The message being logged </param>
            <param name="kind"> The type of message <see cref="T:Microsoft.ML.Runtime.ChannelMessageKind"/> </param>
            <param name="source"> The source of the message </param>
        </member>
        <member name="P:Microsoft.ML.LoggingEventArgs.Source">
            <summary>
            Gets the source component of the event
            </summary>
        </member>
        <member name="P:Microsoft.ML.LoggingEventArgs.Kind">
            <summary>
            Gets the type of message
            </summary>
        </member>
        <member name="P:Microsoft.ML.LoggingEventArgs.Message">
            <summary>
            Gets the message being logged.
            </summary>
        </member>
        <member name="P:Microsoft.ML.LoggingEventArgs.RawMessage">
            <summary>
            Gets the original message that doesn't include the source and kind
            </summary>
        </member>
        <member name="T:Microsoft.ML.MLContext">
            <summary>
            The common context for all ML.NET operations. Once instantiated by the user, it provides a way to
            create components for data preparation, feature engineering, training, prediction, and model evaluation.
            It also allows logging, execution control, and the ability to set repeatable random numbers.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.BinaryClassification">
            <summary>
            Trainers and tasks specific to binary classification problems.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.MulticlassClassification">
            <summary>
            Trainers and tasks specific to multiclass classification problems.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.Regression">
            <summary>
            Trainers and tasks specific to regression problems.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.Clustering">
            <summary>
            Trainers and tasks specific to clustering problems.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.Ranking">
            <summary>
            Trainers and tasks specific to ranking problems.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.AnomalyDetection">
            <summary>
            Trainers and tasks specific to anomaly detection problems.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.Forecasting">
            <summary>
            Trainers and tasks specific to forecasting problems.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.Transforms">
            <summary>
            Data processing operations.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.Model">
            <summary>
            Operations with trained models.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.Data">
            <summary>
            Data loading and saving.
            </summary>
        </member>
        <member name="E:Microsoft.ML.MLContext.Log">
            <summary>
            The handler for the log messages.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.ComponentCatalog">
            <summary>
            This is a catalog of components that will be used for model loading.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.TempFilePath">
            <summary>
            Gets or sets the location for the temp files created by ML.NET.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.FallbackToCpu">
            <summary>
            Allow falling back to run on CPU if couldn't run on GPU.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MLContext.GpuDeviceId">
            <summary>
            GPU device ID to run execution on, <see langword="null" /> to run on CPU.
            </summary>
        </member>
        <member name="M:Microsoft.ML.MLContext.#ctor(System.Nullable{System.Int32})">
             <summary>
             Create the ML context.
             </summary>
             <param name="seed">Seed for MLContext's random number generator. See the remarks for more details.</param>
             <remarks>
             Many operations in ML.NET require randomness, such as
             random data shuffling, random sampling, random parameter initialization,
             random permutation, random feature selection, and many more.
             MLContext's random number generator is the global source of randomness for
             all of such random operations.
            
             If a fixed seed is provided by <paramref name="seed"/>, MLContext environment becomes
             deterministic, meaning that the results are repeatable and will remain the same across multiple runs.
             For instance in many of ML.NET's API reference example code snippets, a seed is provided.
             That's because we want the users to get the same output as what's included in example comments,
             when they run the example on their own machine.
            
             Generally though, repeatability is not a requirement and that's the default behavior.
             If a seed is not provided by <paramref name="seed"/>, i.e. it's set to <see langword="null"/>,
             MLContext environment becomes non-deterministic and outputs change across multiple runs.
            
             There are many operations in ML.NET that don't use any randomness, such as
             min-max normalization, concatenating columns, missing value indication, etc.
             The behavior of those operations are deterministic regardless of the seed value.
            
             Also ML.NET trainers don't use randomness *after* the training is finished.
             So, the predictions from a loaded model don't depend on the seed value.
             </remarks>
        </member>
        <member name="T:Microsoft.ML.ModelOperationsCatalog">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to save and load trained models.
            </summary>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.Save``1(Microsoft.ML.ITransformer,Microsoft.ML.IDataLoader{``0},System.IO.Stream)">
            <summary>
            Save a transformer model and the loader used to create its input data to the stream.
            </summary>
            <param name="model">The trained model to be saved. Note that this can be <see langword="null"/>, as a shorthand
            for an empty transformer chain. Upon loading with <see cref="M:Microsoft.ML.ModelOperationsCatalog.LoadWithDataLoader(System.IO.Stream,Microsoft.ML.IDataLoader{Microsoft.ML.Data.IMultiStreamSource}@)"/>
            the returned value will be an empty <see cref="T:Microsoft.ML.Data.TransformerChain`1"/>.</param>
            <param name="loader">The loader that was used to create data to train the model.</param>
            <param name="stream">A writeable, seekable stream to save to.</param>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.Save``1(Microsoft.ML.ITransformer,Microsoft.ML.IDataLoader{``0},System.String)">
            <summary>
            Save a transformer model and the loader used to create its input data to the file.
            </summary>
            <param name="model">The trained model to be saved. Note that this can be <see langword="null"/>, as a shorthand
            for an empty transformer chain. Upon loading with <see cref="M:Microsoft.ML.ModelOperationsCatalog.LoadWithDataLoader(System.IO.Stream,Microsoft.ML.IDataLoader{Microsoft.ML.Data.IMultiStreamSource}@)"/>
            the returned value will be an empty <see cref="T:Microsoft.ML.Data.TransformerChain`1"/>.</param>
            <param name="loader">The loader that was used to create data to train the model.</param>
            <param name="filePath">Path where model should be saved.</param>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.Save(Microsoft.ML.ITransformer,Microsoft.ML.DataViewSchema,System.IO.Stream)">
            <summary>
            Save a transformer model and the schema of the data that was used to train it to the stream.
            </summary>
            <param name="model">The trained model to be saved. Note that this can be <see langword="null"/>, as a shorthand
            for an empty transformer chain. Upon loading with <see cref="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)"/> the returned value will
            be an empty <see cref="T:Microsoft.ML.Data.TransformerChain`1"/>.</param>
            <param name="inputSchema">The schema of the input to the transformer. This can be <see langword="null"/>.</param>
            <param name="stream">A writeable, seekable stream to save to.</param>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.Save(Microsoft.ML.ITransformer,Microsoft.ML.DataViewSchema,System.String)">
            <summary>
            Save a transformer model and the schema of the data that was used to train it to the file.
            </summary>
            <param name="model">The trained model to be saved. Note that this can be <see langword="null"/>, as a shorthand
            for an empty transformer chain. Upon loading with <see cref="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)"/> the returned value will
            be an empty <see cref="T:Microsoft.ML.Data.TransformerChain`1"/>.</param>
            <param name="inputSchema">The schema of the input to the transformer. This can be <see langword="null"/>.</param>
            <param name="filePath">Path where model should be saved.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Save](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/ModelOperations/SaveLoadModel.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)">
            <summary>
            Load the model and its input schema from a stream.
            </summary>
            <param name="stream">A readable, seekable stream to load from.</param>
            <param name="inputSchema">Will contain the input schema for the model. If the model was saved without
            any description of the input, there will be no input schema. In this case this can be <see langword="null"/>.</param>
            <returns>The loaded model.</returns>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Save](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/ModelOperations/SaveLoadModel.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.Load(System.String,Microsoft.ML.DataViewSchema@)">
            <summary>
            Load the model and its input schema from a file.
            </summary>
            <param name="filePath">Path to a file where the model should be read from.</param>
            <param name="inputSchema">Will contain the input schema for the model. If the model was saved without
            any description of the input, there will be no input schema. In this case this can be <see langword="null"/>.</param>
            <returns>The loaded model.</returns>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Save](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/ModelOperations/SaveLoadModelFile.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.DecomposeLoader(Microsoft.ML.IDataLoader{Microsoft.ML.Data.IMultiStreamSource}@)">
            <summary>
            Given a loader, test try to "decompose" it into a source loader, and its transform if any.
            If necessary an empty chain will be created to stand in for the trivial transformation; it
            should never return <see langword="null"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.LoadWithDataLoader(System.IO.Stream,Microsoft.ML.IDataLoader{Microsoft.ML.Data.IMultiStreamSource}@)">
            <summary>
            Load a transformer model and a data loader model from a stream.
            </summary>
            <param name="stream">A readable, seekable stream to load from.</param>
            <param name="loader">The data loader from the model stream. Note that if there is no data loader,
            this method will throw an exception. The scenario where no loader is stored in the stream should
            be handled instead using the <see cref="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)"/> method.</param>
            <returns>The transformer model from the model stream.</returns>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.LoadWithDataLoader(System.String,Microsoft.ML.IDataLoader{Microsoft.ML.Data.IMultiStreamSource}@)">
            <summary>
            Load a transformer model and a data loader model from a file.
            </summary>
            <param name="filePath">Path to a file where the model should be read from.</param>
            <param name="loader">The data loader from the model stream. Note that if there is no data loader,
            this method will throw an exception. The scenario where no loader is stored in the stream should
            be handled instead using the <see cref="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)"/> method.</param>
            <returns>The transformer model from the model file.</returns>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.CreatePredictionEngine``2(Microsoft.ML.ITransformer,System.Boolean,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition)">
            <summary>
            Create a prediction engine for one-time prediction (default usage).
            </summary>
            <typeparam name="TSrc">The class that defines the input data.</typeparam>
            <typeparam name="TDst">The class that defines the output data.</typeparam>
            <param name="transformer">The transformer to use for prediction.</param>
            <param name="ignoreMissingColumns">Whether to throw an exception if a column exists in
            <paramref name="outputSchemaDefinition"/> but the corresponding member doesn't exist in
            <typeparamref name="TDst"/>.</param>
            <param name="inputSchemaDefinition">Additional settings of the input schema.</param>
            <param name="outputSchemaDefinition">Additional settings of the output schema.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Save](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/ModelOperations/SaveLoadModel.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.CreatePredictionEngine``2(Microsoft.ML.ITransformer,Microsoft.ML.DataViewSchema)">
            <summary>
            Create a prediction engine for one-time prediction.
            It's mainly used in conjunction with <see cref="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)"/>,
            where input schema is extracted during loading the model.
            </summary>
            <typeparam name="TSrc">The class that defines the input data.</typeparam>
            <typeparam name="TDst">The class that defines the output data.</typeparam>
            <param name="transformer">The transformer to use for prediction.</param>
            <param name="inputSchema">Input schema.</param>
        </member>
        <member name="M:Microsoft.ML.ModelOperationsCatalog.CreatePredictionEngine``2(Microsoft.ML.ITransformer,Microsoft.ML.PredictionEngineOptions)">
            <summary>
            Create a prediction engine for one-time prediction.
            It's mainly used in conjunction with <see cref="M:Microsoft.ML.ModelOperationsCatalog.Load(System.IO.Stream,Microsoft.ML.DataViewSchema@)"/>,
            where input schema is extracted during loading the model.
            </summary>
            <typeparam name="TSrc">The class that defines the input data.</typeparam>
            <typeparam name="TDst">The class that defines the output data.</typeparam>
            <param name="transformer">The transformer to use for prediction.</param>
            <param name="options">Advanced configuration options.</param>
        </member>
        <member name="T:Microsoft.ML.PredictionEngineExtensions">
            <summary>
            Extension methods to create a prediction engine.
            </summary>
        </member>
        <member name="M:Microsoft.ML.PredictionEngineExtensions.CreatePredictionEngine``2(Microsoft.ML.ITransformer,Microsoft.ML.Runtime.IHostEnvironment,System.Boolean,Microsoft.ML.Data.SchemaDefinition,Microsoft.ML.Data.SchemaDefinition,System.Boolean)">
            <summary>
            Create a prediction engine for one-time prediction.
            </summary>
            <typeparam name="TSrc">The class that defines the input data.</typeparam>
            <typeparam name="TDst">The class that defines the output data.</typeparam>
            <param name="transformer">The transformer to use for prediction.</param>
            <param name="env">The environment to use.</param>
            <param name="ignoreMissingColumns">Whether to throw an exception if a column exists in
            <paramref name="outputSchemaDefinition"/> but the corresponding member doesn't exist in
            <typeparamref name="TDst"/>.</param>
            <param name="inputSchemaDefinition">Additional settings of the input schema.</param>
            <param name="outputSchemaDefinition">Additional settings of the output schema.</param>
            <param name="ownsTransformer">Whether the prediction engine owns the transformer and should dispose of it.</param>
        </member>
        <member name="T:Microsoft.ML.Calibrators.SignatureCalibrator">
            <summary>
            Signature for the loaders of calibrators.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.ICalibratorTrainer">
            <summary>
            This is a legacy interface still used for the command line and entry-points. All applications should transition away
            from this interface and still work instead via <see cref="T:Microsoft.ML.IEstimator`1"/> of <see cref="T:Microsoft.ML.Calibrators.CalibratorTransformer`1"/>,
            for example, the subclasses of <see cref="T:Microsoft.ML.Calibrators.CalibratorEstimatorBase`1"/>. However for now we retain this
            until such time as those components making use of it can transition to the new way. No public surface should use
            this, and even new internal code should avoid its use if possible.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Calibrators.ICalibratorTrainer.NeedsTraining">
            <summary>
            True if the calibrator needs training, false otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.ICalibratorTrainer.ProcessTrainingExample(System.Single,System.Boolean,System.Single)">
            <summary> Training calibrators:  provide the  output and the class label </summary>
            <returns> True if it needs more examples, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ML.Calibrators.ICalibratorTrainer.FinishTraining(Microsoft.ML.Runtime.IChannel)">
            <summary> Finish up training after seeing all examples </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.IHaveCalibratorTrainer">
            <summary>
            This is a shim interface implemented only by <see cref="T:Microsoft.ML.Calibrators.CalibratorEstimatorBase`1"/> to enable
            access to the underlying legacy <see cref="T:Microsoft.ML.Calibrators.ICalibratorTrainer"/> interface for those components that use
            that old mechanism that we do not care to change right now.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.ISelfCalibratingPredictor">
            <summary>
            An interface for predictors that take care of their own calibration given an input data view.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.IWeaklyTypedCalibratedModelParameters">
            <summary>
            <see cref="T:Microsoft.ML.Calibrators.IWeaklyTypedCalibratedModelParameters"/> provides a weekly-typed way to access strongly-typed
            <see cref="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.SubModel"/> and
            <see cref="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.Calibrator"/>.
            <see cref="T:Microsoft.ML.Calibrators.IWeaklyTypedCalibratedModelParameters"/> is commonly used in weekly-typed expressions. The
            existence of this interface is just for supporting existing codebase, so we discourage its uses.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.CalibratedModelParametersBase">
            <summary>
            Base class for calibrated model parameters.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2">
            <summary>
            Class for allowing a post-processing step, defined by <see cref="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.Calibrator"/>, to <see cref="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.SubModel"/>'s
            output.
            </summary>
            <typeparam name="TSubModel">Type being calibrated.</typeparam>
            <typeparam name="TCalibrator">Type used to calibrate.</typeparam>
            <remarks>
            For example, in binary classification, <see cref="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.Calibrator"/> can convert support vector machine's
            output value to the probability of belonging to the positive (or negative) class. Detailed math materials
            can be found at <a href="https://www.csie.ntu.edu.tw/~cjlin/papers/plattprob.pdf">this paper</a>.
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.SubModel">
            <summary>
            <see cref="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.SubModel"/>'s output would calibrated by <see cref="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.Calibrator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.Calibrator">
            <summary>
            <see cref="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.Calibrator"/> is used to post-process score produced by <see cref="P:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.SubModel"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2.Microsoft#ML#Model#ICanGetSummaryInKeyValuePairs#GetSummaryInKeyValuePairs(Microsoft.ML.Data.RoleMappedSchema)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.ML.Calibrators.ParameterMixingCalibratedModelParameters`2">
            <summary>
            Encapsulates a predictor and a calibrator that implement <see cref="T:Microsoft.ML.Model.IParameterMixer"/>.
            Its implementation of <see cref="M:Microsoft.ML.Model.IParameterMixer.CombineParameters(System.Collections.Generic.IList{Microsoft.ML.Model.IParameterMixer})"/> combines both the predictors and the calibrators.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.SchemaBindableCalibratedModelParameters`2.Bound.Microsoft#ML#Data#ISchemaBoundRowMapper#GetDependenciesForNewColumns(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Calibrators.SchemaBindableCalibratedModelParameters`2.Microsoft#ML#Model#Pfa#ICanSavePfa#CanSavePfa">
            <summary>
            Whether we can save as PFA. Note that this depends on whether the underlying predictor
            can save as PFA, since in the event that this in particular does not get saved,
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.CalibratorUtils.TrainCalibratorIfNeeded(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.Calibrators.ICalibratorTrainer,System.Int32,Microsoft.ML.ITrainer,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedData)">
            <summary>
            Trains a calibrator, if needed.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="ch">The channel.</param>
            <param name="calibrator">The calibrator trainer.</param>
            <param name="maxRows">The maximum rows to use for calibrator training.</param>
            <param name="trainer">The trainer used to train the predictor.</param>
            <param name="predictor">The predictor that needs calibration.</param>
            <param name="data">The examples to used for calibrator training.</param>
            <returns>The original predictor, if no calibration is needed,
            or a metapredictor that wraps the original predictor and the newly trained calibrator.</returns>
        </member>
        <member name="M:Microsoft.ML.Calibrators.CalibratorUtils.GetCalibratedPredictor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.Calibrators.ICalibratorTrainer,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedData,System.Int32)">
            <summary>
            Trains a calibrator.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="ch">The channel.</param>
            <param name="caliTrainer">The calibrator trainer.</param>
            <param name="predictor">The predictor that needs calibration.</param>
            <param name="data">The examples to used for calibrator training.</param>
            <param name="maxRows">The maximum rows to use for calibrator training.</param>
            <returns>The original predictor, if no calibration is needed,
            or a metapredictor that wraps the original predictor and the newly trained calibrator.</returns>
        </member>
        <member name="M:Microsoft.ML.Calibrators.CalibratorUtils.TrainCalibrator(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.Calibrators.ICalibratorTrainer,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedData,System.Int32)">
            <summary>
            Trains a calibrator.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="ch">The channel.</param>
            <param name="caliTrainer">The calibrator trainer.</param>
            <param name="predictor">The predictor that needs calibration.</param>
            <param name="data">The examples to used for calibrator training.</param>
            <param name="maxRows">The maximum rows to use for calibrator training.</param>
            <returns>The original predictor, if no calibration is needed,
            or a metapredictor that wraps the original predictor and the newly trained calibrator.</returns>
        </member>
        <member name="T:Microsoft.ML.Calibrators.NaiveCalibratorTrainer">
            <summary>
            Trains a <see cref="T:Microsoft.ML.Calibrators.NaiveCalibrator"/> by dividing the range of the outputs into equally sized bins.
            The probability of belonging to a particular class, for example class 1, is the number of class 1 instances in the bin, divided by the total number
            of instances in that bin.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.NaiveCalibratorTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Calibrators.NaiveCalibratorTrainer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.NaiveCalibrator">
            <summary>
            The naive binning-based calibrator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.NaiveCalibrator.Microsoft#ML#Model#OnnxConverter#ICanSaveOnnx#CanSaveOnnx(Microsoft.ML.Model.OnnxConverter.OnnxContext)">
            <summary>
            Bool required by the interface ISingleCanSaveOnnx, returns true if
            and only if calibrator can be exported in ONNX.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Calibrators.NaiveCalibrator.BinSize">
            <summary> The bin size.</summary>
        </member>
        <member name="F:Microsoft.ML.Calibrators.NaiveCalibrator.Min">
            <summary> The minimum value in the first bin.</summary>
        </member>
        <member name="P:Microsoft.ML.Calibrators.NaiveCalibrator.BinProbs">
            <summary> The value of probability in each bin.</summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.NaiveCalibrator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Single,System.Single,System.Single[])">
            <summary> Initializes a new instance of <see cref="T:Microsoft.ML.Calibrators.NaiveCalibrator"/>.</summary>
            <param name="env">The <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/> to use.</param>
            <param name="min">The minimum value in the first bin.</param>
            <param name="binProbs">The values of the probability in each bin.</param>
            <param name="binSize">The bin size.</param>
        </member>
        <member name="M:Microsoft.ML.Calibrators.NaiveCalibrator.PredictProbability(System.Single)">
            <summary>
            Given a classifier output, produce the probability
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.CalibratorTrainerBase">
            <summary>
            Base class for calibrator trainers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.CalibratorTrainerBase.DataStore.GetEnumerator">
            <summary>
            An enumerator over the <see cref="T:Microsoft.ML.Calibrators.CalibratorTrainerBase.DataStore.DataItem"/> entries sorted by score.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Calibrators.CalibratorTrainerBase.Microsoft#ML#Calibrators#ICalibratorTrainer#ProcessTrainingExample(System.Single,System.Boolean,System.Single)">
            <summary>
            Training calibrators:  provide the classifier output and the class label
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.PlattCalibrator">
            <summary>
             The Platt calibrator calculates the probability following:
             P(x) = 1 / (1 + exp(<see cref="P:Microsoft.ML.Calibrators.PlattCalibrator.Slope"/> * x + <see cref="P:Microsoft.ML.Calibrators.PlattCalibrator.Offset"/>)
             </summary>.
        </member>
        <member name="P:Microsoft.ML.Calibrators.PlattCalibrator.Slope">
            <summary>
            Slope value for this calibrator.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Calibrators.PlattCalibrator.Offset">
            <summary>
            Offset value for this calibrator
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.PlattCalibrator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Calibrators.PlattCalibrator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.PlattCalibrator.PredictProbability(System.Single)">
            <summary> Given a classifier output, produce the probability.</summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.IsotonicCalibrator">
             <summary>
             The isotonic calibrator.
             </summary>
             <remarks>
             The function that is implemented by this calibrator is:
             P(x) =
             <list type="bullet">
             <item><description><see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Values"/>[i], if <see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Mins"/>[i] &lt;= x &lt;= <see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Maxes"/>[i]</description>></item>
             <item> <description>Linear interpolation between <see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Values"/>[i] and <see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Values"/>[i+1], if <see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Maxes"/>[i] &lt; x &lt; <see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Mins"/>[i+1]</description></item>
             <item><description><see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Values"/>[0], if x &lt; <see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Mins"/>[0]</description></item>
             <item><description><see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Values"/>[n], if x &gt; <see cref="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Maxes"/>[n]</description></item>
            </list>
             </remarks>
        </member>
        <member name="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Mins">
            <summary>
            Bottom borders of PAV intervals.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Maxes">
            <summary>
            Upper borders of PAV intervals.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Calibrators.IsotonicCalibrator.Values">
            <summary>
            Values of PAV intervals.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.IsotonicCalibrator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Collections.Immutable.ImmutableArray{System.Single},System.Collections.Immutable.ImmutableArray{System.Single},System.Collections.Immutable.ImmutableArray{System.Single})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Calibrators.IsotonicCalibrator"/>.
            </summary>
            <param name="env">The <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/> to use.</param>
            <param name="mins">The minimum values for each piece.</param>
            <param name="maxes">The maximum values for each piece.</param>
            <param name="values">The actual values for each piece.</param>
        </member>
        <member name="M:Microsoft.ML.Calibrators.IsotonicCalibrator.PredictProbability(System.Single)">
            <summary> Given a classifier output, produce the probability.</summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.Calibrate.CalibratePredictor``1(Microsoft.ML.Runtime.IHost,Microsoft.ML.Calibrators.Calibrate.CalibrateInputBase,Microsoft.ML.Calibrators.ICalibratorTrainer)">
            <summary>
            This method calibrates the specified predictor using the specified calibrator, training on the specified data.
            </summary>
            <param name="host">A host to pass to the components created in this method.</param>
            <param name="input">The input object, containing the predictor, the data and an integer indicating the maximum number
            of examples to use for training the calibrator.</param>
            <param name="calibratorTrainer">The kind of calibrator to use.</param>
            <returns>A <see cref="T:Microsoft.ML.EntryPoints.CommonOutputs.TrainerOutput"/> object, containing an <see cref="T:Microsoft.ML.EntryPoints.PredictorModel"/>.</returns>
        </member>
        <member name="T:Microsoft.ML.Calibrators.ICalibrator">
            <summary>
            An interface for probability calibrators.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.ICalibrator.PredictProbability(System.Single)">
            <summary> Given a classifier output, produce the probability.</summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.CalibratorEstimatorBase`1">
            <summary>
            Base class for calibrator estimators.
            </summary>
            <remarks>
            CalibratorEstimators take an <see cref="T:Microsoft.ML.IDataView"/> (the output of a <see cref="T:Microsoft.ML.Data.BinaryClassifierScorer"/>)
            that contains a &quot;Score&quot; column, and converts the scores to probabilities(through binning, interpolation etc.), based on the <typeparamref name="TICalibrator"/> type.
            They are used in pipelines where the binary classifier produces non-calibrated scores.
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Calibrators.CalibratorEstimatorBase`1.Microsoft#ML#IEstimator{Microsoft#ML#Calibrators#CalibratorTransformer{TICalibrator}}#GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Gets the output <see cref="T:Microsoft.ML.SchemaShape"/> of the <see cref="T:Microsoft.ML.IDataView"/> after fitting the calibrator.
            Fitting the calibrator will add a column named "Probability" to the schema. If you already had such a column, a new one will be added.
            The same annotation data that would be produced by <see cref="M:Microsoft.ML.Data.AnnotationUtils.GetTrainerOutputAnnotation(System.Boolean)"/> is marked as
            being present on the output, if it is present on the input score column.
            </summary>
            <param name="inputSchema">The input <see cref="T:Microsoft.ML.SchemaShape"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Calibrators.CalibratorEstimatorBase`1.Fit(Microsoft.ML.IDataView)">
            <summary>
            Fits the scored <see cref="T:Microsoft.ML.IDataView"/> creating a <see cref="T:Microsoft.ML.Calibrators.CalibratorTransformer`1"/> that can transform the data by adding a
            <see cref="F:Microsoft.ML.Data.DefaultColumnNames.Probability"/> column containing the calibrated <see cref="F:Microsoft.ML.Data.DefaultColumnNames.Score"/>.
            </summary>
            <param name="input"></param>
            <returns>A trained <see cref="T:Microsoft.ML.Calibrators.CalibratorTransformer`1"/> that will transform the data by adding the
            <see cref="F:Microsoft.ML.Data.DefaultColumnNames.Probability"/> column.</returns>
        </member>
        <member name="M:Microsoft.ML.Calibrators.CalibratorEstimatorBase`1.Create(Microsoft.ML.Runtime.IHostEnvironment,`0,System.String)">
            <summary>
            Implemented by deriving classes that create a concrete calibrator.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.CalibratorTransformer`1">
            <summary>
            An instance of this class is the result of calling <see cref="M:Microsoft.ML.Calibrators.CalibratorEstimatorBase`1.Fit(Microsoft.ML.IDataView)"/>.
            If you pass a scored data, to the <see cref="T:Microsoft.ML.Calibrators.CalibratorTransformer`1"/> Transform method, it will add the Probability column
            to the dataset. The Probability column is the value of the Score normalized to be a valid probability.
            The <see cref="T:Microsoft.ML.Calibrators.CalibratorTransformer`1"/> is an instance of <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/>
            where score can be viewed as a feature while probability is treated as the label.
            </summary>
            <typeparam name="TICalibrator">The <see cref="T:Microsoft.ML.Calibrators.ICalibrator"/> used to transform the data.</typeparam>
        </member>
        <member name="T:Microsoft.ML.Calibrators.PlattCalibratorEstimator">
            <summary>
            The Platt calibrator estimator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.PlattCalibratorEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Calibrators.PlattCalibratorEstimator"/>
            </summary>
            <param name="env">The environment to use.</param>
             /// <param name="labelColumnName">The name of the label column.This is consumed both when this estimator
            is fit and when the estimator is consumed.</param>
            <param name="scoreColumnName">The name of the score column.This is consumed when this estimator is fit,
            but not consumed by the resulting transformer.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional). Note that if specified this is
            consumed when this estimator is fit, but not consumed by the resulting transformer.</param>
        </member>
        <member name="T:Microsoft.ML.Calibrators.FixedPlattCalibratorEstimator">
            <summary>
            Obtains the probability values by applying the sigmoid:  f(x) = 1 / (1 + exp(-slope * x + offset).
            Note that unlike, say, <see cref="T:Microsoft.ML.Calibrators.PlattCalibratorEstimator"/>, the fit function here is trivial
            and just "fits" a calibrator with the provided parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Calibrators.FixedPlattCalibratorEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Calibrators.FixedPlattCalibratorEstimator"/>.
            </summary>
            <remarks>
            Note that unlike many other calibrator estimators this one has the parameters pre-specified.
            This means that it does not have a label or weight column specified as an input during training.
            </remarks>
            <param name="env">The environment to use.</param>
            <param name="slope">The slope in the function of the exponent of the sigmoid.</param>
            <param name="offset">The offset in the function of the exponent of the sigmoid.</param>
            <param name="scoreColumn">The score column name. This is consumed both when this estimator
            is fit and when the estimator is consumed.</param>
        </member>
        <member name="T:Microsoft.ML.Calibrators.PlattCalibratorTransformer">
            <summary>
            The <see cref="T:Microsoft.ML.ITransformer"/> implementation obtained by training a <see cref="T:Microsoft.ML.Calibrators.FixedPlattCalibratorEstimator"/> or a <see cref="T:Microsoft.ML.Calibrators.PlattCalibratorEstimator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.NaiveCalibratorEstimator">
            <summary>
            The naive binning-based calibrator estimator.
            </summary>
            <remarks>
            It divides the range of the outputs into equally sized bins. In each bin,
            the probability of belonging to class 1, is the number of class 1 instances in the bin, divided by the total number
            of instances in the bin.
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Calibrators.NaiveCalibratorEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Calibrators.NaiveCalibratorEstimator"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">The label column name. This is consumed when this estimator is fit,
            but not consumed by the resulting transformer.</param>
            <param name="scoreColumn">The score column name. This is consumed both when this estimator
            is fit and when the estimator is consumed.</param>
            <param name="weightColumn">The optional weight column name. Note that if specified this is
            consumed when this estimator is fit, but not consumed by the resulting transformer.</param>
        </member>
        <member name="T:Microsoft.ML.Calibrators.NaiveCalibratorTransformer">
            <summary>
            The <see cref="T:Microsoft.ML.ITransformer"/> implementation obtained by training a <see cref="T:Microsoft.ML.Calibrators.NaiveCalibratorEstimator"/>
            </summary>
        </member>
        <member name="T:Microsoft.ML.Calibrators.IsotonicCalibratorEstimator">
            <summary>
            The isotonic calbrated estimator.
            </summary>
            <remarks>
            Calibrator finds a stepwise constant function (using the Pool Adjacent Violators Algorithm aka PAV) that minimizes the squared error.
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Calibrators.IsotonicCalibratorEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Calibrators.IsotonicCalibratorEstimator"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">The label column name. This is consumed when this estimator is fit,
            but not consumed by the resulting transformer.</param>
            <param name="scoreColumn">The score column name. This is consumed both when this estimator
            is fit and when the estimator is consumed.</param>
            <param name="weightColumn">The optional weight column name. Note that if specified this is
            consumed when this estimator is fit, but not consumed by the resulting transformer.</param>
        </member>
        <member name="T:Microsoft.ML.Calibrators.IsotonicCalibratorTransformer">
            <summary>
            The <see cref="T:Microsoft.ML.ITransformer"/> implementation obtained by training a <see cref="T:Microsoft.ML.Calibrators.IsotonicCalibratorEstimator"/>
            </summary>
        </member>
        <member name="T:Microsoft.ML.IPredictionTransformer`1">
            <summary>
            An interface for all the transformer that can transform data based on the <see cref="T:Microsoft.ML.IPredictor"/> field.
            The implementations of this interface either have no feature column, or have more than one feature column, and cannot implement the
            <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/>, which most of the ML.Net tranformer implement.
            </summary>
            <typeparam name="TModel">The <see cref="T:Microsoft.ML.IPredictor"/> or <see cref="T:Microsoft.ML.Calibrators.ICalibrator"/> used for the data transformation.</typeparam>
        </member>
        <member name="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1">
            <summary>
            An ISingleFeaturePredictionTransformer contains the name of the <see cref="P:Microsoft.ML.ISingleFeaturePredictionTransformer`1.FeatureColumnName"/>
            and its type, <see cref="P:Microsoft.ML.ISingleFeaturePredictionTransformer`1.FeatureColumnType"/>. Implementations of this interface, have the ability
            to score the data of an input <see cref="T:Microsoft.ML.IDataView"/> through the <see cref="M:Microsoft.ML.ITransformer.Transform(Microsoft.ML.IDataView)"/>
            </summary>
            <typeparam name="TModel">The <see cref="T:Microsoft.ML.IPredictor"/> or <see cref="T:Microsoft.ML.Calibrators.ICalibrator"/> used for the data transformation.</typeparam>
        </member>
        <member name="P:Microsoft.ML.ISingleFeaturePredictionTransformer`1.FeatureColumnName">
            <summary>The name of the feature column.</summary>
        </member>
        <member name="P:Microsoft.ML.ISingleFeaturePredictionTransformer`1.FeatureColumnType">
            <summary>Holds information about the type of the feature column.</summary>
        </member>
        <member name="T:Microsoft.ML.ISingleFeaturePredictionTransformer">
            <summary>
            An ISingleFeaturePredictionTransformer contains the name of the <see cref="P:Microsoft.ML.ISingleFeaturePredictionTransformer.FeatureColumnName"/>.
            Implementations of this interface, have the ability to score the data of an input <see cref="T:Microsoft.ML.IDataView"/>
            through the <see cref="M:Microsoft.ML.ITransformer.Transform(Microsoft.ML.IDataView)"/>
            </summary>
        </member>
        <member name="P:Microsoft.ML.ISingleFeaturePredictionTransformer.FeatureColumnName">
            <summary>The name of the feature column.</summary>
        </member>
        <member name="T:Microsoft.ML.PipeEngine`1">
            <summary>
            Utility class to run the pipeline to completion and produce a strongly-typed IEnumerable as a result.
            Doesn't allocate memory for every row: instead, yields the same row object on every step.
            </summary>
        </member>
        <member name="T:Microsoft.ML.PredictionEngine`2">
             <summary>
             Class for making single predictions on a previously trained model (and preceding transform pipeline).
             </summary>
             <remarks>
             This class can also be used with trained pipelines that do not end with a predictor: in this case, the
             'prediction' will be just the outcome of all the transformations.
            
             The PredictionEngine is NOT thread safe. Using it in a threaded environment can cause unexpected issues.
             </remarks>
        </member>
        <member name="M:Microsoft.ML.PredictionEngine`2.Predict(`0,`1@)">
            <summary>
            Run prediction pipeline on one example.
            </summary>
            <param name="example">The example to run on.</param>
            <param name="prediction">The object to store the prediction in. If it's <c>null</c>, a new one will be created, otherwise the old one
            is reused.</param>
        </member>
        <member name="T:Microsoft.ML.PredictionEngineBase`2">
            <summary>
            Base class for making single predictions on a previously trained model (and the preceding transform pipeline).
            </summary>
            <typeparam name="TSrc">The user-defined type that holds the example.</typeparam>
            <typeparam name="TDst">The user-defined type that holds the prediction.</typeparam>
        </member>
        <member name="P:Microsoft.ML.PredictionEngineBase`2.OutputSchema">
            <summary>
            Provides output schema.
            </summary>
        </member>
        <member name="M:Microsoft.ML.PredictionEngineBase`2.Predict(`0)">
            <summary>
            Run prediction pipeline on one example.
            </summary>
            <param name="example">The example to run on.</param>
            <returns>The result of prediction. A new object is created for every call.</returns>
        </member>
        <member name="M:Microsoft.ML.PredictionEngineBase`2.Predict(`0,`1@)">
            <summary>
            Run prediction pipeline on one example.
            </summary>
            <param name="example">The example to run on.</param>
            <param name="prediction">The object to store the prediction in. If it's <c>null</c>, a new one will be created, otherwise the old one
            is reused.</param>
        </member>
        <member name="T:Microsoft.ML.PredictionEngineOptions">
            <summary>
            Options for the <see cref="T:Microsoft.ML.PredictionEngine`2"/>
            </summary>
        </member>
        <member name="T:Microsoft.ML.TrainCatalogBase">
            <summary>
            Base class for the trainer catalogs.
            </summary>
        </member>
        <member name="T:Microsoft.ML.TrainCatalogBase.CrossValidationResult">
            <summary>
            Results for specific cross-validation fold.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TrainCatalogBase.CrossValidationResult.Model">
            <summary>
            Model trained during cross validation fold.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TrainCatalogBase.CrossValidationResult.Scores">
            <summary>
            Scored test set with <see cref="F:Microsoft.ML.TrainCatalogBase.CrossValidationResult.Model"/> for this fold.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TrainCatalogBase.CrossValidationResult.Fold">
            <summary>
            Fold number.
            </summary>
        </member>
        <member name="T:Microsoft.ML.TrainCatalogBase.CrossValidationResult`1">
            <summary>
            Results of running cross-validation.
            </summary>
            <typeparam name="T">Type of metric class.</typeparam>
        </member>
        <member name="F:Microsoft.ML.TrainCatalogBase.CrossValidationResult`1.Metrics">
            <summary>
            Metrics for this cross-validation fold.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TrainCatalogBase.CrossValidationResult`1.Model">
            <summary>
            Model trained during cross-validation fold.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TrainCatalogBase.CrossValidationResult`1.ScoredHoldOutSet">
            <summary>
            The scored hold-out set for this fold.
            </summary>
        </member>
        <member name="F:Microsoft.ML.TrainCatalogBase.CrossValidationResult`1.Fold">
            <summary>
            Fold number.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TrainCatalogBase.CrossValidateTrain(Microsoft.ML.IDataView,Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Train the <paramref name="estimator"/> on <paramref name="numFolds"/> folds of the data sequentially.
            Return each model and each scored test dataset.
            </summary>
        </member>
        <member name="T:Microsoft.ML.TrainCatalogBase.CatalogInstantiatorBase">
            <summary>
            Subclasses of <see cref="T:Microsoft.ML.TrainContext"/> will provide little "extension method" hookable objects
            (for example, something like <see cref="P:Microsoft.ML.BinaryClassificationCatalog.Trainers"/>). User code will only
            interact with these objects by invoking the extension methods. The actual component code can work
            through <see cref="T:Microsoft.ML.Data.CatalogUtils"/> to get more "hidden" information from this object,
            for example, the environment.
            </summary>
        </member>
        <member name="T:Microsoft.ML.BinaryClassificationCatalog">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of binary classification components,
            such as trainers and calibrators.
            </summary>
        </member>
        <member name="P:Microsoft.ML.BinaryClassificationCatalog.Trainers">
            <summary>
            The list of trainers for performing binary classification.
            </summary>
        </member>
        <member name="T:Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of binary classification trainers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.BinaryClassificationCatalog.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String,System.String)">
            <summary>
            Evaluates scored binary classification data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="labelColumnName">The name of the label column in <paramref name="data"/>.</param>
            <param name="scoreColumnName">The name of the score column in <paramref name="data"/>.</param>
            <param name="probabilityColumnName">The name of the probability column in <paramref name="data"/>, the calibrated version of <paramref name="scoreColumnName"/>.</param>
            <param name="predictedLabelColumnName">The name of the predicted label column in <paramref name="data"/>.</param>
            <returns>The evaluation results for these calibrated outputs.</returns>
        </member>
        <member name="M:Microsoft.ML.BinaryClassificationCatalog.EvaluateNonCalibrated(Microsoft.ML.IDataView,System.String,System.String,System.String)">
            <summary>
            Evaluates scored binary classification data, without probability-based metrics.
            </summary>
            <param name="data">The scored data.</param>
            <param name="labelColumnName">The name of the label column in <paramref name="data"/>.</param>
            <param name="scoreColumnName">The name of the score column in <paramref name="data"/>.</param>
            <param name="predictedLabelColumnName">The name of the predicted label column in <paramref name="data"/>.</param>
            <returns>The evaluation results for these uncalibrated outputs.</returns>
        </member>
        <member name="M:Microsoft.ML.BinaryClassificationCatalog.CrossValidateNonCalibrated(Microsoft.ML.IDataView,Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Run cross-validation over <paramref name="numberOfFolds"/> folds of <paramref name="data"/>, by fitting <paramref name="estimator"/>,
            and respecting <paramref name="samplingKeyColumnName"/> if provided.
            Then evaluate each sub-model against <paramref name="labelColumnName"/> and return a <see cref="T:Microsoft.ML.Data.BinaryClassificationMetrics"/> object, which
            do not include probability-based metrics, for each sub-model. Each sub-model is evaluated on the cross-validation fold that it did not see during training.
            </summary>
            <param name="data">The data to run cross-validation on.</param>
            <param name="estimator">The estimator to fit.</param>
            <param name="numberOfFolds">Number of cross-validation folds.</param>
            <param name="labelColumnName">The label column (for evaluation).</param>
            <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName"/>,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            If <see langword="null"/> no row grouping will be performed.</param>
            <param name="seed">Seed for the random number generator used to select rows for cross-validation folds.</param>
            <returns>Per-fold results: metrics, models, scored datasets.</returns>
        </member>
        <member name="M:Microsoft.ML.BinaryClassificationCatalog.CrossValidate(Microsoft.ML.IDataView,Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Run cross-validation over <paramref name="numberOfFolds"/> folds of <paramref name="data"/>, by fitting <paramref name="estimator"/>,
            and respecting <paramref name="samplingKeyColumnName"/> if provided.
            Then evaluate each sub-model against <paramref name="labelColumnName"/> and return a <see cref="T:Microsoft.ML.Data.CalibratedBinaryClassificationMetrics"/> object, which
            includes probability-based metrics, for each sub-model. Each sub-model is evaluated on the cross-validation fold that it did not see during training.
            </summary>
            <param name="data">The data to run cross-validation on.</param>
            <param name="estimator">The estimator to fit.</param>
            <param name="numberOfFolds">Number of cross-validation folds.</param>
            <param name="labelColumnName">The label column (for evaluation).</param>
            <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName"/>,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            If <see langword="null"/> no row grouping will be performed.</param>
            <param name="seed">Seed for the random number generator used to select rows for cross-validation folds.</param>
            <returns>Per-fold results: metrics, models, scored datasets.</returns>
        </member>
        <member name="M:Microsoft.ML.BinaryClassificationCatalog.ChangeModelThreshold``1(Microsoft.ML.Data.BinaryPredictionTransformer{``0},System.Single)">
            <summary>
            Method to modify the threshold to existing model and return modified model.
            </summary>
            <typeparam name="TModel">The type of the model parameters.</typeparam>
            <param name="model">Existing model to modify threshold.</param>
            <param name="threshold">New threshold.</param>
            <returns>New model with modified threshold.</returns>
        </member>
        <member name="P:Microsoft.ML.BinaryClassificationCatalog.Calibrators">
            <summary>
            The list of calibrators for performing binary classification.
            </summary>
        </member>
        <member name="T:Microsoft.ML.BinaryClassificationCatalog.CalibratorsCatalog">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of binary classification calibrators.
            </summary>
        </member>
        <member name="M:Microsoft.ML.BinaryClassificationCatalog.CalibratorsCatalog.Naive(System.String,System.String)">
            <summary>
            Adds probability column by training naive binning-based calibrator.
            </summary>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="scoreColumnName">The name of the score column.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[NaiveCalibrator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/Calibrators/Naive.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.BinaryClassificationCatalog.CalibratorsCatalog.Platt(System.String,System.String,System.String)">
            <summary>
            Adds probability column by training <a href="https://en.wikipedia.org/wiki/Platt_scaling">platt calibrator</a>.
            </summary>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="scoreColumnName">The name of the score column.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[PlattCalibrator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/Calibrators/Platt.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.BinaryClassificationCatalog.CalibratorsCatalog.Platt(System.Double,System.Double,System.String)">
            <summary>
            Adds probability column by specifying <a href="https://en.wikipedia.org/wiki/Platt_scaling">platt calibrator</a>.
            </summary>
            <param name="slope">The slope in the function of the exponent of the sigmoid.</param>
            <param name="offset">The offset in the function of the exponent of the sigmoid.</param>
            <param name="scoreColumnName">The name of the score column.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[FixedPlattCalibrator](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/Calibrators/FixedPlatt.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.BinaryClassificationCatalog.CalibratorsCatalog.Isotonic(System.String,System.String,System.String)">
            <summary>
            Adds probability column by training pair adjacent violators calibrator.
            </summary>
            <remarks>
             The calibrator finds a stepwise constant function (using the Pool Adjacent Violators Algorithm aka PAV) that minimizes the squared error.
             Also know as <a href="https://en.wikipedia.org/wiki/Isotonic_regression">Isotonic regression</a>
            </remarks>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="scoreColumnName">The name of the score column.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[PairAdjacentViolators](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/Calibrators/Isotonic.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="T:Microsoft.ML.ClusteringCatalog">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of clustering components,
            such as trainers.
            </summary>
        </member>
        <member name="P:Microsoft.ML.ClusteringCatalog.Trainers">
            <summary>
            The list of trainers for performing clustering.
            </summary>
        </member>
        <member name="M:Microsoft.ML.ClusteringCatalog.#ctor(Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            The clustering context.
            </summary>
        </member>
        <member name="T:Microsoft.ML.ClusteringCatalog.ClusteringTrainers">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of clustering trainers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.ClusteringCatalog.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String)">
            <summary>
            Evaluates scored clustering data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="scoreColumnName">The name of the score column in <paramref name="data"/>.</param>
            <param name="labelColumnName">The name of the optional label column in <paramref name="data"/>.
            If present, the <see cref="P:Microsoft.ML.Data.ClusteringMetrics.NormalizedMutualInformation"/> metric will be computed.</param>
            <param name="featureColumnName">The name of the optional features column in <paramref name="data"/>.
            If present, the <see cref="P:Microsoft.ML.Data.ClusteringMetrics.DaviesBouldinIndex"/> metric will be computed.</param>
            <returns>The evaluation result.</returns>
        </member>
        <member name="M:Microsoft.ML.ClusteringCatalog.CrossValidate(Microsoft.ML.IDataView,Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},System.Int32,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Run cross-validation over <paramref name="numberOfFolds"/> folds of <paramref name="data"/>, by fitting <paramref name="estimator"/>,
            and respecting <paramref name="samplingKeyColumnName"/> if provided.
            Then evaluate each sub-model against <paramref name="labelColumnName"/> and return metrics.
            </summary>
            <param name="data">The data to run cross-validation on.</param>
            <param name="estimator">The estimator to fit.</param>
            <param name="numberOfFolds">Number of cross-validation folds.</param>
            <param name="labelColumnName">Optional label column for evaluation (clustering tasks may not always have a label).</param>
            <param name="featuresColumnName">Optional features column for evaluation (needed for calculating Dbi metric)</param>
            <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName"/>,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            If <see langword="null"/> no row grouping will be performed.</param>
            <param name="seed">Seed for the random number generator used to select rows for cross-validation folds.</param>
        </member>
        <member name="T:Microsoft.ML.MulticlassClassificationCatalog">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of multiclass classification components,
            such as trainers.
            </summary>
        </member>
        <member name="P:Microsoft.ML.MulticlassClassificationCatalog.Trainers">
            <summary>
            The list of trainers for performing multiclass classification.
            </summary>
        </member>
        <member name="T:Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of multiclass classification trainers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.MulticlassClassificationCatalog.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String,System.Int32)">
            <summary>
            Evaluates scored multiclass classification data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="labelColumnName">The name of the label column in <paramref name="data"/>.</param>
            <param name="scoreColumnName">The name of the score column in <paramref name="data"/>.</param>
            <param name="predictedLabelColumnName">The name of the predicted label column in <paramref name="data"/>.</param>
            <param name="topKPredictionCount">If given a positive value, the <see cref="P:Microsoft.ML.Data.MulticlassClassificationMetrics.TopKAccuracy"/> will be filled with
            the top-K accuracy, that is, the accuracy assuming we consider an example with the correct class within
            the top-K values as being stored "correctly."</param>
            <returns>The evaluation results for these calibrated outputs.</returns>
        </member>
        <member name="M:Microsoft.ML.MulticlassClassificationCatalog.CrossValidate(Microsoft.ML.IDataView,Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Run cross-validation over <paramref name="numberOfFolds"/> folds of <paramref name="data"/>, by fitting <paramref name="estimator"/>,
            and respecting <paramref name="samplingKeyColumnName"/> if provided.
            Then evaluate each sub-model against <paramref name="labelColumnName"/> and return metrics.
            </summary>
            <param name="data">The data to run cross-validation on.</param>
            <param name="estimator">The estimator to fit.</param>
            <param name="numberOfFolds">Number of cross-validation folds.</param>
            <param name="labelColumnName">The label column (for evaluation).</param>
            <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName"/>,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            If <see langword="null"/> no row grouping will be performed.</param>
            <param name="seed">Seed for the random number generator used to select rows for cross-validation folds.</param>
            <returns>Per-fold results: metrics, models, scored datasets.</returns>
            <returns>Per-fold results: metrics, models, scored datasets.</returns>
        </member>
        <member name="T:Microsoft.ML.RegressionCatalog">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of regression components,
            such as trainers and evaluators.
            </summary>
        </member>
        <member name="P:Microsoft.ML.RegressionCatalog.Trainers">
            <summary>
            The list of trainers for performing regression.
            </summary>
        </member>
        <member name="T:Microsoft.ML.RegressionCatalog.RegressionTrainers">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of regression trainers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.RegressionCatalog.Evaluate(Microsoft.ML.IDataView,System.String,System.String)">
            <summary>
            Evaluates scored regression data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="labelColumnName">The name of the label column in <paramref name="data"/>.</param>
            <param name="scoreColumnName">The name of the score column in <paramref name="data"/>.</param>
            <returns>The evaluation results for these calibrated outputs.</returns>
        </member>
        <member name="M:Microsoft.ML.RegressionCatalog.CrossValidate(Microsoft.ML.IDataView,Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Run cross-validation over <paramref name="numberOfFolds"/> folds of <paramref name="data"/>, by fitting <paramref name="estimator"/>,
            and respecting <paramref name="samplingKeyColumnName"/> if provided.
            Then evaluate each sub-model against <paramref name="labelColumnName"/> and return metrics.
            </summary>
            <param name="data">The data to run cross-validation on.</param>
            <param name="estimator">The estimator to fit.</param>
            <param name="numberOfFolds">Number of cross-validation folds.</param>
            <param name="labelColumnName">The label column (for evaluation).</param>
            <param name="samplingKeyColumnName">Name of a column to use for grouping rows. If two examples share the same value of the <paramref name="samplingKeyColumnName"/>,
            they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set.
            If <see langword="null"/> no row grouping will be performed.</param>
            <param name="seed">Seed for the random number generator used to select rows for cross-validation folds.</param>
            <returns>Per-fold results: metrics, models, scored datasets.</returns>
        </member>
        <member name="T:Microsoft.ML.RankingCatalog">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of ranking components,
            such as trainers and evaluators.
            </summary>
        </member>
        <member name="P:Microsoft.ML.RankingCatalog.Trainers">
            <summary>
            The list of trainers for performing regression.
            </summary>
        </member>
        <member name="T:Microsoft.ML.RankingCatalog.RankingTrainers">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of ranking trainers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.RankingCatalog.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String)">
            <summary>
            Evaluates scored ranking data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="labelColumnName">The name of the label column in <paramref name="data"/>.</param>
            <param name="rowGroupColumnName">The name of the groupId column in <paramref name="data"/>.</param>
            <param name="scoreColumnName">The name of the score column in <paramref name="data"/>.</param>
            <returns>The evaluation results for these calibrated outputs.</returns>
        </member>
        <member name="M:Microsoft.ML.RankingCatalog.Evaluate(Microsoft.ML.IDataView,Microsoft.ML.Data.RankingEvaluatorOptions,System.String,System.String,System.String)">
            <summary>
            Evaluates scored ranking data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="options">Options to control the evaluation result.</param>
            <param name="labelColumnName">The name of the label column in <paramref name="data"/>.</param>
            <param name="rowGroupColumnName">The name of the groupId column in <paramref name="data"/>.</param>
            <param name="scoreColumnName">The name of the score column in <paramref name="data"/>.</param>
            <returns>The evaluation results for these calibrated outputs.</returns>
        </member>
        <member name="M:Microsoft.ML.RankingCatalog.CrossValidate(Microsoft.ML.IDataView,Microsoft.ML.IEstimator{Microsoft.ML.ITransformer},System.Int32,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Run cross-validation over <paramref name="numberOfFolds"/> folds of <paramref name="data"/>, by fitting <paramref name="estimator"/>,
            and respecting <paramref name="rowGroupColumnName"/>if provided.
            Then evaluate each sub-model against <paramref name="labelColumnName"/> and return metrics.
            </summary>
            <param name="data">The data to run cross-validation on.</param>
            <param name="estimator">The estimator to fit.</param>
            <param name="numberOfFolds">Number of cross-validation folds.</param>
            <param name="labelColumnName">The label column (for evaluation).</param>
            <param name="rowGroupColumnName">The name of the groupId column in <paramref name="data"/>, which is used to group rows.
            This column will automatically be used as SamplingKeyColumn when splitting the data for Cross Validation,
            as this is required by the ranking algorithms
            If <see langword="null"/> no row grouping will be performed. </param>
            <param name="seed">  Seed for the random number generator used to select rows for cross-validation folds.</param>
            <returns>Per-fold results: metrics, models, scored datasets.</returns>
        </member>
        <member name="T:Microsoft.ML.AnomalyDetectionCatalog">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of anomaly detection components,
            such as trainers and evaluators.
            </summary>
        </member>
        <member name="P:Microsoft.ML.AnomalyDetectionCatalog.Trainers">
            <summary>
            The list of trainers for anomaly detection.
            </summary>
        </member>
        <member name="T:Microsoft.ML.AnomalyDetectionCatalog.AnomalyDetectionTrainers">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of anomaly detection trainers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.AnomalyDetectionCatalog.Evaluate(Microsoft.ML.IDataView,System.String,System.String,System.String,System.Int32)">
            <summary>
            Evaluates scored anomaly detection data.
            </summary>
            <param name="data">The scored data.</param>
            <param name="labelColumnName">The name of the label column in <paramref name="data"/>.</param>
            <param name="scoreColumnName">The name of the score column in <paramref name="data"/>.</param>
            <param name="predictedLabelColumnName">The name of the predicted label column in <paramref name="data"/>.</param>
            <param name="falsePositiveCount">The number of false positives to compute the <see cref="P:Microsoft.ML.Data.AnomalyDetectionMetrics.DetectionRateAtFalsePositiveCount"/> metric. </param>
            <returns>Evaluation results.</returns>
        </member>
        <member name="M:Microsoft.ML.AnomalyDetectionCatalog.ChangeModelThreshold``1(Microsoft.ML.Data.AnomalyPredictionTransformer{``0},System.Single)">
            <summary>
            Creates a new <see cref="T:Microsoft.ML.Data.AnomalyPredictionTransformer`1"/> with the specified <paramref name="threshold"/>.
            If the provided <paramref name="threshold"/> is the same as the <paramref name="model"/> threshold it simply returns <paramref name="model"/>.
            Note that by default the threshold is 0.5 and valid scores range from 0 to 1.
            </summary>
            <param name="model">A trained <see cref="T:Microsoft.ML.Data.AnomalyPredictionTransformer`1"/>.</param>
            <param name="threshold">The new threshold value that will be used to determine the label of a data point
            based on the predicted score by the model.</param>
        </member>
        <member name="T:Microsoft.ML.ForecastingCatalog">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of forecasting components.
            </summary>
        </member>
        <member name="P:Microsoft.ML.ForecastingCatalog.Trainers">
            <summary>
            The list of trainers for performing forecasting.
            </summary>
        </member>
        <member name="T:Microsoft.ML.ForecastingCatalog.Forecasters">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of forecasting trainers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.BootstrapSamplingTransformer">
            <summary>
            This class approximates bootstrap sampling of a dataview.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.BootstrapSamplingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Boolean,System.Nullable{System.UInt32},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.BootstrapSamplingTransformer"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="complement">Whether this is the out-of-bag sample, that is, all those rows that are not selected by the transform.</param>
            <param name="seed">The random seed. If unspecified random state will be instead derived from the environment.</param>
            <param name="shuffleInput">Whether we should attempt to shuffle the source data. By default on, but can be turned off for efficiency.</param>
            <param name="poolSize">When shuffling the output, the number of output rows to keep in that pool. Note that shuffling of output is completely distinct from shuffling of input.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.BootstrapSamplingTransformer.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.BootstrapSamplingTransformer.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.BootstrapSample">
            <summary>
            Entry point methods for bootstrap sampling.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ColumnConcatenatingEstimator">
             <summary>
             Concatenates one or more input columns into a new output column.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Any, except [key](xref:Microsoft.ML.Data.KeyDataViewType) type. All input columns must have the same type.  |
             | Output column data type | A vector of the input columns' data type |
             | Exportable to ONNX | Yes |
            
             The resulting <xref:Microsoft.ML.Data.ColumnConcatenatingTransformer> creates a new column,
             named as specified in the output column name parameters, where the input values are concatenated in a vector.
             The order of the concatenation follows the order in which the input columns are specified.
            
             If the input columns' data type is a vector the output column data type remains the same. However, the size of
             the vector will be the sum of the sizes of the input vectors.
            
             Check the See Also section for links to usage examples.
             ]]></format>
             </remarks>
             <seealso cref="M:Microsoft.ML.TransformExtensionsCatalog.Concatenate(Microsoft.ML.TransformsCatalog,System.String,System.String[])"/>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnConcatenatingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.ColumnConcatenatingEstimator"/>
            </summary>
            <param name="env">The local instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>.</param>
            <param name="outputColumnName">The name of the resulting column.</param>
            <param name="inputColumnNames">The columns to concatenate into one single column.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnConcatenatingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Data.ColumnConcatenatingTransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnConcatenatingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ColumnCopyingEstimator">
             <summary>
             <see cref="T:Microsoft.ML.IEstimator`1"/> for the <see cref="T:Microsoft.ML.Transforms.ColumnCopyingTransformer"/>.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Any |
             | Output column data type | The same as the data type in the input column |
             | Exportable to ONNX | Yes |
            
             The resulting [ColumnCopyingTransformer](xref:Microsoft.ML.Transforms.ColumnCopyingTransformer) creates a new column, named as specified in the output column name parameters, and
             copies the data from the input column to this new column.
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.TransformExtensionsCatalog.CopyColumns(Microsoft.ML.TransformsCatalog,System.String,System.String)" />
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnCopyingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ColumnCopyingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.ColumnCopyingEstimator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.ColumnCopyingTransformer.Columns">
            <summary>
            Names of output and input column pairs on which the transformation is applied.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ColumnSelectingEstimator">
             <summary>
             Keeps or drops selected columns from an <see cref="T:Microsoft.ML.IDataView"/>.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input columns data type | Any |
             | Exportable to ONNX | Yes |
            
             The resulting <xref:Microsoft.ML.Transforms.ColumnSelectingTransformer>
             operates on the schema of a given <xref:Microsoft.ML.IDataView> by dropping or keeping selected columns from the schema.
            
             It is commonly used to remove unwanted columns before serializing a dataset or writing it to a file.
             It is not necessary to drop unused columns before training or performing transforms,
             as the <xref:Microsoft.ML.IDataView> is lazily evaluated and will not actually materialize the columns until needed.
             In the case of serialization, every column in the schema will be written out. If there are columns
             that should not be saved, this estimator can be used to remove them.
            
             Check the See Also section for links to usage examples.
             ]]></format>
             </remarks>
             <seealso cref="M:Microsoft.ML.TransformExtensionsCatalog.DropColumns(Microsoft.ML.TransformsCatalog,System.String[])"/>
             <seealso cref="M:Microsoft.ML.TransformExtensionsCatalog.SelectColumns(Microsoft.ML.TransformsCatalog,System.String[])"/>
             <seealso cref="M:Microsoft.ML.TransformExtensionsCatalog.SelectColumns(Microsoft.ML.TransformsCatalog,System.String[],System.Boolean)"/>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String[])">
            <summary>
            Constructs the Select Columns Estimator.
            </summary>
            <param name="env">Instance of the host environment.</param>
            <param name="keepColumns">The array of column names to keep.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String[],System.String[],System.Boolean,System.Boolean)">
            <summary>
            Constructs the Select Columns Estimator.
            </summary>
            <param name="env">Instance of the host environment.</param>
            <param name="keepColumns">The array of column names to keep, cannot be set with <paramref name="dropColumns"/>.</param>
            <param name="dropColumns">The array of column names to drop, cannot be set with <paramref name="keepColumns"/>.</param>
            <param name="keepHidden">If true will keep hidden columns and false will remove hidden columns. The argument is
            ignored if the Estimator is in "drop mode".</param>
            <param name="ignoreMissing">If false will check for any columns given in <paramref name="keepColumns"/>
                or <paramref name="dropColumns"/> that are missing from the input. If a missing column exists a
                SchemaMistmatch exception is thrown. If true, the check is not made.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingEstimator.KeepColumns(Microsoft.ML.Runtime.IHostEnvironment,System.String[])">
            <summary>
            KeepColumns is used to select a list of columns that the user wants to keep on a given an input. Any column not specified
            will be dropped from the output output schema.
            </summary>
            <param name="env">Instance of the host environment.</param>
            <param name="columnsToKeep">The array of column names to keep.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingEstimator.DropColumns(Microsoft.ML.Runtime.IHostEnvironment,System.String[])">
            <summary>
            DropColumns is used to select a list of columns that user wants to drop from a given input. Any column not specified will
            be maintained in the output schema.
            </summary>
            <param name="env">Instance of the host environment.</param>
            <param name="columnsToDrop">The array of column names to drop.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ColumnSelectingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting an <see cref="T:Microsoft.ML.Transforms.ColumnSelectingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.CheckModelVersion(Microsoft.ML.ModelLoadContext,Microsoft.ML.VersionInfo)">
            <summary>
            Helper function to determine the model version that is being loaded.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.LoadDropColumnsTransform(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.IDataView)">
            <summary>
            Back-compatibility function that handles loading the DropColumns Transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ColumnSelectingTransformer.HiddenColumnOption">
            <summary>
            Back-compatibility that is handling the HiddenColumnOption from ChooseColumns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.GetHiddenOption(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.ColumnSelectingTransformer.HiddenColumnOption)">
            <summary>
            Backwards compatibility helper function to convert the HiddenColumnOption to a boolean.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.LoadChooseColumnsTransform(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.IDataView)">
            <summary>
            Backwards compatibility helper function that loads a Choose Column Transform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.GetOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.Microsoft#ML#ITransformer#GetRowToRowMapper(Microsoft.ML.DataViewSchema)">
            <summary>
            Constructs a row-to-row mapper based on an input schema. If <see cref="P:Microsoft.ML.ITransformer.IsRowToRowMapper"/>
            is <c>false</c>, then an exception is thrown. If the input schema is in any way
            unsuitable for constructing the mapper, an exception should likewise be thrown.
            </summary>
            <param name="inputSchema">The input schema for which we should get the mapper.</param>
            <returns>The row to row mapper.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.Transform(Microsoft.ML.IDataView)">
            <summary>
            Take the data in, make transformations, output the data.
            Note that <see cref="T:Microsoft.ML.IDataView"/>'s are lazy, so no actual transformations happen here, just schema validation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.RowImpl.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.RowImpl.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.SelectColumnsDataTransform.Microsoft#ML#Data#IRowToRowMapper#GetDependencies(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ColumnSelectingTransformer.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.ICalculateFeatureContribution,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Feature Contribution Calculation computes model-specific contribution scores for each feature.
            Note that this functionality is not supported by all the models. See <see cref="T:Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer"/> for a list of the sported models.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="modelParameters">Trained model parameters that support Feature Contribution Calculation and which will be used for scoring.</param>
            <param name="featureColumnName">The name of the feature column that will be used as input.</param>
            <param name="numberOfPositiveContributions">The number of positive contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with positive contributions than <paramref name="numberOfPositiveContributions"/>, the rest will be returned as zeros.</param>
            <param name="numberOfNegativeContributions">The number of negative contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with negative contributions than <paramref name="numberOfNegativeContributions"/>, the rest will be returned as zeros.</param>
            <param name="normalize">Whether the feature contributions should be normalized to the [-1, 1] interval.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator">
             <summary>
             Estimator for <see cref="T:Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer"/>. Computes model-specific per-feature contributions to the score of each input vector.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Known-sized vector of <xref:System.Single> |
             | Output column data type | Known-sized vector of <xref:System.Single> |
             | Exportable to ONNX | No |
            
             Scoring a dataset with a trained model produces a score, or prediction, for each example. To understand and explain these predictions
             it can be useful to inspect which features influenced them most significantly. This transformer computes a model-specific
             list of per-feature contributions to the score for each example. These contributions can be positive (they make the score higher) or negative
             (they make the score lower).
            
             Feature Contribution Calculation is currently supported for the following models:
             - Regression:
               - <xref:Microsoft.ML.Trainers.OlsTrainer>
               - <xref:Microsoft.ML.Trainers.SdcaRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.OnlineGradientDescentTrainer>
               - <xref:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.GamRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.LightGbm.LightGbmRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.FastTreeRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.FastForestRegressionTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.FastTreeTweedieTrainer>
             - Binary Classification:
               - <xref:Microsoft.ML.Trainers.AveragedPerceptronTrainer>
               - <xref:Microsoft.ML.Trainers.LinearSvmTrainer>
               - <xref:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.SgdCalibratedTrainer>
               - <xref:Microsoft.ML.Trainers.SgdNonCalibratedTrainer>
               - <xref:Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.GamBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.FastForestBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.FastTree.FastTreeBinaryTrainer>
               - <xref:Microsoft.ML.Trainers.LightGbm.LightGbmBinaryTrainer>
             - Ranking:
               - <xref:Microsoft.ML.Trainers.FastTree.FastTreeRankingTrainer>
               - <xref:Microsoft.ML.Trainers.LightGbm.LightGbmRankingTrainer>
            
             For linear models, the contribution of a given feature is equal to the product of feature value times the corresponding weight. Similarly,
             for Generalized Additive Models (GAM), the contribution of a feature is equal to the shape function for the given feature evaluated at
             the feature value.
            
             For tree-based models, the calculation of feature contribution essentially consists in determining which splits in the tree have the most impact
             on the final score and assigning the value of the impact to the features determining the split. More precisely, the contribution of a feature
             is equal to the change in score produced by exploring the opposite sub-tree every time a decision node for the given feature is encountered.
             Consider a simple case with a single decision tree that has a decision node for the binary feature F1. Given an example that has feature F1
             equal to true, we can calculate the score it would have obtained if we chose the subtree corresponding to the feature F1 being equal to false
             while keeping the other features constant. The contribution of feature F1 for the given example is the difference between the original score
             and the score obtained by taking the opposite decision at the node corresponding to feature F1. This algorithm extends naturally to models with
             many decision trees.
            
             Check the See Also section for links to usage examples.
             ]]></format>
             </remarks>
             <seealso cref="M:Microsoft.ML.ExplainabilityCatalog.CalculateFeatureContribution(Microsoft.ML.TransformsCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Trainers.ICalculateFeatureContribution},System.Int32,System.Int32,System.Boolean)"/>
             <seealso cref="M:Microsoft.ML.ExplainabilityCatalog.CalculateFeatureContribution``2(Microsoft.ML.TransformsCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.CalibratedModelParametersBase{``0,``1}},System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.ICalculateFeatureContribution,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Feature Contribution Calculation computes model-specific contribution scores for each feature.
            Note that this functionality is not supported by all the models. See <see cref="T:Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer"/> for a list of the sported models.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="model">A <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/> that supports Feature Contribution Calculation,
            and which will also be used for scoring.</param>
            <param name="numberOfPositiveContributions">The number of positive contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with positive contributions than <paramref name="numberOfPositiveContributions"/>, the rest will be returned as zeros.</param>
            <param name="numberOfNegativeContributions">The number of negative contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with negative contributions than <paramref name="numberOfNegativeContributions"/>, the rest will be returned as zeros.</param>
            <param name="featureColumnName">TODO</param>
            <param name="normalize">Whether the feature contributions should be normalized to the [-1, 1] interval.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.GenerateNumberTransform">
            <summary>
            This transform adds columns containing either random numbers distributed
            uniformly between 0 and 1 or an auto-incremented integer starting at zero.
            It will be used in conjunction with a filter transform to create random
            partitions of the data, used in cross validation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.GenerateNumberTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.Nullable{System.UInt32},System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.GenerateNumberTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="name">Name of the output column.</param>
            <param name="seed">Seed to start random number generator.</param>
            <param name="useCounter">Use an auto-incremented integer starting at zero instead of a random number.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.GenerateNumberTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.GenerateNumberTransform.Options,Microsoft.ML.IDataView)">
            <summary>
            Public constructor corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.GenerateNumberTransform.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.GenerateNumberTransform.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.HashingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.HashingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.HashingEstimator.ColumnOptions[])">
            <summary>
            Constructor for case where you don't need to 'train' transform on data, for example, InvertHash for all columns set to zero.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="columns">Description of dataset columns and how to process them.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.HashingTransformer.IHasher`1">
             <summary>
             The usage of this interface may seem a bit strange, but it is deliberately structured in this way.
             One will note all implementors of this interface are structs, and that where used, you never use
             the interface itself, but instead an implementing type. This is due to how .NET and the JIT handles
             generic types that are also value types. For value types, it will actually generate new assembly
             code, which will allow effectively code generation in a way that would not happen if the hasher
             implementor was a class, or if the hasher implementation was just passed in with a delegate, or
             the hashing logic was encapsulated as the abstract method of some class.
            
             In a prior time, there were methods for all possible combinations of types, scalar-ness, vector
             sparsity/density, whether the hash was sparsity preserving or not, whether it was ordered or not.
             This resulted in an explosion of methods that made the hash transform code somewhat hard to maintain.
             On the other hand, the methods were fast, since they were effectively (by brute enumeration) completely
             inlined, so introducing any levels of abstraction would slow things down. By doing things in this
             fashion using generics over struct types, we are effectively (via the JIT) doing code generation so
             things are inlined and just as fast as the explicit implementation, while making the code rather
             easier to maintain.
             </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashingTransformer.InvertHashHelper.Create(Microsoft.ML.DataViewRow,Microsoft.ML.Transforms.HashingEstimator.ColumnOptions,System.Int32,System.Delegate)">
            <summary>
            Constructs an <see cref="T:Microsoft.ML.Transforms.HashingTransformer.InvertHashHelper"/> instance to accumulate hash/value pairs
            from a single column as parameterized by this transform, with values fetched from
            the row.
            </summary>
            <param name="row">The input source row, from which the hashed values can be fetched</param>
            <param name="ex">The extra column info</param>
            <param name="invertHashMaxCount">The number of input hashed valuPres to accumulate per output hash value</param>
            <param name="dstGetter">A hash getter, built on top of <paramref name="row"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashingTransformer.InvertHashHelper.Process">
            <summary>
            This calculates the hash/value pair from the current value of the column, and does
            appropriate processing of them to build the invert hash map.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.HashingEstimator">
             <summary>
             Estimator for <see cref="T:Microsoft.ML.Transforms.HashingTransformer"/>, which hashes either single valued columns or vector columns. For vector columns,
             it hashes each slot separately.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | Yes, if the mapping of the hashes to the values is required. |
             | Input column data type | Vector or scalars of numeric, boolean, [text](xref:Microsoft.ML.Data.TextDataViewType), [DateTime](xref:System.DateTime) and [key](xref:Microsoft.ML.Data.KeyDataViewType) type. |
             | Output column data type | Vector or scalar [key](xref:Microsoft.ML.Data.KeyDataViewType) type. |
             | Exportable to ONNX | Yes - on estimators trained on v1.5 and up. <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double> and OrderedHashing are not supported. |
            
             Check the See Also section for links to usage examples.
             ]]></format>
             </remarks>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.Hash(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String,System.Int32,System.Int32)"/>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.Hash(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.Transforms.HashingEstimator.ColumnOptions[])"/>
        </member>
        <member name="T:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.Name">
            <summary>
            Name of the column resulting from the transformation of <see cref="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.InputColumnName"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.InputColumnName">
            <summary> Name of column to transform.</summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.NumberOfBits">
            <summary> Number of bits to hash into. Must be between 1 and 31, inclusive.</summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.Seed">
            <summary> Hashing seed.</summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.UseOrderedHashing">
            <summary> Whether the position of each term should be included in the hash, only applies to inputs of vector type.</summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.MaximumNumberOfInverts">
            <summary>
            During hashing we constuct mappings between original values and the produced hash values.
            Text representation of original values are stored in the key names of the annotations for the new column. Hashing, as such, can map many initial values to one.
            <see cref="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.MaximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.Combine">
            <summary>
            Whether the slots of a vector column should be hashed into a single value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.#ctor(System.String,System.String,System.Int32,System.UInt32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 31, inclusive.</param>
            <param name="seed">Hashing seed.</param>
            <param name="useOrderedHashing">Whether the position of each term should be included in the hash, only applies to inputs of vector type.</param>
            <param name="maximumNumberOfInverts">During hashing we construct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the annotations for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
            <param name="combine">Whether the slots of a vector column should be hashed into a single value.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.HashingEstimator"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 31, inclusive.</param>
            <param name="maximumNumberOfInverts">During hashing we construct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the  metadata for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/> specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
            <param name="useOrderedHashing">Whether the position of each term should be included in the hash, only applies to inputs of vector type.</param>
            <param name="combine">Whether the slots of a vector column should be hashed into a single value.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.HashingEstimator.ColumnOptions[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.HashingEstimator"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="columns">Description of dataset columns and how to process them.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.HashingTransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.HashingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.KeyToValueMappingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.KeyToValueMappingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToValueMappingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.KeyToValueMappingTransformer"/> that takes and transforms one column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToValueMappingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.KeyToValueMappingTransformer"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToValueMappingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.KeyToValueMappingTransformer.Options,Microsoft.ML.IDataView)">
            <summary>
            Factory method for SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToValueMappingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext)">
            <summary>
            Factory method for SignatureLoadModel.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToValueMappingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.IDataView)">
            <summary>
            Factory method for SignatureLoadDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToValueMappingTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.DataViewSchema)">
            <summary>
            Factory method for SignatureLoadRowMapper.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.KeyToValueMappingTransformer.Mapper.KeyToValueMap">
            <summary>
            A map is an object capable of creating the association from an input type, to an output
            type. This mapping is constructed from key metadata, with the input type being the key type
            and the output type being the type specified by the key metadata.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.KeyToValueMappingTransformer.Mapper.KeyToValueMap.TypeOutput">
            <summary>
            The item type of the output type, that is, either the output type or,
            if a vector, the item type of that type.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.KeyToValueMappingTransformer.Mapper.KeyToValueMap.InfoIndex">
            <summary>
            The column index in Infos.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.KeyToValueMappingTransformer.Mapper.KeyToValueMap.Parent">
            <summary>
            The parent transform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.KeyToValueMappingEstimator">
             <summary>
             Estimator for <see cref="T:Microsoft.ML.Transforms.KeyToValueMappingTransformer"/>. Converts the key types back to their original values.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | [key](xref:Microsoft.ML.Data.KeyDataViewType) type. |
             | Output column data type | Type of the original data, prior to converting to [key](xref:Microsoft.ML.Data.KeyDataViewType) type. |
             | Exportable to ONNX | Yes |
            
             Check the See Also section for links to usage examples.
             ]]></format>
             </remarks>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapKeyToValue(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[])"/>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapKeyToValue(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToValueMappingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.KeyToVectorMappingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.KeyToVectorMappingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToVectorMappingTransformer.Mapper.MakeGetterOne(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            This is for the singleton case. This should be equivalent to both Bag and Ord over
            a vector of size one.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToVectorMappingTransformer.Mapper.MakeGetterBag(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            This is for the bagging case - vector input and outputs should be added.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToVectorMappingTransformer.Mapper.MakeGetterInd(Microsoft.ML.DataViewRow,System.Int32)">
            <summary>
            This is for the indicator (non-bagging) case - vector input and outputs should be concatenated.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.KeyToVectorMappingEstimator">
             <summary>
             Estimator for <see cref="T:Microsoft.ML.Transforms.KeyToVectorMappingTransformer"/>. Maps the value of a key
             into a known-sized vector of <see cref="T:System.Single"/>.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Scalar or known-size vector of [key](xref:Microsoft.Ml.Data.KeyDataViewType) type. |
             | Output column data type | A known-size vector of [System.Single](xref:System.Single). |
             | Exportable to ONNX | Yes |
            
             It iterates over keys in data, and for each key it produces vector of key cardinality filled with zeros except position of key value in which it put's `1.0`.
             For vector of keys it can either produce vector of counts for each key or concatenate them together into one vector.
            
             Check the See Also section for links to usage examples.
             ]]></format>
             </remarks>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapKeyToVector(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[],System.Boolean)"/>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapKeyToVector(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String,System.Boolean)"/>
        </member>
        <member name="T:Microsoft.ML.Transforms.KeyToVectorMappingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.KeyToVectorMappingEstimator.ColumnOptions.Name">
            <summary> Name of the column resulting from the transformation of <cref see="InputColumnName"/>.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.KeyToVectorMappingEstimator.ColumnOptions.InputColumnName">
            <summary> Name of column to transform.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.KeyToVectorMappingEstimator.ColumnOptions.OutputCountVector">
            <summary>
            Whether to combine multiple indicator vectors into a single vector of counts instead of concatenating them.
            This is only relevant when the input column is a vector of keys.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToVectorMappingEstimator.ColumnOptions.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="outputCountVector">Whether to combine multiple indicator vectors into a single vector of counts instead of concatenating them.
            This is only relevant when the input column is a vector of keys.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.KeyToVectorMappingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LabelConvertTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.LabelConvertTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="outputColumnName">Name of the output column.</param>
            <param name="inputColumnName">Name of the input column.  If this is null '<paramref name="outputColumnName"/>' will be used.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.LabelConvertTransform.PassThrough(System.String,System.Int32)">
            <summary>
            Returns whether metadata of the indicated kind should be passed through from the source column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.LabelIndicatorTransform">
            <summary>
            Remaps multiclass labels to binary T,F labels, primarily for use with OVA.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.LabelIndicatorTransform.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.LabelIndicatorTransform"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="classIndex">Label of the positive class.</param>
            <param name="name">Name of the output column.</param>
            <param name="source">Name of the input column.  If this is null '<paramref name="name"/>' will be used.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.NAFilter">
            <member name="NAFilter">
      <summary>
        Removes missing values from vector type columns.
      </summary>
      <remarks>
        This transform removes the entire row if any of the input columns have a missing value in that row.
        This preprocessing is required for many ML algorithms that cannot work with missing values.
        Useful if any missing entry invalidates the entire row.
        If the <see cref="P:Microsoft.ML.Transforms.MissingValuesRowDropper.Complement" /> is set to true, this transform would do the exact opposite,
        it will keep only the rows that have missing values.
      </remarks>
    </member>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAFilter.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.NAFilter"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="complement">If true, keep only rows that contain NA values, and filter the rest.</param>
            <param name="columns">Name of the columns. Only these columns will be used to filter rows having 'NA' values.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAFilter.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NAFilter.Cursor.TryGetColumnValueGetter``1(System.Int32,Microsoft.ML.ValueGetter{``0}@)">
            <summary>
            Gets the appropriate column value getter for a mapped column. If the column
            is not mapped, this returns false with the out parameters getting default values.
            If the column is mapped but the TValue is of the wrong type, an exception is
            thrown.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.NormalizeTransform">
            <summary>
            The normalize transform for support of normalization via the <see cref="T:Microsoft.ML.Data.IDataTransform"/> mechanism.
            More contemporaneous API usage of normalization ought to use <see cref="T:Microsoft.ML.Transforms.NormalizingEstimator"/>
            and <see cref="T:Microsoft.ML.Transforms.NormalizingTransformer"/> rather than this structure.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizeTransform.CreateMinMaxNormalizer(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.String)">
            <summary>
            A helper method to create a MinMax normalizer.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="outputColumnName">Name of the output column.</param>
            <param name="inputColumnName">Name of the column to be transformed. If this is null '<paramref name="outputColumnName"/>' will be used.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizeTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.NormalizeTransform.MinMaxArguments,Microsoft.ML.IDataView)">
            <summary>
            Factory method corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizeTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.NormalizeTransform.LogMeanVarArguments,Microsoft.ML.IDataView)">
            <summary>
            Factory method corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizeTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.NormalizeTransform.BinArguments,Microsoft.ML.IDataView)">
            <summary>
            Factory method corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizeTransform.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.NormalizeTransform.RobustScalingArguments,Microsoft.ML.IDataView)">
            <summary>
            Factory method corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MinMaxDblAggregator">
            <summary>
            Base class for tracking min and max values for a vector valued column.
            It tracks min, max, number of non-sparse values (vCount) and number of ProcessValue() calls (trainCount).
            NaNs are ignored when updating min and max.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MeanVarDblAggregator">
            <summary>
            Class for computing the mean and variance for a vector valued column.
            It tracks the current mean and the M2 (sum of squared diffs of the values from the mean),
            the number of NaNs and the number of non-zero elements.
            Uses the algorithm described here: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.MedianAggregatorUtils.GetMedianSoFar(System.Double@,System.Double@,Microsoft.ML.Transforms.MedianAggregatorUtils.MaxHeap{System.Double}@,Microsoft.ML.Transforms.MedianAggregatorUtils.MinHeap{System.Double}@)">
            <summary>
            Based on the algorithm on GeeksForGeeks https://www.geeksforgeeks.org/median-of-stream-of-integers-running-integers/.
            </summary>
            <param name="num">The new number to account for in our median calculation.</param>
            <param name="median">The current median.</param>
            <param name="belowMedianHeap">The MaxHeap that has all the numbers below the median.</param>
            <param name="aboveMedianHeap">The MinHeap that has all the numbers above the median.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.MedianAggregatorUtils.HeapBase`1">
            <summary>
            This heap class is based on the one done by Egor Grishechko, https://egorikas.com/max-and-min-heap-implementation-with-csharp/, which he based
            on the implementation shown by HackerRank https://www.youtube.com/watch?v=t0Cq6tVNRBA. It is used for calculation the median in a much more
            memory efficient way.
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:Microsoft.ML.Transforms.MedianAggregatorUtils.GetMedianSoFar(System.Single@,System.Single@,Microsoft.ML.Transforms.MedianAggregatorUtils.MaxHeap{System.Single}@,Microsoft.ML.Transforms.MedianAggregatorUtils.MinHeap{System.Single}@)">
            <summary>
            Based on the algorithm on GeeksForGeeks https://www.geeksforgeeks.org/median-of-stream-of-integers-running-integers/.
            This heap approach uses much less memory and is faster then other approaches I could find, specifically list based ones.
            </summary>
            <param name="num">The new number to account for in our median calculation.</param>
            <param name="median">The current median.</param>
            <param name="belowMedianHeap">The MaxHeap that has all the numbers below the median.</param>
            <param name="aboveMedianHeap">The MinHeap that has all the numbers above the median.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.MedianDblAggregator">
            <summary>
            Base class for tracking median values for a single valued column.
            It tracks median values of non-sparse values (vCount).
            NaNs are ignored when updating min and max.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MinMaxSngAggregator">
            <summary>
            Base class for tracking min and max values for a vector valued column.
            It tracks min, max, number of non-sparse values (vCount) and number of ProcessValue() calls (trainCount).
            NaNs are ignored when updating min and max.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MeanVarSngAggregator">
            <summary>
            Class for computing the mean and variance for a vector valued column.
            It tracks the current mean and the M2 (sum of squared diffs of the values from the mean),
            the number of NaNs and the number of non-zero elements.
            Uses the algorithm described here: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.MedianSngAggregator">
            <summary>
            Base class for tracking median values for a single valued column.
            It tracks median values of non-sparse values (vCount).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.NormalizingEstimator">
             <summary>
             <see cref="T:Microsoft.ML.IEstimator`1"/> for the <see cref="T:Microsoft.ML.Transforms.NormalizingTransformer"/>.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | Yes |
             | Input column data type | <xref:System.Single> or <xref:System.Double> or a known-sized vector of those types. |
             | Output column data type | The same data type as the input column |
             | Exportable to ONNX | Yes |
            
             The resulting NormalizingEstimator will normalize the data in one of the following ways based upon how it was created:
             * Min Max - A linear rescale that is based upon the minimum and maximum values for each row.
             * Mean Variance - Rescale each row to unit variance and, optionally, zero mean.
             * Log Mean Variance - Rescale each row to unit variance, optionally, zero mean based on computations in log scale.
             * Binning - Bucketizes the data in each row and performs a linear rescale based on the calculated bins.
             * Supervised Binning - Bucketize the data in each row and performas a linear rescale based on the calculated bins. The bin calculation is based on correlation of the Label column.
             * Robust Scaling - Optionally centers the data and scales based on the range of data and the quantile min and max values provided. This method is more robust to outliers.
            
             ### Estimator Details
             The interval of the normalized data depends on whether fixZero is specified or not. fixZero defaults to true.
             When fixZero is false, the normalized interval is $[0,1]$ and the distribution of the normalized values depends on the normalization mode. For example, with Min Max, the minimum
             and maximum values are mapped to 0 and 1 respectively and remaining values fall in between.
             When fixZero is set, the normalized interval is $[-1,1]$ with the distribution of the normalized values depending on the normalization mode, but the behavior is different.
             With Min Max, the distribution depends on how far away the number is from 0, resulting in the number with the largest distance being mapped to 1 if its a positive number
             or -1 if its a negative number. The distance from 0 will affect the distribution with a majority of numbers that are closer together normalizing towards 0. Robust Scaling
             does not use fixZero, and its values are not constrained to $[0,1]$ or $[-1,1]$. Its scaling is based on the range of the data and the quantile min and max provided.
            
             The equation for the output $y$ of applying both Mean Variance and Log Mean Variance on input $x$ without
             using the CDF option is: $y = (x - \text{offset}) \text{scale}$. Where offset and scale are computed during training.
            
             Using the CDF option it is: $y = 0.5 * (1 + \text{ERF}((x - \text{mean}) / (\text{standard deviation} * sqrt(2)))$.
             Where ERF is the [Error Function](https://en.wikipedia.org/wiki/Error_function) used to approximate the CDF of a random variable assumed to
             normally distributed. The mean and standard deviation are computing during training.
            
             To create this estimator use one of the following:
             * [NormalizeMinMax](xref:Microsoft.ML.NormalizationCatalog.NormalizeMinMax(Microsoft.ML.TransformsCatalog, System.String, System.String, System.Int64, System.Boolean))
             * [NormalizeMeanVariance](xref:Microsoft.ML.NormalizationCatalog.NormalizeMeanVariance(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int64,System.Boolean,System.Boolean))
             * [NormalizeLogMeanVariance](xref:Microsoft.ML.NormalizationCatalog.NormalizeLogMeanVariance(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int64,System.Boolean))
             * [NormalizeBinning](xref:Microsoft.ML.NormalizationCatalog.NormalizeBinning(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int64,System.Boolean,System.Int32))
             * [NormalizeSupervisedBinning](xref:Microsoft.ML.NormalizationCatalog.NormalizeSupervisedBinning(Microsoft.ML.TransformsCatalog,System.String,System.String,System.String,System.Int64,System.Boolean,System.Int32,System.Int32))
             * [NormalizeRobustScaling](xref:Microsoft.ML.NormalizationCatalog.NormalizeRobustScaling(Microsoft.ML.TransformsCatalog,System.String,System.String,System.Int64,System.Boolean,System.UInt32,System.UInt32))
            
             Check the above links for usage examples.
             ]]>
             </format>
             </remarks>
        </member>
        <member name="F:Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode.MinMax">
            <summary>
            Linear rescale such that minimum and maximum values are mapped between -1 and 1.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode.MeanVariance">
            <summary>
            Rescale to unit variance and, optionally, zero mean.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode.LogMeanVariance">
            <summary>
            Rescale to unit variance on the log scale.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode.Binning">
            <summary>
            Bucketize and then rescale to between -1 and 1.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode.SupervisedBinning">
            <summary>
            Bucketize and then rescale to between -1 and 1. Calculates bins based on correlation with the Label column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode.RobustScaling">
            <summary>
            Optionally centers the data around 0 and then scales based on the data range and the quantile min and max values provided.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.NormalizingEstimator"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="mode">The <see cref="T:Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode"/> indicating how to the old values are mapped to the new values.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.NormalizingEstimator"/>.
            </summary>
            <param name="env">The private instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>.</param>
            <param name="mode">The <see cref="T:Microsoft.ML.Transforms.NormalizingEstimator.NormalizationMode"/> indicating how to the old values are mapped to the new values.</param>
            <param name="columns">An array of (outputColumnName, inputColumnName) tuples.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.NormalizingEstimator.ColumnOptionsBase[])">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.NormalizingEstimator"/>.
            </summary>
            <param name="env">The private instance of the <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>.</param>
            <param name="columns">An array of <see cref="T:Microsoft.ML.Transforms.NormalizingEstimator.ColumnOptionsBase"/> defining the inputs to the Normalizer, and their settings.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.NormalizingTransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.NormalizingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting an <see cref="T:Microsoft.ML.Transforms.NormalizingEstimator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.NormalizingTransformer.ColumnFunctions">
            <summary>An accessor of the column functions within <see cref="F:Microsoft.ML.Transforms.NormalizingTransformer.Columns"/>.</summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.NormalizingTransformer.Columns">
            <summary>
            The configuration of the normalizer. The i-th element describes the i-th input-output column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizingTransformer.GetNormalizerModelParameters(System.Int32)">
            <summary>
            The normalization configurations of input columns. It returns the normalization parameters applied to the <paramref name="index"/>-th input column.
            </summary>
            <param name="index">column index.</param>
            <returns>the normalization parameters applied to the <paramref name="index"/>-th input column.</returns>
        </member>
        <member name="T:Microsoft.ML.Transforms.NormalizingTransformer.NormalizerModelParametersBase">
            <summary>
            Base class for all the data normalizer models like <see cref="T:Microsoft.ML.Transforms.NormalizingTransformer.AffineNormalizerModelParameters`1"/>,
            <see cref="T:Microsoft.ML.Transforms.NormalizingTransformer.BinNormalizerModelParameters`1"/>, <see cref="T:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.NormalizingTransformer.AffineNormalizerModelParameters`1">
            <summary>
            The model parameters generated by affine normalization transformations.
            </summary>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Normalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/NormalizeLogMeanVariance.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="P:Microsoft.ML.Transforms.NormalizingTransformer.AffineNormalizerModelParameters`1.Scale">
            <summary>
            The scales. In the scalar case, this is a single value. In the vector case this is of length equal
            to the number of slots. Function is <c>(input - offset) * scale</c>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.NormalizingTransformer.AffineNormalizerModelParameters`1.Offset">
            <summary>
            The offsets. In the scalar case, this is a single value. In the vector case this is of length equal
            to the number of slots, or of length zero if all the offsets are zero.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizingTransformer.AffineNormalizerModelParameters`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.NormalizingTransformer.AffineNormalizerModelParameters`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1">
            <summary>
            The model parameters generated by cumulative distribution normalization transformations.
            The cumulative density function is parameterized by <see cref="P:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.Mean"/> and
            the <see cref="P:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.StandardDeviation"/> as observed during fitting.
            </summary>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Normalize](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/NormalizeLogMeanVariance.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="P:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.Mean">
            <summary>
            The mean(s). In the scalar case, this is a single value. In the vector case this is of length equal
            to the number of slots.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.StandardDeviation">
            <summary>
            The standard deviation(s). In the scalar case, this is a single value. In the vector case this is of
            length equal to the number of slots.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.UseLog">
            <summary>
            Whether the we ought to apply a logarithm to the input first.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1.#ctor(`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.NormalizingTransformer.CdfNormalizerModelParameters`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.NormalizingTransformer.BinNormalizerModelParameters`1">
            <summary>
            The model parameters generated by buckettizing the data into bins with monotonically
            increasing <see cref="P:Microsoft.ML.Transforms.NormalizingTransformer.BinNormalizerModelParameters`1.UpperBounds"/>.
            The <see cref="P:Microsoft.ML.Transforms.NormalizingTransformer.BinNormalizerModelParameters`1.Density"/> value is constant from bin to bin, for most cases.
            /// </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.NormalizingTransformer.BinNormalizerModelParameters`1.UpperBounds">
            <summary>
            The standard deviation(s). In the scalar case, these are the bin upper bounds for that single value.
            In the vector case it is a jagged array of the bin upper bounds for all slots.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.NormalizingTransformer.BinNormalizerModelParameters`1.Density">
            <summary>
            The frequency of the datapoints per each bin.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.NormalizingTransformer.BinNormalizerModelParameters`1.Offset">
            <summary>
            If normalization is performed with <see cref="F:Microsoft.ML.Transforms.NormalizeTransform.ControlZeroArgumentsBase.EnsureZeroUntouched"/> set to <value>true</value>,
            the offset indicates the displacement of zero, if any.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.NormalizingTransformer.BinNormalizerModelParameters`1.#ctor(System.Collections.Immutable.ImmutableArray{`0},`0,`0)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.NormalizingTransformer.BinNormalizerModelParameters`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.RangeFilter">
            <summary>
            Filters a dataview on a column of type Single, Double or Key (contiguous).
            Keeps the values that are in the specified min/max range. NaNs are always filtered out.
            If the input is a Key type, the min/max are considered percentages of the number of values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.RangeFilter.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.RangeFilter"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="column">Name of the input column.</param>
            <param name="lowerBound">Minimum value (0 to 1 for key types).</param>
            <param name="upperBound">Maximum value (0 to 1 for key types).</param>
            <param name="includeUpperBound">Whether to include the upper bound.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.RangeFilter.RowCursorBase.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.RowShufflingTransformer">
            <summary>
            This is a transformer that, given any input dataview (even an unshufflable one) will,
            when we construct a randomized cursor attempt to perform a rude version of shuffling
            using a pool. A pool of a given number of rows will be constructed from the first
            rows in the input cursor, and then, successively, the output cursor will yield one
            of these rows and replace it with another row from the input.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.RowShufflingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.RowShufflingTransformer"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>. This is the output from previous transform or loader.</param>
            <param name="poolRows">The pool will have this many rows</param>
            <param name="poolOnly">If true, the transform will not attempt to shuffle the input cursor but only shuffle based on the pool. This parameter has no effect if the input data was not itself shufflable.</param>
            <param name="forceShuffle">If true, the transform will always provide a shuffled view.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.RowShufflingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.RowShufflingTransformer.Options,Microsoft.ML.IDataView)">
            <summary>
            Constructor corresponding to SignatureDataTransform.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.RowShufflingTransformer.SelectCachableColumns(Microsoft.ML.IDataView,Microsoft.ML.Runtime.IHostEnvironment)">
            <summary>
            Since shuffling requires serving up items potentially out of order we need to know
            how to save and then copy out values that we read. This transform knows how to save
            and copy out only primitive and vector valued columns, but nothing else, so any
            other columns are dropped.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.RowShufflingTransformer.CanShuffleAll(Microsoft.ML.DataViewSchema)">
            <summary>
            Utility to check whether all types in an input schema are shufflable.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.RowShufflingTransformer.GetShuffledCursor(Microsoft.ML.Runtime.IChannelProvider,System.Int32,Microsoft.ML.DataViewRowCursor,System.Random)">
            <summary>
            Utility to take a cursor, and get a shuffled version of this cursor.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.RowShufflingTransformer.Cursor">
             <summary>
             This describes the row cursor. Let's imagine we instantiated our shuffle transform
             over a pool of size P. Logically, externally, the cursor acts as if you have this pool
             P and whenever you randomly sample and yield a row from it, that row is then discarded
             and replaced with the next row from the input source cursor.
            
             It would also be possible to implement in a way that cleaves closely to this logical
             interpretation, but this would be inefficient. We instead have a buffer of larger size
             P+B. A consumer (running presumably in the main thread) sampling and fetching items and a
             producer (running in a task, which may be running in a different thread) filling the buffer
             with items to sample, utilizing this extra space to enable an efficient possibly
             multithreaded scheme.
            
             The consumer, for its part, at any given time "owns" a contiguous portion of this buffer.
             (A contiguous portion of this buffer we consider to be able to wrap around, from the end
             to the beginning. The buffer is accessed in a "circular" fashion.) Consider that this portion
             is broken into three distinct regions: there is a sort of middle "sampling" region
             (usually of size P but possibly smaller when we've reached the end of the input and so are
             running out of rows to sample), a region before this sampling region composed of already
             sampled "dead" rows, and a "presampling" region after this sampling region composed of
             rows ready to be sampled in future iterations, but that we are not sampling yet (in order
             to behave equivalently to the simple logical model of at any given time sampling P items).
             The producer owns the complement of the portion owned by the consumer.
            
             As the cursor progresses, the producer fills in successive items in its portion of the
             buffer it owns, and passes them off to the consumer (not one item at a time, but rather in
             batches, to keep down the amount of intertask communication). The consumer in addition to
             taking ownership of these items, will also periodically pass dead items back to the producer
             (again, not one dead item at a time, but in batches when the number of dead items reaches
             a certain threshold).
            
             This communication is accomplished using a pair of BufferBlock instances, through which
             the producer and consumer are notified how many additional items they can take ownership
             of.
            
             As the consumer "selects" a row from the pool of selectable rows each time it moves to
             the next row, this randomly selected row is considered to be the "first" index, since this
             makes its subsequent transition to being a dead row much simpler. It would be inefficient to
             swap all the values in each column's buffer to accomplish this to make the selected row
             first, of course, so one rather swaps an index, so that these nicely behavior contiguous
             circular indices, get mapped in an index within the buffers, through a permutation maintained
             in the pipeIndices array.
            
             The result is something functionally equivalent to but but considerably faster than the
             simple implementation described in the first paragraph.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.RowShufflingTransformer.Cursor.ExtraIndex">
            <summary>
            Pipes, in addition to column values, will also communicate extra information
            enumerated within this. This enum serves the purpose of providing nice readable
            indices to these "extra" information in pipes.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.RowShufflingTransformer.Cursor.ShufflePipe">
            <summary>
            There is one of these created per active column plus any extra info, and is a mechanism
            through which the producer is able to ingest and store this data from the source cursor,
            and the consumer able to fetch data stored at particular indices.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.RowShufflingTransformer.Cursor.ShufflePipe.Create(System.Int32,Microsoft.ML.Data.DataViewType,System.Delegate)">
            <summary>
            Creates a shuffle pipe, given a value getter.
            </summary>
            <param name="bufferSize">The size of the internal array.</param>
            <param name="type">The column type, which determines what type of pipe is created</param>
            <param name="getter">A getter that should be a value getter corresponding to the
            column type</param>
            <returns>An appropriate <see cref="T:Microsoft.ML.Transforms.RowShufflingTransformer.Cursor.ShufflePipe`1"/></returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.RowShufflingTransformer.Cursor.ShufflePipe.Fill(System.Int32)">
            <summary>
            Reads the cursor column's current value, and store it in the indicated index,
            in the internal array.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.RowShufflingTransformer.Cursor.ShufflePipe`1.Fetch(System.Int32,`0@)">
            <summary>
            Copies the values stored at an index through a previous <see cref="M:Microsoft.ML.Transforms.RowShufflingTransformer.Cursor.ShufflePipe`1.Fill(System.Int32)"/> method,
            call to a value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.RowShufflingTransformer.Cursor.IsColumnActive(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns whether the given column is active in this row.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.RowShufflingTransformer.Cursor.GetGetter``1(Microsoft.ML.DataViewSchema.Column)">
            <summary>
            Returns a value getter delegate to fetch the value of column with the given columnIndex, from the row.
            This throws if the column is not active in this row, or if the type
            <typeparamref name="TValue"/> differs from this column's type.
            </summary>
            <typeparam name="TValue"> is the column's content type.</typeparam>
            <param name="column"> is the output column whose getter should be returned.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.SkipTakeFilter">
            <summary>
            Allows limiting input to a subset of row at an optional offset.  Can be used to implement data paging.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.SkipTakeFilter.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.SkipTakeFilter.SkipOptions,Microsoft.ML.IDataView)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.SkipTakeFilter"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="options">Options for the skip operation.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.SkipTakeFilter.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.SkipTakeFilter.TakeOptions,Microsoft.ML.IDataView)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.SkipTakeFilter"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="options">Options for the take operation.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.SkipTakeFilter.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext,Microsoft.ML.IDataView)">
            <summary>Creates instance of class from context.</summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.SkipTakeFilter.SaveModel(Microsoft.ML.ModelSaveContext)">
            <summary>Saves class data to context</summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.SkipTakeFilter.CanShuffle">
            <summary>
            This filter can not shuffle
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.SkipTakeFilter.GetRowCount">
            <summary>
            Returns the computed count of rows remaining after skip and take operation.
            Returns null if count is unknown.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.SkipTakeFilter.Cursor.Batch">
            <summary>
            SkipTakeFilter does not support cursor sets, so this can always be zero.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.SlotsDroppingTransformer">
            <summary>
            Transform to drop slots from columns. If the column is scalar, the only slot that can be dropped is slot 0.
            If all the slots are to be dropped, a vector valued column will be changed to a vector of length 1 (a scalar column will retain its type) and
            the value will be the default value.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.SlotsDroppingTransformer.Range.IsValid">
            <summary>
            Returns true if the range is valid.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.SlotsDroppingTransformer.ColumnOptions">
            <summary>
            Describes how the transformer handles one input-output column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.SlotsDroppingTransformer.ColumnOptions.#ctor(System.String,System.String,System.ValueTuple{System.Int32,System.Nullable{System.Int32}}[])">
            <summary>
            Describes how the transformer handles one input-output column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform.
            If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="slots">Ranges of indices in the input column to be dropped. Setting max in <paramref name="slots"/> to null sets max to int.MaxValue.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.SlotsDroppingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Initializes a new <see cref="T:Microsoft.ML.Transforms.SlotsDroppingTransformer"/> object.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="min">Specifies the lower bound of the range of slots to be dropped. The lower bound is inclusive. </param>
            <param name="max">Specifies the upper bound of the range of slots to be dropped. The upper bound is exclusive.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.SlotsDroppingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.SlotsDroppingTransformer.ColumnOptions[])">
            <summary>
            Initializes a new <see cref="T:Microsoft.ML.Transforms.SlotsDroppingTransformer"/> object.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="columns">Specifies the ranges of slots to drop for each column pair.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.SlotsDroppingTransformer.Mapper.IsValidColumnType(Microsoft.ML.Data.DataViewType)">
            <summary>
            Both scalars and vectors are acceptable types, but the item type must have a default value which means it must be
            a string, a key, a float or a double.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.SlotsDroppingTransformer.Mapper.ComputeType(Microsoft.ML.DataViewSchema,System.Int32,Microsoft.ML.Internal.Internallearn.SlotDropper,System.Boolean@,Microsoft.ML.Data.DataViewType@,System.Int32[]@)">
            <summary>
            Computes the types (column and slotnames), the length reduction, categorical feature indices
            and whether the column is suppressed.
            The slotsMin and slotsMax arrays should be sorted and the intervals should not overlap.
            </summary>
            <param name="input">The input schema</param>
            <param name="iinfo">The column index in Infos</param>
            <param name="slotDropper">The slots to be dropped.</param>
            <param name="suppressed">Whether the column is suppressed (all slots dropped)</param>
            <param name="type">The column type</param>
            <param name="categoricalRanges">Categorical feature indices.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ScoringTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,System.String,System.String,System.String)">
            <summary>
            Convenience method for creating <see cref="T:Microsoft.ML.Transforms.ScoringTransformer"/>.
            The <see cref="T:Microsoft.ML.Transforms.ScoringTransformer"/> allows for model stacking (i.e. to combine information from multiple predictive models to generate a new model)
            in the pipeline by using the scores from an already trained model.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>.</param>
            <param name="inputModelFile">The model file.</param>
            <param name="featureColumn">Role name for the features.</param>
            <param name="groupColumn">Role name for the group column.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TrainAndScoreTransformer.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,Microsoft.ML.ITrainer,System.String,System.String,System.String)">
             <summary>
             Convenience method for creating <see cref="T:Microsoft.ML.Transforms.TrainAndScoreTransformer"/>.
             The <see cref="T:Microsoft.ML.Transforms.TrainAndScoreTransformer"/> allows for model stacking (i.e. to combine information from multiple predictive models to generate a new model)
             in the pipeline by training a model first and then using the scores from the trained model.
            
             Unlike <see cref="T:Microsoft.ML.Transforms.ScoringTransformer"/>, the <see cref="T:Microsoft.ML.Transforms.TrainAndScoreTransformer"/> trains the model on the fly as name indicates.
             </summary>
             <param name="env">Host Environment.</param>
             <param name="input">Input <see cref="T:Microsoft.ML.IDataView"/>.</param>
             <param name="trainer">The <see cref="T:Microsoft.ML.ITrainer"/> object i.e. the learning algorithm that will be used for training the model.</param>
             <param name="featureColumn">Role name for features.</param>
             <param name="labelColumn">Role name for label.</param>
             <param name="groupColumn">Role name for the group column.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.TransformInputBase">
            <summary>
            The base class for all transform inputs.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TransformInputBase.Data">
            <summary>
            The input dataset. Used only in entry-point methods, since the normal API mechanism for feeding in a dataset to
            create an <see cref="T:Microsoft.ML.ITransformer"/> is to use the <see cref="M:Microsoft.ML.IEstimator`1.Fit(Microsoft.ML.IDataView)"/> method.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TypeConvertingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.TypeConvertingEstimator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.TypeConvertingTransformer.Columns">
            <summary>
            A collection of <see cref="T:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions"/> describing the settings of the transformation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TypeConvertingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.Data.DataKind,System.String,Microsoft.ML.Data.KeyCount)">
            <summary>
            Convinence constructor for simple one column case.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the output column.</param>
            <param name="inputColumnName">Name of the column to be transformed. If this is null '<paramref name="outputColumnName"/>' will be used.</param>
            <param name="outputKind">The expected type of the converted column.</param>
            <param name="outputKeyCount">New key count if we work with key type.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TypeConvertingTransformer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.TypeConvertingTransformer"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.TypeConvertingEstimator">
             <summary>
             Estimator for <see cref="T:Microsoft.ML.Transforms.TypeConvertingTransformer"/>. Converts the underlying input column type to a new type.
             The input and output column types need to be compatible.
             <see cref="T:Microsoft.ML.Data.PrimitiveDataViewType"/>
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Vector or primitive numeric, boolean, [text](xref:Microsoft.ML.Data.TextDataViewType), [System.DateTime](xref:System.DateTime) and [key](xref:Microsoft.ML.Data.KeyDataViewType) type. |
             | Output column data type | Vector or primitive numeric, boolean, [text](xref:Microsoft.ML.Data.TextDataViewType), [System.DateTime](xref:System.DateTime) and [key](xref:Microsoft.ML.Data.KeyDataViewType) type. |
             | Exportable to ONNX | Yes |
            
             Check the See Also section for links to usage examples.
             ]]></format>
             </remarks>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.ConvertType(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[],Microsoft.ML.Data.DataKind)"/>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.ConvertType(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String,Microsoft.ML.Data.DataKind)"/>
        </member>
        <member name="T:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions.Name">
            <summary>
            Name of the column resulting from the transformation of <see cref="F:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions.InputColumnName"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions.InputColumnName">
            <summary>
            Name of column to transform. If set to <see langword="null"/>, the value of the <see cref="F:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions.Name"/> will be used as source.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions.OutputKind">
            <summary>
            The expected kind of the converted column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions.OutputKeyCount">
            <summary>
            New key count, if we work with key type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions.#ctor(System.String,Microsoft.ML.Data.DataKind,System.String,Microsoft.ML.Data.KeyCount)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="outputKind">The expected kind of the converted column.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="outputKeyCount">New key count, if we work with key type.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions.#ctor(System.String,System.Type,System.String,Microsoft.ML.Data.KeyCount)">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
            <param name="name">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="type">The expected kind of the converted column.</param>
            <param name="inputColumnName">Name of column to transform. If set to <see langword="null"/>, the value of the <paramref name="name"/> will be used as source.</param>
            <param name="outputKeyCount">New key count, if we work with key type.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TypeConvertingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Data.DataKind)">
            <summary>
            Convinence constructor for simple one column case.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="outputKind">The expected kind of the converted column.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.TypeConvertingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.TypeConvertingEstimator"/> that takes multiple pairs of columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.TypeConvertingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueMappingEstimator">
             <summary>
             Estimator for <see cref="T:Microsoft.ML.Transforms.ValueMappingTransformer"/> creating a key-value map using the pairs of values in the input data
             <see cref="T:Microsoft.ML.Data.PrimitiveDataViewType"/>
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Vector or primitive numeric, boolean, text, [System.DateTime](xref:System.DateTime) and [key](xref:Microsoft.ML.Data.KeyDataViewType) type. |
             | Output column data type | Vector or primitive numeric, boolean, text, [System.DateTime](xref:System.DateTime) and [key](xref:Microsoft.ML.Data.KeyDataViewType) type. |
             | Exportable to ONNX | No |
            
             Given two sets of values, one serving as the key, and the other as the value of a Dictionary, the ValueMappingEstimator builds up this dictionary so that when given a specific key it will return a
             specific value.The ValueMappingEstimator supports keys and values of different [System.Type](xref:System.Type) to support different data types.
             Examples for using a ValueMappingEstimator are:
             * Converting a string value to a string value, this can be useful for grouping (i.e. 'cat', 'dog', 'horse' maps to 'mammals').
             * Converting a string value to a integer value (i.e. converting the text description like quality to an numeric where 'good' maps to 1, 'poor' maps to 0.
             * Converting a integer value to a string value and have the string value represented as a [key](xref:Microsoft.ML.Data.KeyDataViewType) type.
             (i.e. convert zip codes to a state string value, which will generate a unique integer value that can be used as a label.
            
             Values can be repeated to allow for multiple keys to map to the same value, however keys can not be repeated. The mapping between keys and values
             can be specified either through lists, where the key list and value list must be the same size or can be done through an [System.IDataView](xref:Microsoft.ML.IDataView).
            
             Check the See Also section for links to usage examples.
             ]]></format>
             </remarks>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,Microsoft.ML.IDataView,Microsoft.ML.DataViewSchema.Column,Microsoft.ML.DataViewSchema.Column,System.String)"/>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueMappingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,Microsoft.ML.DataViewSchema.Column,Microsoft.ML.DataViewSchema.Column,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Constructs the ValueMappingEstimator, key type -> value type mapping
            </summary>
            <param name="env">The environment to use.</param>
            <param name="lookupMap">An instance of <see cref="T:Microsoft.ML.IDataView"/> that contains the key and value columns.</param>
            <param name="keyColumn">Name of the key column in <paramref name="lookupMap"/>.</param>
            <param name="valueColumn">Name of the value column in <paramref name="lookupMap"/>.</param>
            <param name="columns">The list of names of the input columns to apply the transformation, and the name of the resulting column.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueMappingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueMappingEstimator`2">
             <summary>
             Estimator for <see cref="T:Microsoft.ML.Transforms.ValueMappingTransformer"/> creating a key-value map using the pairs of values in the input data
             <see cref="T:Microsoft.ML.Data.PrimitiveDataViewType"/>
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | No |
             | Input column data type | Vector or primitive numeric, boolean, text, [System.DateTime](xref:System.DateTime) and [key](xref:Microsoft.ML.Data.KeyDataViewType) type.|
             | Output column data type | Vector or primitive numeric, boolean, text, [System.DateTime](xref:System.DateTime) and [key](xref:Microsoft.ML.Data.KeyDataViewType) type.|
             | Exportable to ONNX | No |
            
             Given two sets of values, one serving as the key, and the other as the value of a Dictionary, the ValueMappingEstimator builds up this dictionary so that when given a specific key it will return a
             specific value.The ValueMappingEstimator supports keys and values of different [System.Type](xref:System.Type) to support different data types.
             Examples for using a ValueMappingEstimator are:
             * Converting a string value to a string value, this can be useful for grouping (i.e. 'cat', 'dog', 'horse' maps to 'mammals').
             * Converting a string value to a integer value (i.e. converting the text description like quality to an numeric where 'good' maps to 1, 'poor' maps to 0.
             * Converting a integer value to a string value and have the string value represented as a [key](xref:Microsoft.ML.Data.KeyDataViewType) type.
             (i.e. convert zip codes to a state string value, which will generate a unique integer value that can be used as a label.
            
             Values can be repeated to allow for multiple keys to map to the same value, however keys can not be repeated. The mapping between keys and values
             can be specified either through lists, where the key list and value list must be the same size or can be done through an [System.IDataView](xref:Microsoft.ML.IDataView).
            
             Check the See Also section for links to usage examples.
             ]]></format>
             </remarks>
             <typeparam name="TKey">Specifies the key type.</typeparam>
             <typeparam name="TValue">Specifies the value type.</typeparam>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue``2(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.String,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueMappingEstimator`2.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.IDataView,Microsoft.ML.DataViewSchema.Column,Microsoft.ML.DataViewSchema.Column,System.ValueTuple{System.String,System.String}[])">
            <summary>
            Constructs the ValueMappingEstimator, key type -> value array type mapping
            </summary>
            <param name="env">The environment to use.</param>
            <param name="lookupMap">A <see cref="T:Microsoft.ML.IDataView"/> containing key column and value column.</param>
            <param name="keyColumn">The key column in <paramref name="lookupMap"/>.</param>
            <param name="valueColumn">The value column in <paramref name="lookupMap"/>.</param>
            <param name="columns">The list of columns to apply.</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.DataViewHelper">
            <summary>
            The DataViewHelper provides a set of static functions to create a DataView given a list of keys and values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.DataViewHelper.GetPrimitiveType(System.Type,System.Boolean@)">
            <summary>
            Helper function to retrieve the Primitive type given a Type
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.DataViewHelper.GetKeyValueGetter``1(``0[])">
            <summary>
            Helper function for a reverse lookup given value. This is used for generating the metadata of the value column.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.DataViewHelper.AddColumnWrapper``1(Microsoft.ML.Data.ArrayDataViewBuilder,System.String,Microsoft.ML.Data.PrimitiveDataViewType,``0[])">
            <summary>
            Helper function to add a column to an ArrayDataViewBuilder. This handles the case if the type is a string.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.DataViewHelper.AddColumnWrapper``1(Microsoft.ML.Data.ArrayDataViewBuilder,System.String,Microsoft.ML.Data.PrimitiveDataViewType,``0[][])">
            <summary>
            Helper function to add a column to an ArrayDataViewBuilder. This handles the case if the type is an array of strings.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.DataViewHelper.CreateDataView``2(Microsoft.ML.Runtime.IHostEnvironment,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1[]},System.String,System.String)">
            <summary>
            Helper function to create an IDataView given a list of key and vector-based values
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.DataViewHelper.CreateDataView``2(Microsoft.ML.Runtime.IHostEnvironment,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.String,System.String,System.Boolean)">
            <summary>
            Helper function that builds the IDataView given a list of keys and non-vector values
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueMappingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.ValueMappingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueMappingTransformer.CheckModelVersion(Microsoft.ML.ModelLoadContext,Microsoft.ML.VersionInfo)">
            <summary>
            Helper function to determine the model version that is being loaded.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueMappingTransformer.ValueMap">
            <summary>
            Base class that contains the mapping of keys to values.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueMappingTransformer.ValueMap`2">
            <summary>
            Implementation mapping class that maps a key of TKey to a specified value of TValue.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueMappingTransformer.ValueMap`2.Train(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.DataViewRowCursor)">
            <summary>
            Generates the mapping based on the IDataView
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueMappingTransformer.GetBytesFromDataView(Microsoft.ML.Runtime.IHost,Microsoft.ML.IDataView,System.String,System.String)">
            <summary>
            Retrieves the byte array given a dataview and columns
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingEstimator">
             <summary>
             <see cref="T:Microsoft.ML.IEstimator`1"/> for the
             <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer"/>. Converts a set of categorical
             values (for example, US state abbreviations) into numerical key values (e.g. 1-50).
             The numerical key can be used directly by classification algorithms.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
            
             ###  Estimator Characteristics
             |  |  |
             | -- | -- |
             | Does this estimator need to look at the data to train its parameters? | Yes |
             | Input column data type | Scalar or vector of numeric, boolean, [text](xref:Microsoft.ML.Data.TextDataViewType), [System.DateTime](xref:System.DateTime) and [key](xref:Microsoft.ML.Data.KeyDataViewType) type. |
             | Output column data type | Scalar or vector of [key](xref:Microsoft.ML.Data.KeyDataViewType) type. |
             | Exportable to ONNX | Yes |
            
             The ValueToKeyMappingEstimator maps the input values to keys using a
             dictionary that is built during training. The dictionary mapping values to
             keys is most commonly learnt from the unique values in input data,
             but can be pre-defined.
             The key value is the one-based index of the item in the dictionary.
             If the key is not found in the dictionary, it is assigned the missing value
             indicator.
             If multiple columns are used, each column builds exactly one dictionary.
             The dictionary data is stored as an annotation in the schema, to enable
             the reverse mapping to occur using [KeyToValueMappingEstimator](xref:Microsoft.ML.Transforms.KeyToValueMappingEstimator)
            
             Check the See Also section for links to usage examples.
             ]]></format>
             </remarks>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValueToKey(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[],System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,System.Boolean,Microsoft.ML.IDataView)"/>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValueToKey(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String,System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,System.Boolean,Microsoft.ML.IDataView)"/>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValueToKey(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[],System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,System.Boolean,Microsoft.ML.IDataView)"/>
             <seealso cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValueToKey(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String,System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,System.Boolean,Microsoft.ML.IDataView)"/>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality">
            <summary>
            Controls how the order of the output keys.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence">
            <summary>
            Values will be assigned keys in the order in which they appear.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue">
            <summary>
            Values will be assigned keys according to their sort via an ordinal comparison for the type.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.ColumnOptionsBase">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.ColumnOptions">
            <summary>
            Describes how the transformer handles one column pair.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.ColumnOptions.#ctor(System.String,System.String,System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,System.Boolean)">
            <summary>
            Describes how the transformer handles column pairs.
            </summary>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="maximumNumberOfKeys">Maximum number of keys to keep per column when auto-training.</param>
            <param name="keyOrdinality">The order in which keys are assigned.
            If set to <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence"/>, keys are assigned in the order encountered.
            If set to <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue"/>, values are sorted, and keys are assigned based on the sort order.</param>
            <param name="addKeyValueAnnotationsAsText">If set to true, use text type
            for values, regardless of the actual input type. When doing the reverse
            mapping, the values are text rather than the original input type.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingEstimator"/>.
            </summary>
            <param name="env">Host Environment.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
            <param name="maximumNumberOfKeys">Maximum number of keys to keep per column when auto-training.</param>
            <param name="keyOrdinality">The order in which keys are assigned.
            If set to <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence"/>, keys are assigned in the order encountered.
            If set to <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue"/>, values are sorted, and keys are assigned based on the sort order.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer">
            <summary>
            <see cref="T:Microsoft.ML.ITransformer"/> resulting from fitting a <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingEstimator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.GetKeyDataViewOrNull(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,System.String,System.String,Microsoft.ML.Runtime.IComponentFactory{Microsoft.ML.Data.IMultiStreamSource,Microsoft.ML.Data.ILegacyDataLoader},System.Boolean@)">
            <summary>
            Returns a single-column <see cref="T:Microsoft.ML.IDataView"/>, based on values from <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Options"/>,
            in the case where <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.OptionsBase.DataFile"/> is set. If that is not set, this will
            return <see langword="null"/>.
            </summary>
            <param name="env">The host environment.</param>
            <param name="ch">The host channel to use to mark exceptions and log messages.</param>
            <param name="file">The name of the file. Must be specified if this method is called.</param>
            <param name="termsColumn">The single column to select out of this transform. If not specified,
            this method will attempt to guess.</param>
            <param name="loaderFactory">The loader creator. If <see langword="null"/> we will attempt to determine
            this </param>
            <param name="autoConvert">Whether we should try to convert to the desired type by ourselves when doing
            the term map. This will not be true in the case that the loader was adequately specified automatically.</param>
            <returns>The single-column data containing the term data from the file.</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.CreateTermMapFromData(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.IDataView,System.Boolean,Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder)">
            <summary>
            Utility method to create the file-based <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Train(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Runtime.IChannel,Microsoft.ML.Transforms.ValueToKeyMappingTransformer.ColInfo[],Microsoft.ML.IDataView,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.ColumnOptionsBase[],Microsoft.ML.IDataView,System.Boolean)">
            <summary>
            This builds the <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap"/> instances per column.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder">
            <summary>
            These are objects shared by both the scalar and vector implementations of <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Trainer"/>
            to accumulate individual scalar objects, and facilitate the creation of a <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder.ItemType">
            <summary>
            The item type we are building into a term map.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder.Count">
            <summary>
            The number of items that would be in the map if created right now.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder.Finish">
            <summary>
            Called at the end of training, to get the final mapper object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder.ParseAddTermArg(System.ReadOnlyMemory{System.Char}@,Microsoft.ML.Runtime.IChannel)">
            <summary>
            Handling for the "terms" arg.
            </summary>
            <param name="terms">The input terms argument</param>
            <param name="ch">The channel against which to report errors and warnings</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder.ParseAddTermArg(System.String[],Microsoft.ML.Runtime.IChannel)">
            <summary>
            Handling for the "term" arg.
            </summary>
            <param name="terms">The input terms argument</param>
            <param name="ch">The channel against which to report errors and warnings</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder.Impl`1">
            <summary>
            The sorted builder outputs things so that the keys are in sorted order.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder.Impl`1.#ctor(Microsoft.ML.Data.PrimitiveDataViewType,Microsoft.ML.Data.InPredicate{`0},System.Boolean)">
            <summary>
            Instantiates.
            </summary>
            <param name="type">The type we are mapping</param>
            <param name="mapsToMissing">This indicates whether a given value will map
            to the missing value. If this returns true for a value then we do not attempt
            to store it in the map.</param>
            <param name="sort">Indicates whether to sort mapping IDs by input values.</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder`1.TryAdd(`0@)">
            <summary>
            Ensures that the item is in the set. Returns true iff it added the item.
            </summary>
            <param name="val">The value to consider</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder`1.ParseAddTermArg(System.ReadOnlyMemory{System.Char}@,Microsoft.ML.Runtime.IChannel)">
            <summary>
            Handling for the "terms" arg.
            </summary>
            <param name="terms">The input terms argument</param>
            <param name="ch">The channel against which to report errors and warnings</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder`1.ParseAddTermArg(System.String[],Microsoft.ML.Runtime.IChannel)">
            <summary>
            Handling for the "term" arg.
            </summary>
            <param name="terms">The input terms argument</param>
            <param name="ch">The channel against which to report errors and warnings</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Trainer">
            <summary>
            The trainer is an object that given an <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder"/> instance, maps a particular
            input, whether it be scalar or vector, into this and allows us to continue training on it.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Trainer.Create(Microsoft.ML.DataViewRow,System.Int32,System.Boolean,System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Trainer"/> appropriate for the type at a given
            row and column.
            </summary>
            <param name="row">The row to fetch from</param>
            <param name="col">The column to get the getter from</param>
            <param name="count">The maximum count of items to map</param>
            <param name="autoConvert">Whether we attempt to automatically convert
            the input type to the desired type</param>
            <param name="bldr">The builder we add items to</param>
            <returns>An associated training pipe</returns>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Trainer.ProcessRow">
            <summary>
            Indicates to the <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Trainer"/> that we have reached a new row and should consider
            what to do with these values. Returns false if we have determined that it is no longer necessary
            to call this train, because we've already accumulated the maximum number of values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Trainer.Finish">
            <summary>
            Returns a <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap"/> over the items in this column. Note that even if this
            was trained over a vector valued column, the particular implementation returned here
            should be a mapper over the item type.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Bind(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.DataViewSchema,Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap,Microsoft.ML.Transforms.ValueToKeyMappingTransformer.ColInfo[],System.Boolean[],System.Int32)">
            <summary>
            Given this instance, bind it to a particular input column. This allows us to service
            requests on the input dataset. This should throw an error if we attempt to bind this
            to the wrong type of item.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap">
             <summary>
             A map is an object capable of creating the association from an input type, to an output
             type. The input type, whatever it is, must have <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap.ItemType"/> as its input item
             type, and will produce either <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap.OutputType"/>, or a vector type with that output
             type if the input was a vector.
            
             Note that instances of this class can be shared among multiple <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer"/>
             instances. To associate this with a particular transform, use the <see cref="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Bind(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.DataViewSchema,Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap,Microsoft.ML.Transforms.ValueToKeyMappingTransformer.ColInfo[],System.Boolean[],System.Int32)"/> method.
            
             These are the immutable and serializable analogs to the <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.Builder"/> used in
             training.
             </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap.ItemType">
            <summary>
            The item type of the input type, that is, either the input type or,
            if a vector, the item type of that type.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap.OutputType">
            <summary>
            The output item type. This will always be of known cardinality. Its count is always
            equal to <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap.Count"/>, unless <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap.Count"/> is 0 in which case this has
            key count of 1, since a count of 0 would indicate an unbound key. If we ever improve
            key types so they are capable of distinguishing between the set they index being
            empty vs. of unknown or unbound cardinality, this should change.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap.Count">
            <summary>
            The number of items in the map.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap.TextImpl.#ctor(Microsoft.ML.Internal.Utilities.NormStr.Pool)">
            <summary>
            A pool based text mapping implementation.
            </summary>
            <param name="pool">The string pool</param>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.BoundTermMap">
            <summary>
            A mapper bound to a particular transform, and a particular column. These wrap
            a <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap"/>, and facilitate mapping that object to the inputs of
            a particular column, providing both values and metadata.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.BoundTermMap.AddMetadata(Microsoft.ML.DataViewSchema.Annotations.Builder)">
            <summary>
            Allows us to optionally register metadata. It is also perfectly legal for
            this to do nothing, which corresponds to there being no metadata.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.BoundTermMap.WriteTextTerms(System.IO.TextWriter)">
            <summary>
            Writes out all terms we map to a text writer, with one line per mapped term.
            The line should have the format mapped key value, then a tab, then the term
            that is mapped. The writer should not be closed, as it will be used to write
            all term maps. We should write <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.TermMap.Count"/> terms.
            </summary>
            <param name="writer">The writer to which we write terms</param>
        </member>
        <member name="M:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.BoundTermMap.Base`1.MapDefault(Microsoft.ML.Data.ValueMapper{`0,System.UInt32})">
            <summary>
            Returns what the default value maps to.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.BoundTermMap.KeyImpl`1">
            <summary>
            The key-typed version is the same as <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingTransformer.BoundTermMap.Impl`1"/>, except the metadata
            is based off a subset of the key values metadata.
            </summary>
        </member>
        <member name="T:Microsoft.ML.ConversionsExtensionsCatalog">
            <summary>
            Collection of extension methods for <see cref="T:Microsoft.ML.TransformsCatalog"/> to create instances of data conversion and mapping transformer components.
            </summary>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.Hash(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.HashingEstimator"/>, which hashes the data from the column specified in <paramref name="inputColumnName"/>
            to a new column: <paramref name="outputColumnName"/>.
            </summary>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            This column's data type will be a vector of keys, or a scalar of key based on whether the input column data types
            are vectors or scalars.</param>
            <param name="inputColumnName">Name of the column whose data will be hashed.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            This estimator operates over vectors or scalars of text, numeric, boolean, key or <see cref="T:Microsoft.ML.Data.DataViewRowId"/> data types. </param>
            <param name="numberOfBits">Number of bits to hash into. Must be between 1 and 31, inclusive.</param>
            <param name="maximumNumberOfInverts">During hashing we construct mappings between original values and the produced hash values.
            Text representation of original values are stored in the slot names of the annotations for the new column.Hashing, as such, can map many initial values to one.
            <paramref name="maximumNumberOfInverts"/>Specifies the upper bound of the number of distinct input values mapping to a hash that should be retained.
            <value>0</value> does not retain any input values. <value>-1</value> retains all input values mapping to each hash.</param>
             <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[Hash](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/Hash.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.Hash(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.Transforms.HashingEstimator.ColumnOptions[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.HashingEstimator"/>, which hashes the input column's data type <see cref="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.InputColumnName" />
            to a new column: <see cref="P:Microsoft.ML.Transforms.HashingEstimator.ColumnOptions.Name" />.
            </summary>
            <remarks>This transform can operate over several columns.</remarks>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns">Advanced options for the estimator that also contain the input and output column names.
            This estimator operates over text, numeric, boolean, key and <see cref="T:Microsoft.ML.Data.DataViewRowId"/> data types.
            The new column's data type will be a vector of <see cref="T:System.UInt32"/>, or a <see cref="T:System.UInt32"/> based on whether the input column data types
            are vectors or scalars.</param>
             <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[Hash](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/HashWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.ConvertType(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String,Microsoft.ML.Data.DataKind)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.TypeConvertingEstimator"/>, which converts the type of the data to the type specified in <paramref name="outputKind"/>.
            </summary>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            This transform operates over numeric, boolean, text, <see cref="T:System.DateTime"/> and key data types.</param>
            <param name="outputKind">The expected kind of the output column.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[ConvertType](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/ConvertType.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.ConvertType(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[],Microsoft.ML.Data.DataKind)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.TypeConvertingEstimator"/>, which converts the type of the data to the type specified in <paramref name="outputKind"/>.
            </summary>
            <remarks>This transform can operate over several columns.</remarks>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="columns">The input and output columns.
            This transform operates over numeric, boolean, text, <see cref="T:System.DateTime"/> and key data types.</param>
            <param name="outputKind">The expected kind of the output column.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[ConvertType](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/ConvertTypeMultiColumn.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.ConvertType(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.TypeConvertingEstimator"/>, which converts the type of the data in the <see cref="F:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions.InputColumnName"/>
            to the type specified in the <see cref="F:Microsoft.ML.Transforms.TypeConvertingEstimator.ColumnOptions.OutputKind"/>
            </summary>
            <remarks>This transform can operate over several columns.</remarks>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="columns">The input and output columns.
            This transform operates over numeric, boolean, text, <see cref="T:System.DateTime"/> and keys.</param>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapKeyToValue(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.KeyToValueMappingEstimator"/>, which converts the key types back to their original values.
            </summary>
            <remarks>This transform often is in the pipeline after one of the overloads of
            <see cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValueToKey(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[],System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,System.Boolean,Microsoft.ML.IDataView)"/></remarks>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            Its type will be the original value's type.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            This transform operates over keys.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[MapKeyToValue](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/KeyToValueToKey.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapKeyToValue(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.KeyToValueMappingEstimator"/>, which converts the key types back to their original values.
            </summary>
            <remarks>This transform can operate over several columns.
            This transform often is in the pipeline after one of the overloads of
            <see cref="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValueToKey(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[],System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,System.Boolean,Microsoft.ML.IDataView)"/></remarks>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="columns">The input and output columns.
            This transform operates over keys.
            The new column's data type will be the original value's type.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[MapKeyToValue](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/MapKeyToValueMultiColumn.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapKeyToVector(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.Transforms.KeyToVectorMappingEstimator.ColumnOptions[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.KeyToVectorMappingEstimator"/>, which maps the value of a key into a floating point vector representing the value.
            </summary>
            <remarks>This transform can operate over several columns.</remarks>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="columns">The input and output columns.</param>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapKeyToVector(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.KeyToVectorMappingEstimator"/>, which maps the value of a key into a floating point vector representing the value.
            </summary>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The data type is a vector of <see cref="T:System.Single"/> representing the input value.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            This transform operates over keys.</param>
            <param name="outputCountVector">Whether to combine multiple indicator vectors into a single vector of counts instead of concatenating them.
            This is only relevant when the input column is a vector of keys.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[MapKeyToVector](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/MapKeyToVector.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapKeyToVector(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[],System.Boolean)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.KeyToVectorMappingEstimator"/>, which maps the value of a key into a floating point vector representing the value.
            </summary>
            <remarks>This transform can operate over several columns of keys.</remarks>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="columns">The input and output columns.
            The new column's data type is a vector of <see cref="T:System.Single"/> representing the original value.</param>
            <param name="outputCountVector">Whether to combine multiple indicator vectors into a single vector of counts instead of concatenating them.
            This is only relevant when the input column is a vector of keys.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[MapKeyToVector](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/MapKeyToVectorMultiColumn.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValueToKey(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.String,System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,System.Boolean,Microsoft.ML.IDataView)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingEstimator"/>, which converts categorical values into numerical keys.
            </summary>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="outputColumnName">Name of the column containing the keys.</param>
            <param name="inputColumnName">Name of the column containing the categorical values. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> is used.
            The input data types can be numeric, text, boolean, <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/>.
            </param>
            <param name="maximumNumberOfKeys">Maximum number of keys to keep per column when training.</param>
            <param name="keyOrdinality">The order in which keys are assigned.
            If set to <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence"/>, keys are assigned in the order encountered.
            If set to <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue"/>, values are sorted, and keys are assigned based on the sort order.</param>
            <param name="addKeyValueAnnotationsAsText">If set to true, use text type
            for values, regardless of the actual input type. When doing the reverse
            mapping, the values are text rather than the original input type.</param>
            <param name="keyData">Use a pre-defined mapping between values and keys, instead of building
            the mapping from the input data during training. If specified, this should be a single column <see cref="T:Microsoft.ML.IDataView"/> containing the values.
            The keys are allocated based on the value of keyOrdinality.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[MapValueToKey](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/KeyToValueToKey.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValueToKey(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.InputOutputColumnPair[],System.Int32,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality,System.Boolean,Microsoft.ML.IDataView)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingEstimator"/>, which converts categorical values into keys.
            </summary>
            <remarks>This transform can operate over multiple pairs of columns, creating a mapping for each pair.</remarks>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="columns">The input and output columns.
            The input data types can be numeric, text, boolean, <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/>.
            </param>
            <param name="maximumNumberOfKeys">Maximum number of keys to keep per column when training.</param>
            <param name="keyOrdinality">The order in which keys are assigned.
            If set to <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence"/>, keys are assigned in the order encountered.
            If set to <see cref="F:Microsoft.ML.Transforms.ValueToKeyMappingEstimator.KeyOrdinality.ByValue"/>, values are sorted, and keys are assigned based on the sort order.</param>
            <param name="addKeyValueAnnotationsAsText">If set to true, use text type
            for values, regardless of the actual input type. When doing the reverse
            mapping, the values are text rather than the original input type.</param>
            <param name="keyData">Use a pre-defined mapping between values and keys, instead of building
            the mapping from the input data during training. If specified, this should be a single column <see cref="T:Microsoft.ML.IDataView"/> containing the values.
            The keys are allocated based on the value of keyOrdinality.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[MapValueToKey](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/MapValueToKeyMultiColumn.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValueToKey(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.Transforms.ValueToKeyMappingEstimator.ColumnOptions[],Microsoft.ML.IDataView)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ValueToKeyMappingEstimator"/>, which converts value types into keys, optionally loading the keys to use from <paramref name="keyData"/>.
            </summary>
            <remarks>This transform can operate over several columns.</remarks>
            <param name="catalog">The conversion transform's catalog.</param>
            <param name="columns">The input and output columns.
            The input data types can be numeric, text, boolean, <see cref="T:System.DateTime"/> or <see cref="T:System.DateTimeOffset"/>.
            </param>
            <param name="keyData">The data view containing the terms. If specified, this should be a single column data
            view, and the key-values will be taken from that column. If unspecified, the key-values will be determined
            from the input data upon fitting.</param>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue``2(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ValueMappingEstimator"/>, which converts value types into keys, loading the keys to use from <paramref name="keyValuePairs"/>.
            </summary>
            <typeparam name="TInputType">The key type.</typeparam>
            <typeparam name="TOutputType">The value type.</typeparam>
            <param name="catalog">The conversion transform's catalog</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The output data types can be primitives or vectors of numeric, text, boolean, <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/> or <see cref="T:Microsoft.ML.Data.DataViewRowId"/> types.</param>
            <param name="keyValuePairs">Specifies the mapping that will be performed. The keys will be mapped to the values as specified in the <paramref name="keyValuePairs"/>.</param>
            <param name="inputColumnName">Name of the column to transform.
            If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            The input data types can be primitives or vectors of numeric, text, boolean, <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/> or <see cref="T:Microsoft.ML.Data.DataViewRowId"/> types.
            </param>
            <param name="treatValuesAsKeyType">Whether to treat the values as a key.</param>
            <returns>An instance of the <see cref="T:Microsoft.ML.Transforms.ValueMappingEstimator"/></returns>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[MapValue](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/MapValue.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue``2(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},Microsoft.ML.InputOutputColumnPair[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ValueMappingEstimator"/>, which converts value types into keys, loading the keys to use from <paramref name="keyValuePairs"/>.
            </summary>
            <remarks>This transform can operate over several columns.</remarks>
            <typeparam name="TInputType">The key type.</typeparam>
            <typeparam name="TOutputType">The value type.</typeparam>
            <param name="catalog">The conversion transform's catalog</param>
            <param name="keyValuePairs">Specifies the mapping that will be performed. The keys will be mapped to the values as specified in the <paramref name="keyValuePairs"/>.</param>
            <param name="columns">The input and output columns.
            The data types can be primitives or vectors of numeric, text, boolean, <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/> or <see cref="T:Microsoft.ML.Data.DataViewRowId"/> types.
            </param>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue``2(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Boolean,Microsoft.ML.InputOutputColumnPair[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ValueMappingEstimator"/>, which converts value types into keys, loading the keys to use from <paramref name="keyValuePairs"/>.
            </summary>
            <remarks>This transform can operate over several columns.</remarks>
            <typeparam name="TInputType">The key type.</typeparam>
            <typeparam name="TOutputType">The value type.</typeparam>
            <param name="catalog">The conversion transform's catalog</param>
            <param name="keyValuePairs">Specifies the mapping that will be performed. The keys will be mapped to the values as specified in the <paramref name="keyValuePairs"/>.</param>
            <param name="treatValuesAsKeyType">Whether to treat the values as a keys.</param>
            <param name="columns">The input and output columns.
            The data types can be primitives or vectors of numeric, text, boolean, <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/> or <see cref="T:Microsoft.ML.Data.DataViewRowId"/> types.
            </param>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue``2(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1[]}},System.String)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ValueMappingEstimator"/>, which converts value types into keys, loading the keys to use from <paramref name="keyValuePairs"/>.
            </summary>
            <typeparam name="TInputType">The key type.</typeparam>
            <typeparam name="TOutputType">The value type.</typeparam>
            <param name="catalog">The conversion transform's catalog</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The data types can be primitives or vectors of numeric, text, boolean, <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/> or <see cref="T:Microsoft.ML.Data.DataViewRowId"/> types,
            as specified in the <typeparamref name="TOutputType"/>.</param>
            <param name="keyValuePairs">Specifies the mapping that will be performed. The keys will be mapped to the values as specified in the <paramref name="keyValuePairs"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            The data types can be primitives or vectors of numeric, text, boolean, <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/> or <see cref="T:Microsoft.ML.Data.DataViewRowId"/> types,
            as specified in the <typeparamref name="TInputType"/>.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[MapValue](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/MapValueToArray.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue``2(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1[]}},Microsoft.ML.InputOutputColumnPair[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ValueMappingEstimator"/>, which converts value types into keys, loading the keys to use from <paramref name="keyValuePairs"/>.
            </summary>
            <remarks>This transform can operate over several columns.</remarks>
            <typeparam name="TInputType">The key type.</typeparam>
            <typeparam name="TOutputType">The value type.</typeparam>
            <param name="catalog">The conversion transform's catalog</param>
            <param name="keyValuePairs">Specifies the mapping that will be performed. The keys will be mapped to the values as specified in the <paramref name="keyValuePairs"/>.</param>
            <param name="columns">The input and output columns. The data types can be primitives or vectors of numeric, text, boolean, <see cref="T:System.DateTime"/>,
            <see cref="T:System.DateTimeOffset"/> or <see cref="T:Microsoft.ML.Data.DataViewRowId"/> types, as specified in the <typeparamref name="TInputType"/> and <typeparamref name="TOutputType"/>.</param>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue(Microsoft.ML.TransformsCatalog.ConversionTransforms,System.String,Microsoft.ML.IDataView,Microsoft.ML.DataViewSchema.Column,Microsoft.ML.DataViewSchema.Column,System.String)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ValueMappingEstimator"/>, which converts value types into keys, loading the keys to use from the <paramref name="lookupMap"/> where the <paramref name="keyColumn"/>
            specifies the keys, and the <paramref name="valueColumn"/> the respective value.
            </summary>
            <param name="catalog">The conversion transform's catalog</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            The data types can be primitives or vectors of numeric, text, boolean, <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/>
            or <see cref="T:Microsoft.ML.Data.DataViewRowId"/> types.</param>
            <param name="lookupMap">An instance of <see cref="T:Microsoft.ML.IDataView"/> that contains the <paramref name="keyColumn"/> and <paramref name="valueColumn"/> columns.</param>
            <param name="keyColumn">The key column in <paramref name="lookupMap"/>.</param>
            <param name="valueColumn">The value column in <paramref name="lookupMap"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.
            The data types can be primitives or vectors of numeric, text, boolean, <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/>
            or <see cref="T:Microsoft.ML.Data.DataViewRowId"/> types.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[MapValue](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Conversion/MapValueIdvLookup.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ConversionsExtensionsCatalog.MapValue(Microsoft.ML.TransformsCatalog.ConversionTransforms,Microsoft.ML.IDataView,Microsoft.ML.DataViewSchema.Column,Microsoft.ML.DataViewSchema.Column,Microsoft.ML.InputOutputColumnPair[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ValueMappingEstimator"/>, which converts value types into keys,
            loading the keys to use from the <paramref name="lookupMap"/> where the <paramref name="keyColumn"/>
            specifies the keys, and the <paramref name="valueColumn"/> the respective value.
            </summary>
            <remarks>This transform can operate over several columns.</remarks>
            <param name="catalog">The conversion transform's catalog</param>
            <param name="lookupMap">An instance of <see cref="T:Microsoft.ML.IDataView"/> that contains the <paramref name="keyColumn"/> and <paramref name="valueColumn"/> columns.</param>
            <param name="keyColumn">The key column in <paramref name="lookupMap"/>.</param>
            <param name="valueColumn">The value column in <paramref name="lookupMap"/>.</param>
            <param name="columns">The input and output columns.</param>
        </member>
        <member name="T:Microsoft.ML.ExplainabilityCatalog">
            <summary>
            Collection of extension methods for <see cref="T:Microsoft.ML.TransformsCatalog"/> to create instances of model explainability components.
            </summary>
        </member>
        <member name="M:Microsoft.ML.ExplainabilityCatalog.CalculateFeatureContribution(Microsoft.ML.TransformsCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Trainers.ICalculateFeatureContribution},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator"/> that computes model-specific contribution scores for
            each feature of the input vector.
            </summary>
            <param name="catalog">The transforms catalog.</param>
            <param name="predictionTransformer">A <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/> that supports Feature Contribution Calculation,
            and which will also be used for scoring.</param>
            <param name="numberOfPositiveContributions">The number of positive contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with positive contributions than <paramref name="numberOfPositiveContributions"/>, the rest will be returned as zeros.</param>
            <param name="numberOfNegativeContributions">The number of negative contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with negative contributions than <paramref name="numberOfNegativeContributions"/>, the rest will be returned as zeros.</param>
            <param name="normalize">Whether the feature contributions should be normalized to the [-1, 1] interval.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CalculateFeatureContribution](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/CalculateFeatureContribution.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.ExplainabilityCatalog.CalculateFeatureContribution``2(Microsoft.ML.TransformsCatalog,Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.CalibratedModelParametersBase{``0,``1}},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.FeatureContributionCalculatingEstimator"/> that computes model-specific contribution scores for
            each feature of the input vector. Supports calibrated models.
            </summary>
            <param name="catalog">The transforms catalog.</param>
            <param name="predictionTransformer">A <see cref="T:Microsoft.ML.ISingleFeaturePredictionTransformer`1"/> that supports Feature Contribution Calculation,
            and which will also be used for scoring.</param>
            <param name="numberOfPositiveContributions">The number of positive contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with positive contributions than <paramref name="numberOfPositiveContributions"/>, the rest will be returned as zeros.</param>
            <param name="numberOfNegativeContributions">The number of negative contributions to report, sorted from highest magnitude to lowest magnitude.
            Note that if there are fewer features with negative contributions than <paramref name="numberOfNegativeContributions"/>, the rest will be returned as zeros.</param>
            <param name="normalize">Whether the feature contributions should be normalized to the [-1, 1] interval.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CalculateFeatureContributionCalibrated](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/CalculateFeatureContributionCalibrated.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="T:Microsoft.ML.InputOutputColumnPair">
            <summary>
            Specifies input and output column names for transformer components that operate on multiple columns.
            </summary>
            <remarks>
            It is often advantageous to transform several columns at once as all of the changes can be done in a
            single data pass.
            </remarks>
        </member>
        <member name="P:Microsoft.ML.InputOutputColumnPair.InputColumnName">
            <summary>
            Name of the column to transform. If set to <see langword="null"/>, the value of the <see cref="P:Microsoft.ML.InputOutputColumnPair.OutputColumnName"/> will be used as source.
            </summary>
        </member>
        <member name="P:Microsoft.ML.InputOutputColumnPair.OutputColumnName">
            <summary>
            Name of the column resulting from the transformation of <see cref="P:Microsoft.ML.InputOutputColumnPair.InputColumnName"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.InputOutputColumnPair.#ctor(System.String,System.String)">
            <summary>
            Specifies input and output column names for a transformation.
            </summary>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.</param>
            <param name="inputColumnName">Name of the column to transform. If set to <see langword="null"/>, the value of the <paramref name="outputColumnName"/> will be used as source.</param>
        </member>
        <member name="T:Microsoft.ML.TransformExtensionsCatalog">
            <summary>
            Collection of extension methods for <see cref="T:Microsoft.ML.TransformsCatalog"/> to create instances of transform components
            that manipulate columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.TransformExtensionsCatalog.CopyColumns(Microsoft.ML.TransformsCatalog,System.String,System.String)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ColumnCopyingEstimator"/>, which copies the data from the column specified in <paramref name="inputColumnName"/>
            to a new column: <paramref name="outputColumnName"/>.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnName"/>.
            This column's data type will be the same as that of the input column.</param>
            <param name="inputColumnName">Name of the column to copy the data from.
            This estimator operates over any data type.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CopyColumns](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/CopyColumns.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TransformExtensionsCatalog.CopyColumns(Microsoft.ML.TransformsCatalog,Microsoft.ML.InputOutputColumnPair[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ColumnCopyingEstimator"/>, which copies the data from the column specified in <see cref="P:Microsoft.ML.InputOutputColumnPair.InputColumnName" />
            to a new column: <see cref="P:Microsoft.ML.InputOutputColumnPair.OutputColumnName" />.
            </summary>
            <remarks>This transform can operate over several columns.</remarks>
            <param name="catalog">The transform's catalog.</param>
            <param name="columns">The pairs of input and output columns. This estimator operates over any data type.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[CopyColumns](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/CopyColumns.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TransformExtensionsCatalog.Concatenate(Microsoft.ML.TransformsCatalog,System.String,System.String[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ColumnConcatenatingEstimator"/>, which concatenates one or more input columns into a new output column.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="outputColumnName">Name of the column resulting from the transformation of <paramref name="inputColumnNames"/>.
            This column's data type will be a vector of the input columns' data type.</param>
            <param name="inputColumnNames">Name of the columns to concatenate.
            This estimator operates over any data type except key type.
            If more that one column is provided, they must all have the same data type.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Concat](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/Concatenate.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TransformExtensionsCatalog.DropColumns(Microsoft.ML.TransformsCatalog,System.String[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ColumnSelectingEstimator"/>, which drops a given list of columns from an <see cref="T:Microsoft.ML.IDataView"/>. Any column not specified will
            be maintained in the output.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columnNames">The array of column names to drop.
            This estimator operates over columns of any data type.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Concat](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/DropColumns.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TransformExtensionsCatalog.SelectColumns(Microsoft.ML.TransformsCatalog,System.String[],System.Boolean)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ColumnSelectingEstimator"/>, which keeps a given list of columns in an <see cref="T:Microsoft.ML.IDataView"/> and drops the others.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columnNames">The array of column names to keep.</param>
            <param name="keepHidden">If <see langword="true"/> will keep hidden columns and <see langword="false"/> will remove hidden columns.
            Keeping hidden columns, instead of dropping them, is recommended when it is necessary to understand how the inputs of a pipeline
            map to outputs of the pipeline, for debugging purposes.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectColumns](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/SelectColumns.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.TransformExtensionsCatalog.SelectColumns(Microsoft.ML.TransformsCatalog,System.String[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Transforms.ColumnSelectingEstimator"/>, which keeps a given list of columns in an <see cref="T:Microsoft.ML.IDataView"/> and drops the others.
            </summary>
            <param name="catalog">The transform's catalog.</param>
            <param name="columnNames">The array of column names to keep.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SelectColumns](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Transforms/SelectColumns.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="T:Microsoft.ML.TransformsCatalog">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of transform components.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TransformsCatalog.Categorical">
            <summary>
            The list of operations over categorical data.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TransformsCatalog.Conversion">
            <summary>
            The list of operations for data type conversion.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TransformsCatalog.Text">
            <summary>
            The list of operations for processing text data.
            </summary>
        </member>
        <member name="P:Microsoft.ML.TransformsCatalog.FeatureSelection">
            <summary>
            The list of operations for selecting features based on some criteria.
            </summary>
        </member>
        <member name="T:Microsoft.ML.TransformsCatalog.CategoricalTransforms">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of categorical data transform components.
            </summary>
        </member>
        <member name="T:Microsoft.ML.TransformsCatalog.ConversionTransforms">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of type conversion data transform components.
            </summary>
        </member>
        <member name="T:Microsoft.ML.TransformsCatalog.TextTransforms">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of text data transform components.
            </summary>
        </member>
        <member name="T:Microsoft.ML.TransformsCatalog.FeatureSelectionTransforms">
            <summary>
            Class used by <see cref="T:Microsoft.ML.MLContext"/> to create instances of feature selection transform components.
            </summary>
        </member>
        <member name="M:Microsoft.ML.ApiUtils.GeneratePeek``2(Microsoft.ML.Data.InternalSchemaDefinition.Column)">
            <summary>
            Each of the specialized 'peek' methods copies the appropriate field value of an instance of T
            into the provided buffer. So, the call is 'peek(userObject, ref destination)' and the logic is
            indentical to 'destination = userObject.##FIELD##', where ##FIELD## is defined per peek method.
            </summary>
        </member>
        <member name="M:Microsoft.ML.ApiUtils.GeneratePoke``2(Microsoft.ML.Data.InternalSchemaDefinition.Column)">
            <summary>
            Each of the specialized 'poke' methods sets the appropriate field value of an instance of T
            to the provided value. So, the call is 'peek(userObject, providedValue)' and the logic is
            identical to 'userObject.##FIELD## = providedValue', where ##FIELD## is defined per poke method.
            </summary>
        </member>
    </members>
</doc>
