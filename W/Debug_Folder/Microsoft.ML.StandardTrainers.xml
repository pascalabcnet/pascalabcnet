<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ML.StandardTrainers</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ML.FactorizationMachineExtensions">
            <summary>
            Collection of extension methods for the <see cref="T:Microsoft.ML.BinaryClassificationCatalog"/> to create instances
            of field aware factorization trainer components.
            </summary>
        </member>
        <member name="M:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer"/>, which predicts a target using a field-aware factorization machine trained over boolean label data.
            </summary>
            <remarks>
            Note that because there is only one feature column, the underlying model is equivalent to standard factorization machine.
            </remarks>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:System.Boolean"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[FieldAwareFactorizationMachineWithoutArguments](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/FactorizationMachine.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String[],System.String,System.String)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer"/>, which predicts a target using a field-aware factorization machine trained over boolean label data.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:System.Boolean"/>.</param>
            <param name="featureColumnNames">The names of the feature columns. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[FieldAwareFactorizationMachine](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/FieldAwareFactorizationMachine.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer"/> using advanced options, which predicts a target using a field-aware factorization machine trained over boolean label data.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[FieldAwareFactorizationMachine](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/FieldAwareFactorizationMachineWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> to predict a target using a field-aware factorization machine model trained using a stochastic gradient method.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification.md)]
             To create this trainer, use [FieldAwareFactorizationMachine](xref:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String))
             [FieldAwareFactorizationMachine](xref:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String[],System.String,System.String)),
             or [FieldAwareFactorizationMachine(Options)](xref:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options)).
            
             In contrast to other binary classifiers, which can only support one feature column, field-aware factorization machine can consume multiple feature columns.
             Each column is viewed as a container of some features and such a container is called a field.
             Note that all feature columns must be float vectors but their dimensions can be different.
             The motivation of splitting features into different fields is to model features from different distributions independently.
             For example, in online game store, features created from user profile and those from game profile can be assigned to two different fields.
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | No |
            
             ### Background
             Factorization machine family is a powerful model group for supervised learning problems.
             It was first introduced in Steffen Rendle's [Factorization Machines](http://ieeexplore.ieee.org/document/5694074/?reload=true) paper in 2010.
             Later, one of its generalized versions, field-aware factorization machine, became an important predictive module in recent recommender systems and click-through rate prediction contests.
             For examples, see winning solutions in Steffen Rendle's KDD-Cup 2012 ([Track 1](http://www.kdd.org/kdd-cup/view/kdd-cup-2012-track-1) and [Track 2](http://www.kdd.org/kdd-cup/view/kdd-cup-2012-track-2)),
             [Criteo's](https://www.kaggle.com/c/criteo-display-ad-challenge), [Avazu's](https://www.kaggle.com/c/avazu-ctr-prediction), and [Outbrain's](https://www.kaggle.com/c/outbrain-click-prediction) click prediction challenges on Kaggle.
            
             Factorization machines are especially powerful when feature conjunctions are extremely correlated to the signal you want to predict.
             An example of feature pairs which can form important conjunctions is user ID and music ID in music recommendation.
             When a dataset consists of only dense numerical features, usage of factorization machine is not recommended or some featurizations should be performed.
            
             ### Scoring Function
             Field-aware factorization machine is a scoring function which maps feature vectors from different fields to a scalar score.
             Assume that all $m$ feature columns are concatenated into a long feature vector $\textbf{x} \in {\mathbb R}^n$ and ${\mathcal F}(j)$ denotes the $j$-th feature's field indentifier.
             The corresponding score is $\hat{y}(\textbf{x}) = \langle \textbf{w}, \textbf{x} \rangle + \sum_{j = 1}^n \sum_{j' = j + 1}^n \langle \textbf{v}\_{j, {\mathcal F}(j')}, \textbf{v}\_{j', {\mathcal F}(j)} \rangle x_j x_{j'}$,
             where $\langle \cdot, \cdot \rangle$ is the inner product operator, $\textbf{w} \in {\mathbb R}^n$ stores the linear coefficients, and $\textbf{v}_{j, f}\in {\mathbb R}^k$ is the $j$-th feature's representation in the $f$-th field's latent space.
             Note that $k$ is the latent dimension specified by the user.
            
             The predicted label is the sign of $\hat{y}$. If $\hat{y} > 0$, this model predicts true. Otherwise, it predicts false.
            
             For a systematic introduction to field-aware factorization machine, please see [this paper](https://www.csie.ntu.edu.tw/~cjlin/papers/ffm.pdf)
            
             ### Training Algorithm Details
             The algorithm implemented in <xref:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer> is based on [a stochastic gradient method](http://jmlr.org/papers/volume12/duchi11a/duchi11a.pdf).
             Algorithm details is described in Algorithm 3 in [this online document](https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf).
             The minimized loss function is [logistic loss](https://en.wikipedia.org/wiki/Loss_functions_for_classification), so the trained model can be viewed as a non-linear logistic regression.
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String)"/>
             <seealso cref="M:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String[],System.String,System.String)"/>
             <seealso cref="M:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options">
            <summary>
            <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options"/> for <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer"/> as used in
            <see cref="M:Microsoft.ML.FactorizationMachineExtensions.FieldAwareFactorizationMachine(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.LearningRate">
            <summary>
            Initial learning rate.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.NumberOfIterations">
            <summary>
            Number of training iterations.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.LatentDimension">
            <summary>
            Latent space dimension.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.LambdaLinear">
            <summary>
            Regularization coefficient of linear weights.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.LambdaLatent">
            <summary>
            Regularization coefficient of latent weights.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.NormalizeFeatures">
            <summary>
            Whether to normalize the input vectors so that the concatenation of all fields' feature vectors is unit-length.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.ExtraFeatureColumns">
            <summary>
            Extra feature column names. The column named <see cref="F:Microsoft.ML.Trainers.TrainerInputBase.FeatureColumnName"/> stores features from the first field.
            The i-th string in <see cref="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.ExtraFeatureColumns"/> stores the name of the (i+1)-th field's feature column.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.Shuffle">
            <summary>
            Whether to shuffle for each training iteration.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.Verbose">
            <summary>
            Report traning progress or not.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options.Radius">
            <summary>
            Radius of initial latent factors.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.FeatureColumns">
            <summary>
            The feature column that the trainer expects.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.LabelColumn">
            <summary>
            The label column that the trainer expects. Can be <c>null</c>, which indicates that label
            is not used for training.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.WeightColumn">
            <summary>
            The weight column that the trainer expects. Can be <c>null</c>, which indicates that weight is
            not used for training.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Microsoft#ML#ITrainer#Info">
            <summary>
            The <see cref="T:Microsoft.ML.TrainerInfo"/> containing at least the training data for this trainer.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer"/> through the <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options"/> class.
            </summary>
            <param name="env">The private instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>.</param>
            <param name="options">An instance of the legacy <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options"/> to apply advanced parameters to the algorithm.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String[],System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer"/>.
            </summary>
            <param name="env">The private instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>.</param>
            <param name="featureColumnNames">The name of column hosting the features. The i-th element stores feature column of the i-th field.</param>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="exampleWeightColumnName">The name of the weight column (optional).</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Initialize(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Options)">
            <summary>
            Initializes the instance. Shared between the two constructors.
            REVIEW: Once the legacy constructor goes away, this can move to the only constructor and most of the fields can be back to readonly.
            </summary>
            <param name="env"></param>
            <param name="options"></param>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Fit(Microsoft.ML.IDataView,Microsoft.ML.IDataView,Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters)">
            <summary>
            Continues the training of a <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer"/> using an already trained <paramref name="modelParameters"/> and/or validation data,
            and returns a <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.Fit(Microsoft.ML.IDataView)">
            <summary> Trains and returns a <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer"/>.</summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Schema propagation for transformers. Returns the output schema of the data, if
            the input schema is like the one provided.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters">
            <summary>
            Model parameters for <see cref="T:Microsoft.ML.Trainers.FieldAwareFactorizationMachineTrainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters.FieldCount">
            <summary>
            Get the number of fields. It's the symbol `m` in the doc: https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters.FeatureCount">
            <summary>
            Get the number of features. It's the symbol `n` in the doc: https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters.LatentDimension">
            <summary>
            Get the latent dimension. It's the length of `v_{j, f}` in the doc: https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Boolean,System.Int32,System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Initialize model parameters with a trained model.
            </summary>
            <param name="env">The host environment</param>
            <param name="norm">True if user wants to normalize feature vector to unit length.</param>
            <param name="fieldCount">The number of fields, which is the symbol `m` in the doc: https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf </param>
            <param name="featureCount">The number of features, which is the symbol `n` in the doc: https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf </param>
            <param name="latentDim">The latent dimensions, which is the length of `v_{j, f}` in the doc: https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf </param>
            <param name="linearWeights">The linear coefficients of the features, which is the symbol `w` in the doc: https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf </param>
            <param name="latentWeights">Latent representation of each feature. Note that one feature may have <see cref="P:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters.FieldCount"/> latent vectors
            and each latent vector contains <see cref="P:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters.LatentDimension"/> values. In the f-th field, the j-th feature's latent vector, `v_{j, f}` in the doc
            https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf, starts at latentWeights[j * fieldCount * latentDim + f * latentDim].
            The k-th element in v_{j, f} is latentWeights[j * fieldCount * latentDim + f * latentDim + k]. The size of the array must be featureCount x fieldCount x latentDim.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters.GetLinearWeights">
            <summary>
            The linear coefficients of the features. It's the symbol `w` in the doc: https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters.GetLatentWeights">
            <summary>
            Latent representation of each feature. Note that one feature may have <see cref="P:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters.FieldCount"/> latent vectors
            and each latent vector contains <see cref="P:Microsoft.ML.Trainers.FieldAwareFactorizationMachineModelParameters.LatentDimension"/> values. In the f-th field, the j-th feature's latent vector, `v_{j, f}` in the doc
            https://github.com/wschin/fast-ffm/blob/master/fast-ffm.pdf, starts at latentWeights[j * fieldCount * latentDim + f * latentDim].
            The k-th element in v_{j, f} is latentWeights[j * fieldCount * latentDim + f * latentDim + k].
            The size of the returned value is featureCount x fieldCount x latentDim.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer.FeatureColumns">
            <summary>
            The name of the feature column used by the prediction transformer.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer.FeatureColumnTypes">
            <summary>
            The type of the feature columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer.GetOutputSchema(Microsoft.ML.DataViewSchema)">
            <summary>
            Gets the <see cref="T:Microsoft.ML.DataViewSchema"/> result after transformation.
            </summary>
            <param name="inputSchema">The <see cref="T:Microsoft.ML.DataViewSchema"/> of the input data.</param>
            <returns>The post transformation <see cref="T:Microsoft.ML.DataViewSchema"/>.</returns>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachinePredictionTransformer.SaveModel(Microsoft.ML.ModelSaveContext)">
            <summary>
            Saves the transformer to file.
            </summary>
            <param name="ctx">The <see cref="T:Microsoft.ML.ModelSaveContext"/> that facilitates saving to the <see cref="T:Microsoft.ML.Repository"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.FieldAwareFactorizationMachineScalarRowMapper.Microsoft#ML#Data#ISchemaBoundRowMapper#GetDependenciesForNewColumns(System.Collections.Generic.IEnumerable{Microsoft.ML.DataViewSchema.Column})">
            <summary>
            Given a set of columns, return the input columns that are needed to generate those output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmModelParameters.GetVersionInfo">
            <summary>
            Version information to be saved in binary format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.VBuffer{System.Single}[],Microsoft.ML.Data.VBuffer{System.Single}[],Microsoft.ML.Data.VBuffer{System.Single}[],System.Single,System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Constructor. w, thetaPrime, theta must be dense <see cref="T:Microsoft.ML.Data.VBuffer`1"/>s.
            Note that this takes over ownership of all such vectors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmModelParameters.Create(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext)">
            <summary>
            Create method to instantiate a predictor.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmModelParameters.SaveCore(Microsoft.ML.ModelSaveContext)">
            <summary>
            Save the predictor in binary format.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmModelParameters.SaveVBufferArray(Microsoft.ML.ModelSaveContext,Microsoft.ML.Data.VBuffer{System.Single}[])">
            <summary>
            Save an array of <see cref="T:Microsoft.ML.Data.VBuffer`1"/> in binary format. The vectors must be dense.
            </summary>
            <param name="ctx">The context where we will save the vectors.</param>
            <param name="data">An array of vectors.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmModelParameters.LoadVBufferArray(Microsoft.ML.ModelLoadContext,System.Int32,System.Int32)">
            <summary>
            Load an array of <see cref="T:Microsoft.ML.Data.VBuffer`1"/> from binary format.
            </summary>
            <param name="ctx">The context from which to read the vectors.</param>
            <param name="length">The length of the array of vectors.</param>
            <param name="vectorLength">The length of each vector.</param>
            <returns>An array of vectors.</returns>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmModelParameters.Margin(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Compute Margin.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LdSvmTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> to predict a target using a non-linear binary classification model
             trained with Local Deep SVM.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [LdSvm](xref:Microsoft.ML.StandardTrainersCatalog.LdSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean))
             or [LdSvm(Options)](xref:Microsoft.ML.StandardTrainersCatalog.LdSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LdSvmTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification-no-prob.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | No |
            
             ### Training Algorithm Details
             Local Deep SVM (LD-SVM) is a generalization of Localized Multiple Kernel Learning for non-linear SVM. Multiple kernel methods learn a different
             kernel, and hence a different classifier, for each point in the feature space. The prediction time cost for multiple kernel methods can be prohibitively
             expensive for large training sets because it is proportional to the number of support vectors, and these grow linearly with the size of the training
             set. LD-SVM reduces the prediction cost by learning a tree-based local feature embedding that is high dimensional and sparse, efficiently encoding
             non-linearities. Using LD-SVM, the prediction cost grows logarithmically with the size of the training set, rather than linearly, with a tolerable loss
             in classification accuracy.
            
             Local Deep SVM is an implementation of the algorithm described in [C. Jose, P. Goyal, P. Aggrwal, and M. Varma, Local Deep
             Kernel Learning for Efficient Non-linear SVM Prediction, ICML, 2013](http://proceedings.mlr.press/v28/jose13.pdf).
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.LdSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LdSvmTrainer.Options)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.LdSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)"/>
        </member>
        <member name="F:Microsoft.ML.Trainers.LdSvmTrainer.Options.TreeDepth">
            <summary>
            Depth of LDSVM Tree
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LdSvmTrainer.Options.LambdaW">
            <summary>
             Regularizer for classifier parameter W
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LdSvmTrainer.Options.LambdaTheta">
            <summary>
             Regularizer for kernel parameter Theta
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LdSvmTrainer.Options.LambdaThetaprime">
            <summary>
             Regularizer for kernel parameter ThetaPrime
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LdSvmTrainer.Options.Sigma">
            <summary>
             Parameter for sigmoid sharpness
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LdSvmTrainer.Options.UseBias">
            <summary>
            Indicates if we should use Bias or not in our model.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LdSvmTrainer.Options.NumberOfIterations">
            <summary>
            Number of iterations
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmTrainer.ComputeGradTheta(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single[],System.Int32,System.Single,Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],System.Single[],System.Single[],Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[])">
            <summary>
            Compute gradient w.r.t theta for an instance X
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmTrainer.UpdateGamma(System.Int32,System.Int32,System.Single@,Microsoft.ML.Trainers.LdSvmTrainer.Data,Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[])">
            <summary>
            Adaptively update gamma for indicator function approximation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmTrainer.TrainCore(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.RoleMappedData,System.Int32,System.Int32)">
            <summary>
            Main LDSVM training routine.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmTrainer.InitClassifierParam(System.Int32,System.Int32,Microsoft.ML.Data.VBuffer{System.Single}[],Microsoft.ML.Data.VBuffer{System.Single}[],Microsoft.ML.Data.VBuffer{System.Single}[],Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],System.Single[],System.Single[],Microsoft.ML.Data.VBuffer{System.Single}[],Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],System.Single[],System.Single[])">
            <summary>
            Inititlize classifier parameters
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LdSvmTrainer.CheckOptions(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.Trainers.LdSvmTrainer.Options)">
            <summary>
            Initialization of model.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.DnnTrainState">
            <summary>
            A class that contains the current train state to use for learning rate scheduling.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LearningRateScheduler">
            <summary>
            This abstract class defines a learning rate scheduler.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LsrDecay">
            <summary>
            This class implements linear scaling rule and LR decay.
            Implementation adopted from RESNET-CIFAR benchmark test in Tensorflow slim.
            https://github.com/tensorflow/models/blob/b974c3f95a37acedcc3c58566834c78fcae4b214/official/vision/image_classification/resnet_cifar_main.py
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LsrDecay.LearningRateSchedulerItem">
            <summary>
            This structure represents a learning rate scheduler item type
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LsrDecay.LearningRateSchedulerItem.Epoch">
            <summary>
            Start epoch to match with the scaling factor
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LsrDecay.LearningRateSchedulerItem.ScalingFactor">
            <summary>
            Scaling factor or multiplier that changes the learning rate for Linear scale rule
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LsrDecay._lrSchedule">
            <summary>
            Learning rate is scaled at epoch boundaries provided in LrSchedule to corresponding multiplier in the LrSchedule.
            Format for LrSchedule: {start epoch, scaling factor}, ordered with largest start epoch first
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LsrDecay.BaseLearningRate">
            <summary>
            Base Learning rate to start off with.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LsrDecay.#ctor(System.Single)">
            <summary>
            Linear Scale rule and LR Decay construtor assigns a default LR scheduler.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LsrDecay.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.ML.Trainers.LsrDecay.LearningRateSchedulerItem},System.Single)">
            <summary>
            Linear Scale rule and LR Decay construtor assigns a user defined LR scheduler.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LsrDecay.GetLearningRateScheduleMultiplier(System.Int32)">
            <summary>
            This function returns the corresponding scaling factor or multiplier for the given epoch from the LrSchedule.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LsrDecay.GetLearningRate(Microsoft.ML.Trainers.DnnTrainState)">
            <summary>
            This function returns the Learning rate using linear scale rule and LR decay.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.ExponentialLRDecay">
            <summary>
            This class implements Exponential Learning rate decay.
            Implemented from the tensorflow documentation.
            Source: https://www.tensorflow.org/api_docs/python/tf/compat/v1/train/exponential_decay
            Default values and implementation of learning rate is from Tensorflow Slim model tests.
            Source : https://github.com/tensorflow/models/blob/master/research/slim/train_image_classifier.py
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.ExponentialLRDecay.LearningRate">
            <summary>
            Initial learning rate.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.ExponentialLRDecay.GlobalStep">
            <summary>
            The number of batches seen by the graph so far.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.ExponentialLRDecay.DecaySteps">
            <summary>
            Number of decay steps
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.ExponentialLRDecay.DecayRate">
            <summary>
            Learning rate decay factor.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.ExponentialLRDecay.Staircase">
            <summary>
            If Staircase is True the learning rate decays at discrete intervals and the decayed learning rate follows a staircase function.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.ExponentialLRDecay.NumEpochsPerDecay">
            <summary>
            Number of epochs after which learning rate decays.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.ExponentialLRDecay.#ctor(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            This contructor initializes intial learning rate, number epochs per decay, decay rate and the staircase option.
            The defaults are taken from Tensorflow Slim.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.ExponentialLRDecay.GetLearningRate(Microsoft.ML.Trainers.DnnTrainState)">
            <summary>
            Computes exponentially decayed learning rate
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.PolynomialLRDecay">
            <summary>
            This class implements polynomial Learning rate decay.
            Implemented from the tensorflow documentation.
            Source: https://www.tensorflow.org/api_docs/python/tf/compat/v1/train/polynomial_decay
            Default values and implementation of learning rate is from Tensorflow Slim model tests.
            Source : https://github.com/tensorflow/models/blob/master/research/slim/train_image_classifier.py
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.PolynomialLRDecay.LearningRate">
            <summary>
            Initial learning rate.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.PolynomialLRDecay.EndLearningRate">
            <summary>
            The minimal end learning rate.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.PolynomialLRDecay.Power">
            <summary>
            The power of the polynomial
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.PolynomialLRDecay.Cycle">
            <summary>
            whether or not it should cycle once decay has been reached
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.PolynomialLRDecay.NumEpochsPerDecay">
            <summary>
            Number of epochs after which learning rate decays.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LinearModelParameters">
            <summary>
            Base class for linear model parameters.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.LinearModelParameters.Weights">
            <summary> The predictor's feature weight coefficients.</summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.LinearModelParameters.Bias">
            <summary> The predictor's bias term.</summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.LinearModelParameters.Microsoft#ML#Trainers#ICalculateFeatureContribution#FeatureContributionCalculator">
            <summary>
            Used to determine the contribution of each feature to the score of an example by <see cref="T:Microsoft.ML.Transforms.FeatureContributionCalculatingTransformer"/>.
            For linear models, the contribution of a given feature is equal to the product of feature value times the corresponding weight.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single)">
            <summary>
            Constructs a new linear predictor.
            </summary>
            <param name="env">The host environment.</param>
            <param name="name">Component name.</param>
            <param name="weights">The weights for the linear model. The i-th element of weights is the coefficient
            of the i-th feature. Note that this will take ownership of the <see cref="T:Microsoft.ML.Data.VBuffer`1"/>.</param>
            <param name="bias">The bias added to every output score.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearModelParameters.CombineParameters(System.Collections.Generic.IList{Microsoft.ML.Model.IParameterMixer{System.Single}},Microsoft.ML.Data.VBuffer{System.Single}@,System.Single@)">
            <summary>
            Combine a bunch of models into one by averaging parameters
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LinearBinaryModelParameters">
            <summary>
            The model parameters class for linear binary trainer estimators.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearBinaryModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Trainers.ModelStatisticsBase)">
            <summary>
            Constructs a new linear binary predictor.
            </summary>
            <param name="env">The host environment.</param>
            <param name="weights">The weights for the linear model. The i-th element of weights is the coefficient
            of the i-th feature. Note that this will take ownership of the <see cref="T:Microsoft.ML.Data.VBuffer`1"/>.</param>
            <param name="bias">The bias added to every output score.</param>
            <param name="stats"></param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearBinaryModelParameters.Microsoft#ML#Model#IParameterMixer{System#Single}#CombineParameters(System.Collections.Generic.IList{Microsoft.ML.Model.IParameterMixer{System.Single}})">
            <summary>
            Combine a bunch of models into one by averaging parameters
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearBinaryModelParameters.Microsoft#ML#Model#ICanGetSummaryInKeyValuePairs#GetSummaryInKeyValuePairs(Microsoft.ML.Data.RoleMappedSchema)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.ML.Trainers.RegressionModelParameters">
            <summary>
            Model parameters for regression.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.RegressionModelParameters.SaveAsIni(System.IO.TextWriter,Microsoft.ML.Data.RoleMappedSchema,Microsoft.ML.Calibrators.ICalibrator)">
            <summary>
            Output the INI model to a given writer
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LinearRegressionModelParameters">
            <summary>
            Model parameters for linear regression.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearRegressionModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single)">
            <summary>
            Constructs a new linear regression model from trained weights.
            </summary>
            <param name="env">The host environment.</param>
            <param name="weights">The weights for the linear model. The i-th element of weights is the coefficient
            of the i-th feature. Note that this will take ownership of the <see cref="T:Microsoft.ML.Data.VBuffer`1"/>.</param>
            <param name="bias">The bias added to every output score.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearRegressionModelParameters.Microsoft#ML#Model#IParameterMixer{System#Single}#CombineParameters(System.Collections.Generic.IList{Microsoft.ML.Model.IParameterMixer{System.Single}})">
            <summary>
            Combine a bunch of models into one by averaging parameters
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearRegressionModelParameters.Microsoft#ML#Model#ICanGetSummaryInKeyValuePairs#GetSummaryInKeyValuePairs(Microsoft.ML.Data.RoleMappedSchema)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.ML.Trainers.PoissonRegressionModelParameters">
            <summary>
            Model parameters for Poisson Regression.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.PoissonRegressionModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single)">
            <summary>
            Constructs a new Poisson regression model parameters from trained model.
            </summary>
            <param name="env">The Host environment.</param>
            <param name="weights">The weights for the linear model. The i-th element of weights is the coefficient
            of the i-th feature. Note that this will take ownership of the <see cref="T:Microsoft.ML.Data.VBuffer`1"/>.</param>
            <param name="bias">The bias added to every output score.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.PoissonRegressionModelParameters.Microsoft#ML#Model#IParameterMixer{System#Single}#CombineParameters(System.Collections.Generic.IList{Microsoft.ML.Model.IParameterMixer{System.Single}})">
            <summary>
            Combine a bunch of models into one by averaging parameters
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LinearPredictorUtils">
            <summary>
            Helper methods for linear predictors
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearPredictorUtils.SaveAsCode(System.IO.TextWriter,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Data.RoleMappedSchema,System.String)">
            <summary>
            print the linear model as code
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearPredictorUtils.FeatureNameAsCode(System.String,System.Int32)">
            <summary>
            Ensure that feature name is a legitimate variable name
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearPredictorUtils.LinearModelAsIni(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.IPredictor,Microsoft.ML.Data.RoleMappedSchema,Microsoft.ML.Calibrators.PlattCalibrator)">
            <summary>
            Build a Bing TreeEnsemble .ini representation of the given predictor
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearPredictorUtils.LinearModelAsText(System.String,System.String,System.String,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Data.RoleMappedSchema,Microsoft.ML.Calibrators.PlattCalibrator)">
            <summary>
            Output the weights of a linear model to a given writer
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearPredictorUtils.SaveLinearModelWeightsInKeyValuePairs(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Data.RoleMappedSchema,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Output the weights of a linear model to key value pairs.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LbfgsTrainerBase`3">
            <summary>
            Base class for <a href='https://en.wikipedia.org/wiki/Limited-memory_BFGS'>L-BFGS</a>-based trainers.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase">
            <summary>
            Base options class for trainer estimators deriving from<see cref="T:Microsoft.ML.Trainers.LbfgsTrainerBase`3"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.L2Regularization">
            <summary>
            L2 regularization weight.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.L1Regularization">
            <summary>
            L1 regularization weight.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.OptimizationTolerance">
            <summary>
            Tolerance parameter for optimization convergence. (Low = slower, more accurate).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.HistorySize">
            <summary>
            Number of previous iterations to remember for estimating the Hessian. Lower values mean faster but less accurate estimates.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.MaximumNumberOfIterations">
            <summary>
            Number of iterations.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.StochasticGradientDescentInitilaizationTolerance">
            <summary>
            Run SGD to initialize LR weights, converging to this tolerance.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.Quiet">
            <summary>
            Determines whether to produce output during training or not.
            </summary>
            <value>
            If set to <see langword="true"/> no output is produced.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.InitialWeightsDiameter">
            <summary>
            Initial weights scale.
            </summary>
            <value>
            This property is only used if the provided value is positive.
            The weights will be randomly selected from InitialWeights * [-0.5,0.5] interval with uniform distribution.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.NumberOfThreads">
            <summary>
            Number of threads. Null means use the number of processors.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.DenseOptimizer">
            <summary>
            Force densification of the internal optimization vectors. Default is false.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsTrainerBase`3.OptionsBase.EnforceNonNegativity">
            <summary>
            Enforce non-negative weights. Default is false.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsTrainerBase`3.InitializeWeightsSgd(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Trainers.FloatLabelCursor.Factory)">
            <summary>
            Initialize weights by running SGD up to specified tolerance.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsTrainerBase`3.TrainModelCore(Microsoft.ML.TrainContext)">
            <summary>
            The basic training calls the optimizer
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsTrainerBase`3.DifferentiableFunction(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Runtime.IProgressChannelProvider)">
            <summary>
            The gradient being used by the optimizer
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsTrainerBase`3.DifferentiableFunctionMultithreaded(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Runtime.IProgressChannel)">
            <summary>
            Batch-parallel optimizer
            </summary>
            <remarks>
            REVIEW: consider getting rid of multithread-targeted members
            Using TPL, the distinction between Multithreaded and Sequential implementations is unnecessary
            </remarks>
        </member>
        <member name="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> to predict a target using a linear logistic regression model trained with L-BFGS method.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [LbfgsLogisticRegression](xref:Microsoft.ML.StandardTrainersCatalog.LbfgsLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean))
             or [LbfgsLogisticRegression(Options)](xref:Microsoft.ML.StandardTrainersCatalog.LbfgsLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Scoring Function
             Linear logistic regression is a variant of linear model. It maps feature vector $\textbf{x} \in {\mathbb R}^n$ to a scalar via $\hat{y}\left( \textbf{x} \right) = \textbf{w}^T  \textbf{x} + b = \sum_{j=1}^n w_j x_j + b$,
             where the $x_j$ is the $j$-th feature's value, the $j$-th element of $\textbf{w}$ is the $j$-th feature's coefficient, and $b$ is a learnable bias.
             The corresponding probability of getting a true label is $\frac{1}{1 + e^{\hat{y}\left( \textbf{x} \right)}}$.
            
             ### Training Algorithm Details
             The optimization technique implemented is based on [the limited memory Broyden-Fletcher-Goldfarb-Shanno method (L-BFGS)](https://en.wikipedia.org/wiki/Limited-memory_BFGS).
             L-BFGS is a [quasi-Newtonian method](https://en.wikipedia.org/wiki/Quasi-Newton_method) which replaces the expensive computation cost of the Hessian matrix with an approximation but still enjoys a fast convergence rate like the [Newton method](https://en.wikipedia.org/wiki/Newton%27s_method_in_optimization) where the full Hessian matrix is computed.
             Since L-BFGS approximation uses only a limited amount of historical states to compute the next step direction, it is especially suited for problems with high-dimensional feature vector.
             The number of historical states is a user-specified parameter, using a larger number may lead to a better approximation to the Hessian matrix but also a higher computation cost per step.
            
             Regularization is a method that can render an ill-posed problem more tractable by imposing constraints that provide information to supplement the data and that prevents overfitting by penalizing model's magnitude usually measured by some norm functions.
             This can improve the generalization of the model learned by selecting the optimal complexity in the bias-variance tradeoff.
             Regularization works by adding the penalty that is associated with coefficient values to the error of the hypothesis.
             An accurate model with extreme coefficient values would be penalized more, but a less accurate model with more conservative values would be penalized less.
            
             This learner supports [elastic net regularization](https://en.wikipedia.org/wiki/Elastic_net_regularization): a linear combination of L1-norm (LASSO), $|| \textbf{w} ||_1$, and L2-norm (ridge), $|| \textbf{w} ||_2^2$ regularizations.
             L1-norm and L2-norm regularizations have different effects and uses that are complementary in certain respects.
             Using L1-norm can increase sparsity of the trained $\textbf{w}$.
             When working with high-dimensional data, it shrinks small weights of irrelevant features to 0 and therefore no resource will be spent on those bad features when making predictions.
             If L1-norm regularization is used, the training algorithm is [OWL-QN](http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.68.5260).
             L2-norm regularization is preferable for data that is not sparse and it largely penalizes the existence of large weights.
            
             An aggressive regularization (that is, assigning large coefficients to L1-norm or L2-norm regularization terms) can harm predictive capacity by excluding important variables out of the model.
             Therefore, choosing the right regularization coefficients is important when applying logistic regression.
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.LbfgsLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.LbfgsLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer"/> as used in
            <see cref="M:Microsoft.ML.StandardTrainersCatalog.LbfgsLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options)"/>
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options.ShowTrainingStatistics">
            <summary>
            If set to <value>true</value> training statistics will be generated at the end of training.
            If you have a large number of learned training parameters(more than 500),
            generating the training statistics might take a few seconds.
            More than 1000 weights might take a few minutes. For those cases consider using the instance of <see cref="T:Microsoft.ML.Trainers.ComputeLogisticRegressionStandardDeviation"/>
            present in the Microsoft.ML.Mkl.Components package. That computes the statistics using hardware acceleration.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options.ComputeStandardDeviation">
            <summary>
            The instance of <see cref="T:Microsoft.ML.Trainers.ComputeLogisticRegressionStandardDeviation"/> that computes the std of the training statistics, at the end of training.
            The calculations are not part of Microsoft.ML package, due to the size of MKL.
            If you need these calculations, add the Microsoft.ML.Mkl.Components package, and initialize <see cref="F:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options.ComputeStandardDeviation"/>.
            to the <see cref="T:Microsoft.ML.Trainers.ComputeLogisticRegressionStandardDeviation"/> implementation in the Microsoft.ML.Mkl.Components package.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">The name of the label column.</param>
            <param name="featureColumn">The name of the feature column.</param>
            <param name="exampleWeightColumnName">The name for the example weight column.</param>
            <param name="enforceNoNegativity">Enforce non-negative weights.</param>
            <param name="l1Regularization">Weight of L1 regularizer term.</param>
            <param name="l2Regularization">Weight of L2 regularizer term.</param>
            <param name="memorySize">Memory size for <see cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer"/>. Low=faster, less accurate.</param>
            <param name="optimizationTolerance">Threshold for optimizer convergence.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer"/>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Fit(Microsoft.ML.IDataView,Microsoft.ML.Trainers.LinearModelParameters)">
            <summary>
            Continues the training of a <see cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer"/> using an already trained <paramref name="modelParameters"/> and returns
            a <see cref="T:Microsoft.ML.Data.BinaryPredictionTransformer`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.ComputeLogisticRegressionStandardDeviation">
            <summary>
            Computes the standard deviation matrix of each of the non-zero training weights, needed to calculate further the standard deviation,
            p-value and z-Score.
            Use this class' implementation in the Microsoft.ML.Mkl.Components package which uses Intel Math Kernel Library.
            Due to the existence of regularization, an approximation is used to compute the variances of the trained linear coefficients.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.ComputeLogisticRegressionStandardDeviation.ComputeStandardDeviation(System.Double[],System.Int32[],System.Int32,System.Int32,Microsoft.ML.Runtime.IChannel,System.Single)">
            <summary>
            Computes the standard deviation matrix of each of the non-zero training weights, needed to calculate further the standard deviation,
            p-value and z-Score.
            The calculations are not part of Microsoft.ML package, due to the size of MKL.
            If you need these calculations, add the Microsoft.ML.Mkl.Components package, and initialize <see cref="F:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options.ComputeStandardDeviation"/>
            to the <see cref="T:Microsoft.ML.Trainers.ComputeLogisticRegressionStandardDeviation"/> implementation in the Microsoft.ML.Mkl.Components package.
            Due to the existence of regularization, an approximation is used to compute the variances of the trained linear coefficients.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> to predict a target using a maximum entropy multiclass classifier trained with L-BFGS method.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [LbfgsMaximumEntropy](xref:Microsoft.ML.StandardTrainersCatalog.LbfgsMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean))
             or [LbfgsMaximumEntropy(Options)](xref:Microsoft.ML.StandardTrainersCatalog.LbfgsMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-multiclass-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Multiclass classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Scoring Function
             [Maximum entropy model](https://en.wikipedia.org/wiki/Multinomial_logistic_regression) is a generalization of linear [logistic regression](https://en.wikipedia.org/wiki/Logistic_regression).
             The major difference between maximum entropy model and logistic regression is the number of classes supported in the considered classification problem.
             Logistic regression is only for binary classification while maximum entropy model handles multiple classes.
             See Section 1 in [this paper](https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf) for a detailed introduction.
            
             Assume that the number of classes is $m$ and number of features is $n$.
             Maximum entropy model assigns the $c$-th class a coefficient vector $\textbf{w}\_c \in {\mathbb R}^n$ and a bias $b_c \in {\mathbb R}$, for $c=1,\dots,m$.
             Given a feature vector $\textbf{x} \in {\mathbb R}^n$, the $c$-th class's score is $\hat{y}^c = \textbf{w}\_c^T \textbf{x} + b_c$.
             The probability of $\textbf{x}$ belonging to class $c$ is defined by $\tilde{P}(c | \textbf{x}) = \frac{ e^{\hat{y}^c} }{ \sum\_{c' = 1}^m e^{\hat{y}^{c'}} }$.
             Let $P(c, \textbf{ x})$ denote the joint probability of seeing $c$ and $\textbf{x}$.
             The loss function minimized by this trainer is $-\sum\_{c = 1}^m P(c, \textbf{ x}) \log \tilde{P}(c | \textbf{x}) $, which is the negative [log-likelihood function](https://en.wikipedia.org/wiki/Likelihood_function#Log-likelihood).
            
             ### Training Algorithm Details
             The optimization technique implemented is based on [the limited memory Broyden-Fletcher-Goldfarb-Shanno method (L-BFGS)](https://en.wikipedia.org/wiki/Limited-memory_BFGS).
             L-BFGS is a [quasi-Newtonian method](https://en.wikipedia.org/wiki/Quasi-Newton_method), which replaces the expensive computation of the Hessian matrix with an approximation but still enjoys a fast convergence rate like [Newton's method](https://en.wikipedia.org/wiki/Newton%27s_method_in_optimization) where the full Hessian matrix is computed.
             Since L-BFGS approximation uses only a limited amount of historical states to compute the next step direction, it is especially suited for problems with a high-dimensional feature vector.
             The number of historical states is a user-specified parameter, using a larger number may lead to a better approximation of the Hessian matrix but also a higher computation cost per step.
            
             [!include[io](~/../docs/samples/docs/api-reference/regularization-l1-l2.md)]
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.LbfgsMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.LbfgsMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.Options">
            <summary>
            <see cref="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.Options"/> for <see cref="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer"/> as used in
            <see cref="M:Microsoft.ML.StandardTrainersCatalog.LbfgsMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.Options)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.Options.ShowTrainingStatistics">
            <summary>
            If set to <value>true</value> training statistics will be generated at the end of training.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer"/>.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">The name of the label column.</param>
            <param name="featureColumn">The name of the feature column.</param>
            <param name="weights">The name for the example weight column.</param>
            <param name="enforceNoNegativity">Enforce non-negative weights.</param>
            <param name="l1Weight">Weight of L1 regularizer term.</param>
            <param name="l2Weight">Weight of L2 regularizer term.</param>
            <param name="memorySize">Memory size for <see cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer"/>. Low=faster, less accurate.</param>
            <param name="optimizationTolerance">Threshold for optimizer convergence.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.Options)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.Fit(Microsoft.ML.IDataView,Microsoft.ML.Trainers.MaximumEntropyModelParameters)">
            <summary>
            Continues the training of a <see cref="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer"/> using an already trained <paramref name="modelParameters"/> and returns
            a <see cref="T:Microsoft.ML.Data.MulticlassPredictionTransformer`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase">
            <summary>
            Common linear model of multiclass classifiers. <see cref="T:Microsoft.ML.Trainers.LinearMulticlassModelParameters"/> contains a single
            linear model per class.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],System.Int32,System.Int32,System.String[],Microsoft.ML.Trainers.ModelStatisticsBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Trainers.MaximumEntropyModelParameters"/> class.
            This constructor is called by <see cref="T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer"/> to create the predictor.
            </summary>
            <param name="env">The host environment.</param>
            <param name="name">Registration name of this model's actual type.</param>
            <param name="weights">The array of weights vectors. It should contain <paramref name="numClasses"/> weights.</param>
            <param name="bias">The array of biases. It should contain contain <paramref name="numClasses"/> weights.</param>
            <param name="numClasses">The number of classes for multi-class classification. Must be at least 2.</param>
            <param name="numFeatures">The length of the feature vector.</param>
            <param name="labelNames">The optional label names. If specified not null, it should have the same length as <paramref name="numClasses"/>.</param>
            <param name="stats">The model statistics.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.Calibrate(System.Span{System.Single})">
            <summary>
            Post-processing function applied to scores of each class' linear model output.
            In <see cref="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.PredictCore(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)"/> we compute the i-th class' score
            by using inner product of the i-th linear coefficient vector <see cref="F:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.Weights"/>[i] and the input feature vector (plus bias).
            Then, <see cref="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.Calibrate(System.Span{System.Single})"/> will be called to adjust those raw scores.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.SaveAsTextCore(System.IO.TextWriter,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Actual implementation of <see cref="M:Microsoft.ML.Model.ICanSaveInTextFormat.SaveAsText(System.IO.TextWriter,Microsoft.ML.Data.RoleMappedSchema)"/> should happen in derived classes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.Microsoft#ML#Model#ICanSaveInTextFormat#SaveAsText(System.IO.TextWriter,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Redirect <see cref="M:Microsoft.ML.Model.ICanSaveInTextFormat.SaveAsText(System.IO.TextWriter,Microsoft.ML.Data.RoleMappedSchema)"/> call to the right function.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.Microsoft#ML#Model#ICanSaveSummary#SaveSummary(System.IO.TextWriter,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Summary is equivalent to its information in text format.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.SaveAsCodeCore(System.IO.TextWriter,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Actual implementation of <see cref="M:Microsoft.ML.Model.ICanSaveInSourceCode.SaveAsCode(System.IO.TextWriter,Microsoft.ML.Data.RoleMappedSchema)"/> should happen in derived classes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.SavePostTransformAsCode(System.IO.TextWriter,System.String)">
            <summary>
            The raw scores of all linear classifiers are stored in <see langword="float"/>[] <paramref name="scoresName"/>.
            Derived classes can use this functin to add C# code for post-transformation.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.Microsoft#ML#Model#ICanSaveInSourceCode#SaveAsCode(System.IO.TextWriter,Microsoft.ML.Data.RoleMappedSchema)">
            <summary>
            Redirect <see cref="M:Microsoft.ML.Model.ICanSaveInSourceCode.SaveAsCode(System.IO.TextWriter,Microsoft.ML.Data.RoleMappedSchema)"/> call to the right function.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.SaveAsPfaCore(Microsoft.ML.Model.Pfa.BoundPfaContext,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Actual implementation of <see cref="M:Microsoft.ML.Model.Pfa.ISingleCanSavePfa.SaveAsPfa(Microsoft.ML.Model.Pfa.BoundPfaContext,Newtonsoft.Json.Linq.JToken)"/> should happen in derived classes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.ApplyPfaPostTransform(Newtonsoft.Json.Linq.JToken)">
            <summary>
            This is called at the end of <see cref="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.SaveAsPfaCore(Microsoft.ML.Model.Pfa.BoundPfaContext,Newtonsoft.Json.Linq.JToken)"/> to adjust the final outputs of all linear models.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.Microsoft#ML#Model#Pfa#ISingleCanSavePfa#SaveAsPfa(Microsoft.ML.Model.Pfa.BoundPfaContext,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Redirect <see cref="M:Microsoft.ML.Model.Pfa.ISingleCanSavePfa.SaveAsPfa(Microsoft.ML.Model.Pfa.BoundPfaContext,Newtonsoft.Json.Linq.JToken)"/> call to the right function.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.SaveAsOnnxCore(Microsoft.ML.Model.OnnxConverter.OnnxContext,System.String[],System.String)">
            <summary>
            Actual implementation of <see cref="M:Microsoft.ML.Model.OnnxConverter.ISingleCanSaveOnnx.SaveAsOnnx(Microsoft.ML.Model.OnnxConverter.OnnxContext,System.String[],System.String)"/> should happen in derived classes.
            It's ok to make <see cref="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.SaveAsOnnxCore(Microsoft.ML.Model.OnnxConverter.OnnxContext,System.String[],System.String)"/> a <see langword="private protected"/> method in the future
            if any derived class wants to override.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.GetOnnxPostTransform">
            <summary>
            Post-transform applied to the raw scores produced by those linear models of all classes. For maximum entropy classification, it should be
            a softmax function. This function is used only in <see cref="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.SaveAsOnnxCore(Microsoft.ML.Model.OnnxConverter.OnnxContext,System.String[],System.String)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.Microsoft#ML#Model#OnnxConverter#ISingleCanSaveOnnx#SaveAsOnnx(Microsoft.ML.Model.OnnxConverter.OnnxContext,System.String[],System.String)">
            <summary>
            Redirect <see cref="M:Microsoft.ML.Model.OnnxConverter.ISingleCanSaveOnnx.SaveAsOnnx(Microsoft.ML.Model.OnnxConverter.OnnxContext,System.String[],System.String)"/> call to the right function.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.GetWeights(Microsoft.ML.Data.VBuffer{System.Single}[]@,System.Int32@)">
            <summary>
            Copies the weight vector for each class into a set of buffers.
            </summary>
            <param name="weights">A possibly reusable set of vectors, which will
            be expanded as necessary to accommodate the data.</param>
            <param name="numClasses">Set to the rank, which is also the logical length
            of <paramref name="weights"/>.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParametersBase.GetBiases">
            <summary>
            Gets the biases for the logistic regression predictor.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LinearMulticlassModelParameters">
            <summary>
            Linear model of multiclass classifiers. It outputs raw scores of all its linear models, and no probablistic output is provided.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParameters.GetVersionInfo">
            <summary>
            Function used to pass <see cref="P:Microsoft.ML.Trainers.LinearMulticlassModelParameters.VersionInfo"/> into parent class. It may be used when saving the model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParameters.Calibrate(System.Span{System.Single})">
            <summary>
            This function does not do any calibration. It's common in multi-class support vector machines where probabilitic outputs are not provided.
            </summary>
            <param name="dst">Score vector should be calibrated.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParameters.GetOnnxPostTransform">
            <summary>
            No post-transform is needed for non-clibrated classifier.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearMulticlassModelParameters.ApplyPfaPostTransform(Newtonsoft.Json.Linq.JToken)">
            <summary>
            No post-transform is needed for non-clibrated classifier.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.MaximumEntropyModelParameters">
            <summary>
            Linear maximum entropy model of multiclass classifiers. It outputs classes probabilities.
            This model is also known as multinomial logistic regression.
            Please see https://en.wikipedia.org/wiki/Multinomial_logistic_regression for details.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.MaximumEntropyModelParameters.GetVersionInfo">
            <summary>
            Function used to pass <see cref="P:Microsoft.ML.Trainers.MaximumEntropyModelParameters.VersionInfo"/> into parent class. It may be used when saving the model.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.MaximumEntropyModelParameters.Calibrate(System.Span{System.Single})">
            <summary>
            This function applies softmax to <paramref name="dst"/>. For details about softmax, see https://en.wikipedia.org/wiki/Softmax_function.
            </summary>
            <param name="dst">Score vector should be calibrated.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.MaximumEntropyModelParameters.SavePostTransformAsCode(System.IO.TextWriter,System.String)">
            <summary>
            Apply softmax function to <paramref name="scoresName"/>, which contains raw scores from all linear models.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.MaximumEntropyModelParameters.GetOnnxPostTransform">
            <summary>
            Apply softmax to the raw scores produced by the lienar models of all classes.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.MaximumEntropyModelParameters.ApplyPfaPostTransform(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Apply softmax to the raw scores produced by the lienar models of all classes.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.CoefficientStatistics">
            <summary>
            Represents a coefficient statistics object containing statistics about the calculated model parameters.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.CoefficientStatistics.Estimate">
            <summary>
            The model parameter (bias of weight) for which the statistics are generated.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.CoefficientStatistics.StandardError">
            <summary>
            The <a href="https://en.wikipedia.org/wiki/Standard_error">standard deviation</a> of the estimate of this model parameter (bias of weight).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.CoefficientStatistics.ZScore">
            <summary>
            The <a href="https://en.wikipedia.org/wiki/Standard_score">standard score</a> of the estimate of this model parameter (bias of weight).
            Quantifies by how much the estimate is above or below the mean.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.CoefficientStatistics.PValue">
            <summary>
            The <a href="https://en.wikipedia.org/wiki/P-value">probability value</a> of the estimate of this model parameter (bias of weight).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.CoefficientStatistics.Index">
            <summary>
            The index of the feature, in the Features vector, to which this model parameter (bias of weight) corresponds to.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.ModelStatisticsBase">
            <summary>
            Statistics for linear model parameters.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.ModelStatisticsBase.SaveSummaryInKeyValuePairs(Microsoft.ML.DataViewSchema.Column,System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Support method for linear models and <see cref="T:Microsoft.ML.Model.ICanGetSummaryInKeyValuePairs"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LinearModelParameterStatistics">
            <summary>
            Statistics for linear model parameters.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LinearModelParameterStatistics._weights">
            <summary>
            The weights of the LinearModelParams trained.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LinearModelParameterStatistics._bias">
            <summary>
            The bias of the LinearModelParams trained.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearModelParameterStatistics.GetBiasStatisticsForValue(System.Single)">
            <summary>
            Computes the standart deviation, Z-Score and p-Value for the value being passed as the bias.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearModelParameterStatistics.GetBiasStatistics">
            <summary>
            Computes the standart deviation, Z-Score and p-Value for the calculated bias.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearModelParameterStatistics.GetWeightsCoefficientStatistics(System.Int32)">
            <summary>
            Gets the coefficient statistics as an object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearModelParameterStatistics.SaveText(System.IO.TextWriter,Microsoft.ML.DataViewSchema.Column,System.Int32)">
            <summary>
            Saves the statistics in Text format.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearModelParameterStatistics.SaveSummaryInKeyValuePairs(Microsoft.ML.DataViewSchema.Column,System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Support method for linear models and <see cref="T:Microsoft.ML.Model.ICanGetSummaryInKeyValuePairs"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.MetaMulticlassTrainer`2.LabelColumn">
            <summary>
            The label column that the trainer expects.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.MetaMulticlassTrainer`2.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.MetaMulticlassTrainer{`0,`1}.OptionsBase,System.String,System.String,Microsoft.ML.Trainers.ITrainerEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.IPredictorProducing{System.Single}},Microsoft.ML.IPredictorProducing{System.Single}},Microsoft.ML.Calibrators.ICalibratorTrainer)">
            <summary>
            Initializes the <see cref="T:Microsoft.ML.Trainers.MetaMulticlassTrainer`2"/> from the <see cref="T:Microsoft.ML.Trainers.MetaMulticlassTrainer`2.OptionsBase"/> class.
            </summary>
            <param name="env">The private instance of the <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>.</param>
            <param name="options">The legacy arguments <see cref="T:Microsoft.ML.Trainers.MetaMulticlassTrainer`2.OptionsBase"/>class.</param>
            <param name="name">The component name.</param>
            <param name="labelColumn">The label column for the metalinear trainer and the binary trainer.</param>
            <param name="singleEstimator">The binary estimator.</param>
            <param name="calibrator">The calibrator. If a calibrator is not explicitly provided, it will default to <see cref="T:Microsoft.ML.Calibrators.PlattCalibratorTrainer"/></param>
        </member>
        <member name="M:Microsoft.ML.Trainers.MetaMulticlassTrainer`2.Microsoft#ML#ITrainer{Microsoft#ML#IPredictor}#Train(Microsoft.ML.TrainContext)">
            <summary>
            The legacy train method.
            </summary>
            <param name="context">The trainig context for this learner.</param>
            <returns>The trained model.</returns>
        </member>
        <member name="M:Microsoft.ML.Trainers.MetaMulticlassTrainer`2.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
             Gets the output columns.
            </summary>
            <param name="inputSchema">The input schema. </param>
            <returns>The output <see cref="T:Microsoft.ML.SchemaShape"/></returns>
        </member>
        <member name="M:Microsoft.ML.Trainers.MetaMulticlassTrainer`2.Fit(Microsoft.ML.IDataView)">
            <summary>
            Fits the data to the trainer.
            </summary>
            <param name="input">The input data to fit to.</param>
            <returns>The transformer.</returns>
        </member>
        <member name="T:Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for training a multiclass Naive Bayes model that supports binary feature values.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [NaiveBayes](xref:Microsoft.ML.StandardTrainersCatalog.NaiveBayes(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-multiclass-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Multiclass classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Training Algorithm Details
             [Naive Bayes](https://en.wikipedia.org/wiki/Naive_Bayes_classifier)
             is a probabilistic classifier that can be used for multiclass problems.
             Using Bayes' theorem, the conditional probability for a sample belonging to a class
             can be calculated based on the sample count for each feature combination groups.
             However, Naive Bayes Classifier is feasible only if the number of features and
             the values each feature can take is relatively small.
             It assumes independence among the presence of features in a class even though
             they may be dependent on each other.
             This multi-class trainer accepts "binary" feature values of type float:
             feature values that are greater than zero are treated as `true` and feature values
             that are less or equal to 0 are treated as `false`.
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.NaiveBayes(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String)"/>
        </member>
        <member name="P:Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer.PredictionKind">
            <summary> Return the type of prediction task.</summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer.Info">
            <summary>
            Auxiliary information about the trainer in terms of its capabilities
            and requirements.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">The name of the label column.</param>
            <param name="featureColumn">The name of the feature column.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer.Options)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer"/>
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters">
            <summary>
            Model parameters for <see cref="T:Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters.PredictionKind">
            <summary> Return the type of prediction task.</summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters.GetLabelHistogram">
            <summary>
            Get the label histogram.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters.GetLabelHistogramLong">
            <summary>
            Get the label histogram with generic type long.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters.GetFeatureHistogram">
            <summary>
            Get the feature histogram.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters.GetFeatureHistogramLong">
            <summary>
            Get the feature histogram with generic type long.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Int64[],System.Int64[][],System.Int32)">
            <summary>
            Instantiates new model parameters from trained model.
            </summary>
            <param name="env">The host environment.</param>
            <param name="labelHistogram">The histogram of labels.</param>
            <param name="featureHistogram">The feature histogram.</param>
            <param name="featureCount">The number of features.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext)">
            <remarks>
            The unit test TestEntryPoints.LoadEntryPointModel() exercises the ReadIntArrary(int size) codepath below
            as its ctx.Header.ModelVerWritten is 0x00010001, and the persistent model that gets loaded and executed
            for this unit test is located at test\data\backcompat\ep_model3.zip/>
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters.Microsoft#ML#Model#OnnxConverter#ISingleCanSaveOnnx#SaveAsOnnx(Microsoft.ML.Model.OnnxConverter.OnnxContext,System.String[],System.String)">
            <summary>
            Creates an Onnx inferencing model by vectorizing and following the logic found in <see cref="M:Microsoft.ML.Trainers.NaiveBayesMulticlassModelParameters.Map(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)"/>
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.OneVersusAllTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for training a one-versus-all multi-class classifier that uses the specified binary classifier.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [OneVersusAll](xref:Microsoft.ML.StandardTrainersCatalog.OneVersusAll``1(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.ITrainerEstimator{Microsoft.ML.Data.BinaryPredictionTransformer{``0},``0},System.String,System.Boolean,Microsoft.ML.IEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.ICalibrator}},System.Int32,System.Boolean)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-multiclass-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Multiclass classification |
             | Is normalization required? | Depends on the underlying binary classifier |
             | Is caching required? | Yes |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Training Algorithm Details
             In one-versus-all (OVA) strategy, a binary classification algorithm is used to train one classifier for each class,
             which distinguishes that class from all other classes. Prediction is then performed by running
             these binary classifiers and choosing the prediction with the highest confidence score.
             This algorithm can be used with any of the binary classifiers in ML.NET. A few binary classifiers
             already have implementation for multi-class problems, thus users can choose either one depending on the context.
             The OVA version of a binary classifier, such as wrapping a <xref:Microsoft.ML.Trainers.LightGbm.LightGbmBinaryTrainer>,
             can be different from <xref:Microsoft.ML.Trainers.LightGbm.LightGbmMulticlassTrainer>, which develops a multi-class classifier directly.
             Note that even if the classifier indicates that it does not need caching, OneVersusAll will always
             request caching, as it will be performing multiple passes over the data set.
             This trainer will request normalization from the data pipeline if the classifier indicates it would benefit from it.
            
             This can allow you to exploit trainers that do not naturally have a
             multiclass option, for example, using the <xref:Microsoft.ML.Trainers.FastTree.FastTreeBinaryTrainer>
             to solve a multiclass problem.
             Alternately, it can allow ML.NET to solve a "simpler" problem even in the cases
             where the trainer has a multiclass option, but using it directly is not
             practical due to, usually, memory constraints. For example, while a multiclass
             logistic regression is a more principled way to solve a multiclass problem, it
             requires that the trainer store a lot more intermediate state in the form of
             L-BFGS history for all classes *simultaneously*, rather than just one-by-one
             as would be needed for a one-versus-all classification model.
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.OneVersusAll``1(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.ITrainerEstimator{Microsoft.ML.Data.BinaryPredictionTransformer{``0},``0},System.String,System.Boolean,Microsoft.ML.IEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.ICalibrator}},System.Int32,System.Boolean)" />
        </member>
        <member name="T:Microsoft.ML.Trainers.OneVersusAllTrainer.Options">
            <summary>
            Options passed to <see cref="T:Microsoft.ML.Trainers.OneVersusAllTrainer"/>
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.OneVersusAllTrainer.Options.UseProbabilities">
            <summary>
            Whether to use probabilities (vs. raw outputs) to identify top-score category.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OneVersusAllTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.OneVersusAllTrainer.Options)">
            <summary>
            Constructs a <see cref="T:Microsoft.ML.Trainers.OneVersusAllTrainer"/> trainer supplying a <see cref="T:Microsoft.ML.Trainers.OneVersusAllTrainer.Options"/>.
            </summary>
            <param name="env">The private <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/> for this estimator.</param>
            <param name="options">The legacy <see cref="T:Microsoft.ML.Trainers.OneVersusAllTrainer.Options"/></param>
        </member>
        <member name="M:Microsoft.ML.Trainers.OneVersusAllTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.ITrainerEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.IPredictorProducing{System.Single}},Microsoft.ML.IPredictorProducing{System.Single}},System.String,System.Boolean,Microsoft.ML.Calibrators.ICalibratorTrainer,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.OneVersusAllTrainer"/>.
            </summary>
            <param name="env">The <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/> instance.</param>
            <param name="binaryEstimator">An instance of a binary <see cref="T:Microsoft.ML.Trainers.ITrainerEstimator`2"/> used as the base trainer.</param>
            <param name="calibrator">The calibrator. If a calibrator is not provided, it will default to <see cref="T:Microsoft.ML.Calibrators.PlattCalibratorTrainer"/></param>
            <param name="labelColumnName">The name of the label colum.</param>
            <param name="imputeMissingLabelsAsNegative">If true will treat missing labels as negative labels.</param>
            <param name="maximumCalibrationExampleCount">Number of instances to train the calibrator.</param>
            <param name="useProbabilities">Use probabilities (vs. raw outputs) to identify top-score category.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.OneVersusAllTrainer.Fit(Microsoft.ML.IDataView)">
            <summary> Trains a <see cref="T:Microsoft.ML.Data.MulticlassPredictionTransformer`1"/> model.</summary>
            <param name="input">The input data.</param>
            <returns>A <see cref="T:Microsoft.ML.Data.MulticlassPredictionTransformer`1"/> model./></returns>
        </member>
        <member name="T:Microsoft.ML.Trainers.OneVersusAllModelParameters">
            <summary>
            Model parameters for <see cref="T:Microsoft.ML.Trainers.OneVersusAllTrainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.OneVersusAllModelParameters.SubModelParameters">
            <summary>
            Retrieves the model parameters.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.OneVersusAllModelParameters.PredictionKind">
            <summary>
            The type of the prediction task.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.OneVersusAllModelParameters.OutputFormula">
            <summary>
            Function applied to output of predictors. Assume that we have n predictors (one per class) and for the i-th predictor,
            y_i is its raw output and p_i is its probability output. Note that not all predictors are able to produce probability output.
            <para>
            <see cref="F:Microsoft.ML.Trainers.OneVersusAllModelParameters.OutputFormula.Raw"/>: output the result of predictors without post-processing. Output is [y_1, ..., y_n].
            <see cref="F:Microsoft.ML.Trainers.OneVersusAllModelParameters.OutputFormula.ProbabilityNormalization"/>: fetch probability output of each class probability from provided predictors and make sure the sume of class probabilities is one.
            Output is [p_1 / (p_1 + ... + p_n), ..., p_n / (p_1 + ... + p_n)].
            <see cref="F:Microsoft.ML.Trainers.OneVersusAllModelParameters.OutputFormula.Softmax"/>: Generate probability by feeding raw outputs to softmax function. Output is [z_1, ..., z_n], where z_i is exp(y_i) / (exp(y_1) + ... + exp(y_n)).
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OneVersusAllModelParameters.Create(Microsoft.ML.Runtime.IHost,Microsoft.ML.IPredictorProducing{System.Single}[])">
            <summary>
            Create a <see cref="T:Microsoft.ML.Trainers.OneVersusAllModelParameters"/> from an array of predictors.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OneVersusAllModelParameters.ImplDist.GetMapper">
            <summary>
            Each predictor produces a probability of a class. All classes' probabilities are normalized so that
            their sum is one.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.PairwiseCouplingTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for training a pairwise coupling multi-class classifier that uses the specified binary classifier.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [PairwiseCoupling](xref:Microsoft.ML.StandardTrainersCatalog.PairwiseCoupling``1(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.ITrainerEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{``0},``0},System.String,System.Boolean,Microsoft.ML.IEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.ICalibrator}},System.Int32)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-multiclass-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Multiclass classification |
             | Is normalization required? | Depends on the underlying binary classifier |
             | Is caching required? | Yes |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | No |
            
             ### Training Algorithm Details
             In this strategy, a binary classification algorithm is trained on each pair of classes.
             The pairs are unordered but created with replacement: so, if there were three classes, 0, 1,
             2, we would train classifiers for the pairs (0,0), (0,1), (0,2), (1,1), (1,2),
             and (2,2). For each binary classifier, an input data point is considered a
             positive example if it is in either of the two classes in the pair, and a
             negative example otherwise. At prediction time, the probabilities for each
             pair of classes is considered as the probability of being in either class of
             the pair given the data, and the final predictive probabilities out of that
             per class are calculated given the probability that an example is in any given
             pair.
            
             This can allow you to exploit trainers that do not naturally have a
             multiclass option, for example, using the <xref:Microsoft.ML.Trainers.FastTree.FastTreeBinaryTrainer>
             to solve a multiclass problem.
             Alternately, it can allow ML.NET to solve a "simpler" problem even in the cases
             where the trainer has a multiclass option, but using it directly is not
             practical due to, usually, memory constraints. For example, while a multiclass
             logistic regression is a more principled way to solve a multiclass problem, it
             requires that the trainer store a lot more intermediate state in the form of
             L-BFGS history for all classes *simultaneously*, rather than just one-by-one
             as would be needed for a pairwise coupling classification model.
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.PairwiseCoupling``1(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.ITrainerEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{``0},``0},System.String,System.Boolean,Microsoft.ML.IEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.ICalibrator}},System.Int32)" />
        </member>
        <member name="T:Microsoft.ML.Trainers.PairwiseCouplingTrainer.Options">
            <summary>
            Options passed to <see cref="T:Microsoft.ML.Trainers.PairwiseCouplingTrainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.PairwiseCouplingTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.PairwiseCouplingTrainer.Options)">
            <summary>
            Constructs a <see cref="T:Microsoft.ML.Trainers.PairwiseCouplingTrainer"/> trainer supplying the base trainer to use, for the classification task
            through the <see cref="T:Microsoft.ML.Trainers.PairwiseCouplingTrainer.Options"/>Options.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.PairwiseCouplingTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.ITrainerEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.IPredictorProducing{System.Single}},Microsoft.ML.IPredictorProducing{System.Single}},System.String,System.Boolean,Microsoft.ML.Calibrators.ICalibratorTrainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Trainers.PairwiseCouplingTrainer"/>
            </summary>
            <param name="env">The <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/> instance.</param>
            <param name="binaryEstimator">An instance of a binary <see cref="T:Microsoft.ML.Trainers.ITrainerEstimator`2"/> used as the base trainer.</param>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="imputeMissingLabelsAsNegative">Whether to treat missing labels as having negative labels, instead of keeping them missing.</param>
            <param name="calibrator">The calibrator to use for each model instance. If a calibrator is not explicitely provided, it will default to <see cref="T:Microsoft.ML.Calibrators.PlattCalibratorTrainer"/></param>
            <param name="maximumCalibrationExampleCount">Number of instances to train the calibrator.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.PairwiseCouplingTrainer.Fit(Microsoft.ML.IDataView)">
            <summary>
            Fits the data to the transformer
            </summary>
            <param name="input">The input data.</param>
            <returns>The trained predictor.</returns>
        </member>
        <member name="T:Microsoft.ML.Trainers.PairwiseCouplingModelParameters">
            <summary>
            Model parameters for <see cref="T:Microsoft.ML.Trainers.PairwiseCouplingTrainer"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.PairwiseCouplingModelParameters.PredictionKind">
            <summary> Return the type of prediction task.</summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.AveragedLinearOptions">
            <summary>
            Arguments class for averaged linear trainers.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedLinearOptions.LearningRate">
            <summary>
            Learning rate.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedLinearOptions.DecreaseLearningRate">
            <summary>
            Determine whether to decrease the <see cref="F:Microsoft.ML.Trainers.AveragedLinearOptions.LearningRate"/> or not.
            </summary>
            <value>
            <see langword="true" /> to decrease the <see cref="F:Microsoft.ML.Trainers.AveragedLinearOptions.LearningRate"/> as iterations progress; otherwise, <see langword="false" />.
            Default is <see langword="false" />. The learning rate will be reduced with every weight update proportional to the square root of the number of updates.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedLinearOptions.ResetWeightsAfterXExamples">
            <summary>
            Number of examples after which weights will be reset to the current average.
            </summary>
            <value>
            Default is <see langword="null" />, which disables this feature.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedLinearOptions.LazyUpdate">
            <summary>
            Determines when to update averaged weights.
            </summary>
            <value>
            <see langword="true" /> to update averaged weights only when loss is nonzero.
            <see langword="false" /> to update averaged weights on every example.
            Default is <see langword="true" />.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedLinearOptions.L2Regularization">
            <summary>
            The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedLinearOptions.RecencyGain">
            <summary>
            Extra weight given to more recent updates.
            </summary>
            <value>
            Default is 0, i.e. no extra gain.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedLinearOptions.RecencyGainMultiplicative">
            <summary>
            Determines whether <see cref="F:Microsoft.ML.Trainers.AveragedLinearOptions.RecencyGain"/> is multiplicative or additive.
            </summary>
            <value>
            <see langword="true" /> means <see cref="F:Microsoft.ML.Trainers.AveragedLinearOptions.RecencyGain"/> is multiplicative.
            <see langword="false" /> means <see cref="F:Microsoft.ML.Trainers.AveragedLinearOptions.RecencyGain"/> is additive.
            Default is <see langword="false" />.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedLinearOptions.Averaged">
            <summary>
            Determines whether to do averaging or not.
            </summary>
            <value>
            <see langword="true" /> to do averaging; otherwise, <see langword="false" />.
            Default is <see langword="true" />.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedLinearOptions.AveragedTolerance">
            <summary>
            The inexactness tolerance for averaging.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.AveragedLinearTrainer`2">
            <summary>
            Base class for averaged linear trainers.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.AveragedLinearTrainer`2.AveragedTrainStateBase.AveragedMargin(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Return the raw margin from the decision hyperplane
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.AveragedLinearTrainer`2.AveragedTrainStateBase.IncrementAverageNonLazy">
            <summary>
            Add current weights and bias to average weights/bias.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.AveragedPerceptronTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> to predict a target using a linear binary classification model trained with the averaged perceptron.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [AveragedPerceptron](xref:Microsoft.ML.StandardTrainersCatalog.AveragedPerceptron(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,Microsoft.ML.Trainers.IClassificationLoss,System.Single,System.Boolean,System.Single,System.Int32))
             or [AveragedPerceptron(Options)](xref:Microsoft.ML.StandardTrainersCatalog.AveragedPerceptron(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.AveragedPerceptronTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification-no-prob.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Training Algorithm Details
             The perceptron is a classification algorithm that makes its predictions by finding a separating hyperplane.
             For instance, with feature values $f_0, f_1,..., f_{D-1}$, the prediction is given by determining what side of the hyperplane the point falls into.
             That is the same as the sign of the feautures' weighted sum, i.e. $\sum_{i = 0}^{D-1} (w_i * f_i) + b$, where $w_0, w_1,..., w_{D-1}$
             are the weights computed by the algorithm, and $b$ is the bias computed by the algorithm.
            
             The perceptron is an online algorithm, which means it processes the instances in the training set one at a time.
             It starts with a set of initial weights (zero, random, or initialized from a previous learner). Then, for each example in the training set, the weighted sum of the features is computed.
             If this value has the same sign as the label of the current example, the weights remain the same. If they have opposite signs,
             the weights vector is updated by either adding or subtracting (if the label is positive or negative, respectively) the feature vector of the current example,
             multiplied by a factor 0 < a <= 1, called the learning rate. In a generalization of this algorithm, the weights are updated by adding the feature vector multiplied by the learning rate,
             and by the gradient of some loss function (in the specific case described above, the loss is hinge-loss, whose gradient is 1 when it is non-zero).
            
             In Averaged Perceptron (aka voted-perceptron), for each iteration, i.e. pass through the training data, a weight vector is calculated as explained above.
             The final prediction is then calculated by averaging the weighted sum from each weight vector and looking at the sign of the result.
            
             For more information see [Wikipedia entry for Perceptron](https://en.wikipedia.org/wiki/Perceptron)
             or [Large Margin Classification Using the Perceptron Algorithm](https://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.48.8200).
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.AveragedPerceptron(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,Microsoft.ML.Trainers.IClassificationLoss,System.Single,System.Boolean,System.Single,System.Int32)" />
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.AveragedPerceptron(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.AveragedPerceptronTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.AveragedPerceptronTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.AveragedPerceptronTrainer.Options">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.AveragedPerceptronTrainer"/> as used in
            <see cref="M:Microsoft.ML.StandardTrainersCatalog.AveragedPerceptron(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.AveragedPerceptronTrainer.Options)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedPerceptronTrainer.Options.ClassificationLossFunctionFactory">
            <summary>
            A custom <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.AveragedPerceptronTrainer.Options.LossFunction">
            <summary>
            A custom <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedPerceptronTrainer.Options.Calibrator">
            <summary>
            The <a href="https://en.wikipedia.org/wiki/Calibration_(statistics)">calibrator</a> for producing probabilities. Default is exponential (aka Platt) calibration.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.AveragedPerceptronTrainer.Options.MaxCalibrationExamples">
            <summary>
            The maximum number of examples to use when training the calibrator.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.AveragedPerceptronTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,Microsoft.ML.Trainers.IClassificationLoss,System.Single,System.Boolean,System.Single,System.Int32)">
            <summary>
            Trains a linear binary classifier using the averaged perceptron.
            <a href='https://en.wikipedia.org/wiki/Perceptron'>Wikipedia entry for Perceptron</a>
            </summary>
            <param name="env">The local instance of the <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/></param>
            <param name="lossFunction">The classification loss function. </param>
            <param name="labelColumnName">The name of the label column. </param>
            <param name="featureColumnName">The name of the feature column.</param>
            <param name="learningRate">The learning rate. </param>
            <param name="decreaseLearningRate">Whether to decrease learning rate as iterations progress.</param>
            <param name="l2Regularization">Weight of L2 regularization term.</param>
            <param name="numberOfIterations">The number of training iterations.</param>
        </member>
        <member name="T:Microsoft.ML.Trainers.LinearSvmTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> to predict a target using a linear binary classification model
             trained with Linear SVM.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [LinearSvm](xref:Microsoft.ML.StandardTrainersCatalog.LinearSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Int32))
             or [LinearSvm(Options)](xref:Microsoft.ML.StandardTrainersCatalog.LinearSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LinearSvmTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification-no-prob.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Training Algorithm Details
             Linear [SVM](https://en.wikipedia.org/wiki/Support-vector_machine#Linear_SVM) implements
             an algorithm that finds a hyperplane in the feature space for binary classification, by solving an [SVM problem](https://en.wikipedia.org/wiki/Support-vector_machine#Computing_the_SVM_classifier).
             For instance, with feature values $f_0, f_1,..., f_{D-1}$, the prediction is given by determining what side of the hyperplane the point falls into.
             That is the same as the sign of the feautures' weighted sum, i.e. $\sum_{i = 0}^{D-1} \left(w_i * f_i \right) + b$, where $w_0, w_1,..., w_{D-1}$
             are the weights computed by the algorithm, and $b$ is the bias computed by the algorithm.
            
             Linear SVM implements the PEGASOS method, which alternates between stochastic gradient descent steps and projection steps,
             introduced in [this paper](http://ttic.uchicago.edu/~shai/papers/ShalevSiSr07.pdf) by Shalev-Shwartz, Singer and Srebro.
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.LinearSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LinearSvmTrainer.Options)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.LinearSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Int32)"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.LinearSvmTrainer.Options">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.LinearSvmTrainer"/> as used in
            <see cref="M:Microsoft.ML.StandardTrainersCatalog.LinearSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LinearSvmTrainer.Options)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.LinearSvmTrainer.Options.ExampleWeightColumnName">
            <summary>
            Column to use for example weight.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearSvmTrainer.TrainState.ProcessDataInstance(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,System.Single)">
            <summary>
            Observe an example and update weights if necesary.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearSvmTrainer.TrainState.UpdateWeights(Microsoft.ML.Data.VBuffer{System.Single}@,System.Single)">
            <summary>
            Updates the weights at the end of the batch. Since weightsUpdate can be an instance
            feature vector, this function should not change the contents of weightsUpdate.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearSvmTrainer.TrainState.Margin(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Return the raw margin from the decision hyperplane.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearSvmTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.LinearSvmTrainer"/>.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">The name of the label column. </param>
            <param name="featureColumn">The name of the feature column.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="numberOfIterations">The number of training iteraitons.</param>
        </member>
        <member name="T:Microsoft.ML.Trainers.OnlineGradientDescentTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for training a linear regression model using
             <a href="https://en.wikipedia.org/wiki/Gradient_descent">Online Gradient Descent (OGD)</a> for estimating the parameters of the linear regression model.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [OnlineGradientDescent](xref:Microsoft.ML.StandardTrainersCatalog.OnlineGradientDescent(Microsoft.ML.RegressionCatalog.RegressionTrainers,System.String,System.String,Microsoft.ML.Trainers.IRegressionLoss,System.Single,System.Boolean,System.Single,System.Int32))
             or [OnlineGradientDescent(Options)](xref:Microsoft.ML.StandardTrainersCatalog.OnlineGradientDescent(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.OnlineGradientDescentTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-regression.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Regression |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Training Algorithm Details
             Stochastic gradient descent uses a simple yet efficient iterative technique to fit model coefficients using error gradients for convex loss functions.
             Online Gradient Descent (OGD) implements the standard (non-batch) stochastic gradient descent, with a choice of loss functions,
             and an option to update the weight vector using the average of the vectors seen over time (averaged argument is set to True by default).
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.OnlineGradientDescent(Microsoft.ML.RegressionCatalog.RegressionTrainers,System.String,System.String,Microsoft.ML.Trainers.IRegressionLoss,System.Single,System.Boolean,System.Single,System.Int32)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.OnlineGradientDescent(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.OnlineGradientDescentTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.OnlineGradientDescentTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.OnlineGradientDescentTrainer.Options">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.OnlineGradientDescentTrainer"/> as used in
            [OnlineGradientDescent(Options)](xref:Microsoft.ML.StandardTrainersCatalog.OnlineGradientDescent(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.OnlineGradientDescentTrainer.Options)).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.OnlineGradientDescentTrainer.Options.LossFunction">
            <summary>
            A custom <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OnlineGradientDescentTrainer.Options.#ctor">
            <summary>
            Create a new <see cref="T:Microsoft.ML.Trainers.OnlineGradientDescentTrainer.Options"/> object with default values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OnlineGradientDescentTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.Single,System.Boolean,System.Single,System.Int32,Microsoft.ML.Trainers.IRegressionLoss)">
            <summary>
            Trains a new <see cref="T:Microsoft.ML.Data.RegressionPredictionTransformer`1"/>.
            </summary>
            <param name="env">The pricate instance of <see cref="T:Microsoft.ML.Runtime.IHostEnvironment"/>.</param>
            <param name="labelColumn">Name of the label column.</param>
            <param name="featureColumn">Name of the feature column.</param>
            <param name="learningRate">The learning Rate.</param>
            <param name="decreaseLearningRate">Decrease learning rate as iterations progress.</param>
            <param name="l2Regularization">Weight of L2 regularization term.</param>
            <param name="numberOfIterations">Number of training iterations through the data.</param>
            <param name="lossFunction">The custom loss functions. Defaults to <see cref="T:Microsoft.ML.Trainers.SquaredLoss"/> if not provided.</param>
        </member>
        <member name="T:Microsoft.ML.Trainers.OnlineLinearOptions">
            <summary>
            Arguments class for online linear trainers.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.OnlineLinearOptions.NumberOfIterations">
            <summary>
            Number of passes through the training dataset.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.OnlineLinearOptions.InitialWeights">
            <summary>
            Initial weights and bias, comma-separated.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.OnlineLinearOptions.InitialWeightsDiameter">
            <summary>
            Initial weights and bias scale.
            </summary>
            <value>
            This property is only used if the provided value is positive and <see cref="F:Microsoft.ML.Trainers.OnlineLinearOptions.InitialWeights"/> is not specified.
            The weights and bias will be randomly selected from InitialWeights * [-0.5,0.5] interval with uniform distribution.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.OnlineLinearOptions.Shuffle">
            <summary>
            Determines whether to shuffle data for each training iteration.
            </summary>
            <value>
            <see langword="true" /> to shuffle data for each training iteration; otherwise, <see langword="false" />.
            Default is <see langword="true" />.
            </value>
        </member>
        <member name="T:Microsoft.ML.Trainers.OnlineLinearTrainer`2">
            <summary>
            Base class for online linear trainers. Online trainers can be updated incrementally with additional data.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase">
            <summary>
            An object to hold the mutable updatable state for the online linear trainers. Specific algorithms should subclass
            this, and return the instance via <see cref="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.MakeState(Microsoft.ML.Runtime.IChannel,System.Int32,Microsoft.ML.Trainers.LinearModelParameters)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.Iteration">
            <summary>
            The number of iterations. Incremented by <see cref="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.BeginIteration(Microsoft.ML.Runtime.IChannel)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.NumIterExamples">
            <summary>
            The number of examples in the current iteration. Incremented by <see cref="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.ProcessDataInstance(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,System.Single)"/>,
            and reset by <see cref="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.BeginIteration(Microsoft.ML.Runtime.IChannel)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.Weights">
            <summary>
            Current weights. The weights vector is considered to be scaled by <see cref="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.WeightsScale"/>. Storing this separately
            allows us to avoid the overhead of an explicit scaling, which some algorithms will attempt to do on each example's update.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.WeightsScale">
            <summary>
            The implicit scaling factor for <see cref="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.Weights"/>. Note that this does not affect <see cref="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.Bias"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.Bias">
            <summary>
            The intercept term.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.ScaleWeights">
            <summary>
            Propagates the <see cref="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.WeightsScale"/> to the <see cref="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.Weights"/> vector.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.ScaleWeightsIfNeeded">
            <summary>
            Conditionally propagates the <see cref="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.WeightsScale"/> to the <see cref="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.Weights"/> vector
            when it reaches a scale where additions to weights would start dropping too much precision.
            ("Too much" is mostly empirically defined.)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.BeginIteration(Microsoft.ML.Runtime.IChannel)">
            <summary>
            Called by <see cref="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainCore(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.Trainers.OnlineLinearTrainer{`0,`1}.TrainStateBase)"/> at the start of a pass over the dataset.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.FinishIteration(Microsoft.ML.Runtime.IChannel)">
            <summary>
            Called by <see cref="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainCore(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.Trainers.OnlineLinearTrainer{`0,`1}.TrainStateBase)"/> after a pass over the dataset.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.ProcessDataInstance(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,System.Single)">
            <summary>
            This should be overridden by derived classes. This implementation simply increments <see cref="F:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.NumIterExamples"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.CurrentMargin(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Return the raw margin from the decision hyperplane
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.Margin(Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            The default implementation just calls <see cref="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.TrainStateBase.CurrentMargin(Microsoft.ML.Data.VBuffer{System.Single}@)"/>.
            </summary>
            <param name="feat"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Trainers.OnlineLinearTrainer`2.Fit(Microsoft.ML.IDataView,Microsoft.ML.Trainers.LinearModelParameters)">
            <summary>
            Continues the training of a <see cref="T:Microsoft.ML.Trainers.OnlineLinearTrainer`2"/> using an already trained <paramref name="modelParameters"/> and returns a <see cref="T:Microsoft.ML.ITransformer"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for training a Poisson regression model.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [LbfgsPoissonRegression](xref:Microsoft.ML.StandardTrainersCatalog.LbfgsPoissonRegression(Microsoft.ML.RegressionCatalog.RegressionTrainers,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean))
             or [LbfgsPoissonRegression(Options)](xref:Microsoft.ML.StandardTrainersCatalog.LbfgsPoissonRegression(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-regression.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Regression |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Training Algorithm Details
             [Poisson regression](https://en.wikipedia.org/wiki/Poisson_regression) is a parameterized regression method.
             It assumes that the log of the conditional mean of the dependent variable follows a linear function of the dependent variables.
             Assuming that the dependent variable follows a Poisson distribution, the regression parameters can be estimated by maximizing the likelihood of the obtained observations.
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.LbfgsPoissonRegression(Microsoft.ML.RegressionCatalog.RegressionTrainers,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.LbfgsPoissonRegression(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer.Options">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer"/> as used in
            [LbfgsPoissonRegression(Options)](xref:Microsoft.ML.StandardTrainersCatalog.LbfgsPoissonRegression(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer.Options)).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">The name of the label column.</param>
            <param name="featureColumn">The name of the feature column.</param>
            <param name="weights">The name for the example weight column.</param>
            <param name="l1Weight">Weight of L1 regularizer term.</param>
            <param name="l2Weight">Weight of L2 regularizer term.</param>
            <param name="optimizationTolerance">Threshold for optimizer convergence.</param>
            <param name="memorySize">Memory size for <see cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer"/>. Low=faster, less accurate.</param>
            <param name="enforceNoNegativity">Enforce non-negative weights.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer.Options)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer"/>
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer.Fit(Microsoft.ML.IDataView,Microsoft.ML.Trainers.LinearModelParameters)">
            <summary>
            Continues the training of a <see cref="T:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer"/> using an already trained <paramref name="linearModel"/> and returns
            a <see cref="T:Microsoft.ML.Data.RegressionPredictionTransformer`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.LinearTrainerBase`2.ShuffleData">
            <summary>
            Whether data is to be shuffled every epoch.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LinearTrainerBase`2.PrepareDataFromTrainingExamples(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.RoleMappedData,System.Int32@)">
            <summary>
            This method ensures that the data meets the requirements of this trainer and its
            subclasses, injects necessary transforms, and throws if it couldn't meet them.
            </summary>
            <param name="ch">The channel</param>
            <param name="examples">The training examples</param>
            <param name="weightSetCount">Gets the length of weights and bias array. For binary classification and regression,
            this is 1. For multi-class classification, this equals the number of classes on the label.</param>
            <returns>A potentially modified version of <paramref name="examples"/></returns>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaTrainerBase`3.OptionsBase">
            <summary>
            Options for the SDCA-based trainers.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaTrainerBase`3.OptionsBase.L2Regularization">
            <summary>
            The L2 <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a> hyperparameter.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaTrainerBase`3.OptionsBase.L1Regularization">
            <summary>
            The L1 <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a> hyperparameter.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaTrainerBase`3.OptionsBase.NumberOfThreads">
            <summary>
            The degree of lock-free parallelism.
            </summary>
            <value>
            Defaults to automatic depending on data sparseness. Determinism is not guaranteed.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaTrainerBase`3.OptionsBase.ConvergenceTolerance">
            <summary>
            The tolerance for the ratio between duality gap and primal loss for convergence checking.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaTrainerBase`3.OptionsBase.MaximumNumberOfIterations">
            <summary>
            The maximum number of passes to perform over the data.
            </summary>
            <value>
            Set to 1 to simulate online learning. Defaults to automatic.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaTrainerBase`3.OptionsBase.Shuffle">
            <summary>
            Determines whether to shuffle data for each training iteration.
            </summary>
            <value>
            <see langword="true" /> to shuffle data for each training iteration; otherwise, <see langword="false" />.
            Default is <see langword="true" />.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaTrainerBase`3.OptionsBase.ConvergenceCheckFrequency">
            <summary>
            Determines the frequency of checking for convergence in terms of number of iterations.
            </summary>
            <value>
            Set to zero or negative value to disable checking. If <see langword="null"/>, it defaults to <see cref="F:Microsoft.ML.Trainers.SdcaTrainerBase`3.OptionsBase.NumberOfThreads"/>."
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaTrainerBase`3.OptionsBase.BiasLearningRate">
            <summary>
            The learning rate for adjusting bias from being regularized.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.InitializeConvergenceMetrics(System.String[]@,System.Double[]@)">
            <summary>
            Returns the names of the metrics reported by <see cref="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.CheckConvergence(Microsoft.ML.Runtime.IProgressChannel,System.Int32,Microsoft.ML.Trainers.FloatLabelCursor.Factory,Microsoft.ML.Trainers.SdcaTrainerBase{`0,`1,`2}.DualsTableBase,Microsoft.ML.Trainers.SdcaTrainerBase{`0,`1,`2}.IdToIdxLookup,Microsoft.ML.Data.VBuffer{System.Single}[],Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],System.Single[],System.Single[],System.Single[],System.Int64,System.Double[],System.Double@,System.Int32@)"/>, as well as the initial values.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.TrainWithoutLock(Microsoft.ML.Runtime.IProgressChannelProvider,Microsoft.ML.Trainers.FloatLabelCursor.Factory,System.Random,Microsoft.ML.Trainers.SdcaTrainerBase{`0,`1,`2}.IdToIdxLookup,System.Int32,Microsoft.ML.Trainers.SdcaTrainerBase{`0,`1,`2}.DualsTableBase,System.Single[],System.Single[],System.Single,Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],System.Single[])">
            <summary>
            Train the SDCA optimizer with one iteration over the entire training examples.
            </summary>
            <param name="progress">The progress reporting channel.</param>
            <param name="cursorFactory">The cursor factory to create cursors over the training examples.</param>
            <param name="rand">
            The random number generator to generate random numbers for randomized shuffling of the training examples.
            It may be null. When it is null, the training examples are not shuffled and are cursored in its original order.
            </param>
            <param name="idToIdx">
            The id to index mapping. May be null. If it is null, the index is given by the
            corresponding lower bits of the id.
            </param>
            <param name="numThreads">The number of threads used in parallel training. It is used in computing the dual update.</param>
            <param name="duals">
            The dual variables. For binary classification and regression, there is one dual variable per row.
            For multiclass classification, there is one dual variable per class per row.
            </param>
            <param name="biasReg">The array containing regularized bias terms. For binary classification or regression,
            it contains only a single value. For multiclass classification its size equals the number of classes.</param>
            <param name="invariants">
            The dual updates invariants. It may be null. If not null, it holds an array of pre-computed numerical quantities
            that depend on the training example label and features, not the value of dual variables.
            </param>
            <param name="lambdaNInv">The precomputed numerical quantity 1 / (l2Const * (count of training examples)).</param>
            <param name="weights">
            The weights array. For binary classification or regression, it consists of only one VBuffer.
            For multiclass classification, its size equals the number of classes.
            </param>
            <param name="biasUnreg">
            The array containing unregularized bias terms. For binary classification or regression,
            it contains only a single value. For multiclass classification its size equals the number of classes.
            </param>
            <param name="l1IntermediateWeights">
            The array holding the intermediate weights prior to making L1 shrinkage adjustment. It is null iff l1Threshold is zero.
            Otherwise, for binary classification or regression, it consists of only one VBuffer;
            for multiclass classification, its size equals the number of classes.
            </param>
            <param name="l1IntermediateBias">
            The array holding the intermediate bias prior to making L1 shrinkage adjustment. It is null iff l1Threshold is zero.
            Otherwise, for binary classification or regression, it consists of only one value;
            for multiclass classification, its size equals the number of classes.
            </param>
            <param name="featureNormSquared">
            The array holding the pre-computed squared L2-norm of features for each training example. It may be null. It is always null for
            binary classification and regression because this quantity is not needed.
            </param>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.CheckConvergence(Microsoft.ML.Runtime.IProgressChannel,System.Int32,Microsoft.ML.Trainers.FloatLabelCursor.Factory,Microsoft.ML.Trainers.SdcaTrainerBase{`0,`1,`2}.DualsTableBase,Microsoft.ML.Trainers.SdcaTrainerBase{`0,`1,`2}.IdToIdxLookup,Microsoft.ML.Data.VBuffer{System.Single}[],Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],System.Single[],System.Single[],System.Single[],System.Int64,System.Double[],System.Double@,System.Int32@)">
            <summary>
             Returns whether the algorithm converged, and also populates the <paramref name="metrics"/>
            (which is expected to be parallel to the names returned by <see cref="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.InitializeConvergenceMetrics(System.String[]@,System.Double[]@)"/>).
            When called, the <paramref name="metrics"/> is expected to hold the previously reported values.
            </summary>
            <param name="pch">The progress reporting channel.</param>
            <param name="iter">The iteration number, zero based.</param>
            <param name="cursorFactory">The cursor factory to create cursors over the training data.</param>
            <param name="duals">
            The dual variables. For binary classification and regression, there is one dual variable per row.
            For multiclass classification, there is one dual variable per class per row.
            </param>
            <param name="idToIdx">
            The id to index mapping. May be null. If it is null, the index is given by the
            corresponding lower bits of the id.
            </param>
            <param name="weights">
            The weights array. For binary classification or regression, it consists of only one VBuffer.
            For multiclass classification, its size equals the number of classes.
            </param>
            <param name="bestWeights">
            The weights array that corresponds to the best model obtained from the training iterations thus far.
            </param>
            <param name="biasUnreg">
            The array containing unregularized bias terms. For binary classification or regression,
            it contains only a single value. For multiclass classification its size equals the number of classes.
            </param>
            <param name="bestBiasUnreg">
            The array containing unregularized bias terms corresponding to the best model obtained from the training iterations thus far.
            For binary classification or regression, it contains only a single value.
            For multiclass classification its size equals the number of classes.
            </param>
            <param name="biasReg">
            The array containing regularized bias terms. For binary classification or regression,
            it contains only a single value. For multiclass classification its size equals the number of classes.
            </param>
            <param name="bestBiasReg">
            The array containing regularized bias terms corresponding to the best model obtained from the training iterations thus far.
            For binary classification or regression, it contains only a single value.
            For multiclass classification its size equals the number of classes.
            </param>
            <param name="count">
            The count of (valid) training examples. Bad training examples are excluded from this count.
            </param>
            <param name="metrics">
            The array of metrics for progress reporting.
            </param>
            <param name="bestPrimalLoss">
            The primal loss function value corresponding to the best model obtained thus far.
            </param>
            <param name="bestIter">The iteration number when the best model is obtained.</param>
            <returns>Whether the optimization has converged.</returns>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaTrainerBase`3.DualsTableBase">
            <summary>
            Encapsulates the common functionality of storing and
            retrieving the dual variables.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaTrainerBase`3.StandardArrayDualsTable">
            <summary>
            Implementation of <see cref="T:Microsoft.ML.Trainers.SdcaTrainerBase`3.DualsTableBase"/> using a standard array.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaTrainerBase`3.BigArrayDualsTable">
            <summary>
            Implementation of <see cref="T:Microsoft.ML.Trainers.SdcaTrainerBase`3.DualsTableBase"/> using a big array.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.GetIndexFromIdGetter(Microsoft.ML.Trainers.SdcaTrainerBase{`0,`1,`2}.IdToIdxLookup,System.Int32)">
            <summary>
            Returns a function delegate to retrieve index from id.
            This is to avoid redundant conditional branches in the tight loop of training.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.GetIndexFromIdAndRowGetter(Microsoft.ML.Trainers.SdcaTrainerBase{`0,`1,`2}.IdToIdxLookup,System.Int32)">
            <summary>
            Returns a function delegate to retrieve index from id and row.
            Only works if the cursor is not shuffled.
            This is to avoid redundant conditional branches in the tight loop of training.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup">
            <summary>
            A hash table data structure to store Id of type <see cref="T:Microsoft.ML.Data.DataViewRowId"/>,
            and accommodates size larger than 2 billion. This class is an extension based on BCL.
            Two operations are supported: adding and retrieving an id with asymptotically constant complexity.
            The bucket size are prime numbers, starting from 3 and grows to the next prime larger than
            double the current size until it reaches the maximum possible size. When a table growth is triggered,
            the table growing operation initializes a new larger bucket and rehash the existing entries to
            the new bucket. Such operation has an expected complexity proportional to the size.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup.Count">
            <summary>
            Gets the count of id entries.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup.#ctor(System.Int64)">
            <summary>
            Initializes an instance of the <see cref="T:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup"/> class with the specified size.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup.Add(Microsoft.ML.Data.DataViewRowId)">
            <summary>
            Make sure the given id is in this lookup table and return the index of the id.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup.TryGetIndex(Microsoft.ML.Data.DataViewRowId,System.Int64@)">
            <summary>
            Find the index of the given id.
            Returns a bool representing if id is present.
            Index outputs the index that the id, -1 otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup.GetIndexCore(Microsoft.ML.Data.DataViewRowId,System.Int64)">
            <summary>
            Return the index of value, -1 if it is not present.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaTrainerBase`3.IdToIdxLookup.AddCore(Microsoft.ML.Data.DataViewRowId,System.Int64)">
            <summary>
            Adds the value as a TItem. Does not check whether the TItem is already present.
            Returns the index of the added value.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.CompensatedSum">
            <summary>
            Sum with underflow compensation for better numerical stability.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaBinaryTrainerBase`1">
            <summary>
            SDCA is a general training algorithm for (generalized) linear models such as support vector machine, linear regression, logistic regression,
            and so on. SDCA binary classification trainer family includes several sealed members:
            (1) <see cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer"/> supports general loss functions and returns <see cref="T:Microsoft.ML.Trainers.LinearBinaryModelParameters"/>.
            (2) <see cref="T:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer"/> essentially trains a regularized logistic regression model. Because logistic regression
            naturally provide probability output, this generated model's type is <see cref="T:Microsoft.ML.Calibrators.CalibratedModelParametersBase`2"/>.
            where <see langword="TSubModel"/> is <see cref="T:Microsoft.ML.Trainers.LinearBinaryModelParameters"/> and <see langword="TCalibrator "/> is <see cref="T:Microsoft.ML.Calibrators.PlattCalibrator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaBinaryTrainerBase`1.BinaryOptionsBase">
            <summary>
            Options for <see cref="T:Microsoft.ML.Trainers.SdcaBinaryTrainerBase`1"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaBinaryTrainerBase`1.BinaryOptionsBase.PositiveInstanceWeight">
            <summary>
            The weight to be applied to the positive class. This is useful for training with imbalanced data.
            </summary>
            <value>
            Default value is 1, which means no extra weight.
            </value>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaBinaryTrainerBase`1.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaClassificationLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.SdcaBinaryTrainerBase`1"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="labelColumnName">The label, or dependent variable.</param>
            <param name="featureColumnName">The features, or independent variables.</param>
            <param name="loss">The custom loss.</param>
            <param name="weightColumnName">The optional example weights.</param>
            <param name="l2Const">The L2 regularization hyperparameter.</param>
            <param name="l1Threshold">The L1 regularization hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="maxIterations">The maximum number of passes to perform over the data.</param>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for training a binary logistic regression classification model using the stochastic dual coordinate ascent method.
             The trained model is <a href='https://en.wikipedia.org/wiki/Calibration_(statistics)'>calibrated</a> and can produce probability by feeding the output value of the
             linear function to a <see cref="T:Microsoft.ML.Calibrators.PlattCalibrator"/>.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [SdcaLogisticRegression](xref:Microsoft.ML.StandardTrainersCatalog.SdcaLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32}))
             or [SdcaLogisticRegression(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SdcaLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             [!include[algorithm](~/../docs/samples/docs/api-reference/algo-details-sdca.md)]
            
             [!include[regularization](~/../docs/samples/docs/api-reference/regularization-l1-l2.md)]
            
             [!include[references](~/../docs/samples/docs/api-reference/algo-details-sdca-refs.md)]
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer.Options">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer"/> as used in
            [SdcaLogisticRegression(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SdcaLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer.Options)).
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for training a binary logistic regression classification model using the stochastic dual coordinate ascent method.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [SdcaNonCalibrated](xref:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaClassificationLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32}))
             or [SdcaNonCalibrated(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification-no-prob.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             [!include[algorithm](~/../docs/samples/docs/api-reference/algo-details-sdca.md)]
            
             [!include[regularization](~/../docs/samples/docs/api-reference/regularization-l1-l2.md)]
            
             [!include[references](~/../docs/samples/docs/api-reference/algo-details-sdca-refs.md)]
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaClassificationLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer.Options">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer.Options.LossFunctionFactory">
            <summary>
            The custom <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a>.
            </summary>
            <value>
            If unspecified, <see cref="T:Microsoft.ML.Trainers.LogLoss"/> will be used.
            </value>
        </member>
        <member name="P:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer.Options.LossFunction">
            <summary>
            The custom <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a>.
            </summary>
            <value>
            If unspecified, <see cref="T:Microsoft.ML.Trainers.LogLoss"/> will be used.
            </value>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer.CreatePredictor(Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[])">
            <summary>
            Comparing with <see cref="M:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer.CreatePredictor(Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[])"/>,
            <see cref="M:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer.CreatePredictor(Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[])"/> directly outputs a <see cref="T:Microsoft.ML.Trainers.LinearBinaryModelParameters"/> built from
            the learned weights and bias without calibration.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LegacySdcaBinaryTrainer">
            <summary>
            <see cref="T:Microsoft.ML.Trainers.LegacySdcaBinaryTrainer"/> is used to support classical command line tools where model is weakly-typed to
            <see cref="T:Microsoft.ML.Model.IPredictorWithFeatureWeights`1"/>. Please do NOT use it whenever possible.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.LegacySdcaBinaryTrainer.Options">
            <summary>
            Legacy configuration to SDCA in legacy framework.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LegacySdcaBinaryTrainer.CreatePredictor(Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[])">
            <summary>
            Weekly-typed function to create calibrated or uncalibrated predictors.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.OptionsBase.L2Regularization">
            <summary>
            The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.OptionsBase.NumberOfThreads">
            <summary>
            The degree of lock-free parallelism used by SGD.
            </summary>
            <value>
            Defaults to automatic depending on data sparseness. Determinism is not guaranteed.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.OptionsBase.ConvergenceTolerance">
            <summary>
            The convergence tolerance. If the exponential moving average of loss reductions falls below this tolerance,
            the algorithm is deemed to have converged and will stop.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.OptionsBase.NumberOfIterations">
            <summary>
            The maximum number of passes through the training dataset.
            </summary>
            <value>
            Set to 1 to simulate online learning.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.OptionsBase.LearningRate">
            <summary>
            The initial learning rate used by SGD.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.OptionsBase.Shuffle">
            <summary>
            Determines whether to shuffle data for each training iteration.
            </summary>
            <value>
            <see langword="true" /> to shuffle data for each training iteration; otherwise, <see langword="false" />.
            Default is <see langword="true" />.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.OptionsBase.PositiveInstanceWeight">
            <summary>
            The weight to be applied to the positive class. This is useful for training with imbalanced data.
            </summary>
            <value>
            Default value is 1, which means no extra weight.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.OptionsBase.CheckFrequency">
            <summary>
            Determines the frequency of checking for convergence in terms of number of iterations.
            </summary>
            <value>
            Default equals <see cref="F:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.OptionsBase.NumberOfThreads"/>."
            </value>
        </member>
        <member name="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String,Microsoft.ML.Trainers.IClassificationLoss,System.Int32,System.Double,System.Single)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="featureColumn">The name of the feature column.</param>
            <param name="labelColumn">The name of the label column.</param>
            <param name="weightColumn">The name of the example weight column.</param>
            <param name="maxIterations">The maximum number of iterations; set to 1 to simulate online learning.</param>
            <param name="initLearningRate">The initial learning rate used by SGD.</param>
            <param name="l2Weight">The L2 regularizer constant.</param>
            <param name="loss">The loss function to use.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.SgdBinaryTrainerBase{`0}.OptionsBase,Microsoft.ML.Trainers.IClassificationLoss,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="options">Advanced arguments to the algorithm.</param>
            <param name="loss">Loss function would be minimized.</param>
            <param name="doCalibration">Set to true if a calibration step should be happen after training. Use false otherwise.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.Fit(Microsoft.ML.IDataView,Microsoft.ML.Trainers.LinearModelParameters)">
            <summary>
            Continues the training of a <see cref="T:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer"/> using an already trained <paramref name="modelParameters"/> and returns a <see cref="T:Microsoft.ML.Data.BinaryPredictionTransformer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.CreateModel(Microsoft.ML.Data.VBuffer{System.Single},System.Single)">
            <summary>
            <see cref="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.CreateModel(Microsoft.ML.Data.VBuffer{System.Single},System.Single)"/> implements a mechanism to craft a typed model out from linear weights and a bias.
            It's used at the end of <see cref="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.TrainCore(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.Trainers.LinearModelParameters,System.Int32)"/> to finalize the trained model.
            Derived classes should implement <see cref="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.CreateModel(Microsoft.ML.Data.VBuffer{System.Single},System.Single)"/> because different trainers may produce different
            types of models.
            </summary>
            <param name="weights">Weights of linear model.</param>
            <param name="bias">Bias of linear model.</param>
            <returns>A model built upon weights and bias. It can be as simple as a <see cref="T:Microsoft.ML.Trainers.LinearBinaryModelParameters"/>.</returns>
        </member>
        <member name="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.CreateLinearBinaryModelParameters(Microsoft.ML.Data.VBuffer{System.Single},System.Single)">
            <summary>
            A helper function used to create <see cref="T:Microsoft.ML.Trainers.LinearBinaryModelParameters"/> in implementations of <see cref="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.CreateModel(Microsoft.ML.Data.VBuffer{System.Single},System.Single)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SgdCalibratedTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for training logistic regression using a parallel stochastic gradient method.
             The trained model is <a href='https://en.wikipedia.org/wiki/Calibration_(statistics)'>calibrated</a> and can produce probability by feeding the output value of the
             linear function to a <see cref="T:Microsoft.ML.Calibrators.PlattCalibrator"/>.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [SgdCalibrated](xref:Microsoft.ML.StandardTrainersCatalog.SgdCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Int32,System.Double,System.Single))
             or [SgdCalibrated(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SgdCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SgdCalibratedTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             [!include[io](~/../docs/samples/docs/api-reference/algo-details-sgd.md)]
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SgdCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Int32,System.Double,System.Single)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SgdCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SgdCalibratedTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.SgdCalibratedTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.SgdCalibratedTrainer.Options">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.SgdCalibratedTrainer"/> as used in
            [SgdCalibrated(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SgdCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SgdCalibratedTrainer.Options)).
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SgdCalibratedTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.SgdCalibratedTrainer.Options)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="options">Advanced arguments to the algorithm.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.SgdCalibratedTrainer.GetOutputColumnsCore(Microsoft.ML.SchemaShape)">
            <summary>
            Logistic regression's output can naturally be interpreted as probability, so this model has three output columns.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SgdCalibratedTrainer.CreateModel(Microsoft.ML.Data.VBuffer{System.Single},System.Single)">
            <summary>
            Given weights and bias trained in <see cref="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.TrainCore(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.Trainers.LinearModelParameters,System.Int32)"/>,
            <see cref="M:Microsoft.ML.Trainers.SgdCalibratedTrainer.CreateModel(Microsoft.ML.Data.VBuffer{System.Single},System.Single)"/> produces the final calibrated linear model.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SgdNonCalibratedTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for training logistic regression using a parallel stochastic gradient method.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [SgdNonCalibrated](xref:Microsoft.ML.StandardTrainersCatalog.SgdNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.IClassificationLoss,System.Int32,System.Double,System.Single))
             or [SgdNonCalibrated(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SgdNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SgdNonCalibratedTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification-no-prob.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             [!include[io](~/../docs/samples/docs/api-reference/algo-details-sgd.md)]
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SgdNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.IClassificationLoss,System.Int32,System.Double,System.Single)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SgdNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SgdNonCalibratedTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.SgdNonCalibratedTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.SgdNonCalibratedTrainer.Options">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.SgdNonCalibratedTrainer"/> as used in
            [SgdNonCalibrated(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SgdNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SgdNonCalibratedTrainer.Options)).
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SgdNonCalibratedTrainer.Options.LossFunction">
            <summary>
            The loss function to use. Default is <see cref="T:Microsoft.ML.Trainers.LogLoss"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SgdNonCalibratedTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.SgdNonCalibratedTrainer.Options)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.SgdNonCalibratedTrainer"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="options">Advanced arguments to the algorithm.</param>
        </member>
        <member name="T:Microsoft.ML.Trainers.LegacySgdBinaryTrainer">
            <summary>
            <see cref="T:Microsoft.ML.Trainers.LegacySgdBinaryTrainer"/> is used to support classical command line
            tools where model is weakly-typed to <see cref="T:Microsoft.ML.Model.IPredictorWithFeatureWeights`1"/>. Please do NOT use it
            whenever possible.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.LegacySgdBinaryTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.Trainers.LegacySgdBinaryTrainer.Options)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="options">Advanced arguments to the algorithm.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.LegacySgdBinaryTrainer.GetOutputColumnsCore(Microsoft.ML.SchemaShape)">
            <summary>
            <see cref="T:Microsoft.ML.Trainers.LogLoss"/> leads to logistic regression which naturally supports probability output. For other loss functions,
            a calibrator would be added after <see cref="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.TrainCore(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.Trainers.LinearModelParameters,System.Int32)"/>
            finishing its job. Therefore, we always have three output columns in the legacy world.
            </summary>
            <param name="inputSchema"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Trainers.Sdca">
            <summary>
            A component to train an SDCA model.
            </summary>
            <summary>
            The Entry Point for SDCA multiclass.
            </summary>
             <summary>
            The Entry Point for the SDCA regressor.
             </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> to predict a target using a linear multiclass classifier model trained with a coordinate descent method.
             Depending on the used loss function, the trained model can be, for example, maximum entropy classifier or multi-class support vector machine.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer for maximum entropy classifier, use [SdcaMaximumEntropy](xref:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})) or
             [SdcaMaximumEntropy(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options)).
             To create this trainer for a [loss function](xref:Microsoft.ML.Trainers.ISupportSdcaClassificationLoss) (such as support vector machine's [hinge loss](xref:Microsoft.ML.Trainers.HingeLoss)) of your choice,
             use [SdcaNonCalibrated](xref:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaClassificationLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})) or
             [SdcaNonCalibrated(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-multiclass-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Multiclass classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Scoring Function
             This trains linear model to solve multiclass classification problems.
             Assume that the number of classes is $m$ and number of features is $n$.
             It assigns the $c$-th class a coefficient vector $\textbf{w}_c \in {\mathbb R}^n$ and a bias $b_c \in {\mathbb R}$, for $c=1,\dots,m$.
             Given a feature vector $\textbf{x} \in {\mathbb R}^n$, the $c$-th class's score would be $\hat{y}^c = \textbf{w}_c^T \textbf{x} + b_c$.
             If $\textbf{x}$ belongs to class $c$, then $\hat{y}^c$ should be much larger than 0.
             In contrast, a $\hat{y}^c$ much smaller than 0 means the desired label should not be $c$.
            
             If and only if the trained model is a maximum entropy classifier, you can interpret the output score vector as the predicted class probabilities because [softmax function](https://en.wikipedia.org/wiki/Softmax_function) may be applied to post-process all classes' scores.
             More specifically, the probability of $\textbf{x}$ belonging to class $c$ is computed by $\tilde{P}( c | \textbf{x} ) = \frac{ e^{\hat{y}^c} }{ \sum_{c' = 1}^m e^{\hat{y}^{c'}} }$ and store at the $c$-th element in the score vector.
             In other cases, the output score vector is just $[\hat{y}^1, \dots, \hat{y}^m]$.
            
             ### Training Algorithm Details
             The optimization algorithm is an extension of [a coordinate descent method](http://jmlr.org/papers/volume14/shalev-shwartz13a/shalev-shwartz13a.pdf)
             following a similar path proposed in an earlier [paper](https://www.csie.ntu.edu.tw/~cjlin/papers/maxent_dual.pdf).
             It is usually much faster than [L-BFGS](https://en.wikipedia.org/wiki/Limited-memory_BFGS) and
             [truncated Newton methods](https://en.wikipedia.org/wiki/Truncated_Newton_method) for large-scale and sparse data sets.
            
             [!include[regularization](~/../docs/samples/docs/api-reference/regularization-l1-l2.md)]
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})"/>
             <seealso cref="T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer.Options)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaClassificationLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})"/>
             <seealso cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1.MulticlassOptions">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1.MulticlassOptions.LossFunctionFactory">
            <summary>
            The custom <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a>.
            </summary>
            <value>
            If unspecified, <see cref="T:Microsoft.ML.Trainers.LogLoss"/> will be used.
            </value>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1.MulticlassOptions.InternalLoss">
            <summary>
            Internal state of <see cref="P:Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer.Options.Loss"/> or storage of
            a customized loss passed in. <see cref="T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options"/> cannot set this field because its
            loss function is always <see cref="T:Microsoft.ML.Trainers.LogLoss"/>. In addition, <see cref="F:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1.MulticlassOptions.InternalLoss"/> and <see cref="T:Microsoft.ML.Trainers.LogLossFactory"/> are
            the two fields used to determined the actual loss function inside the training framework of <see cref="T:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaClassificationLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1"/>.
            </summary>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">The label, or dependent variable.</param>
            <param name="featureColumn">The features, or independent variables.</param>
            <param name="weights">The optional example weights.</param>
            <param name="loss">The custom loss.</param>
            <param name="l2Const">The L2 regularization hyperparameter.</param>
            <param name="l1Threshold">The L1 regularization hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="maxIterations">The maximum number of passes to perform over the data.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1.TrainWithoutLock(Microsoft.ML.Runtime.IProgressChannelProvider,Microsoft.ML.Trainers.FloatLabelCursor.Factory,System.Random,Microsoft.ML.Trainers.SdcaTrainerBase{Microsoft.ML.Trainers.SdcaMulticlassTrainerBase{`0}.MulticlassOptions,Microsoft.ML.Data.MulticlassPredictionTransformer{`0},`0}.IdToIdxLookup,System.Int32,Microsoft.ML.Trainers.SdcaTrainerBase{Microsoft.ML.Trainers.SdcaMulticlassTrainerBase{`0}.MulticlassOptions,Microsoft.ML.Data.MulticlassPredictionTransformer{`0},`0}.DualsTableBase,System.Single[],System.Single[],System.Single,Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],System.Single[])">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1.CheckConvergence(Microsoft.ML.Runtime.IProgressChannel,System.Int32,Microsoft.ML.Trainers.FloatLabelCursor.Factory,Microsoft.ML.Trainers.SdcaTrainerBase{Microsoft.ML.Trainers.SdcaMulticlassTrainerBase{`0}.MulticlassOptions,Microsoft.ML.Data.MulticlassPredictionTransformer{`0},`0}.DualsTableBase,Microsoft.ML.Trainers.SdcaTrainerBase{Microsoft.ML.Trainers.SdcaMulticlassTrainerBase{`0}.MulticlassOptions,Microsoft.ML.Data.MulticlassPredictionTransformer{`0},`0}.IdToIdxLookup,Microsoft.ML.Data.VBuffer{System.Single}[],Microsoft.ML.Data.VBuffer{System.Single}[],System.Single[],System.Single[],System.Single[],System.Single[],System.Int64,System.Double[],System.Double@,System.Int32@)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> to predict a target using a maximum entropy multiclass classifier.
             The trained model <see cref="T:Microsoft.ML.Trainers.MaximumEntropyModelParameters"/> produces probabilities of classes.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [SdcaMaximumEntropy](xref:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})) or
             [SdcaMaximumEntropy(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-multiclass-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Multiclass classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Scoring Function
             This trains a linear model to solve multiclass classification problems.
             Assume that the number of classes is $m$ and number of features is $n$.
             It assigns the $c$-th class a coefficient vector $\textbf{w}\_c \in {\mathbb R}^n$ and a bias $b_c \in {\mathbb R}$, for $c=1,\dots,m$.
             Given a feature vector $\textbf{x} \in {\mathbb R}^n$, the $c$-th class's score would be $\tilde{P}(c | \textbf{x}) = \frac{ e^{\hat{y}^c} }{ \sum\_{c' = 1}^m e^{\hat{y}^{c'}} }$, where $\hat{y}^c = \textbf{w}\_c^T \textbf{x} + b_c$.
             Note that $\tilde{P}(c | \textbf{x})$ is the probability of observing class $c$ when the feature vector is $\textbf{x}$.
            
             ### Training Algorithm Details
             See the documentation of [SdcaMulticlassTrainerBase](xref:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase`1).
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})"/>
             <seealso cref="T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options">
            <summary>
            <see cref="T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options"/> for <see cref="T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer"/> as used in
            <see cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})"/>
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer">
             <summary>
             The<see cref="T:Microsoft.ML.IEstimator`1"/> to predict a target using a linear multiclass classifier.
             The trained model <see cref="T:Microsoft.ML.Trainers.LinearMulticlassModelParameters"/> produces probabilities of classes.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [SdcaMaximumEntropy](xref:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})) or
             [SdcaMaximumEntropy(Options)](xref:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-multiclass-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Multiclass classification |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Scoring Function
             This trains a linear model to solve multiclass classification problems.
             Assume that the number of classes is $m$ and number of features is $n$.
             It assigns the $c$-th class a coefficient vector $\textbf{w}_c \in {\mathbb R}^n$ and a bias $b_c \in {\mathbb R}$, for $c=1,\dots,m$.
             Given a feature vector $\textbf{x} \in {\mathbb R}^n$, the $c$-th class's score would be $\hat{y}^c = \textbf{w}_c^T \textbf{x} + b_c$.
             Note that the $c$-th value in the output score column is just $\hat{y}^c$.
            
             ### Training Algorithm Details
             See the documentation of [SdcaMulticlassTrainerBase](xref:Microsoft.ML.Trainers.SdcaMulticlassTrainerBase).
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer.Options)"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaClassificationLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})"/>
             <seealso cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer.Options">
            <summary>
            <see cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer.Options"/> for <see cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer"/> as used in
            <see cref="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaClassificationLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer.Options.Loss">
            <summary>
            Loss function minimized by this trainer.
            </summary>
            <value>
            If unspecified, <see cref="T:Microsoft.ML.Trainers.LogLoss"/> will be used.
            </value>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaRegressionTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for training a regression model using the stochastic dual coordinate ascent method.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [Sdca](xref:Microsoft.ML.StandardTrainersCatalog.Sdca(Microsoft.ML.RegressionCatalog.RegressionTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaRegressionLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32}))
             or [Sdca(Options)](xref:Microsoft.ML.StandardTrainersCatalog.Sdca(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.SdcaRegressionTrainer.Options)).
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-regression.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Regression |
             | Is normalization required? | Yes |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             [!include[algorithm](~/../docs/samples/docs/api-reference/algo-details-sdca.md)]
            
             [!include[regularization](~/../docs/samples/docs/api-reference/regularization-l1-l2.md)]
            
             [!include[references](~/../docs/samples/docs/api-reference/algo-details-sdca-refs.md)]
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.Sdca(Microsoft.ML.RegressionCatalog.RegressionTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaRegressionLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})"/>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.Sdca(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.SdcaRegressionTrainer.Options)"/>
             <seealso cref="T:Microsoft.ML.Trainers.SdcaRegressionTrainer.Options"/>
        </member>
        <member name="T:Microsoft.ML.Trainers.SdcaRegressionTrainer.Options">
            <summary>
            Options for the <see cref="T:Microsoft.ML.Trainers.SdcaRegressionTrainer"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ML.Trainers.SdcaRegressionTrainer.Options.LossFunctionFactory">
            <summary>
            A custom <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a>.
            </summary>
            <value>
            Defaults to <see cref="T:Microsoft.ML.Trainers.SquaredLoss"/>
            </value>
        </member>
        <member name="P:Microsoft.ML.Trainers.SdcaRegressionTrainer.Options.LossFunction">
            <summary>
            A custom <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a>.
            </summary>
            <value>
            Defaults to <see cref="T:Microsoft.ML.Trainers.SquaredLoss"/>
            </value>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaRegressionTrainer.Options.#ctor">
            <summary>
            Create the <see cref="T:Microsoft.ML.Trainers.SdcaRegressionTrainer.Options"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.SdcaRegressionTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaRegressionLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ML.Trainers.SdcaRegressionTrainer"/>
            </summary>
            <param name="env">The environment to use.</param>
            <param name="labelColumn">The label, or dependent variable.</param>
            <param name="featureColumn">The features, or independent variables.</param>
            <param name="weights">The optional example weights.</param>
            <param name="loss">The custom loss.</param>
            <param name="l2Const">The L2 regularization hyperparameter.</param>
            <param name="l1Threshold">The L1 regularization hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="maxIterations">The maximum number of passes to perform over the data.</param>
        </member>
        <member name="T:Microsoft.ML.Trainers.RandomModelParameters">
            <summary>
            This is a faulty model parameters that claims to be a <see cref="T:Microsoft.ML.Data.IValueMapperDist"/>. We maintain the class for
            now for backwards compatibility of models (assuming there are any), but might consider removing it in the future.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.RandomModelParameters.PredictionKind">
            <summary>Return the type of prediction task.</summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.RandomModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Int32)">
            <summary>
            Instantiate a model that returns a uniform random probability.
            </summary>
            <param name="env">The host environment.</param>
            <param name="seed">The random seed.</param>
        </member>
        <member name="M:Microsoft.ML.Trainers.RandomModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,Microsoft.ML.ModelLoadContext)">
            <summary>
            Load the predictor from the binary format.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.RandomModelParameters.SaveCore(Microsoft.ML.ModelSaveContext)">
            <summary>
            Save the predictor in the binary format.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:Microsoft.ML.Trainers.PriorTrainer">
             <summary>
             The <see cref="T:Microsoft.ML.IEstimator`1"/> for predicting a target using a binary classification model.
             </summary>
             <remarks>
             <format type="text/markdown"><![CDATA[
             To create this trainer, use [Prior](xref:Microsoft.ML.StandardTrainersCatalog.Prior(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String))
            
             [!include[io](~/../docs/samples/docs/api-reference/io-columns-binary-classification.md)]
            
             ### Trainer Characteristics
             |  |  |
             | -- | -- |
             | Machine learning task | Binary classification |
             | Is normalization required? | No |
             | Is caching required? | No |
             | Required NuGet in addition to Microsoft.ML | None |
             | Exportable to ONNX | Yes |
            
             ### Training Algorithm Details
             Learns the prior distribution for 0/1 class labels and outputs that.
            
             Check the See Also section for links to usage examples.
             ]]>
             </format>
             </remarks>
             <seealso cref="M:Microsoft.ML.StandardTrainersCatalog.Prior(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String)"/>
        </member>
        <member name="P:Microsoft.ML.Trainers.PriorTrainer.Microsoft#ML#ITrainer#PredictionKind">
            <summary> Return the type of prediction task.</summary>
        </member>
        <member name="P:Microsoft.ML.Trainers.PriorTrainer.Info">
            <summary>
            Auxiliary information about the trainer in terms of its capabilities
            and requirements.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.PriorTrainer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.String,System.String)">
            <summary>
            Initializes PriorTrainer object.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.PriorTrainer.Fit(Microsoft.ML.IDataView)">
            <summary>
            Trains and returns a <see cref="T:Microsoft.ML.Data.BinaryPredictionTransformer`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.PriorTrainer.GetOutputSchema(Microsoft.ML.SchemaShape)">
            <summary>
            Returns the <see cref="T:Microsoft.ML.SchemaShape"/> of the schema which will be produced by the transformer.
            Used for schema propagation and verification in a pipeline.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Trainers.PriorModelParameters">
            <summary>
            Model parameters for <see cref="T:Microsoft.ML.Trainers.PriorTrainer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.PriorModelParameters.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Single)">
            <summary>
            Instantiates a model that returns the prior probability of the positive class in the training set.
            </summary>
            <param name="env">The host environment.</param>
            <param name="prob">The probability of the positive class.</param>
        </member>
        <member name="P:Microsoft.ML.Trainers.StochasticTrainerBase`2.ShuffleData">
            <summary>
            Whether data is to be shuffled every epoch.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Trainers.StochasticTrainerBase`2.PrepareDataFromTrainingExamples(Microsoft.ML.Runtime.IChannel,Microsoft.ML.Data.RoleMappedData,System.Int32@)">
            <summary>
            This method ensures that the data meets the requirements of this trainer and its
            subclasses, injects necessary transforms, and throws if it couldn't meet them.
            </summary>
            <param name="ch">The channel</param>
            <param name="examples">The training examples</param>
            <param name="weightSetCount">Gets the length of weights and bias array. For binary classification and regression,
            this is 1. For multi-class classification, this equals the number of classes on the label.</param>
            <returns>A potentially modified version of <paramref name="examples"/></returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.DifferentiableFunction">
            <summary>
            A delegate for functions with gradients.
            </summary>
            <param name="input">The point at which to evaluate the function</param>
            <param name="gradient">The gradient vector, which must be filled in (its initial contents are undefined)</param>
            <param name="progress">The progress channel provider that can be used to report calculation progress. Can be null.</param>
            <returns>The value of the function</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.IndexedDifferentiableFunction">
             <summary>
             A delegate for indexed sets of functions with gradients.
            
             REVIEW: I didn't add an <see cref="T:Microsoft.ML.Runtime.IProgressChannelProvider"/> here, since it looks like this code is not actually
             accessed from anywhere. Maybe it should go away?
             </summary>
             <param name="index">The index of the function</param>
             <param name="input">The point at which to evaluate the function</param>
             <param name="gradient">The gradient vector, which must be filled in (its initial contents are undefined)</param>
             <returns>The value of the function</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.DifferentiableFunctionAggregator">
            <summary>
            Class to aggregate an indexed differentiable function into a single function, in parallel
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.DifferentiableFunctionAggregator.#ctor(Microsoft.ML.Numeric.IndexedDifferentiableFunction,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a DifferentiableFunctionAggregator
            </summary>
            <param name="func">Indexed function to use</param>
            <param name="dim">Dimensionality of the function</param>
            <param name="maxIndex">Max index of the function</param>
            <param name="threads">Number of threads to use</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.DifferentiableFunctionAggregator.Eval(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Evaluate and sum the function over all indices, in parallel
            </summary>
            <param name="input">The point at which to evaluate the function</param>
            <param name="gradient">The gradient vector, which must be filled in (its initial contents are undefined)</param>
            <returns>Function value</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.GradientTester">
            <summary>
            A class for testing the gradient of DifferentiableFunctions, useful for debugging
            </summary>
            <remarks>
            Works by comparing the reported gradient to the numerically computed gradient.
            If the gradient is correct, the return value should be small (order of 1e-6).
            May have false negatives if extreme values cause the numeric gradient to be off,
            for example, if the norm of x is very large, or if the gradient is changing rapidly at x.
            </remarks>
        </member>
        <member name="M:Microsoft.ML.Numeric.GradientTester.Test(Microsoft.ML.Numeric.DifferentiableFunction,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Tests the gradient reported by f.
            </summary>
            <param name="f">function to test</param>
            <param name="x">point at which to test</param>
            <returns>maximum normalized difference between analytic and numeric directional derivative over multiple tests</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.GradientTester.Test(Microsoft.ML.Numeric.DifferentiableFunction,Microsoft.ML.Data.VBuffer{System.Single}@,System.Boolean)">
            <summary>
            Tests the gradient reported by f.
            </summary>
            <param name="f">function to test</param>
            <param name="x">point at which to test</param>
            <param name="quiet">If false, outputs detailed info.</param>
            <returns>maximum normalized difference between analytic and numeric directional derivative over multiple tests</returns>
        </member>
        <member name="F:Microsoft.ML.Numeric.GradientTester.Header">
            <summary>
            The head of the test output
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.GradientTester.TestAllCoords(Microsoft.ML.Numeric.DifferentiableFunction,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Tests the gradient using finite differences on each axis (appropriate for small functions)
            </summary>
            <param name="f"></param>
            <param name="x"></param>
        </member>
        <member name="M:Microsoft.ML.Numeric.GradientTester.TestCoords(Microsoft.ML.Numeric.DifferentiableFunction,Microsoft.ML.Data.VBuffer{System.Single}@,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Tests the gradient using finite differences on each axis in the list
            </summary>
            <param name="f">Function to test</param>
            <param name="x">Point at which to test</param>
            <param name="coords">List of coordinates to test</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.GradientTester.Test(Microsoft.ML.Numeric.DifferentiableFunction,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@,System.Boolean,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Tests the gradient reported by <paramref name="f"/>.
            </summary>
            <param name="f">Function to test</param>
            <param name="x">Point at which to test</param>
            <param name="dir">Direction to test derivative</param>
            <param name="quiet">Whether to disable output</param>
            <param name="newGrad">This is a reusable working buffer for intermediate calculations</param>
            <param name="newX">This is a reusable working buffer for intermediate calculations</param>
            <returns>Normalized difference between analytic and numeric directional derivative</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.L1Optimizer">
            <summary>
            Orthant-Wise Limited-memory Quasi-Newton algorithm
            for optimization of smooth convex objectives plus L1-regularization
            If you use this code for published research, please cite
              Galen Andrew and Jianfeng Gao, "Scalable Training of L1-Regularized Log-Linear Models",	ICML 2007
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.L1Optimizer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Int32,System.Single,System.Int32,System.Boolean,Microsoft.ML.Numeric.ITerminationCriterion,System.Boolean)">
            <summary>
            Create an L1Optimizer with the supplied value of M and termination criterion
            </summary>
            <param name="env">The environment</param>
            <param name="biasCount">Number of biases</param>
            <param name="l1weight">Weight of L1 regularizer</param>
            <param name="m">The number of previous iterations to store</param>
            <param name="keepDense">Whether the optimizer will keep its internal state dense</param>
            <param name="term">Termination criterion</param>
            <param name="enforceNonNegativity">The flag enforcing the non-negativity constraint</param>
        </member>
        <member name="T:Microsoft.ML.Numeric.L1Optimizer.L1OptimizerState">
            <summary>
            Contains information about the state of the optimizer
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.L1Optimizer.L1OptimizerState.EvalCore(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Runtime.IProgressChannelProvider)">
            <summary>
            This is the original differentiable function with the injected L1 term.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.L1Optimizer.L1OptimizerState.LineSearch(Microsoft.ML.Runtime.IChannel,System.Boolean)">
            <summary>
            Backtracking line search with Armijo-like condition, from Andrew &amp; Gao
            </summary>
        </member>
        <member name="T:Microsoft.ML.Numeric.ILineSearch">
            <summary>
            Line search that does not use derivatives
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.ILineSearch.Minimize(System.Func{System.Single,System.Single})">
            <summary>
            Finds a local minimum of the function
            </summary>
            <param name="func">Function to minimize</param>
            <returns>Minimizing value</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.DiffFunc1D">
            <summary>
            Delegate for differentiable 1-D functions
            </summary>
            <param name="x">Point to evaluate</param>
            <param name="deriv">Derivative at that point</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.IDiffLineSearch">
            <summary>
            Line search that uses derivatives
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.IDiffLineSearch.Minimize(Microsoft.ML.Numeric.DiffFunc1D,System.Single,System.Single)">
            <summary>
            Finds a local minimum of the function
            </summary>
            <param name="func">Function to minimize</param>
            <param name="initValue">Value of function at 0</param>
            <param name="initDeriv">Derivative of function at 0</param>
            <returns>Minimizing value</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.CubicInterpLineSearch">
            <summary>
            Cubic interpolation line search
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.CubicInterpLineSearch.MaxNumSteps">
            <summary>
            Gets or sets maximum number of steps.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.CubicInterpLineSearch.MinWindow">
            <summary>
            Gets or sets the minimum relative size of bounds around solution.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.CubicInterpLineSearch.MaxStep">
            <summary>
            Gets or sets maximum step size
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.CubicInterpLineSearch.#ctor(System.Int32)">
            <summary>
            Makes a CubicInterpLineSearch
            </summary>
            <param name="maxNumSteps">Maximum number of steps before terminating</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.CubicInterpLineSearch.#ctor(System.Single)">
            <summary>
            Makes a CubicInterpLineSearch
            </summary>
            <param name="minWindow">Minimum relative size of bounds around solution</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.CubicInterpLineSearch.CubicInterp(Microsoft.ML.Numeric.CubicInterpLineSearch.StepValueDeriv,Microsoft.ML.Numeric.CubicInterpLineSearch.StepValueDeriv)">
            <summary>
            Cubic interpolation routine from Nocedal and Wright
            </summary>
            <param name="a">first point, with value and derivative</param>
            <param name="b">second point, with value and derivative</param>
            <returns>local minimum of interpolating cubic polynomial</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.CubicInterpLineSearch.Minimize(Microsoft.ML.Numeric.DiffFunc1D,System.Single,System.Single)">
            <summary>
            Finds a local minimum of the function
            </summary>
            <param name="func">Function to minimize</param>
            <param name="initValue">Value of function at 0</param>
            <param name="initDeriv">Derivative of function at 0</param>
            <returns>Minimizing value</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.GoldenSectionSearch">
            <summary>
            Finds local minimum with golden section search.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.GoldenSectionSearch.MaxNumSteps">
            <summary>
            Gets or sets maximum number of steps before terminating.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.GoldenSectionSearch.MinWindow">
            <summary>
            Gets or sets minimum relative size of bounds around solution.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.GoldenSectionSearch.MaxStep">
            <summary>
            Gets or sets maximum step size.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.GoldenSectionSearch.#ctor(System.Int32)">
            <summary>
            Makes a new GoldenSectionSearch
            </summary>
            <param name="maxNumSteps">Maximum number of steps before terminating (not including bracketing)</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.GoldenSectionSearch.#ctor(System.Single)">
            <summary>
            Makes a new GoldenSectionSearch
            </summary>
            <param name="minWindow">Minimum relative size of bounds around solution</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.GoldenSectionSearch.Minimize(Microsoft.ML.Numeric.DiffFunc1D,System.Single,System.Single)">
            <summary>
            Finds a local minimum of the function
            </summary>
            <param name="f">Function to minimize</param>
            <param name="initVal">Value of function at 0</param>
            <param name="initDeriv">Derivative of function at 0</param>
            <returns>Minimizing value</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.GoldenSectionSearch.Minimize(Microsoft.ML.Numeric.DiffFunc1D)">
            <summary>
            Finds a local minimum of the function
            </summary>
            <param name="func">Function to minimize</param>
            <returns>Minimizing value</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.GoldenSectionSearch.Minimize(System.Func{System.Single,System.Single})">
            <summary>
            Finds a local minimum of the function
            </summary>
            <param name="func">Function to minimize</param>
            <returns>Minimizing value</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.BacktrackingLineSearch">
            <summary>
            Backtracking line search with Armijo condition
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.BacktrackingLineSearch.#ctor(System.Single)">
            <summary>
            Makes a backtracking line search
            </summary>
            <param name="c1">Parameter for Armijo condition</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.BacktrackingLineSearch.Minimize(Microsoft.ML.Numeric.DiffFunc1D,System.Single,System.Single)">
            <summary>
            Finds a local minimum of the function
            </summary>
            <param name="f">Function to minimize</param>
            <param name="initVal">Value of function at 0</param>
            <param name="initDeriv">Derivative of function at 0</param>
            <returns>Minimizing value</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.ITerminationCriterion">
            <summary>
            An object which is used to decide whether to stop optimization.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.ITerminationCriterion.FriendlyName">
            <summary>
            Name appropriate for display to the user.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.ITerminationCriterion.Terminate(Microsoft.ML.Numeric.Optimizer.OptimizerState,System.String@)">
            <summary>
            Determines whether to stop optimization
            </summary>
            <param name="state">the state of the optimizer</param>
            <param name="message">a message to be printed (or null for no message)</param>
            <returns>true iff criterion is met, i.e. optimization should halt</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.ITerminationCriterion.Reset">
            <summary>
            Prepares the ITerminationCriterion for a new round of optimization
            </summary>
        </member>
        <member name="T:Microsoft.ML.Numeric.GradientCheckingMonitor">
            <summary>
            A wrapper for a termination criterion that checks the gradient at a specified interval
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.GradientCheckingMonitor.#ctor(Microsoft.ML.Numeric.ITerminationCriterion,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Numeric.GradientCheckingMonitor"/> class.
            </summary>
            <param name="termCrit">The termination criterion</param>
            <param name="gradientCheckInterval">The gradient check interval.</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.GradientCheckingMonitor.Terminate(Microsoft.ML.Numeric.Optimizer.OptimizerState,System.String@)">
            <summary>
            Determines whether to stop optimization
            </summary>
            <param name="state">the state of the optimizer</param>
            <param name="message">a message to be printed (or null for no message)</param>
            <returns>
            true iff criterion is met, i.e. optimization should halt
            </returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.GradientCheckingMonitor.Reset">
            <summary>
            Prepares the ITerminationCriterion for a new round of optimization
            </summary>
        </member>
        <member name="T:Microsoft.ML.Numeric.StaticTerminationCriterion">
            <summary>
            An abstract partial implementation of ITerminationCriterion for those which do not require resetting
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.StaticTerminationCriterion.Terminate(Microsoft.ML.Numeric.Optimizer.OptimizerState,System.String@)">
            <summary>
            Determines whether to stop optimization
            </summary>
            <param name="state">the state of the optimizer</param>
            <param name="message">a message to be printed (or null for no message)</param>
            <returns>
            true iff criterion is met, i.e. optimization should halt
            </returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.StaticTerminationCriterion.Reset">
            <summary>
            Prepares the ITerminationCriterion for a new round of optimization
            </summary>
        </member>
        <member name="T:Microsoft.ML.Numeric.MeanImprovementCriterion">
            <summary>
            Terminates when the geometrically-weighted average improvement falls below the tolerance
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.MeanImprovementCriterion.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ML.Numeric.MeanImprovementCriterion"/> class.
            </summary>
            <param name="tol">The tolerance parameter</param>
            <param name="lambda">The geometric weighting factor. Higher means more heavily weighted toward older values.</param>
            <param name="maxIterations">Maximum amount of iteration</param>
        </member>
        <member name="P:Microsoft.ML.Numeric.MeanImprovementCriterion.Tolerance">
            <summary>
            When criterion drops below this value, optimization is terminated
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.MeanImprovementCriterion.Terminate(Microsoft.ML.Numeric.Optimizer.OptimizerState,System.String@)">
            <summary>
            Determines whether to stop optimization
            </summary>
            <param name="state">the state of the optimizer</param>
            <param name="message">a message to be printed (or null for no message)</param>
            <returns>
            true iff criterion is met, i.e. optimization should halt
            </returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.MeanImprovementCriterion.Reset">
            <summary>
            Prepares the ITerminationCriterion for a new round of optimization
            </summary>
        </member>
        <member name="T:Microsoft.ML.Numeric.MeanRelativeImprovementCriterion">
            <summary>
            Stops optimization when the average objective improvement over the last
            n iterations, normalized by the function value, is small enough.
            </summary>
            <remarks>
            Inappropriate for functions whose optimal value is non-positive, because of normalization
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Numeric.MeanRelativeImprovementCriterion.Tolerance">
            <summary>
            When criterion drops below this value, optimization is terminated
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.MeanRelativeImprovementCriterion.Iters">
            <summary>
            Number of previous iterations to store
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.MeanRelativeImprovementCriterion.#ctor(System.Single,System.Int32,System.Int32)">
            <summary>
            Create a MeanRelativeImprovementCriterion
            </summary>
            <param name="tol">tolerance level</param>
            <param name="n">number of past iterations to average over</param>
            <param name="maxIterations">Maximum amount of iteration</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.MeanRelativeImprovementCriterion.Terminate(Microsoft.ML.Numeric.Optimizer.OptimizerState,System.String@)">
            <summary>
            Returns true if the average objective improvement over the last
            n iterations, normalized by the function value, is less than the tolerance
            </summary>
            <param name="state">current state of the optimizer</param>
            <param name="message">the current value of the criterion</param>
            <returns>true if criterion is less than tolerance</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.MeanRelativeImprovementCriterion.ToString">
            <summary>
            String summary of criterion
            </summary>
            <returns>summary of criterion</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.MeanRelativeImprovementCriterion.Reset">
            <summary>
            Prepares the ITerminationCriterion for a new round of optimization
            </summary>
        </member>
        <member name="T:Microsoft.ML.Numeric.UpperBoundOnDistanceWithL2">
            <summary>
            Uses the gradient to determine an upper bound on (relative) distance from the optimum.
            </summary>
            <remarks>
            Works if the objective uses L2 prior (or in general if the hessian H is such
            that H > (1 / sigmaSq) * I at all points)
            Inappropriate for functions whose optimal value is non-positive, because of normalization
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Numeric.UpperBoundOnDistanceWithL2.Tolerance">
            <summary>
            When criterion drops below this value, optimization is terminated
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.UpperBoundOnDistanceWithL2.#ctor(System.Single,System.Single)">
            <summary>
            Create termination criterion with supplied value of sigmaSq and tolerance
            </summary>
            <param name="sigmaSq">value of sigmaSq in L2 regularizer</param>
            <param name="tol">tolerance level</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.UpperBoundOnDistanceWithL2.Terminate(Microsoft.ML.Numeric.Optimizer.OptimizerState,System.String@)">
            <summary>
            Returns true if the proved bound on the distance from the optimum,
            normalized by the function value, is less than the tolerance
            </summary>
            <param name="state">current state of the optimizer</param>
            <param name="message">value of criterion</param>
            <returns>true if criterion is less than tolerance</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.UpperBoundOnDistanceWithL2.ToString">
            <summary>
            String summary of criterion
            </summary>
            <returns>summary of criterion</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.RelativeNormGradient">
            <summary>
            Criterion based on the norm of the gradient being small enough
            </summary>
            <remarks>
            Inappropriate for functions whose optimal value is non-positive, because of normalization
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Numeric.RelativeNormGradient.Tolerance">
            <summary>
            When criterion drops below this value, optimization is terminated
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.RelativeNormGradient.#ctor(System.Single)">
            <summary>
            Create a RelativeNormGradient with the supplied tolerance
            </summary>
            <param name="tol">tolerance level</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.RelativeNormGradient.Terminate(Microsoft.ML.Numeric.Optimizer.OptimizerState,System.String@)">
            <summary>
            Returns true if the norm of the gradient, divided by the value, is less than the tolerance.
            </summary>
            <param name="state">current state of the optimizer</param>
            <param name="message">the current value of the criterion</param>
            <returns>true iff criterion is less than the tolerance</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.RelativeNormGradient.ToString">
            <summary>
            String summary of criterion
            </summary>
            <returns>summary of criterion</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.Optimizer">
            <summary>
            Limited-memory BFGS quasi-Newton optimization routine
            </summary>
        </member>
        <member name="F:Microsoft.ML.Numeric.Optimizer.EnforceNonNegativity">
            Based on Nocedal and Wright, "Numerical Optimization, Second Edition"
        </member>
        <member name="F:Microsoft.ML.Numeric.Optimizer.Env">
            <summary>
            The host environment to use for reporting progress and exceptions.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.M">
            <summary>
            Number of previous iterations to remember for estimate of Hessian.
            </summary>
            <remarks>
            Higher M means better approximation to Newton's method, but uses more memory,
            and requires more time to compute direction. The optimal setting of M is problem
            specific, depending on such factors as how expensive is function evaluation
            compared to choosing the direction, how easily approximable is the function's
            Hessian, etc.
            M = 15..20 is usually reasonable but if necessary even M=2 is better than
            gradient descent
            </remarks>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.TotalMemoryLimit">
            <summary>
            Gets or sets a bound on the total number of bytes allowed.
            If the whole application is using more than this, no more vectors will be allocated.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.Optimizer.#ctor(Microsoft.ML.Runtime.IHostEnvironment,System.Int32,System.Boolean,Microsoft.ML.Numeric.ITerminationCriterion,System.Boolean)">
            <summary>
            Create an optimizer with the supplied value of M and termination criterion
            </summary>
            <param name="env">The host environment</param>
            <param name="m">The number of previous iterations to store</param>
            <param name="keepDense">Whether the optimizer will keep its internal state dense</param>
            <param name="term">Termination criterion, defaults to MeanRelativeImprovement if null</param>
            <param name="enforceNonNegativity">The flag enforcing the non-negativity constraint</param>
        </member>
        <member name="T:Microsoft.ML.Numeric.Optimizer.OptimizerException">
            <summary>
            A class for exceptions thrown by the optimizer.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.OptimizerException.State">
            <summary>
            The state of the optimizer when premature convergence happened.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Numeric.Optimizer.OptimizerState">
            <summary>
            Contains information about the state of the optimizer
            </summary>
        </member>
        <member name="F:Microsoft.ML.Numeric.Optimizer.OptimizerState.Dim">
            <summary>
            The dimensionality of the function
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.OptimizerState.Function">
            <summary>
            The function being optimized
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.OptimizerState.X">
            <summary>
            The current point being explored
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.OptimizerState.Grad">
            <summary>
            The gradient at the current point
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.OptimizerState.LastDir">
            <summary>
            The direction of search that led to the current point
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.OptimizerState.Value">
            <summary>
            The current function value
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.OptimizerState.LastValue">
            <summary>
            The function value at the last point
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.OptimizerState.Iter">
            <summary>
            The number of iterations so far
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.OptimizerState.GradientCalculations">
            <summary>
            The number of completed gradient calculations in the current iteration.
            </summary>
            <remarks>This is updated in derived classes, since they may call Eval at different times.</remarks>
        </member>
        <member name="F:Microsoft.ML.Numeric.Optimizer.OptimizerState._keepDense">
            <summary>
            Whether the optimizer state will keep its internal vectors dense or not.
            This being true may lead to reduced load on the garbage collector, at the
            cost of possibly higher overall memory utilization.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.Optimizer.OptimizerState.CreateWorkingVector">
            <summary>
            Convenience function to construct a working vector of length <c>Dim</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.Optimizer.OptimizerState.LineSearch(Microsoft.ML.Runtime.IChannel,System.Boolean)">
            <summary>
            An implementation of the line search for the Wolfe conditions, from Nocedal &amp; Wright
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.Optimizer.OptimizerState.CubicInterp(Microsoft.ML.Numeric.Optimizer.OptimizerState.PointValueDeriv,Microsoft.ML.Numeric.Optimizer.OptimizerState.PointValueDeriv)">
            <summary>
            Cubic interpolation routine from Nocedal and Wright
            </summary>
            <param name="p0">first point, with value and derivative</param>
            <param name="p1">second point, with value and derivative</param>
            <returns>local minimum of interpolating cubic polynomial</returns>
        </member>
        <member name="M:Microsoft.ML.Numeric.Optimizer.Minimize(Microsoft.ML.Numeric.DifferentiableFunction,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single@)">
            <summary>
            Minimize a function using the MeanRelativeImprovement termination criterion with the supplied tolerance level
            </summary>
            <param name="function">The function to minimize</param>
            <param name="initial">The initial point</param>
            <param name="tolerance">Convergence tolerance (smaller means more iterations, closer to exact optimum)</param>
            <param name="result">The point at the optimum</param>
            <param name="optimum">The optimum function value</param>
            <exception cref="T:Microsoft.ML.Numeric.Optimizer.PrematureConvergenceException">Thrown if successive points are within numeric precision of each other, but termination condition is still unsatisfied.</exception>
        </member>
        <member name="M:Microsoft.ML.Numeric.Optimizer.Minimize(Microsoft.ML.Numeric.DifferentiableFunction,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single@)">
            <summary>
            Minimize a function.
            </summary>
            <param name="function">The function to minimize</param>
            <param name="initial">The initial point</param>
            <param name="result">The point at the optimum</param>
            <param name="optimum">The optimum function value</param>
            <exception cref="T:Microsoft.ML.Numeric.Optimizer.PrematureConvergenceException">Thrown if successive points are within numeric precision of each other, but termination condition is still unsatisfied.</exception>
        </member>
        <member name="M:Microsoft.ML.Numeric.Optimizer.Minimize(Microsoft.ML.Numeric.DifferentiableFunction,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Numeric.ITerminationCriterion,Microsoft.ML.Data.VBuffer{System.Single}@,System.Single@)">
            <summary>
            Minimize a function using the supplied termination criterion
            </summary>
            <param name="function">The function to minimize</param>
            <param name="initial">The initial point</param>
            <param name="term">termination criterion to use</param>
            <param name="result">The point at the optimum</param>
            <param name="optimum">The optimum function value</param>
            <exception cref="T:Microsoft.ML.Numeric.Optimizer.PrematureConvergenceException">Thrown if successive points are within numeric precision of each other, but termination condition is still unsatisfied.</exception>
        </member>
        <member name="T:Microsoft.ML.Numeric.Optimizer.PrematureConvergenceException">
            <summary>
            This exception is thrown if successive differences between points
            reach the limits of numerical stability, but the termination condition
            still hasn't been satisfied
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.Optimizer.PrematureConvergenceException.#ctor(Microsoft.ML.Numeric.Optimizer.OptimizerState,System.String)">
            <summary>
            Makes a PrematureConvergenceException with the supplied message
            </summary>
            <param name="state">The OptimizerState when the exception was thrown</param>
            <param name="message">message for exception</param>
        </member>
        <member name="P:Microsoft.ML.Numeric.Optimizer.Quiet">
            <summary>
            If true, suppresses all output.
            </summary>
        </member>
        <member name="T:Microsoft.ML.Numeric.DTerminate">
            <summary>
            Delegate for functions that determine whether to terminate search. Called after each update.
            </summary>
            <param name="x">Current iterate</param>
            <returns>True if search should terminate</returns>
        </member>
        <member name="T:Microsoft.ML.Numeric.SgdOptimizer">
            <summary>
            Stochastic gradient descent with variations (minibatch, momentum, averaging).
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.SgdOptimizer.BatchSize">
            <summary>
            Size of minibatches
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.SgdOptimizer.Momentum">
            <summary>
            Momentum parameter
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.SgdOptimizer.T0">
            <summary>
            Base of step size schedule s_t = 1 / (t0 + f(t))
            </summary>
        </member>
        <member name="F:Microsoft.ML.Numeric.SgdOptimizer._terminate">
            <summary>
            Termination criterion
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.SgdOptimizer.Averaging">
            <summary>
            If true, iterates are averaged
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.SgdOptimizer.RateSchedule">
            <summary>
            Gets/Sets rate schedule type
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.SgdOptimizer.MaxSteps">
            <summary>
            Gets/Sets maximum number of steps. Set to 0 for no max
            </summary>
        </member>
        <member name="T:Microsoft.ML.Numeric.SgdOptimizer.RateScheduleType">
            <summary>
            Annealing schedule for learning rate
            </summary>
        </member>
        <member name="F:Microsoft.ML.Numeric.SgdOptimizer.RateScheduleType.Constant">
            <summary>
            r_t = 1 / t0
            </summary>
        </member>
        <member name="F:Microsoft.ML.Numeric.SgdOptimizer.RateScheduleType.Sqrt">
            <summary>
            r_t = 1 / (t0 + sqrt(t))
            </summary>
        </member>
        <member name="F:Microsoft.ML.Numeric.SgdOptimizer.RateScheduleType.Linear">
            <summary>
            r_t = 1 / (t0 + t)
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.SgdOptimizer.#ctor(Microsoft.ML.Numeric.DTerminate,Microsoft.ML.Numeric.SgdOptimizer.RateScheduleType,System.Boolean,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            Creates SGDOptimizer and sets optimization parameters
            </summary>
            <param name="terminate">Termination criterion</param>
            <param name="rateSchedule">Annealing schedule type for learning rate</param>
            <param name="averaging">If true, all iterates are averaged</param>
            <param name="t0">Base for learning rate schedule</param>
            <param name="batchSize">Average this number of stochastic gradients for each update</param>
            <param name="momentum">Momentum parameter</param>
            <param name="maxSteps">Maximum number of updates (0 for no max)</param>
        </member>
        <member name="T:Microsoft.ML.Numeric.SgdOptimizer.DStochasticGradient">
            <summary>
            Delegate for functions to query stochastic gradient at a point
            </summary>
            <param name="x">Point at which to evaluate</param>
            <param name="grad">Vector to be filled in with gradient</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.SgdOptimizer.Minimize(Microsoft.ML.Numeric.SgdOptimizer.DStochasticGradient,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Minimize the function represented by <paramref name="f"/>.
            </summary>
            <param name="f">Stochastic gradients of function to minimize</param>
            <param name="initial">Initial point</param>
            <param name="result">Approximate minimum of <paramref name="f"/></param>
        </member>
        <member name="T:Microsoft.ML.Numeric.GDOptimizer">
            <summary>
            Deterministic gradient descent with line search
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.GDOptimizer.LineSearch">
            <summary>
            Line search to use.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.GDOptimizer.MaxSteps">
            <summary>
            Gets/Sets maximum number of steps. Set to 0 for no max.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.GDOptimizer.Terminate">
            <summary>
            Gets/sets termination criterion.
            </summary>
        </member>
        <member name="P:Microsoft.ML.Numeric.GDOptimizer.UseCG">
            <summary>
            Gets/sets whether to use nonlinear conjugate gradient.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.GDOptimizer.#ctor(Microsoft.ML.Numeric.DTerminate,Microsoft.ML.Numeric.IDiffLineSearch,System.Boolean,System.Int32)">
            <summary>
            Makes a new GDOptimizer with the given optimization parameters
            </summary>
            <param name="terminate">Termination criterion</param>
            <param name="lineSearch">Line search to use</param>
            <param name="maxSteps">Maximum number of updates</param>
            <param name="useCG">Use Cubic interpolation line search or Backtracking line search with Armijo condition</param>
        </member>
        <member name="M:Microsoft.ML.Numeric.GDOptimizer.Minimize(Microsoft.ML.Numeric.DifferentiableFunction,Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Finds approximate minimum of the function
            </summary>
            <param name="function">Function to minimize</param>
            <param name="initial">Initial point</param>
            <param name="result">Approximate minimum</param>
        </member>
        <member name="T:Microsoft.ML.Numeric.TerminateTester">
            <summary>
            Terminates the optimization if NA value appears in result or no progress is made.
            </summary>
        </member>
        <member name="M:Microsoft.ML.Numeric.TerminateTester.ShouldTerminate(Microsoft.ML.Data.VBuffer{System.Single}@,Microsoft.ML.Data.VBuffer{System.Single}@)">
            <summary>
            Test whether the optimization should terminate. Returns true if x contains NA or +/-Inf or x equals xprev.
            </summary>
            <param name="x">The current value.</param>
            <param name="xprev">The value from the previous iteration.</param>
            <returns>True if the optimization routine should terminate at this iteration.</returns>
        </member>
        <member name="T:Microsoft.ML.StandardTrainersCatalog">
            <summary>
            Collection of extension methods for <see cref="T:Microsoft.ML.RegressionCatalog.RegressionTrainers"/>,
             <see cref="T:Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers"/>, and
             <see cref="T:Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers"/> to create
            instances of trainer components.
            </summary>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SgdCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Int32,System.Double,System.Single)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SgdCalibratedTrainer"/>, which predicts a target using a linear classification model.
            Stochastic gradient descent (SGD) is an iterative algorithm that optimizes a differentiable objective function.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column, or dependent variable. The column data must be <see cref="T:System.Boolean"/>.</param>
            <param name="featureColumnName">The features, or independent variables. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="numberOfIterations">The maximum number of passes through the training dataset; set to 1 to simulate online learning.</param>
            <param name="learningRate">The initial learning rate used by SGD.</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SgdCalibrated](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/SgdCalibrated.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SgdCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SgdCalibratedTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SgdCalibratedTrainer"/> with advanced options, which predicts a target using a linear classification model.
            Stochastic gradient descent (SGD) is an iterative algorithm that optimizes a differentiable objective function.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SgdCalibrated](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/SgdCalibratedWithOptions.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SgdNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.IClassificationLoss,System.Int32,System.Double,System.Single)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SgdNonCalibratedTrainer"/>, which predicts a target using a linear classification model.
            Stochastic gradient descent (SGD) is an iterative algorithm that optimizes a differentiable objective function.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column, or dependent variable. The column data must be <see cref="T:System.Boolean"/>.</param>
            <param name="featureColumnName">The features, or independent variables. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="lossFunction">The <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a> function minimized in the training process. Using, for example, <see cref="T:Microsoft.ML.Trainers.HingeLoss"/> leads to a support vector machine trainer.</param>
            <param name="numberOfIterations">The maximum number of passes through the training dataset; set to 1 to simulate online learning.</param>
            <param name="learningRate">The initial learning rate used by SGD.</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SgdNonCalibrated](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/SgdNonCalibrated.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SgdNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SgdNonCalibratedTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SgdNonCalibratedTrainer"/> with advanced options, which predicts a target using a linear classification model.
            Stochastic gradient descent (SGD) is an iterative algorithm that optimizes a differentiable objective function.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            /// <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[SgdNonCalibrated](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/SgdNonCalibratedWithOptions.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.Sdca(Microsoft.ML.RegressionCatalog.RegressionTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaRegressionLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SdcaRegressionTrainer"/>, which predicts a target using a linear regression model.
            </summary>
            <param name="catalog">The regression catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:System.Single"/></param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/></param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="lossFunction">The <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a> function minimized in the training process. Using, for example, its default <see cref="T:Microsoft.ML.Trainers.SquaredLoss"/> leads to a least square trainer.</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <param name="l1Regularization">The L1 <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a> hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="maximumNumberOfIterations">The maximum number of passes to perform over the data.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[SDCA](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/Sdca.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.Sdca(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.SdcaRegressionTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SdcaRegressionTrainer"/> with advanced options, which predicts a target using a linear regression model.
            </summary>
            <param name="catalog">The regression catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[SDCA](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/SdcaWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SdcaLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer"/>, which predicts a target using a linear classification model.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:System.Single"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <param name="l1Regularization">The L1 <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a> hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="maximumNumberOfIterations">The maximum number of passes to perform over the data.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[SdcaLogisticRegression](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/SdcaLogisticRegression.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SdcaLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SdcaLogisticRegressionBinaryTrainer"/> with advanced options, which predicts a target using a linear classification model.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[SdcaLogisticRegression](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/SdcaLogisticRegressionWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaClassificationLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer"/>, which predicts a target using a linear classification model.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:System.Boolean"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="lossFunction">The <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a> function minimized in the training process. Defaults to <see cref="T:Microsoft.ML.Trainers.LogLoss"/> if not specified.</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <param name="l1Regularization">The L1 <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a> hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="maximumNumberOfIterations">The maximum number of passes to perform over the data.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[SdcaNonCalibrated](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/SdcaNonCalibrated.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedBinaryTrainer"/> with advanced options, which predicts a target using a linear classification model trained over boolean label data.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[SdcaNonCalibrated](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/SdcaNonCalibratedWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer"/>, which predicts a target using a maximum entropy classification model trained with a coordinate descent method.
            </summary>
            <param name="catalog">The multiclass classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:Microsoft.ML.Data.KeyDataViewType"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <param name="l1Regularization">The L1 <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a> hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="maximumNumberOfIterations">The maximum number of passes to perform over the data.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[SDCA](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/SdcaMaximumEntropy.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SdcaMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SdcaMaximumEntropyMulticlassTrainer"/> with advanced options, which predicts a target using a maximum entropy classification model trained with a coordinate descent method.
            </summary>
            <param name="catalog">The multiclass classification catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[SDCA](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/SdcaMaximumEntropyWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,Microsoft.ML.Trainers.ISupportSdcaClassificationLoss,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Int32})">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer"/>, which predicts a target using a linear multiclass classification model trained with a coordinate descent method.
            </summary>
            <param name="catalog">The multiclass classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:Microsoft.ML.Data.KeyDataViewType"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="lossFunction">The <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a> function to be minimized. Defaults to <see cref="T:Microsoft.ML.Trainers.LogLoss"/> if not specified.</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <param name="l1Regularization">The L1 <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a> hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="maximumNumberOfIterations">The maximum number of passes to perform over the data.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[SDCA](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/SdcaNonCalibrated.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.SdcaNonCalibrated(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.SdcaNonCalibratedMulticlassTrainer"/> with advanced options, which predicts a target using a linear multiclass classification model trained with a coordinate descent method.
            </summary>
            <param name="catalog">The multiclass classification catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[SDCA](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/SdcaNonCalibratedWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.AveragedPerceptron(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,Microsoft.ML.Trainers.IClassificationLoss,System.Single,System.Boolean,System.Single,System.Int32)">
            <summary>
            Create an <see cref="T:Microsoft.ML.Trainers.AveragedPerceptronTrainer"/>, which predicts a target using a linear binary classification model trained over boolean label data.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:System.Boolean"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="lossFunction">The <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a> function minimized in the training process. If <see langword="null"/>, <see cref="T:Microsoft.ML.Trainers.HingeLoss"/> would be used and lead to a max-margin averaged perceptron trainer.</param>
            <param name="learningRate">The initial learning rate used by SGD.</param>
            <param name="decreaseLearningRate">
            <see langword="true" /> to decrease the <paramref name="learningRate"/> as iterations progress; otherwise, <see langword="false" />.
            Default is <see langword="false" />.
            </param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <param name="numberOfIterations">Number of passes through the training dataset.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[AveragedPerceptron](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/AveragedPerceptron.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.AveragedPerceptron(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.AveragedPerceptronTrainer.Options)">
            <summary>
            Create an <see cref="T:Microsoft.ML.Trainers.AveragedPerceptronTrainer"/> with advanced options, which predicts a target using a linear binary classification model trained over boolean label data.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[AveragedPerceptron](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/AveragedPerceptronWithOptions.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.OnlineGradientDescent(Microsoft.ML.RegressionCatalog.RegressionTrainers,System.String,System.String,Microsoft.ML.Trainers.IRegressionLoss,System.Single,System.Boolean,System.Single,System.Int32)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.OnlineGradientDescentTrainer"/>, which predicts a target using a linear regression model.
            </summary>
            <param name="catalog">The regression catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:System.Single"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="lossFunction">The <a href="https://en.wikipedia.org/wiki/Loss_function">loss</a> function minimized in the training process. Using, for example, <see cref="T:Microsoft.ML.Trainers.SquaredLoss"/> leads to a least square trainer.</param>
            <param name="learningRate">The initial learning rate used by SGD.</param>
            <param name="decreaseLearningRate">Decrease learning rate as iterations progress.</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <param name="numberOfIterations">The number of passes through the training dataset.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[OnlineGradientDescent](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/OnlineGradientDescent.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.OnlineGradientDescent(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.OnlineGradientDescentTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.OnlineGradientDescentTrainer"/> using advanced options, which predicts a target using a linear regression model.
            </summary>
            <param name="catalog">The regression catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[OnlineGradientDescent](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/OnlineGradientDescentWithOptions.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.LbfgsLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
             Create <see cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer"/>, which predicts a target using a linear binary classification model trained over boolean label data.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:System.Boolean"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="enforceNonNegativity">Enforce non-negative weights.</param>
            <param name="l1Regularization">The L1 <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a> hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <param name="historySize">Memory size for <see cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer"/>. Low=faster, less accurate.</param>
            <param name="optimizationTolerance">Threshold for optimizer convergence.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Logistic Regression](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/LbfgsLogisticRegression.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.LbfgsLogisticRegression(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.LbfgsLogisticRegressionBinaryTrainer"/> with advanced options, which predicts a target using a linear binary classification model trained over boolean label data.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="options">Advanced arguments to the algorithm.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
            [!code-csharp[Logistic Regression](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/LbfgsLogisticRegressionWithOptions.cs)]
            ]]>
            </format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.LbfgsPoissonRegression(Microsoft.ML.RegressionCatalog.RegressionTrainers,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer"/>, which predicts a target using a linear regression model.
            </summary>
            <param name="catalog">The regression catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:System.Single"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="l1Regularization">The L1 <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a> hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <param name="optimizationTolerance">Threshold for optimizer convergence.</param>
            <param name="historySize">Number of previous iterations to remember for estimating the Hessian. Lower values mean faster but less accurate estimates.</param>
            <param name="enforceNonNegativity">Enforce non-negative weights.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[PoissonRegression](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/LbfgsPoissonRegression.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.LbfgsPoissonRegression(Microsoft.ML.RegressionCatalog.RegressionTrainers,Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.LbfgsPoissonRegressionTrainer"/> using advanced options, which predicts a target using a linear regression model.
            </summary>
            <param name="catalog">The regression catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[PoissonRegression](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/LbfgsPoissonRegressionWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.LbfgsMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer"/>, which predicts a target using a maximum entropy classification model trained with the L-BFGS method.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers"/>.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:Microsoft.ML.Data.KeyDataViewType"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="enforceNonNegativity">Enforce non-negative weights.</param>
            <param name="l1Regularization">The L1 <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a> hyperparameter. Higher values will tend to lead to more sparse model.</param>
            <param name="l2Regularization">The L2 weight for <a href='https://en.wikipedia.org/wiki/Regularization_(mathematics)'>regularization</a>.</param>
            <param name="historySize">Memory size for <see cref="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer"/>. Low=faster, less accurate.</param>
            <param name="optimizationTolerance">Threshold for optimizer convergence.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[Lbfgs](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/LbfgsMaximumEntropy.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.LbfgsMaximumEntropy(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.LbfgsMaximumEntropyMulticlassTrainer"/> with advanced options, which predicts a target using a maximum entropy classification model trained with the L-BFGS method.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers"/>.</param>
            <param name="options">Advanced arguments to the algorithm.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[PoissonRegression](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/LbfgsMaximumEntropyWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.NaiveBayes(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,System.String,System.String)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Trainers.NaiveBayesMulticlassTrainer"/>, which predicts a multiclass target using a Naive Bayes model
            that supports binary feature values.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers"/>.</param>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="featureColumnName">The name of the feature column.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[NaiveBayes](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/NaiveBayes.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.GetCalibratorTrainerOrThrow(Microsoft.ML.Runtime.IExceptionContext,Microsoft.ML.IEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.ICalibrator}})">
            <summary>
            Works via the <see cref="T:Microsoft.ML.Calibrators.IHaveCalibratorTrainer"/> shim interface to extract from the calibrating training
            estimator the internal <see cref="T:Microsoft.ML.Calibrators.ICalibratorTrainer"/> object. Note that this should be a temporary measure,
            since the trainers should really be changed to actually work over estimators.
            </summary>
            <param name="ectx">The exception context.</param>
            <param name="calibratorEstimator">The estimator out of which we should try to extract the calibrator trainer.</param>
            <returns>The calibrator trainer.</returns>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.OneVersusAll``1(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.ITrainerEstimator{Microsoft.ML.Data.BinaryPredictionTransformer{``0},``0},System.String,System.Boolean,Microsoft.ML.IEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.ICalibrator}},System.Int32,System.Boolean)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Trainers.OneVersusAllTrainer"/>, which predicts a multiclass target using one-versus-all strategy with
            the binary classification estimator specified by <paramref name="binaryEstimator"/>.
            </summary>
            <remarks>
            <para>
            In one-versus-all strategy, a binary classification algorithm is used to train one classifier for each class,
            which distinguishes that class from all other classes. Prediction is then performed by running these binary classifiers,
            and choosing the prediction with the highest confidence score.
            </para>
            </remarks>
            <param name="catalog">The multiclass classification catalog trainer object.</param>
            <param name="binaryEstimator">An instance of a binary <see cref="T:Microsoft.ML.Trainers.ITrainerEstimator`2"/> used as the base trainer.</param>
            <param name="calibrator">The calibrator. If a calibrator is not explicitly provided, it will default to <see cref="T:Microsoft.ML.Calibrators.PlattCalibratorTrainer"/></param>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="imputeMissingLabelsAsNegative">Whether to treat missing labels as having negative labels, instead of keeping them missing.</param>
            <param name="maximumCalibrationExampleCount">Number of instances to train the calibrator.</param>
            <param name="useProbabilities">Use probabilities (vs. raw outputs) to identify top-score category.</param>
            <typeparam name="TModel">The type of the model. This type parameter will usually be inferred automatically from <paramref name="binaryEstimator"/>.</typeparam>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[OneVersusAll](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/OneVersusAll.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.PairwiseCoupling``1(Microsoft.ML.MulticlassClassificationCatalog.MulticlassClassificationTrainers,Microsoft.ML.Trainers.ITrainerEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{``0},``0},System.String,System.Boolean,Microsoft.ML.IEstimator{Microsoft.ML.ISingleFeaturePredictionTransformer{Microsoft.ML.Calibrators.ICalibrator}},System.Int32)">
            <summary>
            Create a <see cref="T:Microsoft.ML.Trainers.PairwiseCouplingTrainer"/>, which predicts a multiclass target using pairwise coupling strategy with
            the binary classification estimator specified by <paramref name="binaryEstimator"/>.
            </summary>
            <remarks>
            <para>
            In the Pairwise coupling (PKPD) strategy, a binary classification algorithm is used to train one classifier for each pair of classes.
            Prediction is then performed by running these binary classifiers, and computing a score for each class by counting how many of the binary
            classifiers predicted it. The prediction is the class with the highest score.
            </para>
            </remarks>
            <param name="catalog">The multiclass classification catalog trainer object.</param>
            <param name="binaryEstimator">An instance of a binary <see cref="T:Microsoft.ML.Trainers.ITrainerEstimator`2"/> used as the base trainer.</param>
            <param name="calibrator">The calibrator. If a calibrator is not explicitly provided, it will default to <see cref="T:Microsoft.ML.Calibrators.PlattCalibratorTrainer"/></param>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="imputeMissingLabelsAsNegative">Whether to treat missing labels as having negative labels, instead of keeping them missing.</param>
            <param name="maximumCalibrationExampleCount">Number of instances to train the calibrator.</param>
            <typeparam name="TModel">The type of the model. This type parameter will usually be inferred automatically from <paramref name="binaryEstimator"/>.</typeparam>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[PairwiseCoupling](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/MulticlassClassification/PairwiseCoupling.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.LinearSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Int32)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.LinearSvmTrainer"/>, which predicts a target using a linear binary classification model trained
            over boolean label data.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="labelColumnName">The name of the label column. The column data must be <see cref="T:System.Boolean"/>.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="numberOfIterations">The number of training iteration.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[LinearSvm](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/LinearSvm.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.LinearSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LinearSvmTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.LinearSvmTrainer"/> with advanced options, which predicts a target using a linear binary classification model
            trained over boolean label data.
            </summary>
            <param name="catalog">The binary classification catalog trainer object.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[LinearSvm](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/LinearSvmWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.Prior(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.PriorTrainer"/>, which predicts a target using a binary classification model.
            </summary>
            <remarks>
            This trainer uses the proportion of a label in the training set as the probability of that label.
            This trainer is often used as a baseline for other more sophisticated mdels.
            </remarks>
            <param name="catalog">The <see cref="T:Microsoft.ML.BinaryClassificationCatalog"/>.</param>
            <param name="labelColumnName">The name of the label column. </param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[Prior](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/PriorTrainer.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.LdSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,Microsoft.ML.Trainers.LdSvmTrainer.Options)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.LdSvmTrainer"/> with advanced options, which predicts a target using a Local Deep SVM model.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.BinaryClassificationCatalog"/>.</param>
            <param name="options">Trainer options.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[LdSvm](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/LdSvmWithOptions.cs)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.ML.StandardTrainersCatalog.LdSvm(Microsoft.ML.BinaryClassificationCatalog.BinaryClassificationTrainers,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create <see cref="T:Microsoft.ML.Trainers.LdSvmTrainer"/>, which predicts a target using a Local Deep SVM model.
            </summary>
            <param name="catalog">The <see cref="T:Microsoft.ML.BinaryClassificationCatalog"/>.</param>
            <param name="labelColumnName">The name of the label column.</param>
            <param name="featureColumnName">The name of the feature column. The column data must be a known-sized vector of <see cref="T:System.Single"/>.</param>
            <param name="exampleWeightColumnName">The name of the example weight column (optional).</param>
            <param name="numberOfIterations">The number of iterations.</param>
            <param name="treeDepth">The depth of a Local Deep SVM tree.</param>
            <param name="useBias">Indicates if the model should have a bias term.</param>
            <param name="useCachedData">Indicates whether we should iterate over the data using a cache.</param>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[LdSvm](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/BinaryClassification/LdSvm.cs)]
            ]]></format>
            </example>
        </member>
    </members>
</doc>
