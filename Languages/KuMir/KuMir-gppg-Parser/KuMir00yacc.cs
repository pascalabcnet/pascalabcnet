// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  SPEED_XP
// DateTime: 28.06.2010 0:13:24
// UserName: ?????????????
// Input file <KuMir00.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.Errors;
using PascalABCCompiler.KuMir00Parser;

namespace GPPGParserScanner
{
public enum Tokens {
    error=1,EOF=2,ID=3,STRING=4,ENDL=5,INTNUM=6,
    TK_TRUE=7,TK_FALSE=8,REAL=9,CHAR=10,PLUS=11,MINUS=12,
    MULT=13,DIVIDE=14,AND=15,OR=16,LT=17,GT=18,
    LE=19,GE=20,EQ=21,NE=22,TK_POWER=23,ASSIGN=24,
    SEMICOLUMN=25,LPAREN=26,RPAREN=27,COLUMN=28,COMMA=29,COLON=30,
    TK_NEWLINE=31,TRUE=32,FALSE=33,ODD=34,BOOLEAN=35,INTEGER=36,
    INVISIBLE=37,TK_COMMENT_LINE=38,TK_EOL=39,TK_ALG=40,TK_USES=41,TK_ARG=42,
    TK_VAR=43,TK_FUNC_VAL=44,TK_BEGIN=45,TK_END=46,TK_BEGIN_CYCLE=47,TK_END_CYCLE=48,
    TK_ARRAY=49,TK_ISP=50,TK_ASSERT=51,TK_READ=52,TK_WRITE=53,TK_IF=54,
    TK_THEN=55,TK_ELSE=56,TK_END_ALL=57,TK_CASE=58,TK_CASE_V=59,TK_WHILE=60,
    TK_FOR=61,TK_FROM=62,TK_TO=63,TK_RAZ=64,TK_AND=65,TK_OR=66,
    TK_NOT=67,TK_INTEGER_TYPE=68,TK_REAL_TYPE=69,TK_BOOLEAN_TYPE=70,TK_CHAR_TYPE=71,TK_STRING_TYPE=72,
    TK_DOT=73,TK_ROUND_OPEN=74,TK_ROUND_CLOSE=75,TK_SQUARE_OPEN=76,TK_SQUARE_CLOSE=77,UMINUS=78};

public struct ValueType
{ 
		public bool bVal; 
		public string sVal; 
	      public int iVal; 
		public double rVal;
		public char chVal;		
		public named_type_reference ntr;
		public ident_list il;
		public var_def_statement vds;
		public variable_definitions vdss;
		public expression ex;
		public expression_list el;
		public ident id;
		public statement st;
		public statement_list sl;
		public declarations decl;
		public Operators op;
		public case_variant cv;
		public diapason dp;
		public indexers_types it;	
		public formal_parameters fps;
		public procedure_definition pd;
	}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class GPPGParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from KuMir00.y
    public syntax_tree_node root; // Корневой узел синтаксического дерева 	
    public GPPGParser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
    public int unit_number;
    public System.Collections.ArrayList _units = new System.Collections.ArrayList(); // for modules

	///////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////
        //Some methods
        ///////////////////////////////////////////////////////////////////////////////
        ///////////////////////////////////////////////////////////////////////////////

        public class unit_data
        {
            public declarations sub_progs;
            public statement_list initialization;
            public ident_list used_units;

            public unit_data()
            {
                sub_progs = new declarations();
                used_units = new ident_list();
                initialization = new statement_list();
                initialization.subnodes.Add(new empty_statement());
            }

            public void ClearData()
            {
                sub_progs.defs.Clear();
                used_units.idents.Clear();
                initialization.subnodes.Clear();
                initialization.subnodes.Add(new empty_statement());
            }
        }

        public statement_list GetStatements(object _object)
        {
            statement_list _statement_list;
            if (_object is statement_list)
                _statement_list = _object as statement_list;
            else
            {
                _statement_list = new statement_list();
                if (_object is statement)
                    _statement_list.subnodes.Add(_object as statement);
                else
                    _statement_list.subnodes.Add(new empty_statement());
            }
            return _statement_list;
        }

        public expression_list GetExpressions(object _object)
        {
            expression_list _expression_list;
            if (_object is expression_list)
                _expression_list = _object as expression_list;
            else
            {
                _expression_list = new expression_list();
                _expression_list.expressions.Add(_object as expression);
            }
            return _expression_list;
        }

        public ident_list GetIdents(object _object)
        {
            ident_list _ident_list;
            if (_object is ident_list)
                _ident_list = _object as ident_list;
            else
            {
                _ident_list = new ident_list();
                _ident_list.idents.Add(_object as ident);
            }
            return _ident_list;
        }

        public indexers_types GetIndexers(object _object)
        {
            indexers_types _indexers_types;
            if (_object is indexers_types)
                _indexers_types = _object as indexers_types;
            else
            {
                _indexers_types = new indexers_types();
                _indexers_types.indexers.Add(_object as diapason);

            }
            return _indexers_types;
        }

        public formal_parameters GetFormals(object _object)
        {
            if (_object == null)
                return null;
            formal_parameters _formal_parametres;
            if (_object is formal_parameters)
                _formal_parametres = _object as formal_parameters;
            else
            {
                _formal_parametres = new formal_parameters();
                _formal_parametres.params_list.Add(_object as typed_parameters);
            }
            return _formal_parametres;
        }

///////////////////////
  // End verbatim content from KuMir00.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[116];
  private static State[] states = new State[240];
  private static string[] nonTerms = new string[] {
      "module", "ident", "type", "expr", "Assignment", "Statement", "If_Statement", 
      "While_Statement", "EmptyStatement", "Case_variant_list", "Case_statement", 
      "For_statement", "Proccall_statement", "Var_Decl", "StatementSequence", 
      "Global_decl_list", "Sub_declarations", "Global_vars", "factparams", "IDList", 
      "Array_list", "Case_variant", "Diap", "Diap_list", "Formal_parameter", 
      "Formal_type_list", "Formal_list", "Procedure", "Function", "$accept", 
      "Separators_Opt", "Global_part", "Separators", "EmptyLines", "Separator", 
      "Uses_units", "Initialization", };

  static GPPGParser() {
    states[0] = new State(new int[]{25,112,5,113,37,238,50,-10,41,-10,35,-10,36,-10,68,-10,69,-10,70,-10,71,-10,72,-10,40,-10},new int[]{-1,1,-31,3,-35,236});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{50,214,41,233,35,157,36,158,68,159,69,160,70,161,71,162,72,163,40,-112},new int[]{-32,4,-36,221,-18,235,-16,224,-14,232,-3,141});
    states[4] = new State(new int[]{40,5});
    states[5] = new State(new int[]{3,66},new int[]{-2,6});
    states[6] = new State(new int[]{25,112,5,113},new int[]{-33,7,-35,212});
    states[7] = new State(new int[]{45,8});
    states[8] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,46,-51,25,-51,5,-51},new int[]{-15,9,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[9] = new State(new int[]{46,10,25,112,5,113},new int[]{-35,27});
    states[10] = new State(-11,new int[]{-34,11});
    states[11] = new State(new int[]{5,15,40,-102,2,-102},new int[]{-17,12});
    states[12] = new State(new int[]{40,18,2,-2},new int[]{-28,13,-29,16});
    states[13] = new State(-11,new int[]{-34,14});
    states[14] = new State(new int[]{5,15,40,-103,2,-103,46,-103});
    states[15] = new State(-12);
    states[16] = new State(-11,new int[]{-34,17});
    states[17] = new State(new int[]{5,15,40,-104,2,-104,46,-104});
    states[18] = new State(new int[]{3,66,35,157,36,158,68,159,69,160,70,161,71,162,72,163},new int[]{-2,19,-3,199});
    states[19] = new State(new int[]{26,20,45,-11,5,-11},new int[]{-34,195});
    states[20] = new State(new int[]{35,157,36,158,68,159,69,160,70,161,71,162,72,163,43,189,27,-96},new int[]{-27,21,-26,182,-25,194,-3,185});
    states[21] = new State(new int[]{27,22});
    states[22] = new State(-11,new int[]{-34,23});
    states[23] = new State(new int[]{45,24,5,15});
    states[24] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,46,-51,25,-51,5,-51},new int[]{-15,25,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[25] = new State(new int[]{46,26,25,112,5,113},new int[]{-35,27});
    states[26] = new State(-98);
    states[27] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,46,-51,25,-51,5,-51,57,-51,56,-51,48,-51,59,-51},new int[]{-6,28,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[28] = new State(-61);
    states[29] = new State(-52);
    states[30] = new State(new int[]{24,31,76,89,26,99,46,-83,25,-83,5,-83,57,-83,56,-83,48,-83,59,-83});
    states[31] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,32,-2,59});
    states[32] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57,46,-43,25,-43,5,-43,57,-43,56,-43,48,-43,59,-43});
    states[33] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,34,-2,59});
    states[34] = new State(new int[]{11,-30,12,-30,13,37,23,39,14,41,65,43,66,-30,21,-30,22,-30,17,-30,19,-30,18,-30,20,-30,46,-30,25,-30,5,-30,57,-30,56,-30,48,-30,59,-30,77,-30,28,-30,27,-30,55,-30,64,-30,3,-30,54,-30,47,-30,58,-30,51,-30,52,-30,53,-30,35,-30,36,-30,68,-30,69,-30,70,-30,71,-30,72,-30,30,-30,63,-30,2,-30});
    states[35] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,36,-2,59});
    states[36] = new State(new int[]{11,-31,12,-31,13,37,23,39,14,41,65,43,66,-31,21,-31,22,-31,17,-31,19,-31,18,-31,20,-31,46,-31,25,-31,5,-31,57,-31,56,-31,48,-31,59,-31,77,-31,28,-31,27,-31,55,-31,64,-31,3,-31,54,-31,47,-31,58,-31,51,-31,52,-31,53,-31,35,-31,36,-31,68,-31,69,-31,70,-31,71,-31,72,-31,30,-31,63,-31,2,-31});
    states[37] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,38,-2,59});
    states[38] = new State(-32);
    states[39] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,40,-2,59});
    states[40] = new State(-33);
    states[41] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,42,-2,59});
    states[42] = new State(-34);
    states[43] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,44,-2,59});
    states[44] = new State(-35);
    states[45] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,46,-2,59});
    states[46] = new State(new int[]{11,-36,12,-36,13,37,23,39,14,41,65,43,66,-36,21,-36,22,-36,17,-36,19,-36,18,-36,20,-36,46,-36,25,-36,5,-36,57,-36,56,-36,48,-36,59,-36,77,-36,28,-36,27,-36,55,-36,64,-36,3,-36,54,-36,47,-36,58,-36,51,-36,52,-36,53,-36,35,-36,36,-36,68,-36,69,-36,70,-36,71,-36,72,-36,30,-36,63,-36,2,-36});
    states[47] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,48,-2,59});
    states[48] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,-37,22,-37,17,-37,19,-37,18,-37,20,-37,46,-37,25,-37,5,-37,57,-37,56,-37,48,-37,59,-37,77,-37,28,-37,27,-37,55,-37,64,-37,3,-37,54,-37,47,-37,58,-37,51,-37,52,-37,53,-37,35,-37,36,-37,68,-37,69,-37,70,-37,71,-37,72,-37,30,-37,63,-37,2,-37});
    states[49] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,50,-2,59});
    states[50] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,-38,22,-38,17,-38,19,-38,18,-38,20,-38,46,-38,25,-38,5,-38,57,-38,56,-38,48,-38,59,-38,77,-38,28,-38,27,-38,55,-38,64,-38,3,-38,54,-38,47,-38,58,-38,51,-38,52,-38,53,-38,35,-38,36,-38,68,-38,69,-38,70,-38,71,-38,72,-38,30,-38,63,-38,2,-38});
    states[51] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,52,-2,59});
    states[52] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,-39,22,-39,17,-39,19,-39,18,-39,20,-39,46,-39,25,-39,5,-39,57,-39,56,-39,48,-39,59,-39,77,-39,28,-39,27,-39,55,-39,64,-39,3,-39,54,-39,47,-39,58,-39,51,-39,52,-39,53,-39,35,-39,36,-39,68,-39,69,-39,70,-39,71,-39,72,-39,30,-39,63,-39,2,-39});
    states[53] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,54,-2,59});
    states[54] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,-40,22,-40,17,-40,19,-40,18,-40,20,-40,46,-40,25,-40,5,-40,57,-40,56,-40,48,-40,59,-40,77,-40,28,-40,27,-40,55,-40,64,-40,3,-40,54,-40,47,-40,58,-40,51,-40,52,-40,53,-40,35,-40,36,-40,68,-40,69,-40,70,-40,71,-40,72,-40,30,-40,63,-40,2,-40});
    states[55] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,56,-2,59});
    states[56] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,-41,22,-41,17,-41,19,-41,18,-41,20,-41,46,-41,25,-41,5,-41,57,-41,56,-41,48,-41,59,-41,77,-41,28,-41,27,-41,55,-41,64,-41,3,-41,54,-41,47,-41,58,-41,51,-41,52,-41,53,-41,35,-41,36,-41,68,-41,69,-41,70,-41,71,-41,72,-41,30,-41,63,-41,2,-41});
    states[57] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,58,-2,59});
    states[58] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,-42,22,-42,17,-42,19,-42,18,-42,20,-42,46,-42,25,-42,5,-42,57,-42,56,-42,48,-42,59,-42,77,-42,28,-42,27,-42,55,-42,64,-42,3,-42,54,-42,47,-42,58,-42,51,-42,52,-42,53,-42,35,-42,36,-42,68,-42,69,-42,70,-42,71,-42,72,-42,30,-42,63,-42,2,-42});
    states[59] = new State(new int[]{76,60,26,86,11,-14,12,-14,13,-14,23,-14,14,-14,65,-14,66,-14,21,-14,22,-14,17,-14,19,-14,18,-14,20,-14,46,-14,25,-14,5,-14,57,-14,56,-14,48,-14,59,-14,77,-14,28,-14,27,-14,55,-14,64,-14,3,-14,54,-14,47,-14,58,-14,51,-14,52,-14,53,-14,35,-14,36,-14,68,-14,69,-14,70,-14,71,-14,72,-14,30,-14,63,-14,2,-14});
    states[60] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-19,61,-4,85,-2,59});
    states[61] = new State(new int[]{77,62,28,83});
    states[62] = new State(new int[]{76,63,11,-15,12,-15,13,-15,23,-15,14,-15,65,-15,66,-15,21,-15,22,-15,17,-15,19,-15,18,-15,20,-15,46,-15,25,-15,5,-15,57,-15,56,-15,48,-15,59,-15,77,-15,28,-15,27,-15,55,-15,64,-15,3,-15,54,-15,47,-15,58,-15,51,-15,52,-15,53,-15,35,-15,36,-15,68,-15,69,-15,70,-15,71,-15,72,-15,30,-15,63,-15,2,-15});
    states[63] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,64,-2,59});
    states[64] = new State(new int[]{77,65,11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57});
    states[65] = new State(-16);
    states[66] = new State(-13);
    states[67] = new State(-18);
    states[68] = new State(-19);
    states[69] = new State(-20);
    states[70] = new State(-21);
    states[71] = new State(-22);
    states[72] = new State(-23);
    states[73] = new State(-24);
    states[74] = new State(-25);
    states[75] = new State(-26);
    states[76] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,77,-2,59});
    states[77] = new State(-27);
    states[78] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,79,-2,59});
    states[79] = new State(new int[]{27,80,11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57});
    states[80] = new State(-28);
    states[81] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,82,-2,59});
    states[82] = new State(-29);
    states[83] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,84,-2,59});
    states[84] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57,77,-50,28,-50,27,-50,46,-50,25,-50,5,-50,57,-50,56,-50,48,-50,59,-50});
    states[85] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57,77,-49,28,-49,27,-49,46,-49,25,-49,5,-49,57,-49,56,-49,48,-49,59,-49});
    states[86] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-19,87,-4,85,-2,59});
    states[87] = new State(new int[]{27,88,28,83});
    states[88] = new State(-17);
    states[89] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-19,90,-4,85,-2,59});
    states[90] = new State(new int[]{77,91,28,83});
    states[91] = new State(new int[]{24,92,76,94});
    states[92] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,93,-2,59});
    states[93] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57,46,-44,25,-44,5,-44,57,-44,56,-44,48,-44,59,-44});
    states[94] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,95,-2,59});
    states[95] = new State(new int[]{77,96,11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57});
    states[96] = new State(new int[]{24,97});
    states[97] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,98,-2,59});
    states[98] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57,46,-45,25,-45,5,-45,57,-45,56,-45,48,-45,59,-45});
    states[99] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-19,100,-4,85,-2,59});
    states[100] = new State(new int[]{27,101,28,83});
    states[101] = new State(-84);
    states[102] = new State(-53);
    states[103] = new State(-54);
    states[104] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,105,-2,59});
    states[105] = new State(new int[]{55,106,11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57});
    states[106] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,57,-51,56,-51,25,-51,5,-51},new int[]{-15,107,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[107] = new State(new int[]{57,108,56,109,25,112,5,113},new int[]{-35,27});
    states[108] = new State(-46);
    states[109] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,57,-51,25,-51,5,-51},new int[]{-15,110,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[110] = new State(new int[]{57,111,25,112,5,113},new int[]{-35,27});
    states[111] = new State(-47);
    states[112] = new State(-5);
    states[113] = new State(-6);
    states[114] = new State(-60);
    states[115] = new State(-55);
    states[116] = new State(new int[]{60,117,61,170,3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,178,-2,59});
    states[117] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,118,-2,59});
    states[118] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57,3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,48,-51,25,-51,5,-51},new int[]{-15,119,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[119] = new State(new int[]{48,120,25,112,5,113},new int[]{-35,27});
    states[120] = new State(-48);
    states[121] = new State(-56);
    states[122] = new State(new int[]{5,123});
    states[123] = new State(new int[]{59,166},new int[]{-10,124,-22,164});
    states[124] = new State(new int[]{57,125,56,126});
    states[125] = new State(-76);
    states[126] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,57,-51,25,-51,5,-51},new int[]{-15,127,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[127] = new State(new int[]{57,128,25,112,5,113},new int[]{-35,27});
    states[128] = new State(-77);
    states[129] = new State(-57);
    states[130] = new State(-58);
    states[131] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-19,132,-4,85,-2,59});
    states[132] = new State(new int[]{28,83,46,-80,25,-80,5,-80,57,-80,56,-80,48,-80,59,-80});
    states[133] = new State(new int[]{3,66},new int[]{-20,134,-2,137});
    states[134] = new State(new int[]{28,135,46,-81,25,-81,5,-81,57,-81,56,-81,48,-81,59,-81});
    states[135] = new State(new int[]{3,66},new int[]{-2,136});
    states[136] = new State(-70);
    states[137] = new State(-69);
    states[138] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-19,139,-4,85,-2,59});
    states[139] = new State(new int[]{28,83,46,-82,25,-82,5,-82,57,-82,56,-82,48,-82,59,-82});
    states[140] = new State(-59);
    states[141] = new State(new int[]{49,143,3,66},new int[]{-20,142,-2,137});
    states[142] = new State(new int[]{28,135,25,-71,5,-71,46,-71,57,-71,56,-71,48,-71,59,-71});
    states[143] = new State(new int[]{3,145},new int[]{-21,144});
    states[144] = new State(-72);
    states[145] = new State(new int[]{76,146});
    states[146] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-24,147,-23,156,-4,153,-2,59});
    states[147] = new State(new int[]{77,148,28,151});
    states[148] = new State(new int[]{28,149,25,-88,5,-88,46,-88,57,-88,56,-88,48,-88,59,-88,27,-88});
    states[149] = new State(new int[]{3,145},new int[]{-21,150});
    states[150] = new State(-89);
    states[151] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-23,152,-4,153,-2,59});
    states[152] = new State(-86);
    states[153] = new State(new int[]{30,154,11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57});
    states[154] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,155,-2,59});
    states[155] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57,77,-85,28,-85});
    states[156] = new State(-87);
    states[157] = new State(-62);
    states[158] = new State(-63);
    states[159] = new State(-64);
    states[160] = new State(-65);
    states[161] = new State(-66);
    states[162] = new State(-67);
    states[163] = new State(-68);
    states[164] = new State(new int[]{59,166,57,-74,56,-74},new int[]{-10,165,-22,164});
    states[165] = new State(-75);
    states[166] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,167,-2,59});
    states[167] = new State(new int[]{30,168,11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57});
    states[168] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,25,-51,5,-51,59,-51,57,-51,56,-51},new int[]{-15,169,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[169] = new State(new int[]{25,112,5,113,59,-73,57,-73,56,-73},new int[]{-35,27});
    states[170] = new State(new int[]{3,171});
    states[171] = new State(new int[]{62,172});
    states[172] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,173,-2,59});
    states[173] = new State(new int[]{63,174,11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57});
    states[174] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,175,-2,59});
    states[175] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57,3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,48,-51,25,-51,5,-51},new int[]{-15,176,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[176] = new State(new int[]{48,177,25,112,5,113},new int[]{-35,27});
    states[177] = new State(-78);
    states[178] = new State(new int[]{64,179,11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57});
    states[179] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,48,-51,25,-51,5,-51},new int[]{-15,180,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[180] = new State(new int[]{48,181,25,112,5,113},new int[]{-35,27});
    states[181] = new State(-79);
    states[182] = new State(new int[]{25,183,27,-97});
    states[183] = new State(new int[]{35,157,36,158,68,159,69,160,70,161,71,162,72,163,43,189},new int[]{-25,184,-3,185});
    states[184] = new State(-95);
    states[185] = new State(new int[]{49,187,3,66},new int[]{-20,186,-2,137});
    states[186] = new State(new int[]{28,135,25,-90,27,-90});
    states[187] = new State(new int[]{3,145},new int[]{-21,188});
    states[188] = new State(-92);
    states[189] = new State(new int[]{35,157,36,158,68,159,69,160,70,161,71,162,72,163},new int[]{-3,190});
    states[190] = new State(new int[]{49,192,3,66},new int[]{-20,191,-2,137});
    states[191] = new State(new int[]{28,135,25,-91,27,-91});
    states[192] = new State(new int[]{3,145},new int[]{-21,193});
    states[193] = new State(-93);
    states[194] = new State(-94);
    states[195] = new State(new int[]{45,196,5,15});
    states[196] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,46,-51,25,-51,5,-51},new int[]{-15,197,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[197] = new State(new int[]{46,198,25,112,5,113},new int[]{-35,27});
    states[198] = new State(-99);
    states[199] = new State(new int[]{3,66},new int[]{-2,200});
    states[200] = new State(new int[]{26,201,45,-11,5,-11},new int[]{-34,208});
    states[201] = new State(new int[]{35,157,36,158,68,159,69,160,70,161,71,162,72,163,43,189,27,-96},new int[]{-27,202,-26,182,-25,194,-3,185});
    states[202] = new State(new int[]{27,203});
    states[203] = new State(-11,new int[]{-34,204});
    states[204] = new State(new int[]{45,205,5,15});
    states[205] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,46,-51,25,-51,5,-51},new int[]{-15,206,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[206] = new State(new int[]{46,207,25,112,5,113},new int[]{-35,27});
    states[207] = new State(-100);
    states[208] = new State(new int[]{45,209,5,15});
    states[209] = new State(new int[]{3,66,54,104,47,116,58,122,51,131,52,133,53,138,35,157,36,158,68,159,69,160,70,161,71,162,72,163,46,-51,25,-51,5,-51},new int[]{-15,210,-6,114,-5,29,-2,30,-9,102,-7,103,-8,115,-11,121,-12,129,-13,130,-14,140,-3,141});
    states[210] = new State(new int[]{46,211,25,112,5,113},new int[]{-35,27});
    states[211] = new State(-101);
    states[212] = new State(new int[]{25,112,5,113,45,-7,41,-7,35,-7,36,-7,68,-7,69,-7,70,-7,71,-7,72,-7,46,-7,40,-7},new int[]{-33,213,-35,212});
    states[213] = new State(-8);
    states[214] = new State(new int[]{3,66},new int[]{-2,215});
    states[215] = new State(new int[]{25,112,5,113},new int[]{-33,216,-35,212});
    states[216] = new State(new int[]{41,233,35,157,36,158,68,159,69,160,70,161,71,162,72,163,46,-112,40,-112},new int[]{-32,217,-36,221,-18,235,-16,224,-14,232,-3,141});
    states[217] = new State(-102,new int[]{-17,218});
    states[218] = new State(new int[]{46,219,40,18},new int[]{-28,13,-29,16});
    states[219] = new State(-11,new int[]{-34,220});
    states[220] = new State(new int[]{5,15,2,-3});
    states[221] = new State(new int[]{25,112,5,113},new int[]{-33,222,-35,212});
    states[222] = new State(new int[]{35,157,36,158,68,159,69,160,70,161,71,162,72,163,40,-113,46,-113},new int[]{-18,223,-16,224,-14,232,-3,141});
    states[223] = new State(-114);
    states[224] = new State(new int[]{25,112,5,113},new int[]{-35,225});
    states[225] = new State(new int[]{3,66,35,157,36,158,68,159,69,160,70,161,71,162,72,163,40,-111,46,-111},new int[]{-37,226,-14,230,-5,231,-2,229,-3,141});
    states[226] = new State(new int[]{25,112,5,113},new int[]{-35,227});
    states[227] = new State(new int[]{3,66,40,-110,46,-110},new int[]{-5,228,-2,229});
    states[228] = new State(-108);
    states[229] = new State(new int[]{24,31,76,89});
    states[230] = new State(-106);
    states[231] = new State(-109);
    states[232] = new State(-107);
    states[233] = new State(new int[]{3,66},new int[]{-20,234,-2,137});
    states[234] = new State(new int[]{28,135,25,-105,5,-105});
    states[235] = new State(-115);
    states[236] = new State(new int[]{25,112,5,113,50,-10,41,-10,35,-10,36,-10,68,-10,69,-10,70,-10,71,-10,72,-10,40,-10},new int[]{-31,237,-35,236});
    states[237] = new State(-9);
    states[238] = new State(new int[]{3,66,6,67,9,68,10,69,4,70,39,71,32,72,7,73,33,74,8,75,12,76,26,78,67,81},new int[]{-4,239,-2,59});
    states[239] = new State(new int[]{11,33,12,35,13,37,23,39,14,41,65,43,66,45,21,47,22,49,17,51,19,53,18,55,20,57,2,-4});

    rules[1] = new Rule(-30, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-31,-32,40,-2,-33,45,-15,46,-34,-17});
    rules[3] = new Rule(-1, new int[]{-31,50,-2,-33,-32,-17,46,-34});
    rules[4] = new Rule(-1, new int[]{37,-4});
    rules[5] = new Rule(-35, new int[]{25});
    rules[6] = new Rule(-35, new int[]{5});
    rules[7] = new Rule(-33, new int[]{-35});
    rules[8] = new Rule(-33, new int[]{-35,-33});
    rules[9] = new Rule(-31, new int[]{-35,-31});
    rules[10] = new Rule(-31, new int[]{});
    rules[11] = new Rule(-34, new int[]{});
    rules[12] = new Rule(-34, new int[]{-34,5});
    rules[13] = new Rule(-2, new int[]{3});
    rules[14] = new Rule(-4, new int[]{-2});
    rules[15] = new Rule(-4, new int[]{-2,76,-19,77});
    rules[16] = new Rule(-4, new int[]{-2,76,-19,77,76,-4,77});
    rules[17] = new Rule(-4, new int[]{-2,26,-19,27});
    rules[18] = new Rule(-4, new int[]{6});
    rules[19] = new Rule(-4, new int[]{9});
    rules[20] = new Rule(-4, new int[]{10});
    rules[21] = new Rule(-4, new int[]{4});
    rules[22] = new Rule(-4, new int[]{39});
    rules[23] = new Rule(-4, new int[]{32});
    rules[24] = new Rule(-4, new int[]{7});
    rules[25] = new Rule(-4, new int[]{33});
    rules[26] = new Rule(-4, new int[]{8});
    rules[27] = new Rule(-4, new int[]{12,-4});
    rules[28] = new Rule(-4, new int[]{26,-4,27});
    rules[29] = new Rule(-4, new int[]{67,-4});
    rules[30] = new Rule(-4, new int[]{-4,11,-4});
    rules[31] = new Rule(-4, new int[]{-4,12,-4});
    rules[32] = new Rule(-4, new int[]{-4,13,-4});
    rules[33] = new Rule(-4, new int[]{-4,23,-4});
    rules[34] = new Rule(-4, new int[]{-4,14,-4});
    rules[35] = new Rule(-4, new int[]{-4,65,-4});
    rules[36] = new Rule(-4, new int[]{-4,66,-4});
    rules[37] = new Rule(-4, new int[]{-4,21,-4});
    rules[38] = new Rule(-4, new int[]{-4,22,-4});
    rules[39] = new Rule(-4, new int[]{-4,17,-4});
    rules[40] = new Rule(-4, new int[]{-4,19,-4});
    rules[41] = new Rule(-4, new int[]{-4,18,-4});
    rules[42] = new Rule(-4, new int[]{-4,20,-4});
    rules[43] = new Rule(-5, new int[]{-2,24,-4});
    rules[44] = new Rule(-5, new int[]{-2,76,-19,77,24,-4});
    rules[45] = new Rule(-5, new int[]{-2,76,-19,77,76,-4,77,24,-4});
    rules[46] = new Rule(-7, new int[]{54,-4,55,-15,57});
    rules[47] = new Rule(-7, new int[]{54,-4,55,-15,56,-15,57});
    rules[48] = new Rule(-8, new int[]{47,60,-4,-15,48});
    rules[49] = new Rule(-19, new int[]{-4});
    rules[50] = new Rule(-19, new int[]{-19,28,-4});
    rules[51] = new Rule(-9, new int[]{});
    rules[52] = new Rule(-6, new int[]{-5});
    rules[53] = new Rule(-6, new int[]{-9});
    rules[54] = new Rule(-6, new int[]{-7});
    rules[55] = new Rule(-6, new int[]{-8});
    rules[56] = new Rule(-6, new int[]{-11});
    rules[57] = new Rule(-6, new int[]{-12});
    rules[58] = new Rule(-6, new int[]{-13});
    rules[59] = new Rule(-6, new int[]{-14});
    rules[60] = new Rule(-15, new int[]{-6});
    rules[61] = new Rule(-15, new int[]{-15,-35,-6});
    rules[62] = new Rule(-3, new int[]{35});
    rules[63] = new Rule(-3, new int[]{36});
    rules[64] = new Rule(-3, new int[]{68});
    rules[65] = new Rule(-3, new int[]{69});
    rules[66] = new Rule(-3, new int[]{70});
    rules[67] = new Rule(-3, new int[]{71});
    rules[68] = new Rule(-3, new int[]{72});
    rules[69] = new Rule(-20, new int[]{-2});
    rules[70] = new Rule(-20, new int[]{-20,28,-2});
    rules[71] = new Rule(-14, new int[]{-3,-20});
    rules[72] = new Rule(-14, new int[]{-3,49,-21});
    rules[73] = new Rule(-22, new int[]{59,-4,30,-15});
    rules[74] = new Rule(-10, new int[]{-22});
    rules[75] = new Rule(-10, new int[]{-22,-10});
    rules[76] = new Rule(-11, new int[]{58,5,-10,57});
    rules[77] = new Rule(-11, new int[]{58,5,-10,56,-15,57});
    rules[78] = new Rule(-12, new int[]{47,61,3,62,-4,63,-4,-15,48});
    rules[79] = new Rule(-12, new int[]{47,-4,64,-15,48});
    rules[80] = new Rule(-13, new int[]{51,-19});
    rules[81] = new Rule(-13, new int[]{52,-20});
    rules[82] = new Rule(-13, new int[]{53,-19});
    rules[83] = new Rule(-13, new int[]{-2});
    rules[84] = new Rule(-13, new int[]{-2,26,-19,27});
    rules[85] = new Rule(-23, new int[]{-4,30,-4});
    rules[86] = new Rule(-24, new int[]{-24,28,-23});
    rules[87] = new Rule(-24, new int[]{-23});
    rules[88] = new Rule(-21, new int[]{3,76,-24,77});
    rules[89] = new Rule(-21, new int[]{3,76,-24,77,28,-21});
    rules[90] = new Rule(-25, new int[]{-3,-20});
    rules[91] = new Rule(-25, new int[]{43,-3,-20});
    rules[92] = new Rule(-25, new int[]{-3,49,-21});
    rules[93] = new Rule(-25, new int[]{43,-3,49,-21});
    rules[94] = new Rule(-26, new int[]{-25});
    rules[95] = new Rule(-26, new int[]{-26,25,-25});
    rules[96] = new Rule(-27, new int[]{});
    rules[97] = new Rule(-27, new int[]{-26});
    rules[98] = new Rule(-28, new int[]{40,-2,26,-27,27,-34,45,-15,46});
    rules[99] = new Rule(-28, new int[]{40,-2,-34,45,-15,46});
    rules[100] = new Rule(-29, new int[]{40,-3,-2,26,-27,27,-34,45,-15,46});
    rules[101] = new Rule(-29, new int[]{40,-3,-2,-34,45,-15,46});
    rules[102] = new Rule(-17, new int[]{});
    rules[103] = new Rule(-17, new int[]{-17,-28,-34});
    rules[104] = new Rule(-17, new int[]{-17,-29,-34});
    rules[105] = new Rule(-36, new int[]{41,-20});
    rules[106] = new Rule(-16, new int[]{-16,-35,-14});
    rules[107] = new Rule(-16, new int[]{-14});
    rules[108] = new Rule(-37, new int[]{-37,-35,-5});
    rules[109] = new Rule(-37, new int[]{-5});
    rules[110] = new Rule(-18, new int[]{-16,-35,-37,-35});
    rules[111] = new Rule(-18, new int[]{-16,-35});
    rules[112] = new Rule(-32, new int[]{});
    rules[113] = new Rule(-32, new int[]{-36,-33});
    rules[114] = new Rule(-32, new int[]{-36,-33,-18});
    rules[115] = new Rule(-32, new int[]{-18});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // module -> Separators_Opt, Global_part, TK_ALG, ident, Separators, TK_BEGIN, 
              //           StatementSequence, TK_END, EmptyLines, Sub_declarations
{		
		// Формирование главной программы
            program_module _program_module;
            program_name _program_name = new program_name(ValueStack[ValueStack.Depth-7].id);
            if ((_units[this.unit_number - 1] as unit_data).initialization.subnodes.Count != 0)
	            ValueStack[ValueStack.Depth-4].sl.subnodes.InsertRange(0, (_units[this.unit_number - 1] as unit_data).initialization.subnodes);

		block b;
		if (ValueStack[ValueStack.Depth-1].decl != null)
		{
			if ((_units[this.unit_number - 1] as unit_data).sub_progs.defs.Count != 0)
				ValueStack[ValueStack.Depth-1].decl.defs.InsertRange(0,(_units[this.unit_number - 1] as unit_data).sub_progs.defs );
			ValueStack[ValueStack.Depth-1].decl.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
			b = new block(ValueStack[ValueStack.Depth-1].decl, ValueStack[ValueStack.Depth-4].sl);
		}
		else

		{
			if ((_units[this.unit_number - 1] as unit_data).sub_progs.defs.Count != 0)
				b = new block((_units[this.unit_number - 1] as unit_data).sub_progs, ValueStack[ValueStack.Depth-4].sl);
			else
				b = new block(null, ValueStack[ValueStack.Depth-4].sl);
		}

		(_units[this.unit_number - 1] as unit_data).used_units.idents.Add(new ident("MathForKumir"));
            if ((_units[this.unit_number - 1] as unit_data).used_units.idents.Count != 0)
            {
 	           unit_or_namespace _unit_or_namespace;
                 uses_list _uses_list = new uses_list();

                 for (int i = 0; -i > -(_units[this.unit_number - 1] as unit_data).used_units.idents.Count; i++)
                 {
      	           ident_list _ident_list = new ident_list();
                       _ident_list.idents.Add((_units[this.unit_number - 1] as unit_data).used_units.idents[i]);
                       _unit_or_namespace = new unit_or_namespace(_ident_list);
                       _uses_list.units.Add(_unit_or_namespace);
                 }
                 _program_module = new program_module(_program_name, _uses_list, b, null);
            }
            else
			_program_module = new program_module(_program_name, null, b, null);

		
		b.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-5].Merge(LocationStack[LocationStack.Depth-3]));
		_program_name.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-7]));
		//var r = new program_module(null, ul, b, null);
		_program_module.Language = LanguageId.PascalABCNET;
		_program_module.source_context = PT.ToSourceContext(CurrentLocationSpan);
		root = _program_module;
    }
        break;
      case 3: // module -> Separators_Opt, TK_ISP, ident, Separators, Global_part, 
              //           Sub_declarations, TK_END, EmptyLines
{
	      interface_node _interface_node;
            (_units[this.unit_number - 1] as unit_data).used_units.idents.Add(new ident("MathForKumir"));
            if ((_units[this.unit_number - 1] as unit_data).used_units.idents.Count > 0)
	      {
      	      unit_or_namespace _unit_or_namespace;
                  uses_list _uses_list = new uses_list();
                  for (int i = 0; -i > -(_units[this.unit_number - 1] as unit_data).used_units.idents.Count; i++)
                  {
            	      ident_list _ident_list = new ident_list();
                  	_ident_list.idents.Add((_units[this.unit_number - 1] as unit_data).used_units.idents[i]);
                        _unit_or_namespace = new unit_or_namespace(_ident_list);
                        _uses_list.units.Add(_unit_or_namespace);
                  }
			if (ValueStack[ValueStack.Depth-3].decl!=null)
				(_units[this.unit_number - 1] as unit_data).sub_progs.defs.AddRange(ValueStack[ValueStack.Depth-3].decl.defs);
                  _interface_node = new interface_node((_units[this.unit_number - 1] as unit_data).sub_progs, _uses_list, null); 
            }
            else
		{
			if (ValueStack[ValueStack.Depth-3].decl!=null)
				(_units[this.unit_number - 1] as unit_data).sub_progs.defs.AddRange(ValueStack[ValueStack.Depth-3].decl.defs);
            	_interface_node = new interface_node((_units[this.unit_number - 1] as unit_data).sub_progs, null, null);
		}
            unit_module _unit_module = new unit_module(new unit_name(ValueStack[ValueStack.Depth-6].id, 0), _interface_node, null, (_units[this.unit_number - 1] as unit_data).initialization, null);
            _unit_module.Language = LanguageId.PascalABCNET;
            unit_name _unit_name = new unit_name(ValueStack[ValueStack.Depth-6].id, 0);
            _unit_module.source_context = PT.ToSourceContext(CurrentLocationSpan);
            _unit_name.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-6].Merge(LocationStack[LocationStack.Depth-6]));
	      root = _unit_module;
	}
        break;
      case 4: // module -> INVISIBLE, expr
{ // Для Intellisense
		root = ValueStack[ValueStack.Depth-1].ex;
	}
        break;
      case 5: // Separator -> SEMICOLUMN
{
		
	}
        break;
      case 6: // Separator -> ENDL
{

	}
        break;
      case 7: // Separators -> Separator
{
	}
        break;
      case 8: // Separators -> Separator, Separators
{
	}
        break;
      case 9: // Separators_Opt -> Separator, Separators_Opt
{
	}
        break;
      case 10: // Separators_Opt -> /* empty */
{
	}
        break;
      case 12: // EmptyLines -> EmptyLines, ENDL
{

	}
        break;
      case 13: // ident -> ID
{
		CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-1].sVal); 
		CurrentSemanticValue.id.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 14: // expr -> ident
{
		CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id;
	}
        break;
      case 15: // expr -> ident, TK_SQUARE_OPEN, factparams, TK_SQUARE_CLOSE
{
	      indexer _indexer = new indexer(GetExpressions(ValueStack[ValueStack.Depth-2].el));
            _indexer.dereferencing_value = ValueStack[ValueStack.Depth-4].id;
		_indexer.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-2]));
      	CurrentSemanticValue.ex = _indexer as expression;    
      }
        break;
      case 16: // expr -> ident, TK_SQUARE_OPEN, factparams, TK_SQUARE_CLOSE, TK_SQUARE_OPEN, 
               //         expr, TK_SQUARE_CLOSE
{

	      indexer _indexer = new indexer(GetExpressions(ValueStack[ValueStack.Depth-5].el));
            indexer _indexer1 = new indexer(GetExpressions(ValueStack[ValueStack.Depth-2].ex));
            _indexer.dereferencing_value = ValueStack[ValueStack.Depth-7].id;
            _indexer1.dereferencing_value = _indexer;
		_indexer.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-5].Merge(LocationStack[LocationStack.Depth-5]));
            _indexer1.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-2]));
		CurrentSemanticValue.ex = _indexer1 as expression;
	}
        break;
      case 17: // expr -> ident, LPAREN, factparams, RPAREN
{
		method_call mc = new method_call(ValueStack[ValueStack.Depth-2].el);
		mc.dereferencing_value = ValueStack[ValueStack.Depth-4].id;
		switch (ValueStack[ValueStack.Depth-4].id.name)
            {
	            case "tg": mc.dereferencing_value = new ident("tan"); break;
                  case "ctg": mc.dereferencing_value = new ident("ctg"); break;
                  case "arctg": mc.dereferencing_value = new ident("arctan"); break;
                  case "arcctg": mc.dereferencing_value = new ident("arcctg"); break;
                  case "lg": mc.dereferencing_value = new ident("log10"); break;
                  case "mod": mc.dereferencing_value = new ident("md"); break;
                  case "div": mc.dereferencing_value = new ident("dv"); break;
                  case "rnd": mc.dereferencing_value = new ident("random"); break;
                  case "int": mc.dereferencing_value = new ident("round"); break;
            }
		
		CurrentSemanticValue.ex = mc as expression;
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 18: // expr -> INTNUM
{ 
		CurrentSemanticValue.ex = new int32_const(ValueStack[ValueStack.Depth-1].iVal); 		
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 19: // expr -> REAL
{ 
		CurrentSemanticValue.ex = new double_const(ValueStack[ValueStack.Depth-1].rVal); 		
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 20: // expr -> CHAR
{ 
		CurrentSemanticValue.ex = new char_const(ValueStack[ValueStack.Depth-1].chVal); 		
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 21: // expr -> STRING
{ 
		CurrentSemanticValue.ex = new string_const(ValueStack[ValueStack.Depth-1].sVal); 		
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 22: // expr -> TK_EOL
{ 
		 literal_const_line _literal_const_line = new literal_const_line();
             sharp_char_const _sharp_char_const_13 = new sharp_char_const(13);
             sharp_char_const _sharp_char_const_10 = new sharp_char_const(10);
             _literal_const_line.literals.Add(_sharp_char_const_13);
             _literal_const_line.literals.Add(_sharp_char_const_10);
  		 _sharp_char_const_13.source_context = PT.ToSourceContext(CurrentLocationSpan);
		 _sharp_char_const_10.source_context = PT.ToSourceContext(CurrentLocationSpan);
             CurrentSemanticValue.ex = _literal_const_line;
   		 CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 23: // expr -> TRUE
{
		CurrentSemanticValue.ex = new bool_const(true);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 24: // expr -> TK_TRUE
{
		CurrentSemanticValue.ex = new bool_const(true);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 25: // expr -> FALSE
{
		CurrentSemanticValue.ex = new bool_const(false);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 26: // expr -> TK_FALSE
{
		CurrentSemanticValue.ex = new bool_const(false);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 27: // expr -> MINUS, expr
{
		CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex,Operators.Minus);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 28: // expr -> LPAREN, expr, RPAREN
{CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-2].ex;}
        break;
      case 29: // expr -> TK_NOT, expr
{
		CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex,Operators.LogicalNOT);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 30: // expr -> expr, PLUS, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Plus);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 31: // expr -> expr, MINUS, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Minus);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 32: // expr -> expr, MULT, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Multiplication);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 33: // expr -> expr, TK_POWER, expr
{
 		expression_list _expression_list = new expression_list();
            _expression_list.expressions.Add(ValueStack[ValueStack.Depth-3].ex);
            _expression_list.expressions.Add(ValueStack[ValueStack.Depth-1].ex);
            method_call _method_call = new method_call(_expression_list);
            _method_call.dereferencing_value = new ident("power");
 
		_method_call.dereferencing_value.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-2]));
            _method_call.source_context = PT.ToSourceContext(CurrentLocationSpan);
		CurrentSemanticValue.ex = _method_call as expression ;
    }
        break;
      case 34: // expr -> expr, DIVIDE, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.IntegerDivision);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 35: // expr -> expr, TK_AND, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.LogicalAND);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 36: // expr -> expr, TK_OR, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.LogicalOR);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 37: // expr -> expr, EQ, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Equal);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 38: // expr -> expr, NE, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.NotEqual);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 39: // expr -> expr, LT, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Less);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 40: // expr -> expr, LE, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.LessEqual);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 41: // expr -> expr, GT, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.Greater);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 42: // expr -> expr, GE, expr
{
		CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex,ValueStack[ValueStack.Depth-1].ex,Operators.GreaterEqual);
		CurrentSemanticValue.ex.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 43: // Assignment -> ident, ASSIGN, expr
{
		CurrentSemanticValue.st = new assign(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, Operators.Assignment);
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 44: // Assignment -> ident, TK_SQUARE_OPEN, factparams, TK_SQUARE_CLOSE, ASSIGN, expr
{
	      indexer _indexer = new indexer(GetExpressions(ValueStack[ValueStack.Depth-4].el));
            _indexer.dereferencing_value = ValueStack[ValueStack.Depth-6].id;
		_indexer.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-4].Merge(LocationStack[LocationStack.Depth-4]));
		CurrentSemanticValue.st = new assign(_indexer, ValueStack[ValueStack.Depth-1].ex, Operators.Assignment);
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 45: // Assignment -> ident, TK_SQUARE_OPEN, factparams, TK_SQUARE_CLOSE, 
               //               TK_SQUARE_OPEN, expr, TK_SQUARE_CLOSE, ASSIGN, expr
{
	      indexer _indexer = new indexer(GetExpressions(ValueStack[ValueStack.Depth-7].el));
            indexer _indexer1 = new indexer(GetExpressions(ValueStack[ValueStack.Depth-4].ex));
            _indexer.dereferencing_value = ValueStack[ValueStack.Depth-9].id;
            _indexer1.dereferencing_value = _indexer;
		_indexer.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-7]));
            _indexer1.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-4].Merge(LocationStack[LocationStack.Depth-4]));
		CurrentSemanticValue.st = new assign(_indexer1, ValueStack[ValueStack.Depth-1].ex, Operators.Assignment);
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
    	}
        break;
      case 46: // If_Statement -> TK_IF, expr, TK_THEN, StatementSequence, TK_END_ALL
{
		CurrentSemanticValue.st = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].sl, null);
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 47: // If_Statement -> TK_IF, expr, TK_THEN, StatementSequence, TK_ELSE, 
               //                 StatementSequence, TK_END_ALL
{
		CurrentSemanticValue.st = new if_node(ValueStack[ValueStack.Depth-6].ex, ValueStack[ValueStack.Depth-4].sl, ValueStack[ValueStack.Depth-2].sl);
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 48: // While_Statement -> TK_BEGIN_CYCLE, TK_WHILE, expr, StatementSequence, 
               //                    TK_END_CYCLE
{
		CurrentSemanticValue.st = new while_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].sl, WhileCycleType.While);
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 49: // factparams -> expr
{
		CurrentSemanticValue.el = new expression_list();
		CurrentSemanticValue.el.expressions.Add(ValueStack[ValueStack.Depth-1].ex);
		CurrentSemanticValue.el.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 50: // factparams -> factparams, COLUMN, expr
{
		ValueStack[ValueStack.Depth-3].el.expressions.Add(ValueStack[ValueStack.Depth-1].ex);
		CurrentSemanticValue.el = ValueStack[ValueStack.Depth-3].el;
		CurrentSemanticValue.el.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 51: // EmptyStatement -> /* empty */
{
		CurrentSemanticValue.st = new empty_statement();		
	}
        break;
      case 60: // StatementSequence -> Statement
{
		CurrentSemanticValue.sl = GetStatements(ValueStack[ValueStack.Depth-1].st);
		CurrentSemanticValue.sl.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 61: // StatementSequence -> StatementSequence, Separator, Statement
{
		statement_list sl = GetStatements(ValueStack[ValueStack.Depth-1].st);
		for (int i=0; i < sl.subnodes.Count; i++)
			ValueStack[ValueStack.Depth-3].sl.subnodes.Add(sl.subnodes[i]);
		CurrentSemanticValue.sl = ValueStack[ValueStack.Depth-3].sl;
		CurrentSemanticValue.sl.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 62: // type -> BOOLEAN
{
		CurrentSemanticValue.ntr = new named_type_reference();
		CurrentSemanticValue.ntr.names.Add(new ident("boolean"));
		CurrentSemanticValue.ntr.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 63: // type -> INTEGER
{
		CurrentSemanticValue.ntr = new named_type_reference();
		CurrentSemanticValue.ntr.names.Add(new ident("integer"));
		CurrentSemanticValue.ntr.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 64: // type -> TK_INTEGER_TYPE
{
		CurrentSemanticValue.ntr = new named_type_reference();
		CurrentSemanticValue.ntr.names.Add(new ident("integer"));
		CurrentSemanticValue.ntr.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 65: // type -> TK_REAL_TYPE
{
		CurrentSemanticValue.ntr = new named_type_reference();
		CurrentSemanticValue.ntr.names.Add(new ident("real"));
		CurrentSemanticValue.ntr.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 66: // type -> TK_BOOLEAN_TYPE
{
		CurrentSemanticValue.ntr = new named_type_reference();
		CurrentSemanticValue.ntr.names.Add(new ident("boolean"));
		CurrentSemanticValue.ntr.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 67: // type -> TK_CHAR_TYPE
{
		CurrentSemanticValue.ntr = new named_type_reference();
		CurrentSemanticValue.ntr.names.Add(new ident("char"));
		CurrentSemanticValue.ntr.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 68: // type -> TK_STRING_TYPE
{
		CurrentSemanticValue.ntr = new named_type_reference();
		CurrentSemanticValue.ntr.names.Add(new ident("string"));
		CurrentSemanticValue.ntr.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 69: // IDList -> ident
{
		CurrentSemanticValue.il=new ident_list();
		CurrentSemanticValue.il.idents.Add(ValueStack[ValueStack.Depth-1].id);
		CurrentSemanticValue.il.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 70: // IDList -> IDList, COLUMN, ident
{
		ValueStack[ValueStack.Depth-3].il.idents.Add(ValueStack[ValueStack.Depth-1].id);
		CurrentSemanticValue.il = ValueStack[ValueStack.Depth-3].il;
		CurrentSemanticValue.il.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 71: // Var_Decl -> type, IDList
{
	      var_def_statement _var_def_statement = new var_def_statement(GetIdents(ValueStack[ValueStack.Depth-1].il), ValueStack[ValueStack.Depth-2].ntr, null, definition_attribute.None, false);
            var_statement _var_statement = new var_statement(_var_def_statement);
   		_var_def_statement.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));		
		_var_statement.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));		
		CurrentSemanticValue.st = _var_statement;
	}
        break;
      case 72: // Var_Decl -> type, TK_ARRAY, Array_list
{	
		statement_list var_statement_list = new statement_list();
	      variable_definitions _variable_definitions = ValueStack[ValueStack.Depth-1].vdss;
            for (int i = 0; -i > -(_variable_definitions.var_definitions.Count); i++)
            {
            	((_variable_definitions.var_definitions[i]).vars_type as array_type).elemets_types = ValueStack[ValueStack.Depth-3].ntr;
                  var_statement _var_statement = new var_statement((var_def_statement)_variable_definitions.var_definitions[i]);
                  var_statement_list.subnodes.Add(_var_statement);
	            _var_statement.source_context = _variable_definitions.var_definitions[i].source_context;
            }
		_variable_definitions.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));		
		var_statement_list.source_context = PT.ToSourceContext(CurrentLocationSpan);		
		CurrentSemanticValue.st = var_statement_list;
	}
        break;
      case 73: // Case_variant -> TK_CASE_V, expr, COLON, StatementSequence
{
	  	CurrentSemanticValue.cv = new case_variant(GetExpressions(ValueStack[ValueStack.Depth-3].ex), GetStatements(ValueStack[ValueStack.Depth-1].sl));
		CurrentSemanticValue.cv.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 74: // Case_variant_list -> Case_variant
{
	      case_variant _case_variant = (case_variant)ValueStack[ValueStack.Depth-1].cv;     
		CurrentSemanticValue.st = new if_node(GetExpressions(_case_variant.conditions), (statement)_case_variant.exec_if_true, null);
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 75: // Case_variant_list -> Case_variant, Case_variant_list
{
	      if_node _if_node1 = ValueStack[ValueStack.Depth-1].st as if_node;
            case_variant _case_variant = (case_variant)ValueStack[ValueStack.Depth-2].cv;
            CurrentSemanticValue.st = new if_node((expression)_case_variant.conditions.expressions[0], _case_variant.exec_if_true, _if_node1);
            CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 76: // Case_statement -> TK_CASE, ENDL, Case_variant_list, TK_END_ALL
{
		if_node _if_node = (if_node)ValueStack[ValueStack.Depth-2].st;      
		if_node _if_node1;
            _if_node1 = _if_node;
            while (_if_node1.else_body is if_node)
	           _if_node1 = _if_node1.else_body as if_node;
            _if_node1.else_body = null;
		CurrentSemanticValue.st = _if_node;
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 77: // Case_statement -> TK_CASE, ENDL, Case_variant_list, TK_ELSE, StatementSequence, 
               //                   TK_END_ALL
{
	      if_node _if_node = (if_node)ValueStack[ValueStack.Depth-4].st;
            if_node _if_node1;
		_if_node1 = _if_node;
            while (_if_node1.else_body is if_node)
  	          _if_node1 = _if_node1.else_body as if_node;                                                  
            _if_node1.else_body = GetStatements(ValueStack[ValueStack.Depth-2].sl);
		CurrentSemanticValue.st = _if_node;
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 78: // For_statement -> TK_BEGIN_CYCLE, TK_FOR, ID, TK_FROM, expr, TK_TO, expr, 
               //                  StatementSequence, TK_END_CYCLE
{
		ident id = new ident(ValueStack[ValueStack.Depth-7].sVal);
		id.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-7]));
		CurrentSemanticValue.st = new for_node(id, (expression)ValueStack[ValueStack.Depth-5].ex, (expression)ValueStack[ValueStack.Depth-3].ex, GetStatements(ValueStack[ValueStack.Depth-2].sl), for_cycle_type.to, null, null, false);
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 79: // For_statement -> TK_BEGIN_CYCLE, expr, TK_RAZ, StatementSequence, TK_END_CYCLE
{
        	int32_const _int32_const = new int32_const(1);
                ident loop_var = new ident("&_system_loop_var");
                statement_list _statement_list = GetStatements(ValueStack[ValueStack.Depth-2].sl);
                CurrentSemanticValue.st = new for_node(loop_var, _int32_const, (expression)ValueStack[ValueStack.Depth-4].ex, _statement_list, for_cycle_type.to, null, null, true);
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 80: // Proccall_statement -> TK_ASSERT, factparams
{
		method_call mc = new method_call(ValueStack[ValueStack.Depth-1].el);
		ident id = new ident("assert");
		id.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-2]));		
		mc.dereferencing_value = id;
		CurrentSemanticValue.st = mc;
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 81: // Proccall_statement -> TK_READ, IDList
{
            procedure_call _procedure_call = new procedure_call();
            expression_list _expression_list = new expression_list();
            ident_list _ident_list = GetIdents(ValueStack[ValueStack.Depth-1].il);
            for (int i = 0; -i > -(_ident_list.idents.Count); i++)
            	_expression_list.expressions.Add(_ident_list.idents[i] as expression);
            _ident_list.idents.Clear();                      

		method_call _method_call = new method_call(_expression_list);
        	ident id = new ident("read");
		id.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-2]));
		_expression_list.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
		_method_call.dereferencing_value = id;
            _procedure_call.func_name = _method_call;
 		CurrentSemanticValue.st = _procedure_call;
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);	
	}
        break;
      case 82: // Proccall_statement -> TK_WRITE, factparams
{
            procedure_call _procedure_call = new procedure_call();
            expression_list _expression_list = ValueStack[ValueStack.Depth-1].el;
            method_call _method_call = new method_call(_expression_list);
		ident id = new ident("write");
		id.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-2]));
            _method_call.dereferencing_value = id;
            _procedure_call.func_name = _method_call;
            CurrentSemanticValue.st = _procedure_call;
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);

		//method_call mc = new method_call($2);
		//ident id = new ident("write");
		//id.source_context = PT.ToSourceContext(@1.Merge(@1));
		//mc.dereferencing_value = id;
		//$$ = mc;
		//$$.source_context = PT.ToSourceContext(@$);	
	}
        break;
      case 83: // Proccall_statement -> ident
{
		method_call mc = new method_call(null);
		mc.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-1].Merge(LocationStack[LocationStack.Depth-1]));
		mc.dereferencing_value = ValueStack[ValueStack.Depth-1].id;
		CurrentSemanticValue.st = mc;
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 84: // Proccall_statement -> ident, LPAREN, factparams, RPAREN
{
		method_call mc = new method_call(ValueStack[ValueStack.Depth-2].el);
		mc.dereferencing_value = ValueStack[ValueStack.Depth-4].id;
		switch (ValueStack[ValueStack.Depth-4].id.name)
            {
	            case "tg": mc.dereferencing_value = new ident("tan"); break;
                  case "ctg": mc.dereferencing_value = new ident("ctg"); break;
                  case "arctg": mc.dereferencing_value = new ident("arctan"); break;
                  case "arcctg": mc.dereferencing_value = new ident("arcctg"); break;
                  case "lg": mc.dereferencing_value = new ident("log10"); break;
                  case "mod": mc.dereferencing_value = new ident("md"); break;
                  case "div": mc.dereferencing_value = new ident("dv"); break;
                  case "rnd": mc.dereferencing_value = new ident("random"); break;
                  case "int": mc.dereferencing_value = new ident("round"); break;
            }
		
		CurrentSemanticValue.st = mc;
		CurrentSemanticValue.st.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 85: // Diap -> expr, COLON, expr
{
            CurrentSemanticValue.dp = new diapason(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex);
		CurrentSemanticValue.dp.source_context = PT.ToSourceContext(CurrentLocationSpan);
      }
        break;
      case 86: // Diap_list -> Diap_list, COLUMN, Diap
{
            indexers_types _indexers_types = GetIndexers(ValueStack[ValueStack.Depth-3].it);
            _indexers_types.indexers.Add(ValueStack[ValueStack.Depth-1].dp);
		_indexers_types.source_context = PT.ToSourceContext(CurrentLocationSpan);
            CurrentSemanticValue.it = _indexers_types;
      }
        break;
      case 87: // Diap_list -> Diap
{
            indexers_types _indexers_types = new indexers_types();
            _indexers_types.indexers.Add(ValueStack[ValueStack.Depth-1].dp);
		_indexers_types.source_context = PT.ToSourceContext(CurrentLocationSpan);
            CurrentSemanticValue.it = _indexers_types;
      }
        break;
      case 88: // Array_list -> ID, TK_SQUARE_OPEN, Diap_list, TK_SQUARE_CLOSE
{
            ident_list _ident_list = new ident_list();
		ident id = new ident(ValueStack[ValueStack.Depth-4].sVal);
            _ident_list.idents.Add(id);
		_ident_list.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-4].Merge(LocationStack[LocationStack.Depth-4]));
		id.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-4].Merge(LocationStack[LocationStack.Depth-4]));
            indexers_types _indexers_types = GetIndexers(ValueStack[ValueStack.Depth-2].it);
		_indexers_types.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-2]));
            array_type _array_type = new array_type(_indexers_types, null);
		_array_type.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));				

            var_def_statement _var_def_statement = new var_def_statement(_ident_list, _array_type, null, definition_attribute.None, false);
            variable_definitions _variable_definitions = new variable_definitions();
            _variable_definitions.var_definitions.Add(_var_def_statement);
		_var_def_statement.source_context = PT.ToSourceContext(CurrentLocationSpan);
		_variable_definitions.source_context = PT.ToSourceContext(CurrentLocationSpan);
            CurrentSemanticValue.vdss = _variable_definitions;
	}
        break;
      case 89: // Array_list -> ID, TK_SQUARE_OPEN, Diap_list, TK_SQUARE_CLOSE, COLUMN, 
               //               Array_list
{
		ident_list _ident_list = new ident_list();
		ident id = new ident(ValueStack[ValueStack.Depth-6].sVal);
            _ident_list.idents.Add(id);
		id.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-6].Merge(LocationStack[LocationStack.Depth-6]));
		indexers_types _indexers_types = GetIndexers(ValueStack[ValueStack.Depth-4].it);
		_indexers_types.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-4].Merge(LocationStack[LocationStack.Depth-4]));
            array_type _array_type = new array_type(_indexers_types, null);
		_array_type.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-5].Merge(LocationStack[LocationStack.Depth-3]));				

            var_def_statement _var_def_statement = new var_def_statement(_ident_list, _array_type, null, definition_attribute.None, false);    
            variable_definitions _variable_definitions = (ValueStack[ValueStack.Depth-1].vdss);
            _variable_definitions.var_definitions.Add(_var_def_statement);
		_var_def_statement.source_context = PT.ToSourceContext(CurrentLocationSpan);
		_variable_definitions.source_context = PT.ToSourceContext(CurrentLocationSpan);
		CurrentSemanticValue.vdss = _variable_definitions;
	}
        break;
      case 90: // Formal_parameter -> type, IDList
{
		named_type_reference _named_type_reference = ValueStack[ValueStack.Depth-2].ntr;
            ident_list _ident_list = GetIdents(ValueStack[ValueStack.Depth-1].il);
            //_ident_list.idents.Reverse();
            typed_parameters _typed_parametres = new typed_parameters(_ident_list, _named_type_reference, parametr_kind.none, null);
            formal_parameters _formal_parametres = new formal_parameters();
            _formal_parametres.params_list.Add(_typed_parametres);

		_typed_parametres.source_context = PT.ToSourceContext(CurrentLocationSpan);
		_formal_parametres.source_context = PT.ToSourceContext(CurrentLocationSpan);
            CurrentSemanticValue.fps = _formal_parametres;
      }
        break;
      case 91: // Formal_parameter -> TK_VAR, type, IDList
{
		named_type_reference _named_type_reference = ValueStack[ValueStack.Depth-2].ntr;
            ident_list _ident_list = GetIdents(ValueStack[ValueStack.Depth-1].il);
            //_ident_list.idents.Reverse();
            typed_parameters _typed_parametres = new typed_parameters(_ident_list, _named_type_reference, parametr_kind.var_parametr, null);
            formal_parameters _formal_parametres = new formal_parameters();
           _formal_parametres.params_list.Add(_typed_parametres);

		_typed_parametres.source_context = PT.ToSourceContext(CurrentLocationSpan);
		_formal_parametres.source_context = PT.ToSourceContext(CurrentLocationSpan);
            CurrentSemanticValue.fps = _formal_parametres;
      }
        break;
      case 92: // Formal_parameter -> type, TK_ARRAY, Array_list
{
		named_type_reference _named_type_reference = ValueStack[ValueStack.Depth-3].ntr;
            variable_definitions _variable_definitions = ValueStack[ValueStack.Depth-1].vdss;
            formal_parameters _formal_parametres = new formal_parameters();
           //_variable_definitions.var_definitions.Reverse();
            for (int i = 0; -i > -(_variable_definitions.var_definitions.Count); i++)
            {
		    ((_variable_definitions.var_definitions[i]).vars_type as array_type).elemets_types = _named_type_reference;
                _formal_parametres.params_list.Add(new typed_parameters((_variable_definitions.var_definitions[i]).vars, (_variable_definitions.var_definitions[i]).vars_type, parametr_kind.none, null));
            }
            _variable_definitions.var_definitions.Clear();

		_formal_parametres.source_context = PT.ToSourceContext(CurrentLocationSpan);
		_variable_definitions.source_context = PT.ToSourceContext(CurrentLocationSpan);
		_named_type_reference.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-2].Merge(LocationStack[LocationStack.Depth-1]));
	      CurrentSemanticValue.fps = _formal_parametres;
      }
        break;
      case 93: // Formal_parameter -> TK_VAR, type, TK_ARRAY, Array_list
{
		named_type_reference _named_type_reference = ValueStack[ValueStack.Depth-3].ntr;
            variable_definitions _variable_definitions = ValueStack[ValueStack.Depth-1].vdss;
            formal_parameters _formal_parametres = new formal_parameters();
            //_variable_definitions.var_definitions.Reverse();
            for (int i = 0; -i > -(_variable_definitions.var_definitions.Count); i++)
            {
            	((_variable_definitions.var_definitions[i]).vars_type as array_type).elemets_types = _named_type_reference;
                  _formal_parametres.params_list.Add(new typed_parameters((_variable_definitions.var_definitions[i]).vars, (_variable_definitions.var_definitions[i]).vars_type, parametr_kind.var_parametr, null));
            }
            _variable_definitions.var_definitions.Clear();

		_formal_parametres.source_context = PT.ToSourceContext(CurrentLocationSpan);
		_variable_definitions.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-2]));
		_named_type_reference.source_context = PT.ToSourceContext(CurrentLocationSpan);
            CurrentSemanticValue.fps = _formal_parametres;
      }
        break;
      case 94: // Formal_type_list -> Formal_parameter
{
	      formal_parameters _formal_parametres = GetFormals(ValueStack[ValueStack.Depth-1].fps);
		_formal_parametres.source_context = PT.ToSourceContext(CurrentLocationSpan);
            CurrentSemanticValue.fps = _formal_parametres;
	}
        break;
      case 95: // Formal_type_list -> Formal_type_list, SEMICOLUMN, Formal_parameter
{
	      formal_parameters _formal_parametres = GetFormals(ValueStack[ValueStack.Depth-3].fps);
            _formal_parametres.params_list.AddRange(GetFormals(ValueStack[ValueStack.Depth-1].fps).params_list);

		_formal_parametres.source_context = PT.ToSourceContext(CurrentLocationSpan);
            CurrentSemanticValue.fps = _formal_parametres;
	}
        break;
      case 97: // Formal_list -> Formal_type_list
{
		CurrentSemanticValue.fps = ValueStack[ValueStack.Depth-1].fps;	
		CurrentSemanticValue.fps.source_context = ValueStack[ValueStack.Depth-1].fps.source_context;
	}
        break;
      case 98: // Procedure -> TK_ALG, ident, LPAREN, Formal_list, RPAREN, EmptyLines, TK_BEGIN, 
               //              StatementSequence, TK_END
{       
		method_name _method_name = new method_name(null, ValueStack[ValueStack.Depth-8].id, null);
            procedure_header _procedure_header = new procedure_header(GetFormals(ValueStack[ValueStack.Depth-6].fps), null, _method_name, false, false, null,null);
            statement_list _statement_list = GetStatements(ValueStack[ValueStack.Depth-2].sl);
            block _block = new block(null, _statement_list);
            procedure_definition _procedure_definition = new procedure_definition(_procedure_header, _block);

            _method_name.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-8].Merge(LocationStack[LocationStack.Depth-8]));
		_procedure_header.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-9].Merge(LocationStack[LocationStack.Depth-5]));
		_procedure_definition.source_context = PT.ToSourceContext(CurrentLocationSpan);
		_block.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
            //(_units[this.unit_number - 1] as unit_data).sub_progs.defs.Add(_procedure_definition);
            CurrentSemanticValue.pd = _procedure_definition; 
      }
        break;
      case 99: // Procedure -> TK_ALG, ident, EmptyLines, TK_BEGIN, StatementSequence, TK_END
{
            method_name _method_name = new method_name(null, (ident)ValueStack[ValueStack.Depth-5].id, null);
		procedure_header _procedure_header = new procedure_header(null, null, _method_name, false, false, null,null);
		statement_list _statement_list = GetStatements(ValueStack[ValueStack.Depth-2].sl);
            block _block = new block(null, _statement_list);
            procedure_definition _procedure_definition = new procedure_definition(_procedure_header, _block);

            _method_name.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-5].Merge(LocationStack[LocationStack.Depth-5]));
		_procedure_header.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-6].Merge(LocationStack[LocationStack.Depth-5]));
            _procedure_definition.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-6].Merge(LocationStack[LocationStack.Depth-1]));
		_block.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
		//(_units[this.unit_number - 1] as unit_data).sub_progs.defs.Add(_procedure_definition);
            declarations _declarations = new declarations();
            _declarations.defs.Add(_procedure_definition);
            _declarations.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-6].Merge(LocationStack[LocationStack.Depth-1]));            
            CurrentSemanticValue.pd = _procedure_definition;
      }
        break;
      case 100: // Function -> TK_ALG, type, ident, LPAREN, Formal_list, RPAREN, EmptyLines, 
                //             TK_BEGIN, StatementSequence, TK_END
{
      	method_name _method_name = new method_name(null, ValueStack[ValueStack.Depth-8].id, null);
            named_type_reference _named_type_reference = ValueStack[ValueStack.Depth-9].ntr;
            function_header _function_header = new function_header(_named_type_reference);
            _function_header.of_object = false;
            _function_header.name = _method_name;
            _function_header.parameters = GetFormals(ValueStack[ValueStack.Depth-6].fps);
            statement_list _statement_list = GetStatements(ValueStack[ValueStack.Depth-2].sl);
            block _block = new block(null, _statement_list);
            procedure_definition _procedure_definition = new procedure_definition(_function_header, _block);

		_method_name.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-8].Merge(LocationStack[LocationStack.Depth-8]));
            _function_header.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-10].Merge(LocationStack[LocationStack.Depth-6]));
            _procedure_definition.source_context = PT.ToSourceContext(CurrentLocationSpan);
            _block.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
		//(_units[this.unit_number - 1] as unit_data).sub_progs.defs.Add(_procedure_definition);
            declarations _declarations = new declarations();
            _declarations.defs.Add(_procedure_definition);
            _declarations.source_context = PT.ToSourceContext(CurrentLocationSpan);
            CurrentSemanticValue.pd = _procedure_definition;
      }
        break;
      case 101: // Function -> TK_ALG, type, ident, EmptyLines, TK_BEGIN, StatementSequence, 
                //             TK_END
{
		method_name _method_name = new method_name(null, ValueStack[ValueStack.Depth-5].id, null);
		named_type_reference _named_type_reference = ValueStack[ValueStack.Depth-6].ntr;
            function_header _function_header = new function_header(_named_type_reference);
            _function_header.of_object = false;
            _function_header.name = _method_name;
            statement_list _statement_list = GetStatements(ValueStack[ValueStack.Depth-2].sl);
		block _block = new block(null, _statement_list);
		procedure_definition _procedure_definition = new procedure_definition(_function_header, _block);
            
            _method_name.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-5].Merge(LocationStack[LocationStack.Depth-5]));
            _function_header.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-7].Merge(LocationStack[LocationStack.Depth-5]));
            _procedure_definition.source_context = PT.ToSourceContext(CurrentLocationSpan);
            _block.source_context = PT.ToSourceContext(LocationStack[LocationStack.Depth-3].Merge(LocationStack[LocationStack.Depth-1]));
            //(_units[this.unit_number - 1] as unit_data).sub_progs.defs.Add(_procedure_definition);
            CurrentSemanticValue.pd = _procedure_definition;
      }
        break;
      case 103: // Sub_declarations -> Sub_declarations, Procedure, EmptyLines
{
	 if (ValueStack[ValueStack.Depth-3].decl == null)
		CurrentSemanticValue.decl = new declarations();
	 else
		CurrentSemanticValue.decl = ValueStack[ValueStack.Depth-3].decl;
       CurrentSemanticValue.decl.defs.Add((declaration)ValueStack[ValueStack.Depth-2].pd);                 
       CurrentSemanticValue.decl.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 104: // Sub_declarations -> Sub_declarations, Function, EmptyLines
{
	 if (ValueStack[ValueStack.Depth-3].decl == null)
		CurrentSemanticValue.decl = new declarations();
	 else
		CurrentSemanticValue.decl = ValueStack[ValueStack.Depth-3].decl;
       CurrentSemanticValue.decl.defs.Add((declaration)ValueStack[ValueStack.Depth-2].pd);                 
       CurrentSemanticValue.decl.source_context = PT.ToSourceContext(CurrentLocationSpan);
	}
        break;
      case 105: // Uses_units -> TK_USES, IDList
{
       if (_units[unit_number - 1] != null)
 	      (_units[unit_number - 1] as unit_data).used_units.idents.AddRange(ValueStack[ValueStack.Depth-1].il.idents);
       }
        break;
      case 106: // Global_decl_list -> Global_decl_list, Separator, Var_Decl
{
       statement_list _statement_list = GetStatements(ValueStack[ValueStack.Depth-3].sl);
       _statement_list.subnodes.AddRange(GetStatements(ValueStack[ValueStack.Depth-1].st).subnodes);
       _statement_list.source_context = PT.ToSourceContext(CurrentLocationSpan);
       CurrentSemanticValue.sl = _statement_list;
       }
        break;
      case 107: // Global_decl_list -> Var_Decl
{  
       //statement_list _statement_list = GetStatements($1);
       //for (int i = 0; i < (_statement_list.subnodes.Count); i++)
       //	(_units[this.unit_number - 1] as unit_data).sub_progs.defs.Add(_statement_list.subnodes[i] as declaration);
       CurrentSemanticValue.sl = new statement_list();
  	 CurrentSemanticValue.sl.source_context = PT.ToSourceContext(CurrentLocationSpan);
       CurrentSemanticValue.sl.subnodes.Add(ValueStack[ValueStack.Depth-1].st);
       }
        break;
      case 108: // Initialization -> Initialization, Separator, Assignment
{
      (_units[this.unit_number - 1] as unit_data).initialization.subnodes.Add(ValueStack[ValueStack.Depth-1].st);
      }
        break;
      case 109: // Initialization -> Assignment
{
      (_units[this.unit_number - 1] as unit_data).initialization.subnodes.Add(ValueStack[ValueStack.Depth-1].st);
      }
        break;
      case 110: // Global_vars -> Global_decl_list, Separator, Initialization, Separator
{
      declarations _declarations = new declarations();
      statement_list _statement_list = GetStatements(ValueStack[ValueStack.Depth-4].sl);
      for (int i = 0; -i > -(_statement_list.subnodes.Count); i++)
      {
 	     (_units[this.unit_number - 1] as unit_data).sub_progs.defs.Add(_statement_list.subnodes[i] as declaration);
           _declarations.defs.Add(_statement_list.subnodes[i] as declaration);
      }
      _declarations.source_context = PT.ToSourceContext(CurrentLocationSpan);
	CurrentSemanticValue.decl = _declarations;
      }
        break;
      case 111: // Global_vars -> Global_decl_list, Separator
{
      declarations _declarations = new declarations();
      statement_list _statement_list = GetStatements(ValueStack[ValueStack.Depth-2].sl);
      for (int i = 0; -i > -(_statement_list.subnodes.Count); i++)
      {
            (_units[this.unit_number - 1] as unit_data).sub_progs.defs.Add(_statement_list.subnodes[i] as declaration);
      	_declarations.defs.Add(_statement_list.subnodes[i] as declaration);
      }
      _declarations.source_context = PT.ToSourceContext(CurrentLocationSpan);
      CurrentSemanticValue.decl = _declarations;
      }
        break;
      case 112: // Global_part -> /* empty */
{
	}
        break;
      case 113: // Global_part -> Uses_units, Separators
{ 		
      }
        break;
      case 114: // Global_part -> Uses_units, Separators, Global_vars
{
      }
        break;
      case 115: // Global_part -> Global_vars
{
     	}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
