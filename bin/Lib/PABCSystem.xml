<?xml version="1.0" encoding="utf-8"?>
<doc>
  <unit name="PABCSystem"> Стандартный модуль
 !! System unit
</unit>
  <members>
    <member name="T:IOSystem">
      <summary> Интерфейс подсистемы ввода/вывода
</summary>
    </member>
    <member name="T:IOStandardSystem">
      <summary> Стандартная подсистема ввода-вывода
</summary>
    </member>
    <member name="T:Text">
      <summary> Тип текстового файла
</summary>
    </member>
    <member name="M:Text.ReadInteger">
      <summary> Возвращает значение типа integer, введенное из текстового файла
</summary>
    </member>
    <member name="M:Text.ReadReal">
      <summary> Возвращает значение типа real, введенное из текстового файла
</summary>
    </member>
    <member name="M:Text.ReadChar">
      <summary> Возвращает значение типа char, введенное из текстового файла
</summary>
    </member>
    <member name="M:Text.ReadString">
      <summary> Возвращает значение типа string, введенное из текстового файла, без перехода на следующую строку
</summary>
    </member>
    <member name="M:Text.ReadBoolean">
      <summary> Возвращает значение типа boolean, введенное из текстового файла
</summary>
    </member>
    <member name="M:Text.ReadlnInteger">
      <summary> Возвращает значение типа integer, введенное из текстового файла, и переходит на следующую строку
</summary>
    </member>
    <member name="M:Text.ReadlnReal">
      <summary> Возвращает значение типа real, введенное из текстового файла, и переходит на следующую строку
</summary>
    </member>
    <member name="M:Text.ReadlnChar">
      <summary> Возвращает значение типа char, введенное из текстового файла, и переходит на следующую строку
</summary>
    </member>
    <member name="M:Text.ReadlnString">
      <summary> Возвращает значение типа string, введенное из текстового файла, и переходит на следующую строку
</summary>
    </member>
    <member name="M:Text.ReadlnBoolean">
      <summary> Возвращает значение типа boolean, введенное из текстового файла, и переходит на следующую строку
</summary>
    </member>
    <member name="M:Text.Readln">
      <summary> Переходит в файле на следующую строку
</summary>
    </member>
    <member name="M:Text.Write(System.Object[])">
      <summary> Записывает в текстовый файл значения
</summary>
    </member>
    <member name="M:Text.Writeln(System.Object[])">
      <summary> Записывает в текстовый файл значения и переходит на следующую строку
</summary>
    </member>
    <member name="M:Text.Eof">
      <summary> Возвращает True, если достигнут конец файла, и False в противном случае
</summary>
    </member>
    <member name="M:Text.Eoln">
      <summary> Возвращает True, если достигнут конец строки, и False в противном случае
</summary>
    </member>
    <member name="M:Text.Close">
      <summary> Закрывает файл
</summary>
    </member>
    <member name="M:Text.SeekEof">
      <summary> Пропускает пробельные символы, после чего возвращает True, если достигнут конец файла
</summary>
    </member>
    <member name="M:Text.SeekEoln">
      <summary> Пропускает пробельные символы, после чего возвращает True, если достигнут конец строки в файле
</summary>
    </member>
    <member name="M:Text.Flush">
      <summary> Записывает содержимое буфера файла на диск
</summary>
    </member>
    <member name="M:Text.Erase">
      <summary> Удаляет файл
</summary>
    </member>
    <member name="M:Text.Rename(System.String)">
      <summary> Переименовывает файл, давая ему имя newname
</summary>
    </member>
    <member name="M:Text.Name">
      <summary> Возвращает имя файла
</summary>
    </member>
    <member name="M:Text.FullName">
      <summary> Возвращает полное имя файла
</summary>
    </member>
    <member name="M:Text.ReadToEnd">
      <summary> Возвращает в виде строки содержимое файла от текущего положения до конца
</summary>
    </member>
    <member name="M:Text.Reset">
      <summary> Устанавливает файловый указатель на начало файла
</summary>
    </member>
    <member name="T:Diapason">
      <summary>--
</summary>
    </member>
    <member name="T:TypedSet">
      <summary>-- 
</summary>
    </member>
    <member name="M:TypedSet.#ctor">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSet.#ctor(System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSet.#ctor(System.Object,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSet.#ctor(System.Byte[])">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSet.#ctor(PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSet.#ctor(System.Object,System.Object,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSet.CreateIfNeed">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSet.Clip">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSet.Clip(System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSet.Init(System.Object[])">
      <summary>--
</summary>
    </member>
    <member name="T:AbstractBinaryFile">
      <summary>--
</summary>
    </member>
    <member name="M:AbstractBinaryFile.Close">
      <summary> Закрывает файл
</summary>
    </member>
    <member name="M:AbstractBinaryFile.Truncate">
      <summary> Усекает двоичный файл, отбрасывая все элементы с позиции файлового указателя
</summary>
    </member>
    <member name="M:AbstractBinaryFile.Eof">
      <summary> Возвращает True, если достигнут конец файла
</summary>
    </member>
    <member name="M:AbstractBinaryFile.Erase">
      <summary> Удаляет файл
</summary>
    </member>
    <member name="M:AbstractBinaryFile.Rename(System.String)">
      <summary> Переименовывает файл, давая ему имя newname 
</summary>
    </member>
    <member name="M:AbstractBinaryFile.Write(System.Object[])">
      <summary>- f.Write(a,b,...)
 Выводит значения a,b,... в двоичный файл
</summary>
    </member>
    <member name="M:AbstractBinaryFile.Reset">
      <summary> Устанавливает файловый указатель на начало файла
</summary>
    </member>
    <member name="T:TypedFile">
      <summary>--
</summary>
    </member>
    <member name="M:TypedFile.FilePos">
      <summary> Возвращает текущую позицию файлового указателя в типизированном файле
</summary>
    </member>
    <member name="M:TypedFile.FileSize">
      <summary> Возвращает количество элементов в типизированном файле
</summary>
    </member>
    <member name="M:TypedFile.Seek(System.Int64)">
      <summary> Устанавливает текущую позицию файлового указателя в типизированном файле на элемент с номером n  
</summary>
    </member>
    <member name="T:BinaryFile">
      <summary>--
</summary>
    </member>
    <member name="M:BinaryFile.FilePos">
      <summary> Возвращает текущую позицию файлового указателя в бестиповом файле
</summary>
    </member>
    <member name="M:BinaryFile.FileSize">
      <summary> Возвращает количество байт в бестиповом файле
</summary>
    </member>
    <member name="M:BinaryFile.Seek(System.Int64)">
      <summary> Устанавливает текущую позицию файлового указателя в бестиповом файле на байт с номером n  
</summary>
    </member>
    <member name="T:BadGenericInstanceParameterException">
      <summary>Базовый класс для исключений, бросаемых при создании инстанции generic-типа
</summary>
    </member>
    <member name="T:CanNotUseTypeForPointersException">
      <summary>Бросается если тип непригоден для указателей
</summary>
    </member>
    <member name="T:CanNotUseTypeForTypedFilesException">
      <summary>Бросается если тип непригоден для типизированных файлов
</summary>
    </member>
    <member name="T:CanNotUseTypeForFilesException">
      <summary>Бросается если тип непригоден для бинарных файлов
</summary>
    </member>
    <member name="T:GCHandlersController">
      <summary>--
</summary>
    </member>
    <member name="T:PointerOutput">
      <summary>--
</summary>
    </member>
    <member name="T:Object">
      <summary> Базовый тип объектов
</summary>
    </member>
    <member name="T:Exception">
      <summary> Базовый тип исключений
</summary>
    </member>
    <member name="T:double">
      <summary> double = real
</summary>
    </member>
    <member name="T:longint">
      <summary> longint = integer
</summary>
    </member>
    <member name="T:cardinal">
      <summary> cardinal = longword
</summary>
    </member>
    <member name="T:decimal">
      <summary> Представляет 128-битное вещественное число
 !! Represents a decimal number
</summary>
    </member>
    <member name="T:BigInteger">
      <summary> Представляет произвольно большое целое число
</summary>
    </member>
    <member name="T:Complex">
      <summary> Представляет комплексное число
</summary>
    </member>
    <member name="T:Tuple">
      <summary> Представляет кортеж
</summary>
    </member>
    <member name="T:StringBuilder">
      <summary> Представляет изменяемую строку символов
</summary>
    </member>
    <member name="T:Encoding">
      <summary> Тип кодировки символов  
</summary>
    </member>
    <member name="T:Action0">
      <summary> Представляет действие без параметров
</summary>
    </member>
    <member name="T:IntFunc">
      <summary> Представляет функцию с одним параметром целого типа, возвращающую целое
</summary>
    </member>
    <member name="T:RealFunc">
      <summary> Представляет функцию с одним параметром вещественного типа, возвращающую вещественное
</summary>
    </member>
    <member name="T:StringFunc">
      <summary> Представляет функцию с одним параметром строкового типа, возвращающую строку
</summary>
    </member>
    <member name="T:Regex">
      <summary> Представляет регулярное выражение
</summary>
    </member>
    <member name="T:Match">
      <summary> Представляет результаты из отдельного совпадения регулярного выражения
</summary>
    </member>
    <member name="T:MatchEvaluator">
      <summary> Представляет метод, вызываемый при обнаружении совпадения в Regex.Replace
</summary>
    </member>
    <member name="T:MatchCollection">
      <summary> Представляет набор успешных совпадений регулярного выражения
</summary>
    </member>
    <member name="T:RegexOptions">
      <summary> Представляет параметры регулярного выражения
</summary>
    </member>
    <member name="T:RegexGroup">
      <summary> Представляет результаты из одной группы при выполнении Regex.Match
</summary>
    </member>
    <member name="T:RegexGroupCollection">
      <summary> Представляет результаты из набора групп при выполнении Regex.Match
</summary>
    </member>
    <member name="T:ShortString">
      <summary> Представляет тип короткой строки фиксированной длины 255 символов
</summary>
    </member>
    <member name="T:TextFile">
      <summary> Тип текстового файла
</summary>
    </member>
    <member name="M:Read">
      <summary>- procedure Read(a,b,...);
 Вводит значения a,b,... с клавиатуры
</summary>
    </member>
    <member name="M:Read(System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.Double@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.Char@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.String@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.Byte@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.SByte@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.Int16@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.UInt16@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.UInt32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.Int64@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.UInt64@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.Single@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(System.Boolean@)">
      <summary>--
</summary>
    </member>
    <member name="M:Readln">
      <summary>- procedure Readln(a,b,...);
 Вводит значения a,b,... с клавиатуры и осуществляет переход на следующую строку
</summary>
    </member>
    <member name="M:ReadInteger">
      <summary> Возвращает значение типа integer, введенное с клавиатуры
</summary>
    </member>
    <member name="M:ReadReal">
      <summary> Возвращает значение типа real, введенное с клавиатуры
</summary>
    </member>
    <member name="M:ReadChar">
      <summary> Возвращает значение типа char, введенное с клавиатуры
</summary>
    </member>
    <member name="M:ReadString">
      <summary> Возвращает значение типа string, введенное с клавиатуры
</summary>
    </member>
    <member name="M:ReadBoolean">
      <summary> Возвращает значение типа boolean, введенное с клавиатуры
</summary>
    </member>
    <member name="M:ReadlnInteger">
      <summary> Возвращает значение типа integer, введенное с клавиатуры, и переходит на следующую строку ввода
</summary>
    </member>
    <member name="M:ReadlnReal">
      <summary> Возвращает значение типа real, введенное с клавиатуры, и переходит на следующую строку ввода
</summary>
    </member>
    <member name="M:ReadlnChar">
      <summary> Возвращает значение типа char, введенное с клавиатуры, и переходит на следующую строку ввода
</summary>
    </member>
    <member name="M:ReadlnString">
      <summary> Возвращает значение типа string, введенное с клавиатуры, и переходит на следующую строку ввода
</summary>
    </member>
    <member name="M:ReadlnBoolean">
      <summary> Возвращает значение типа boolean, введенное с клавиатуры, и переходит на следующую строку ввода
</summary>
    </member>
    <member name="M:ReadInteger(System.String)">
      <summary> Выводит приглашение к вводу и возвращает значение типа integer, введенное с клавиатуры
</summary>
    </member>
    <member name="M:ReadReal(System.String)">
      <summary> Выводит приглашение к вводу и возвращает значение типа real, введенное с клавиатуры
</summary>
    </member>
    <member name="M:ReadChar(System.String)">
      <summary> Выводит приглашение к вводу и возвращает значение типа char, введенное с клавиатуры
</summary>
    </member>
    <member name="M:ReadString(System.String)">
      <summary> Выводит приглашение к вводу и возвращает значение типа string, введенное с клавиатуры
</summary>
    </member>
    <member name="M:ReadBoolean(System.String)">
      <summary> Выводит приглашение к вводу и возвращает значение типа boolean, введенное с клавиатуры
</summary>
    </member>
    <member name="M:ReadlnInteger(System.String)">
      <summary> Выводит приглашение к вводу и возвращает значение типа integer, введенное с клавиатуры, 
и осуществляет переход на следующую строку ввода
</summary>
    </member>
    <member name="M:ReadlnReal(System.String)">
      <summary> Выводит приглашение к вводу и возвращает значение типа real, введенное с клавиатуры, 
и осуществляет переход на следующую строку ввода
</summary>
    </member>
    <member name="M:ReadlnChar(System.String)">
      <summary> Выводит приглашение к вводу и возвращает значение типа char, введенное с клавиатуры, 
и осуществляет переход на следующую строку ввода
</summary>
    </member>
    <member name="M:ReadlnString(System.String)">
      <summary> Выводит приглашение к вводу и возвращает значение типа string, введенное с клавиатуры, 
и осуществляет переход на следующую строку ввода
</summary>
    </member>
    <member name="M:ReadlnBoolean(System.String)">
      <summary> Выводит приглашение к вводу и возвращает значение типа boolean, введенное с клавиатуры, 
и осуществляет переход на следующую строку ввода
</summary>
    </member>
    <member name="M:ReadShortString(System.String@,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:ReadShortStringFromFile(PABCSystem.Text,System.String@,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text)">
      <summary>- procedure Read(f: файл; a,b,...);
 Вводит значения a,b,... из файла f
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.Double@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.Char@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.String@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.Byte@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.SByte@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.Int16@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.UInt16@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.UInt32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.Int64@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.UInt64@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.Single@)">
      <summary>--
</summary>
    </member>
    <member name="M:Read(PABCSystem.Text,System.Boolean@)">
      <summary>--
</summary>
    </member>
    <member name="M:Readln(PABCSystem.Text)">
      <summary>- procedure Readln(f: Text; a,b,...);
 Вводит значения a,b,... из текстового файла f и осуществляет переход на следующую строку
</summary>
    </member>
    <member name="M:Readln(PABCSystem.Text,System.String@)">
      <summary>--
</summary>
    </member>
    <member name="M:ReadInteger(PABCSystem.Text)">
      <summary> Возвращает значение типа integer, введенное из текстового файла f
</summary>
    </member>
    <member name="M:ReadReal(PABCSystem.Text)">
      <summary> Возвращает значение типа real, введенное из текстового файла f
</summary>
    </member>
    <member name="M:ReadChar(PABCSystem.Text)">
      <summary> Возвращает значение типа char, введенное из текстового файла f
</summary>
    </member>
    <member name="M:ReadString(PABCSystem.Text)">
      <summary> Возвращает значение типа string, введенное из текстового файла f
</summary>
    </member>
    <member name="M:ReadBoolean(PABCSystem.Text)">
      <summary> Возвращает значение типа boolean, введенное из текстового файла f
</summary>
    </member>
    <member name="M:ReadlnInteger(PABCSystem.Text)">
      <summary> Возвращает значение типа integer, введенное из текстового файла f, 
и осуществляет переход на следующую строку
</summary>
    </member>
    <member name="M:ReadlnReal(PABCSystem.Text)">
      <summary> Возвращает значение типа real, введенное из текстового файла f, 
и осуществляет переход на следующую строку
</summary>
    </member>
    <member name="M:ReadlnChar(PABCSystem.Text)">
      <summary> Возвращает значение типа char, введенное из текстового файла f, 
и осуществляет переход на следующую строку
</summary>
    </member>
    <member name="M:ReadlnString(PABCSystem.Text)">
      <summary> Возвращает значение типа string, введенное из текстового файла f, 
и осуществляет переход на следующую строку
</summary>
    </member>
    <member name="M:ReadlnBoolean(PABCSystem.Text)">
      <summary> Возвращает значение типа boolean, введенное из текстового файла f, 
и осуществляет переход на следующую строку
</summary>
    </member>
    <member name="M:Write">
      <summary>- procedure Write(a,b,...);
 Выводит значения a,b,... на экран
</summary>
    </member>
    <member name="M:Write(System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:Write(System.Object,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:Write(System.Object[])">
      <summary>--
</summary>
    </member>
    <member name="M:Writeln">
      <summary>- procedure Writeln(a,b,...);
 Выводит значения a,b,... на экран и осуществляет переход на новую строку
!!- Writeln(a,b,...)
 Writes a,b,... to standart output stream and appends newline
</summary>
    </member>
    <member name="M:Writeln(System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:Writeln(System.Object,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:Writeln(System.Object[])">
      <summary>--
</summary>
    </member>
    <member name="M:Write(PABCSystem.Text)">
      <summary>- procedure Write(f: файл; a,b,...);
 Выводит значения a,b,... в файл f
</summary>
    </member>
    <member name="M:Write(PABCSystem.Text,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:Write(PABCSystem.Text,System.Object[])">
      <summary>--
</summary>
    </member>
    <member name="M:Writeln(PABCSystem.Text)">
      <summary>- procedure Writeln(f: Text; a,b,...);
 Выводит значения a,b,... в текстовый файл f и осуществляет переход на новую строку
</summary>
    </member>
    <member name="M:Writeln(PABCSystem.Text,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:Writeln(PABCSystem.Text,System.Object[])">
      <summary>--
</summary>
    </member>
    <member name="M:WriteFormat(System.String,System.Object[])">
      <summary> Выводит значения args согласно форматной строке formatstr
</summary>
    </member>
    <member name="M:WritelnFormat(System.String,System.Object[])">
      <summary> Выводит значения args согласно форматной строке formatstr и осуществляет переход на новую строку
</summary>
    </member>
    <member name="M:WriteFormat(PABCSystem.Text,System.String,System.Object[])">
      <summary> Выводит значения args в текстовый файл f согласно форматной строке formatstr
</summary>
    </member>
    <member name="M:WritelnFormat(PABCSystem.Text,System.String,System.Object[])">
      <summary> Выводит значения args в текстовый файл f согласно форматной строке formatstr
и осуществляет переход на новую строку
</summary>
    </member>
    <member name="M:Print(System.String)">
      <summary>- procedure Print(a,b,...);
 Выводит значения a,b,... на экран, после каждого значения выводит пробел
</summary>
    </member>
    <member name="M:Print(System.Object[])">
      <summary>--
</summary>
    </member>
    <member name="M:Print(PABCSystem.Text,System.Object[])">
      <summary>- procedure Print(f: Text; a,b,...);
 Выводит значения a,b,... в текстовый файл f, после каждого значения выводит пробел
</summary>
    </member>
    <member name="M:Println(System.Object[])">
      <summary>- procedure Println(a,b,...);
 Выводит значения a,b,... на экран, после каждого значения выводит пробел и переходит на новую строку
</summary>
    </member>
    <member name="M:Println(PABCSystem.Text,System.Object[])">
      <summary>- procedure Println(f: Text; a,b,...);
 Выводит значения a,b,... в текстовый файл f, после каждого значения выводит пробел и переходит на новую строку
</summary>
    </member>
    <member name="M:Assign(PABCSystem.AbstractBinaryFile,System.String)">
      <summary>- procedure Assign(f: файл; name: string);
 Связывает файловую переменную с файлом на диске
</summary>
    </member>
    <member name="M:AssignFile(PABCSystem.AbstractBinaryFile,System.String)">
      <summary>- procedure AssignFile(f: файл; name: string);
 Связывает файловую переменную с файлом на диске
</summary>
    </member>
    <member name="M:Close(PABCSystem.AbstractBinaryFile)">
      <summary>- procedure Close(f: файл);
 Закрывает файл
</summary>
    </member>
    <member name="M:CloseFile(PABCSystem.AbstractBinaryFile)">
      <summary>- procedure CloseFile(f: файл);
 Закрывает файл
</summary>
    </member>
    <member name="M:Eof(PABCSystem.AbstractBinaryFile)">
      <summary>- function Eof(f: файл): boolean;
 Возвращает True, если достигнут конец файла 
</summary>
    </member>
    <member name="M:Erase(PABCSystem.AbstractBinaryFile)">
      <summary>- procedure Erase(f: файл);
 Удаляет файл, связанный с файловой переменной 
</summary>
    </member>
    <member name="M:Rename(PABCSystem.AbstractBinaryFile,System.String)">
      <summary>- procedure Rename(f: файл; newname: string);
 Переименовывает файл, связаный с файловой переменной, давая ему имя newname. 
</summary>
    </member>
    <member name="M:Assign(PABCSystem.Text,System.String)">
      <summary>--
</summary>
    </member>
    <member name="M:AssignFile(PABCSystem.Text,System.String)">
      <summary>--
</summary>
    </member>
    <member name="M:Close(PABCSystem.Text)">
      <summary>--
</summary>
    </member>
    <member name="M:CloseFile(PABCSystem.Text)">
      <summary>--
</summary>
    </member>
    <member name="M:Reset(PABCSystem.Text)">
      <summary> Открывает текстовый файл на чтение в кодировке Windows
</summary>
    </member>
    <member name="M:Reset(PABCSystem.Text,System.Text.Encoding)">
      <summary> Открывает текстовый файл на чтение в указанной кодировке
</summary>
    </member>
    <member name="M:Reset(PABCSystem.Text,System.String)">
      <summary> Связывает файловую переменную f с именем файла name и открывает текстовый файл на чтение в кодировке Windows
</summary>
    </member>
    <member name="M:Reset(PABCSystem.Text,System.String,System.Text.Encoding)">
      <summary> Связывает файловую переменную f с именем файла name и открывает текстовый файл на чтение в указанной кодировке
</summary>
    </member>
    <member name="M:Rewrite(PABCSystem.Text)">
      <summary> Открывает текстовый файл на запись в кодировке Windows. 
Если файл существовал - он обнуляется, если нет - создается пустой
</summary>
    </member>
    <member name="M:Rewrite(PABCSystem.Text,System.Text.Encoding)">
      <summary> Открывает текстовый файл на запись в указанной кодировке. 
Если файл существовал - он обнуляется, если нет - создается пустой
</summary>
    </member>
    <member name="M:Rewrite(PABCSystem.Text,System.String)">
      <summary> Связывает файловую переменную с именем файла name и открывает текстовый файл f на запись в кодировке Windows. 
Если файл существовал - он обнуляется, если нет - создается пустой
</summary>
    </member>
    <member name="M:Rewrite(PABCSystem.Text,System.String,System.Text.Encoding)">
      <summary> Связывает файловую переменную f с именем файла name и открывает текстовый файл f на запись в указанной кодировке. 
Если файл существовал - он обнуляется, если нет - создается пустой
</summary>
    </member>
    <member name="M:Append(PABCSystem.Text)">
      <summary> Открывает текстовый файл на дополнение в кодировке Windows
</summary>
    </member>
    <member name="M:Append(PABCSystem.Text,System.Text.Encoding)">
      <summary> Открывает текстовый файл на дополнение в указанной кодировке
</summary>
    </member>
    <member name="M:Append(PABCSystem.Text,System.String)">
      <summary> Связывает файловую переменную f с именем файла name и открывает текстовый файл на дополнение в кодировке Windows
</summary>
    </member>
    <member name="M:Append(PABCSystem.Text,System.String,System.Text.Encoding)">
      <summary> Связывает файловую переменную f с именем файла name и открывает текстовый файл на дополнение в указанной кодировке
</summary>
    </member>
    <member name="M:OpenRead(System.String)">
      <summary> Возвращает текстовый файл с именем fname, открытый на чтение в кодировке Windows
</summary>
    </member>
    <member name="M:OpenRead(System.String,System.Text.Encoding)">
      <summary> Возвращает текстовый файл с именем fname, открытый на чтение в указанной кодировке 
</summary>
    </member>
    <member name="M:OpenWrite(System.String)">
      <summary> Возвращает текстовый файл с именем fname, открытый на запись в кодировке Windows
</summary>
    </member>
    <member name="M:OpenWrite(System.String,System.Text.Encoding)">
      <summary> Возвращает текстовый файл с именем fname, открытый на запись в указанной кодировке
</summary>
    </member>
    <member name="M:OpenAppend(System.String)">
      <summary> Возвращает текстовый файл с именем fname, открытый на дополнение в кодировке Windows
</summary>
    </member>
    <member name="M:OpenAppend(System.String,System.Text.Encoding)">
      <summary> Возвращает текстовый файл с именем fname, открытый на дополнение в указанной кодировке 
</summary>
    </member>
    <member name="M:Eof(PABCSystem.Text)">
      <summary>--
</summary>
    </member>
    <member name="M:Eoln(PABCSystem.Text)">
      <summary> Возвращает True, если в файле достигнут конец строки 
</summary>
    </member>
    <member name="M:SeekEof(PABCSystem.Text)">
      <summary> Пропускает пробельные символы, после чего возвращает True, если достигнут конец файла
</summary>
    </member>
    <member name="M:SeekEoln(PABCSystem.Text)">
      <summary> Пропускает пробельные символы, после чего возвращает True, если в файле достигнут конец строки
</summary>
    </member>
    <member name="M:Flush(PABCSystem.Text)">
      <summary> Записывает содержимое буфера файла на диск
</summary>
    </member>
    <member name="M:Erase(PABCSystem.Text)">
      <summary>--
</summary>
    </member>
    <member name="M:Rename(PABCSystem.Text,System.String)">
      <summary>--
</summary>
    </member>
    <member name="M:TextFileInit(PABCSystem.Text@)">
      <summary>--
</summary>
    </member>
    <member name="M:ReadLines(System.String)">
      <summary> Открывает файл, считывает из него строки в кодировке Windows и закрывает файл. В каждый момент в памяти хранится только текущая строка
</summary>
    </member>
    <member name="M:ReadLines(System.String,System.Text.Encoding)">
      <summary> Открывает файл, считывает из него строки в указаной кодировке и закрывает файл. В каждый момент в памяти хранится только текущая строка 
</summary>
    </member>
    <member name="M:ReadAllLines(System.String)">
      <summary> Открывает файл, считывает из него строки в кодировке Windows в виде массива строк, после чего закрывает файл
</summary>
    </member>
    <member name="M:ReadAllLines(System.String,System.Text.Encoding)">
      <summary> Открывает файл, считывает из него строки в указаной кодировке в виде массива строк, после чего закрывает файл
</summary>
    </member>
    <member name="M:ReadAllText(System.String)">
      <summary> Открывает файл, считывает его содержимое в кодировке Windows в виде строки, после чего закрывает файл
</summary>
    </member>
    <member name="M:ReadAllText(System.String,System.Text.Encoding)">
      <summary> Открывает файл, считывает его содержимое в указаной кодировке в виде строки, после чего закрывает файл
</summary>
    </member>
    <member name="M:WriteLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary> Создает новый файл, записывает в него строки из последовательности в кодировке Windows, после чего закрывает файл
</summary>
    </member>
    <member name="M:WriteLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
      <summary> Создает новый файл, записывает в него строки из последовательности в указанной кодировке, после чего закрывает файл
</summary>
    </member>
    <member name="M:WriteAllLines(System.String,System.String[])">
      <summary> Создает новый файл, записывает в него строки из массива в кодировке Windows, после чего закрывает файл
</summary>
    </member>
    <member name="M:WriteAllLines(System.String,System.String[],System.Text.Encoding)">
      <summary> Создает новый файл, записывает в него строки из массива в указанной кодировке, после чего закрывает файл
</summary>
    </member>
    <member name="M:WriteAllText(System.String,System.String)">
      <summary> Создает новый файл, записывает в него строку в кодировке Windows, после чего закрывает файл
</summary>
    </member>
    <member name="M:WriteAllText(System.String,System.String,System.Text.Encoding)">
      <summary> Создает новый файл, записывает в него строку в указанной кодировке, после чего закрывает файл
</summary>
    </member>
    <member name="M:Reset(PABCSystem.AbstractBinaryFile)">
      <summary>- procedure Reset(f: двоичный файл);
 Открывает двоичный файл на чтение и запись.
Двоичный файл - это либо типизированный файл file of T, либо бестиповой файл file
</summary>
    </member>
    <member name="M:Reset(PABCSystem.AbstractBinaryFile,System.String)">
      <summary>- procedure Reset(f: двоичный файл; name: string);
 Связывает файловую переменную f с файлом name на диске и открывает двоичный файл на чтение и запись.
Двоичный файл - это либо типизированный файл file of T, либо бестиповой файл file
</summary>
    </member>
    <member name="M:Rewrite(PABCSystem.AbstractBinaryFile)">
      <summary>- procedure Rewrite(f: двоичный файл);
 Открывает двоичный файл на чтение и запись, при этом обнуляя его содержимое. Если файл существовал, он обнуляется.
Двоичный файл - это либо типизированный файл file of T, либо бестиповой файл file
</summary>
    </member>
    <member name="M:Rewrite(PABCSystem.AbstractBinaryFile,System.String)">
      <summary>- procedure Rewrite(f: двоичный файл; name: string);
 Связывает файловую переменную f с файлом name на диске и открывает двоичный файл на чтение и запись, при этом обнуляя его содержимое.
Двоичный файл - это либо типизированный файл file of T, либо бестиповой файл file
</summary>
    </member>
    <member name="M:Truncate(PABCSystem.AbstractBinaryFile)">
      <summary>- procedure Truncate(f: двоичный файл);
 Усекает двоичный файл, отбрасывая все элементы с позиции файлового указателя.
Двоичный файл - это либо типизированный файл file of T, либо бестиповой файл file
</summary>
    </member>
    <member name="M:Write(PABCSystem.AbstractBinaryFile,System.Object[])">
      <summary>--
</summary>
    </member>
    <member name="M:Writeln(PABCSystem.AbstractBinaryFile)">
      <summary>--
</summary>
    </member>
    <member name="M:Writeln(PABCSystem.AbstractBinaryFile,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:Writeln(PABCSystem.AbstractBinaryFile,System.Object[])">
      <summary>--
</summary>
    </member>
    <member name="M:FilePos(PABCSystem.TypedFile)">
      <summary>- function FilePos(f: двоичный файл): int64;
 Возвращает текущую позицию файлового указателя в двоичном файле 
</summary>
    </member>
    <member name="M:FileSize(PABCSystem.TypedFile)">
      <summary>- function FileSize(f: двоичный файл): int64;
 Возвращает количество элементов в двоичном файле
</summary>
    </member>
    <member name="M:Seek(PABCSystem.TypedFile,System.Int64)">
      <summary>- procedure Seek(f: двоичный файл; n: int64);
 Устанавливает текущую позицию файлового указателя в двоичном файле на элемент с данным номером  
</summary>
    </member>
    <member name="M:TypedFileInit(PABCSystem.TypedFile@,System.Type)">
      <summary>--
</summary>
    </member>
    <member name="M:TypedFileInit(PABCSystem.TypedFile@,System.Type,System.Int32,System.Int32[])">
      <summary>--
</summary>
    </member>
    <member name="M:TypedFileInitWithShortString(PABCSystem.TypedFile@,System.Type,System.Int32,System.Int32[])">
      <summary>--
</summary>
    </member>
    <member name="M:TypedFileRead(PABCSystem.TypedFile)">
      <summary>--
</summary>
    </member>
    <member name="M:FilePos(PABCSystem.BinaryFile)">
      <summary>--
</summary>
    </member>
    <member name="M:FileSize(PABCSystem.BinaryFile)">
      <summary>--
</summary>
    </member>
    <member name="M:Seek(PABCSystem.BinaryFile,System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:BinaryFileInit(PABCSystem.BinaryFile@)">
      <summary>--
</summary>
    </member>
    <member name="M:BinaryFileRead(PABCSystem.BinaryFile@,System.Type)">
      <summary>--
</summary>
    </member>
    <member name="M:PascalABCVersion">
      <summary> Возвращает версию PascalABC.NET
</summary>
    </member>
    <member name="M:ParamCount">
      <summary> Возвращает количество параметров командной строки
</summary>
    </member>
    <member name="M:ParamStr(System.Int32)">
      <summary> Возвращает i-тый параметр командной строки
</summary>
    </member>
    <member name="M:GetDir">
      <summary> Возвращает текущий каталог
</summary>
    </member>
    <member name="M:ChDir(System.String)">
      <summary> Меняет текущий каталог
</summary>
    </member>
    <member name="M:MkDir(System.String)">
      <summary> Создает каталог
</summary>
    </member>
    <member name="M:RmDir(System.String)">
      <summary> Удаляет каталог
</summary>
    </member>
    <member name="M:CreateDir(System.String)">
      <summary> Создает каталог. Возвращает True, если каталог успешно создан
</summary>
    </member>
    <member name="M:DeleteFile(System.String)">
      <summary> Удаляет файл. Если файл не может быть удален, то возвращает False
</summary>
    </member>
    <member name="M:GetCurrentDir">
      <summary> Возвращает текущий каталог
</summary>
    </member>
    <member name="M:RemoveDir(System.String)">
      <summary> Удаляет каталог. Возвращает True, если каталог успешно удален
</summary>
    </member>
    <member name="M:RenameFile(System.String,System.String)">
      <summary> Переименовывает файл name, давая ему новое имя newname. Возвращает True, если файл успешно переименован
</summary>
    </member>
    <member name="M:SetCurrentDir(System.String)">
      <summary> Устанавивает текущий каталог. Возвращает True, если каталог успешно удален
</summary>
    </member>
    <member name="M:ChangeFileNameExtension(System.String,System.String)">
      <summary> Изменяет расширение файла с именем name на newext
</summary>
    </member>
    <member name="M:FileExists(System.String)">
      <summary> Возвращает True, если файл с именем name существует
</summary>
    </member>
    <member name="M:Assert(System.Boolean,System.String,System.Int32)">
      <summary> Выводит в специальном окне стек вызовов подпрограмм если условие не выполняется
</summary>
    </member>
    <member name="M:Assert(System.Boolean,System.String,System.String,System.Int32)">
      <summary> Выводит в специальном окне диагностическое сообщение и стек вызовов подпрограмм если условие не выполняется
</summary>
    </member>
    <member name="M:DiskFree(System.String)">
      <summary> Возвращает свободное место в байтах на диске с именем diskname
</summary>
    </member>
    <member name="M:DiskSize(System.String)">
      <summary> Возвращает размер в байтах на диске с именем diskname
</summary>
    </member>
    <member name="M:DiskFree(System.Int32)">
      <summary> Возвращает свободное место в байтах на диске disk. disk=0 - текущий диск, disk=1 - диск A: , disk=2 - диск B: и т.д.
</summary>
    </member>
    <member name="M:DiskSize(System.Int32)">
      <summary> Возвращает размер в байтах на диске disk. disk=0 - текущий диск, disk=1 - диск A: , disk=2 - диск B: и т.д.
</summary>
    </member>
    <member name="M:Milliseconds">
      <summary> Возвращает количество миллисекунд с момента начала работы программы
</summary>
    </member>
    <member name="M:MillisecondsDelta">
      <summary> Возвращает количество миллисекунд с момента последнего вызова Milliseconds или MillisecondsDelta 
</summary>
    </member>
    <member name="M:Halt">
      <summary> Завершает работу программы
</summary>
    </member>
    <member name="M:Halt(System.Int32)">
      <summary> Завершает работу программы, возвращая код ошибки exitCode
</summary>
    </member>
    <member name="M:Sleep(System.Int32)">
      <summary> Делает паузу на ms миллисекунд
</summary>
    </member>
    <member name="M:GetEXEFileName">
      <summary> Возващает имя запущенного .exe-файла
</summary>
    </member>
    <member name="M:PointerToString(System.Void*)">
      <summary> Преобразует указатель к строковому представлению
</summary>
    </member>
    <member name="M:Exec(System.String)">
      <summary> Запускает программу или документ с именем filename 
</summary>
    </member>
    <member name="M:Exec(System.String,System.String)">
      <summary> Запускает программу или документ с именем filename и параметрами командной строки args
</summary>
    </member>
    <member name="M:Execute(System.String)">
      <summary> Запускает программу или документ с именем filename 
</summary>
    </member>
    <member name="M:Execute(System.String,System.String)">
      <summary> Запускает программу или документ с именем filename и параметрами командной строки args
</summary>
    </member>
    <member name="M:EnumerateFiles(System.String,System.String)">
      <summary> Возвращает последовательность имен файлов по заданному пути, соответствующих шаблону поиска 
</summary>
    </member>
    <member name="M:EnumerateAllFiles(System.String,System.String)">
      <summary> Возвращает последовательность имен файлов по заданному пути, соответствующих шаблону поиска, включая подкаталоги 
</summary>
    </member>
    <member name="M:EnumerateDirectories(System.String)">
      <summary> Возвращает последовательность имен каталогов по заданному пути
</summary>
    </member>
    <member name="M:EnumerateAllDirectories(System.String)">
      <summary> Возвращает последовательность имен каталогов по заданному пути, включая подкаталоги
</summary>
    </member>
    <member name="M:ExtractFileName(System.String)">
      <summary> Выделяет имя файла из полного имени файла fname
</summary>
    </member>
    <member name="M:ExtractFileExt(System.String)">
      <summary> Выделяет расширение из полного имени файла fname
</summary>
    </member>
    <member name="M:ExtractFilePath(System.String)">
      <summary> Выделяет путь из полного имени файла fname
</summary>
    </member>
    <member name="M:ExtractFileDir(System.String)">
      <summary> Выделяет имя диска и путь из полного имени файла fname
</summary>
    </member>
    <member name="M:ExtractFileDrive(System.String)">
      <summary> Выделяет путь из полного имени файла fname
</summary>
    </member>
    <member name="M:ExpandFileName(System.String)">
      <summary> Возвращает полное имя файла fname
</summary>
    </member>
    <member name="M:Sign(System.SByte)">
      <summary>-function Sign(x: число): число;
 Возвращает знак числа x
</summary>
    </member>
    <member name="M:Sign(System.Int16)">
      <summary>--
</summary>
    </member>
    <member name="M:Sign(System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:Sign(System.Numerics.BigInteger)">
      <summary>--
</summary>
    </member>
    <member name="M:Sign(System.UInt32)">
      <summary>--
</summary>
    </member>
    <member name="M:Sign(System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:Sign(System.UInt64)">
      <summary>--
</summary>
    </member>
    <member name="M:Sign(System.Double)">
      <summary>--
</summary>
    </member>
    <member name="M:Abs(System.Int32)">
      <summary>-function Abs(x: число): число;
 Возвращает модуль числа x
</summary>
    </member>
    <member name="M:Abs(System.SByte)">
      <summary>--
</summary>
    </member>
    <member name="M:Abs(System.Int16)">
      <summary>--
</summary>
    </member>
    <member name="M:Abs(System.Numerics.BigInteger)">
      <summary>--
</summary>
    </member>
    <member name="M:Abs(System.UInt32)">
      <summary>--
</summary>
    </member>
    <member name="M:Abs(System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:Abs(System.UInt64)">
      <summary>--
</summary>
    </member>
    <member name="M:Abs(System.Double)">
      <summary>--
</summary>
    </member>
    <member name="M:Sin(System.Double)">
      <summary> Возвращает синус числа x
</summary>
    </member>
    <member name="M:Sinh(System.Double)">
      <summary> Возвращает гиперболический синус числа x
</summary>
    </member>
    <member name="M:Cos(System.Double)">
      <summary> Возвращает косинус числа x
 !! Returns the cosine of number x
</summary>
    </member>
    <member name="M:Cosh(System.Double)">
      <summary> Возвращает гиперболический косинус числа x
</summary>
    </member>
    <member name="M:Tan(System.Double)">
      <summary> Возвращает тангенс числа x
</summary>
    </member>
    <member name="M:Tanh(System.Double)">
      <summary> Возвращает гиперболический тангенс числа x
</summary>
    </member>
    <member name="M:ArcSin(System.Double)">
      <summary> Возвращает арксинус числа x
</summary>
    </member>
    <member name="M:ArcCos(System.Double)">
      <summary> Возвращает арккосинус числа x
</summary>
    </member>
    <member name="M:ArcTan(System.Double)">
      <summary> Возвращает арктангенс числа x
</summary>
    </member>
    <member name="M:Exp(System.Double)">
      <summary> Возвращает экспоненту числа x
</summary>
    </member>
    <member name="M:Ln(System.Double)">
      <summary> Возвращает натуральный логарифм числа x
</summary>
    </member>
    <member name="M:Log(System.Double)">
      <summary> Возвращает натуральный логарифм числа x
</summary>
    </member>
    <member name="M:Log2(System.Double)">
      <summary> Возвращает логарифм числа x по основанию 2
</summary>
    </member>
    <member name="M:Log10(System.Double)">
      <summary> Возвращает десятичный логарифм числа x
</summary>
    </member>
    <member name="M:LogN(System.Double,System.Double)">
      <summary> Возвращает логарифм числа x по основанию base
</summary>
    </member>
    <member name="M:Sqrt(System.Double)">
      <summary> Возвращает квадратный корень числа x
</summary>
    </member>
    <member name="M:Sqr(System.Int32)">
      <summary>-function Sqr(x: число): число;
 Возвращает квадрат числа x
</summary>
    </member>
    <member name="M:Sqr(System.SByte)">
      <summary>--
</summary>
    </member>
    <member name="M:Sqr(System.Int16)">
      <summary>--
</summary>
    </member>
    <member name="M:Sqr(System.Numerics.BigInteger)">
      <summary>--
</summary>
    </member>
    <member name="M:Sqr(System.UInt32)">
      <summary>--
</summary>
    </member>
    <member name="M:Sqr(System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:Sqr(System.UInt64)">
      <summary>--
</summary>
    </member>
    <member name="M:Sqr(System.Double)">
      <summary>--
</summary>
    </member>
    <member name="M:Power(System.Double,System.Double)">
      <summary> Возвращает x в степени y
</summary>
    </member>
    <member name="M:Power(System.Int32,System.Int32)">
      <summary> Возвращает x в степени y
</summary>
    </member>
    <member name="M:Power(System.Numerics.BigInteger,System.Int32)">
      <summary> Возвращает x в степени y
</summary>
    </member>
    <member name="M:Round(System.Double)">
      <summary> Возвращает x, округленное до ближайшего целого. Если вещественное находится посередине между двумя целыми, 
то округление осуществляется к ближайшему четному (банковское округление): Round(2.5)=2, Round(3.5)=4
</summary>
    </member>
    <member name="M:RoundBigInteger(System.Double)">
      <summary> Возвращает x, округленное до ближайшего длинного целого
</summary>
    </member>
    <member name="M:Trunc(System.Double)">
      <summary> Возвращает целую часть вещественного числа x
</summary>
    </member>
    <member name="M:TruncBigInteger(System.Double)">
      <summary> Возвращает целую часть вещественного числа x как длинное целое
</summary>
    </member>
    <member name="M:Int(System.Double)">
      <summary> Возвращает целую часть числа x
</summary>
    </member>
    <member name="M:Frac(System.Double)">
      <summary> Возвращает дробную часть числа x
</summary>
    </member>
    <member name="M:Floor(System.Double)">
      <summary> Возвращает наибольшее целое &lt;= x
</summary>
    </member>
    <member name="M:Ceil(System.Double)">
      <summary> Возвращает наименьшее целое &gt;= x
</summary>
    </member>
    <member name="M:RadToDeg(System.Double)">
      <summary> Переводит радианы в градусы
</summary>
    </member>
    <member name="M:DegToRad(System.Double)">
      <summary> Переводит градусы в радианы
</summary>
    </member>
    <member name="M:Randomize">
      <summary> Инициализирует датчик псевдослучайных чисел
</summary>
    </member>
    <member name="M:Randomize(System.Int32)">
      <summary> Инициализирует датчик псевдослучайных чисел, используя значение seed. При одном и том же seed генерируются одинаковые псевдослучайные последовательности
</summary>
    </member>
    <member name="M:Random(System.Int32)">
      <summary> Возвращает случайное целое в диапазоне от 0 до maxValue-1
</summary>
    </member>
    <member name="M:Random(System.Int32,System.Int32)">
      <summary> Возвращает случайное целое в диапазоне от a до b
</summary>
    </member>
    <member name="M:Random">
      <summary> Возвращает случайное вещественное в диапазоне [0..1)
</summary>
    </member>
    <member name="M:Max(System.Byte,System.Byte)">
      <summary>-function Max(a: число, b: число): число;
 Возвращает максимальное из чисел a,b
</summary>
    </member>
    <member name="M:Max(System.SByte,System.SByte)">
      <summary>--
</summary>
    </member>
    <member name="M:Max(System.Int16,System.Int16)">
      <summary>--
</summary>
    </member>
    <member name="M:Max(System.UInt16,System.UInt16)">
      <summary>--
</summary>
    </member>
    <member name="M:Max(System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>--
</summary>
    </member>
    <member name="M:Max(System.UInt32,System.UInt32)">
      <summary>--
</summary>
    </member>
    <member name="M:Max(System.Int64,System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:Max(System.UInt64,System.UInt64)">
      <summary>--
</summary>
    </member>
    <member name="M:Max(System.Double,System.Double)">
      <summary>--
</summary>
    </member>
    <member name="M:Min(System.Byte,System.Byte)">
      <summary>-function Min(a: число, b: число): число;
 Возвращает минимальное из чисел a,b
</summary>
    </member>
    <member name="M:Min(System.SByte,System.SByte)">
      <summary>--
</summary>
    </member>
    <member name="M:Min(System.UInt16,System.UInt16)">
      <summary>--
</summary>
    </member>
    <member name="M:Min(System.Int16,System.Int16)">
      <summary>--
</summary>
    </member>
    <member name="M:Min(System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>--
</summary>
    </member>
    <member name="M:Min(System.UInt32,System.UInt32)">
      <summary>--
</summary>
    </member>
    <member name="M:Min(System.Int64,System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:Min(System.UInt64,System.UInt64)">
      <summary>--
</summary>
    </member>
    <member name="M:Min(System.Double,System.Double)">
      <summary>--
</summary>
    </member>
    <member name="M:Odd(System.Byte)">
      <summary>-function Odd(i: целое): boolean;
 Возвращает True, если i нечетно, и False в противном случае
</summary>
    </member>
    <member name="M:Odd(System.SByte)">
      <summary>--
</summary>
    </member>
    <member name="M:Odd(System.UInt16)">
      <summary>--
</summary>
    </member>
    <member name="M:Odd(System.Int16)">
      <summary>--
</summary>
    </member>
    <member name="M:Odd(System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:Odd(System.Numerics.BigInteger)">
      <summary>--
</summary>
    </member>
    <member name="M:Odd(System.UInt32)">
      <summary>--
</summary>
    </member>
    <member name="M:Odd(System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:Odd(System.UInt64)">
      <summary>--
</summary>
    </member>
    <member name="M:Cplx(System.Double,System.Double)">
      <summary> Конструирует комплексное число с вещественной частью re и мнимой частью im
</summary>
    </member>
    <member name="M:CplxFromPolar(System.Double,System.Double)">
      <summary> Конструирует комплексное число по полярным координатам
</summary>
    </member>
    <member name="M:Sqrt(System.Numerics.Complex)">
      <summary> Возвращает квадратный корень из комплексного числа
</summary>
    </member>
    <member name="M:Abs(System.Numerics.Complex)">
      <summary> Возвращает модуль комплексного числа
</summary>
    </member>
    <member name="M:Conjugate(System.Numerics.Complex)">
      <summary> Возвращает комплексно сопряженное число
</summary>
    </member>
    <member name="M:Cos(System.Numerics.Complex)">
      <summary> Возвращает косинус комплексного числа
</summary>
    </member>
    <member name="M:Exp(System.Numerics.Complex)">
      <summary> Возвращает экспоненту комплексного числа
</summary>
    </member>
    <member name="M:Ln(System.Numerics.Complex)">
      <summary> Возвращает натуральный логарифм комплексного числа
</summary>
    </member>
    <member name="M:Log(System.Numerics.Complex)">
      <summary> Возвращает натуральный логарифм комплексного числа
</summary>
    </member>
    <member name="M:Log10(System.Numerics.Complex)">
      <summary> Возвращает десятичный логарифм комплексного числа
</summary>
    </member>
    <member name="M:Power(System.Numerics.Complex,System.Numerics.Complex)">
      <summary> Возвращает степень комплексного числа
</summary>
    </member>
    <member name="M:Sin(System.Numerics.Complex)">
      <summary> Возвращает синус комплексного числа
</summary>
    </member>
    <member name="M:Include(PABCSystem.TypedSet@,System.Object)">
      <summary>- procedure Include(var s: set of T; element: T);
Добавляет элемент element во множество s
</summary>
    </member>
    <member name="M:Exclude(PABCSystem.TypedSet@,System.Object)">
      <summary>- procedure Exclude(var s: set of T; element: T);
Удаляет элемент element из множества s
</summary>
    </member>
    <member name="M:Inc(System.Char@)">
      <summary> Увеличивает код символа c на 1
</summary>
    </member>
    <member name="M:Inc(System.Char@,System.Int32)">
      <summary> Увеличивает код символа c на n
</summary>
    </member>
    <member name="M:Dec(System.Char@)">
      <summary> Уменьшает код символа c на 1
</summary>
    </member>
    <member name="M:Dec(System.Char@,System.Int32)">
      <summary> Уменьшает код символа c на n
</summary>
    </member>
    <member name="M:Pred(System.Char)">
      <summary> Возвращает предшествующий x символ
</summary>
    </member>
    <member name="M:Succ(System.Char)">
      <summary> Возвращает следующий за x символ
</summary>
    </member>
    <member name="M:ChrAnsi(System.Byte)">
      <summary> Преобразует код в символ в кодировке Windows
</summary>
    </member>
    <member name="M:OrdAnsi(System.Char)">
      <summary> Преобразует символ в код в кодировке Windows
</summary>
    </member>
    <member name="M:Chr(System.UInt16)">
      <summary> Преобразует код в символ в кодировке Unicode 
</summary>
    </member>
    <member name="M:Ord(System.Char)">
      <summary> Преобразует символ в код в кодировке Unicode 
</summary>
    </member>
    <member name="M:ChrUnicode(System.UInt16)">
      <summary> Преобразует код в символ в кодировке Unicode
</summary>
    </member>
    <member name="M:OrdUnicode(System.Char)">
      <summary> Преобразует символ в код в кодировке Unicode
</summary>
    </member>
    <member name="M:UpperCase(System.Char)">
      <summary> Преобразует символ в верхний регистр
</summary>
    </member>
    <member name="M:LowerCase(System.Char)">
      <summary> Преобразует символ в нижний регистр
</summary>
    </member>
    <member name="M:UpCase(System.Char)">
      <summary> Преобразует символ в верхний регистр
</summary>
    </member>
    <member name="M:LowCase(System.Char)">
      <summary> Преобразует символ в нижний регистр
</summary>
    </member>
    <member name="M:Str(System.Int32,System.String@)">
      <summary>-procedure Str(i: целое; var s: string);
 Преобразует целое значение i к строковому представлению и записывает результат в s
</summary>
    </member>
    <member name="M:Str(System.UInt32,System.String@)">
      <summary>--
</summary>
    </member>
    <member name="M:Str(System.Int64,System.String@)">
      <summary>--
</summary>
    </member>
    <member name="M:Str(System.UInt64,System.String@)">
      <summary>--
</summary>
    </member>
    <member name="M:Str(System.Double,System.String@)">
      <summary> Преобразует вещественное значение r к строковому представлению и записывает результат в s
</summary>
    </member>
    <member name="M:Str(System.Single,System.String@)">
      <summary> Преобразует вещественное значение r к строковому представлению и записывает результат в s
</summary>
    </member>
    <member name="M:Str(System.String,System.String@)">
      <summary>--
</summary>
    </member>
    <member name="M:Pos(System.String,System.String,System.Int32)">
      <summary> Возвращает позицию подстроки subs в строке s. Если не найдена, возвращает 0 
</summary>
    </member>
    <member name="M:PosEx(System.String,System.String,System.Int32)">
      <summary> Возвращает позицию подстроки subs в строке s начиная с позиции from. Если не найдена, возвращает 0 
</summary>
    </member>
    <member name="M:LastPos(System.String,System.String)">
      <summary> Возвращает позицию последнего вхождения подстроки subs в строке s. Если не найдена, возвращает 0 
</summary>
    </member>
    <member name="M:LastPos(System.String,System.String,System.Int32)">
      <summary> Возвращает позицию последнего вхождения подстроки subs в строке s начиная с позиции from. Если не найдена, возвращает 0 
</summary>
    </member>
    <member name="M:Length(System.String)">
      <summary> Возвращает длину строки 
</summary>
    </member>
    <member name="M:SetLength(System.String@,System.Int32)">
      <summary> Устанавливает длину строки s равной n
</summary>
    </member>
    <member name="M:SetLengthForShortString(System.String@,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:Insert(System.String,System.String@,System.Int32)">
      <summary> Вставляет подстроку source в строку s с позиции index
</summary>
    </member>
    <member name="M:InsertInShortString(System.String,System.String@,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:Delete(System.String@,System.Int32,System.Int32)">
      <summary> Удаляет из строки s count символов с позиции index
</summary>
    </member>
    <member name="M:Copy(System.String,System.Int32,System.Int32)">
      <summary> Возвращает подстроку строки s длины count с позиции index
</summary>
    </member>
    <member name="M:Concat(System.String[])">
      <summary>-function Concat(s1,s2,...): string; 
 Возвращает строку, являющуюся результатом слияния строк s1,s2,...
</summary>
    </member>
    <member name="M:Concat(System.String,System.String)">
      <summary> Возвращает строку, являющуюся результатом слияния строк s1 и s2
</summary>
    </member>
    <member name="M:LowerCase(System.String)">
      <summary> Возвращает строку в нижнем регистре
</summary>
    </member>
    <member name="M:UpperCase(System.String)">
      <summary> Возвращает строку в верхнем регистре
</summary>
    </member>
    <member name="M:StringOfChar(System.Char,System.Int32)">
      <summary> Возвращает строку, состоящую из count символов ch
</summary>
    </member>
    <member name="M:ReverseString(System.String)">
      <summary> Возвращает инвертированную строку
</summary>
    </member>
    <member name="M:CompareStr(System.String,System.String)">
      <summary> Сравнивает строки. Возвращает значение &lt; 0 если s1&lt;s2, &gt; 0 если s1&gt;s2 и = 0 если s1=s2
</summary>
    </member>
    <member name="M:LeftStr(System.String,System.Int32)">
      <summary> Возвращает первые count символов строки s
</summary>
    </member>
    <member name="M:RightStr(System.String,System.Int32)">
      <summary> Возвращает последние count символов строки s
</summary>
    </member>
    <member name="M:Trim(System.String)">
      <summary> Возвращает строку с удаленными начальными и конечными пробелами
</summary>
    </member>
    <member name="M:TrimLeft(System.String)">
      <summary> Возвращает строку с удаленными начальными пробелами
</summary>
    </member>
    <member name="M:TrimRight(System.String)">
      <summary> Возвращает строку с удаленными конечными пробелами
</summary>
    </member>
    <member name="M:StrToInt(System.String)">
      <summary> Преобразует строковое представление целого числа к числовому значению
</summary>
    </member>
    <member name="M:StrToInt64(System.String)">
      <summary> Преобразует строковое представление целого числа к числовому значению
</summary>
    </member>
    <member name="M:StrToFloat(System.String)">
      <summary> Преобразует строковое представление вещественного числа к числовому значению
</summary>
    </member>
    <member name="M:TryStrToInt(System.String,System.Int32@)">
      <summary> Преобразует строковое представление s целого числа к числовому значению и записывает его в value. 
При невозможности преобразования возвращается False
</summary>
    </member>
    <member name="M:TryStrToInt64(System.String,System.Int64@)">
      <summary> Преобразует строковое представление s целого числа к числовому значению и записывает его в value. 
При невозможности преобразования возвращается False
</summary>
    </member>
    <member name="M:TryStrToFloat(System.String,System.Double@)">
      <summary> Преобразует строковое представление s вещественного числа к числовому значению и записывает его в value. 
При невозможности преобразования возвращается False
</summary>
    </member>
    <member name="M:TryStrToFloat(System.String,System.Single@)">
      <summary> Преобразует строковое представление s вещественного числа к числовому значению и записывает его в value. 
При невозможности преобразования возвращается False
</summary>
    </member>
    <member name="M:ReadIntegerFromString(System.String,System.Int32@)">
      <summary> Считывает целое из строки начиная с позиции from и устанавливает from за считанным значением
</summary>
    </member>
    <member name="M:ReadRealFromString(System.String,System.Int32@)">
      <summary> Считывает вещественное из строки начиная с позиции from и устанавливает from за считанным значением
</summary>
    </member>
    <member name="M:ReadWordFromString(System.String,System.Int32@)">
      <summary> Считывает из строки последовательность символов до пробельного символа начиная с позиции from и устанавливает from за считанным значением
</summary>
    </member>
    <member name="M:StringIsEmpty(System.String,System.Int32@)">
      <summary> Возвращает True если достигнут конец строки или в строке остались только пробельные символы и False в противном случае
</summary>
    </member>
    <member name="M:TryReadIntegerFromString(System.String,System.Int32@,System.Int32@)">
      <summary> Считывает целое из строки начиная с позиции from и устанавливает from за считанным значением. 
Возвращает True если считывание удачно и False в противном случае
</summary>
    </member>
    <member name="M:TryReadRealFromString(System.String,System.Int32@,System.Double@)">
      <summary> Считывает вещественное из строки начиная с позиции from и устанавливает from за считанным значением. 
Возвращает True если считывание удачно и False в противном случае
</summary>
    </member>
    <member name="M:Val(System.String,System.Int32@,System.Int32@)">
      <summary>-procedure Val(s: string; var value: число; var err: integer);
 Преобразует строковое представление s целого числа к числовому значению и записывает его в переменную value. 
Если преобразование успешно, то err=0, иначе err&gt;0
</summary>
    </member>
    <member name="M:Val(System.String,System.SByte@,System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Val(System.String,System.Int16@,System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Val(System.String,System.Int64@,System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Val(System.String,System.Byte@,System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Val(System.String,System.UInt16@,System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Val(System.String,System.UInt32@,System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Val(System.String,System.UInt64@,System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Val(System.String,System.Double@,System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:Val(System.String,System.Single@,System.Int32@)">
      <summary>--
</summary>
    </member>
    <member name="M:IntToStr(System.Int32)">
      <summary> Преобразует целое число к строковому представлению
</summary>
    </member>
    <member name="M:IntToStr(System.Int64)">
      <summary> Преобразует целое число к строковому представлению
</summary>
    </member>
    <member name="M:FloatToStr(System.Double)">
      <summary> Преобразует вещественное число к строковому представлению
</summary>
    </member>
    <member name="M:Format(System.String,System.Object[])">
      <summary> Возвращает отформатированную строку, построенную по форматной строке и списку форматируемых параметров 
</summary>
    </member>
    <member name="M:Inc(System.Int32@)">
      <summary> Увеличивает значение переменной i на 1
</summary>
    </member>
    <member name="M:Inc(System.Int32@,System.Int32)">
      <summary> Увеличивает значение переменной i на n
</summary>
    </member>
    <member name="M:Dec(System.Int32@)">
      <summary> Уменьшает значение переменной i на 1
</summary>
    </member>
    <member name="M:Dec(System.Int32@,System.Int32)">
      <summary> Уменьшает значение переменной i на n
</summary>
    </member>
    <member name="M:Inc(System.Byte@)">
      <summary>-procedure Inc(var e: перечислимый тип);
 Увеличивает значение перечислимого типа на 1
</summary>
    </member>
    <member name="M:Inc(System.Byte@,System.Int32)">
      <summary>-procedure Inc(var e: перечислимый тип; n: integer);
 Увеличивает значение перечислимого типа на n
</summary>
    </member>
    <member name="M:Dec(System.Byte@)">
      <summary>-procedure Dec(var e: перечислимый тип);
 Уменьшает значение перечислимого типа на 1
</summary>
    </member>
    <member name="M:Dec(System.Byte@,System.Int32)">
      <summary>-procedure Dec(var e: перечислимый тип; n: integer);
 Уменьшает значение перечислимого типа на n
</summary>
    </member>
    <member name="M:Inc(System.Boolean@)">
      <summary>--
</summary>
    </member>
    <member name="M:Dec(System.Boolean@)">
      <summary>--
</summary>
    </member>
    <member name="M:Ord(System.Int32)">
      <summary>-function Ord(a: целое): целое;
 Возвращает порядковый номер значения a
</summary>
    </member>
    <member name="M:Ord(System.UInt32)">
      <summary>-function Ord(a: перечислимый тип): integer;
 Возвращает порядковый номер значения a
</summary>
    </member>
    <member name="M:Ord(System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:Ord(System.UInt64)">
      <summary>--
</summary>
    </member>
    <member name="M:Ord(System.Boolean)">
      <summary>--
</summary>
    </member>
    <member name="M:Succ(System.Int32)">
      <summary>-function Succ(x: целое): целое;
 Возвращает следующее за x значение
</summary>
    </member>
    <member name="M:Succ(System.Byte)">
      <summary>-function Succ(x: перечислимый тип): перечислимый тип;
 Возвращает следующее за x значение
</summary>
    </member>
    <member name="M:Succ(System.SByte)">
      <summary>--
</summary>
    </member>
    <member name="M:Succ(System.Int16)">
      <summary>--
</summary>
    </member>
    <member name="M:Succ(System.UInt16)">
      <summary>--
</summary>
    </member>
    <member name="M:Succ(System.UInt32)">
      <summary>--
</summary>
    </member>
    <member name="M:Succ(System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:Succ(System.UInt64)">
      <summary>--
</summary>
    </member>
    <member name="M:Succ(System.Boolean)">
      <summary>--
</summary>
    </member>
    <member name="M:Pred(System.Int32)">
      <summary>-function Pred(x: целое): целое;
 Возвращает предшествующее x значение
</summary>
    </member>
    <member name="M:Pred(System.Byte)">
      <summary>-function Pred(x: перечислимый тип): перечислимый тип;
 Возвращает предшествующее x значение
</summary>
    </member>
    <member name="M:Pred(System.SByte)">
      <summary>--
</summary>
    </member>
    <member name="M:Pred(System.Int16)">
      <summary>--
</summary>
    </member>
    <member name="M:Pred(System.UInt16)">
      <summary>--
</summary>
    </member>
    <member name="M:Pred(System.UInt32)">
      <summary>--
</summary>
    </member>
    <member name="M:Pred(System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:Pred(System.UInt64)">
      <summary>--
</summary>
    </member>
    <member name="M:Pred(System.Boolean)">
      <summary>--
</summary>
    </member>
    <member name="M:Swap``1(``0@,``0@)">
      <summary> Меняет местами значения двух переменных
</summary>
    </member>
    <member name="M:Eoln">
      <summary> Возвращает True, если достигнут конец строки
</summary>
    </member>
    <member name="M:Eof">
      <summary> Возвращает True, если достигнут конец потока ввода
</summary>
    </member>
    <member name="M:Low(System.Array)">
      <summary>- function Low(a: array of T): integer;
 Возвращает 0
</summary>
    </member>
    <member name="M:High(System.Array)">
      <summary>- function High(a: array of T): integer;
 Возвращает верхнюю границу динамического массива
</summary>
    </member>
    <member name="M:Length(System.Array)">
      <summary>- function Length(a: array of T): integer;
 Возвращает длину динамического массива
</summary>
    </member>
    <member name="M:Length(System.Array,System.Int32)">
      <summary>- function Length(a: array of T; dim: integer): integer;
 Возвращает длину динамического массива по размерности dim
</summary>
    </member>
    <member name="M:Copy(System.Array)">
      <summary>- function Copy(a: array of T): array of T;
 Создаёт копию динамического массива
</summary>
    </member>
    <member name="M:Sort``1(``0[])">
      <summary> Сортирует динамический массив по возрастанию
</summary>
    </member>
    <member name="M:Sort``1(``0[],System.Func{``0,``0,System.Int32})">
      <summary> Сортирует динамический массив по критерию сортировки, задаваемому функцией сравнения cmp
</summary>
    </member>
    <member name="M:Sort``1(``0[],System.Func{``0,``0,System.Boolean})">
      <summary> Сортирует динамический массив по критерию сортировки, задаваемому функцией сравнения less
</summary>
    </member>
    <member name="M:Sort``1(System.Collections.Generic.List{``0})">
      <summary> Сортирует список по возрастанию
</summary>
    </member>
    <member name="M:Sort``1(System.Collections.Generic.List{``0},System.Func{``0,``0,System.Int32})">
      <summary> Сортирует список по критерию сортировки, задаваемому функцией сравнения cmp
</summary>
    </member>
    <member name="M:Sort``1(System.Collections.Generic.List{``0},System.Func{``0,``0,System.Boolean})">
      <summary> Сортирует список по критерию сортировки, задаваемому функцией сравнения less
</summary>
    </member>
    <member name="M:Reverse``1(``0[])">
      <summary> Изменяет порядок элементов в динамическом массиве на противоположный
</summary>
    </member>
    <member name="M:Reverse``1(``0[],System.Int32,System.Int32)">
      <summary> Изменяет порядок элементов на противоположный в диапазоне динамического массива длины length начиная с индекса index
</summary>
    </member>
    <member name="M:Reverse``1(System.Collections.Generic.List{``0})">
      <summary> Изменяет порядок элементов в списке на противоположный
</summary>
    </member>
    <member name="M:Reverse``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
      <summary> Изменяет порядок элементов на противоположный в диапазоне списка длины length начиная с индекса index
</summary>
    </member>
    <member name="M:Shuffle``1(``0[])">
      <summary> Перемешивает динамический массив случайным образом
</summary>
    </member>
    <member name="M:Shuffle``1(System.Collections.Generic.List{``0})">
      <summary> Перемешивает список случайным образом
</summary>
    </member>
    <member name="M:Range(System.Int32,System.Int32)">
      <summary> Возвращает последовательность целых от a до b
</summary>
    </member>
    <member name="M:Range(System.Char,System.Char)">
      <summary> Возвращает последовательность символов от c1 до c2
</summary>
    </member>
    <member name="M:Range(System.Double,System.Double,System.Int32)">
      <summary> Возвращает последовательность вещественных в точках разбиения отрезка [a,b] на n равных частей (Используйте Partition)
</summary>
    </member>
    <member name="M:Partition(System.Double,System.Double,System.Int32)">
      <summary> Возвращает последовательность вещественных в точках разбиения отрезка [a,b] на n равных частей
</summary>
    </member>
    <member name="M:Range(System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает последовательность целых от a до b с шагом step
</summary>
    </member>
    <member name="M:Seq``1(``0[])">
      <summary> Возвращает последовательность указанных элементов
</summary>
    </member>
    <member name="M:SeqRandom(System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает последовательность из n случайных целых элементов
</summary>
    </member>
    <member name="M:SeqRandomInteger(System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает последовательность из n случайных целых элементов
</summary>
    </member>
    <member name="M:SeqRandomReal(System.Int32,System.Double,System.Double)">
      <summary> Возвращает последовательность из n случайных вещественных элементов
</summary>
    </member>
    <member name="M:SeqGen``1(System.Int32,System.Func{System.Int32,``0})">
      <summary> Возвращает последовательность из count элементов, заполненных значениями f(i)
</summary>
    </member>
    <member name="M:SeqGen``1(System.Int32,System.Func{System.Int32,``0},System.Int32)">
      <summary> Возвращает последовательность из count элементов, заполненных значениями f(i), начиная с i=from
</summary>
    </member>
    <member name="M:SeqGen``1(System.Int32,``0,System.Func{``0,``0})">
      <summary> Возвращает последовательность из count элементов, начинающуюся с first, с функцией next перехода от предыдущего к следующему 
</summary>
    </member>
    <member name="M:SeqGen``1(System.Int32,``0,``0,System.Func{``0,``0,``0})">
      <summary> Возвращает последовательность из count элементов, начинающуюся с first и second, 
с функцией next перехода от двух предыдущих к следующему 
</summary>
    </member>
    <member name="M:SeqWhile``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
      <summary> Возвращает последовательность элементов с начальным значением first, 
функцией next перехода от предыдущего к следующему и условием pred продолжения последовательности 
</summary>
    </member>
    <member name="M:SeqWhile``1(``0,``0,System.Func{``0,``0,``0},System.Func{``0,System.Boolean})">
      <summary> Возвращает последовательность элементов, начинающуюся с first и second, 
с функцией next перехода от двух предыдущих к следующему и условием pred продолжения последовательности 
</summary>
    </member>
    <member name="M:SeqFill``1(System.Int32,``0)">
      <summary> Возвращает последовательность из count элементов x 
</summary>
    </member>
    <member name="M:ReadSeqInteger(System.Int32)">
      <summary> Возвращает последовательность из n целых, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadSeqReal(System.Int32)">
      <summary> Возвращает последовательность из n вещественных, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadSeqString(System.Int32)">
      <summary> Возвращает последовательность из n строк, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadSeqInteger(System.String,System.Int32)">
      <summary> Выводит приглашение к вводу и возвращает последовательность из n целых, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadSeqReal(System.String,System.Int32)">
      <summary> Выводит приглашение к вводу и возвращает последовательность из n вещественных, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadSeqString(System.String,System.Int32)">
      <summary> Выводит приглашение к вводу и возвращает последовательность из n строк, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadSeqIntegerWhile(System.Func{System.Int32,System.Boolean})">
      <summary> Возвращает последовательность целых, вводимых с клавиатуры пока выполняется определенное условие
</summary>
    </member>
    <member name="M:ReadSeqRealWhile(System.Func{System.Double,System.Boolean})">
      <summary> Возвращает последовательность вещественных, вводимых с клавиатуры пока выполняется определенное условие
</summary>
    </member>
    <member name="M:ReadSeqStringWhile(System.Func{System.String,System.Boolean})">
      <summary> Возвращает последовательность строк, вводимых с клавиатуры пока выполняется определенное условие
</summary>
    </member>
    <member name="M:ReadSeqIntegerWhile(System.String,System.Func{System.Int32,System.Boolean})">
      <summary> Выводит приглашение к вводу и возвращает последовательность целых, вводимых с клавиатуры пока выполняется определенное условие
</summary>
    </member>
    <member name="M:ReadSeqRealWhile(System.String,System.Func{System.Double,System.Boolean})">
      <summary> Выводит приглашение к вводу и возвращает последовательность вещественных, вводимых с клавиатуры пока выполняется определенное условие
</summary>
    </member>
    <member name="M:ReadSeqStringWhile(System.String,System.Func{System.String,System.Boolean})">
      <summary> Выводит приглашение к вводу и возвращает последовательность строк, вводимых с клавиатуры пока выполняется определенное условие
</summary>
    </member>
    <member name="M:Arr``1(``0[])">
      <summary> Возвращает массив, заполненный указанными значениями
</summary>
    </member>
    <member name="M:Arr``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Возвращает массив, заполненный значениями из последовательнсти
</summary>
    </member>
    <member name="M:ArrRandom(System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает массив размера n, заполненный случайными целыми значениями
</summary>
    </member>
    <member name="M:ArrRandomInteger(System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает массив размера n, заполненный случайными целыми значениями
</summary>
    </member>
    <member name="M:ArrRandomReal(System.Int32,System.Double,System.Double)">
      <summary> Возвращает массив размера n, заполненный случайными вещественными значениями
</summary>
    </member>
    <member name="M:ArrGen``1(System.Int32,System.Func{System.Int32,``0})">
      <summary> Возвращает массив из count элементов, заполненных значениями gen(i)
</summary>
    </member>
    <member name="M:ArrGen``1(System.Int32,System.Func{System.Int32,``0},System.Int32)">
      <summary> Возвращает массив из count элементов, заполненных значениями gen(i), начиная с i=from
</summary>
    </member>
    <member name="M:ArrGen``1(System.Int32,``0,System.Func{``0,``0})">
      <summary> Возвращает массив из count элементов, начинающихся с first, с функцией next перехода от предыдущего к следующему 
</summary>
    </member>
    <member name="M:ArrGen``1(System.Int32,``0,``0,System.Func{``0,``0,``0})">
      <summary> Возвращает массив из count элементов, начинающихся с first и second, с функцией next перехода от двух предыдущих к следующему 
</summary>
    </member>
    <member name="M:ArrFill``1(System.Int32,``0)">
      <summary> Возвращает массив из count элементов x 
</summary>
    </member>
    <member name="M:ReadArrInteger(System.Int32)">
      <summary> Возвращает массив из n целых, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadArrReal(System.Int32)">
      <summary> Возвращает массив из n вещественных, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadArrString(System.Int32)">
      <summary> Возвращает массив из n строк, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadArrInteger(System.String,System.Int32)">
      <summary> Выводит приглашение к вводу и возвращает массив из n целых, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadArrReal(System.String,System.Int32)">
      <summary> Выводит приглашение к вводу и возвращает массив из n вещественных, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadArrString(System.String,System.Int32)">
      <summary> Выводит приглашение к вводу и возвращает массив из n строк, введенных с клавиатуры
</summary>
    </member>
    <member name="M:MatrRandom(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает двумерный массив размера m x n, заполненный случайными целыми значениями
</summary>
    </member>
    <member name="M:MatrRandomInteger(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает двумерный массив размера m x n, заполненный случайными целыми значениями
</summary>
    </member>
    <member name="M:MatrRandomReal(System.Int32,System.Int32,System.Double,System.Double)">
      <summary> Возвращает двумерный массив размера m x n, заполненный случайными вещественными значениями
</summary>
    </member>
    <member name="M:MatrFill``1(System.Int32,System.Int32,``0)">
      <summary> Возвращает двумерный массив размера m x n, заполненный элементами x 
</summary>
    </member>
    <member name="M:MatrGen``1(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,``0})">
      <summary> Возвращает двумерный массив размера m x n, заполненный элементами x 
</summary>
    </member>
    <member name="M:Transpose``1(``0[])">
      <summary> Транспонирует двумерный массив 
</summary>
    </member>
    <member name="M:ReadMatrInteger(System.Int32,System.Int32)">
      <summary> Возвращает матрицу m на n целых, введенных с клавиатуры
</summary>
    </member>
    <member name="M:ReadMatrReal(System.Int32,System.Int32)">
      <summary> Возвращает матрицу m на n вещественных, введенных с клавиатуры
</summary>
    </member>
    <member name="M:Rec``2(``0,``1)">
      <summary>- function Rec(x1: T1, x2: T2,...): (T1,T2,...);
 Возвращает кортеж из элементов разных типов
</summary>
    </member>
    <member name="M:Rec``3(``0,``1,``2)">
      <summary>--
</summary>
    </member>
    <member name="M:Rec``4(``0,``1,``2,``3)">
      <summary>--
</summary>
    </member>
    <member name="M:Rec``5(``0,``1,``2,``3,``4)">
      <summary>--
</summary>
    </member>
    <member name="M:Rec``6(``0,``1,``2,``3,``4,``5)">
      <summary>--
</summary>
    </member>
    <member name="M:Rec``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>--
</summary>
    </member>
    <member name="M:Lst``1(``0[])">
      <summary> Возвращает список, заполненный указанными значениями
</summary>
    </member>
    <member name="M:Lst``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Возвращает список, заполненный значениями из последовательности
</summary>
    </member>
    <member name="M:LLst``1(``0[])">
      <summary> Возвращает двусвязный список, заполненный указанными значениями
</summary>
    </member>
    <member name="M:LLst``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Возвращает двусвязный список, заполненный значениями из последовательности
</summary>
    </member>
    <member name="M:HSet``1(``0[])">
      <summary> Возвращает множество на базе хеш таблицы, заполненное указанными значениями
</summary>
    </member>
    <member name="M:HSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Возвращает множество на базе хеш таблицы, заполненное значениями из последовательности
</summary>
    </member>
    <member name="M:SSet``1(``0[])">
      <summary> Возвращает множество на базе бинарного дерева поиска, заполненное значениями из последовательности
</summary>
    </member>
    <member name="M:SSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Возвращает множество на базе бинарного дерева поиска, заполненное значениями из последовательности
</summary>
    </member>
    <member name="M:Dict``2(System.Collections.Generic.KeyValuePair{``0,``1}[])">
      <summary> Возвращает словарь пар элементов (ключ, значение)
</summary>
    </member>
    <member name="M:Dict``2(System.Tuple{``0,``1}[])">
      <summary> Возвращает словарь пар элементов (ключ, значение)
</summary>
    </member>
    <member name="M:KV``2(``0,``1)">
      <summary> Возвращает пару элементов (ключ, значение)
</summary>
    </member>
    <member name="M:CopyWithSize(System.Array,System.Array)">
      <summary>--
</summary>
    </member>
    <member name="M:check_in_range(System.Int64,System.Int64,System.Int64)">
      <summary>--
</summary>
    </member>
    <member name="M:check_in_range_char(System.Char,System.Char,System.Char)">
      <summary>--
</summary>
    </member>
    <member name="M:RunTimeSizeOf(System.Type)">
      <summary>--
</summary>
    </member>
    <member name="M:GetCharInShortString(System.String,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SetCharInShortString(System.String,System.Int32,System.Int32,System.Char)">
      <summary>--
</summary>
    </member>
    <member name="M:ClipShortString(System.String,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:GetResourceStream(System.String)">
      <summary>--
</summary>
    </member>
    <member name="M:FormatValue(System.Object,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:FormatValue(System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:FormatValue(System.Int64,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:FormatValue(System.Double,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:FormatValue(System.Double,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:StringDefaultPropertySet(System.String@,System.Int32,System.Char)">
      <summary>--
</summary>
    </member>
    <member name="M:CheckCanUsePointerOnType(System.Type)">
      <summary>Проверяет возможность использования указателей на тип T
</summary>
    </member>
    <member name="M:CheckCanUseTypeForBinaryFiles(System.Type)">
      <summary>Проверяет возможность записи типа T в файл
</summary>
    </member>
    <member name="M:CheckCanUseTypeForTypedFiles(System.Type)">
      <summary>Проверяет возможность создания file of T
</summary>
    </member>
    <member name="M:RuntimeDetermineType(System.Type)">
      <summary>Определяет специальные типы
</summary>
    </member>
    <member name="M:RuntimeInitialize(System.Byte,System.Object)">
      <summary>Возвращает объект класса в зависимости от значения kind
</summary>
    </member>
    <member name="M:GetRuntimeSize``1">
      <summary>Вычисление размера типа на этапе выполнения
</summary>
    </member>
    <member name="M:_ObjectToString(System.Object)">
      <summary>Возвращает строку для вывода в write
</summary>
    </member>
    <member name="M:ExecuteAssemlyIsDll">
      <summary>--
</summary>
    </member>
    <member name="M:omp_set_nested(System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:omp_get_nested">
      <summary>--
</summary>
    </member>
    <member name="M:Union(PABCSystem.TypedSet,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:Subtract(PABCSystem.TypedSet,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:Intersect(PABCSystem.TypedSet,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:CreateSet(System.Object[])">
      <summary>--
</summary>
    </member>
    <member name="M:CreateSet">
      <summary>--
</summary>
    </member>
    <member name="M:CreateBoundedSet(System.Object,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:InSet(System.Object,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:CreateDiapason(System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:CreateObjDiapason(System.Object,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:CompareSetEquals(PABCSystem.TypedSet,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:CompareSetInEquals(PABCSystem.TypedSet,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:CompareSetLess(PABCSystem.TypedSet,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:CompareSetGreaterEqual(PABCSystem.TypedSet,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:CompareSetLessEqual(PABCSystem.TypedSet,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:CompareSetGreater(PABCSystem.TypedSet,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:ClipSet(PABCSystem.TypedSet@,System.Object,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:AssignSet(PABCSystem.TypedSet@,PABCSystem.TypedSet)">
      <summary>--
</summary>
    </member>
    <member name="M:ClipSetFunc(PABCSystem.TypedSet,System.Object,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:ClipShortStringInSet(PABCSystem.TypedSet,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:ClipShortStringInSetProcedure(PABCSystem.TypedSet@,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:AssignSetWithBounds(PABCSystem.TypedSet@,PABCSystem.TypedSet,System.Object,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSetInit(PABCSystem.TypedSet@)">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSetInitWithBounds(PABCSystem.TypedSet@,System.Object,System.Object)">
      <summary>--
</summary>
    </member>
    <member name="M:TypedSetInitWithShortString(PABCSystem.TypedSet@,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:__InitModule__">
      <summary>--
</summary>
    </member>
    <member name="M:__InitPABCSystem">
      <summary>--
</summary>
    </member>
    <member name="M:__FinalizeModule__">
      <summary>--
</summary>
    </member>
    <member name="M:*(System.String,System.Int32)">
      <summary> Повторяет строку str n раз
</summary>
    </member>
    <member name="M:*(System.Int32,System.String)">
      <summary> Повторяет строку str n раз
</summary>
    </member>
    <member name="M:*(System.Char,System.Int32)">
      <summary> Повторяет символ c n раз
</summary>
    </member>
    <member name="M:*(System.Int32,System.Char)">
      <summary> Повторяет символ c n раз
</summary>
    </member>
    <member name="M:+(System.String,System.Int32)">
      <summary> Добавляет к строке str строковое представление числа n
</summary>
    </member>
    <member name="M:+(System.Int32,System.String)">
      <summary> Добавляет к строке str строковое представление числа n
</summary>
    </member>
    <member name="M:+(System.String,System.Double)">
      <summary> Добавляет к строке str строковое представление числа r
</summary>
    </member>
    <member name="M:+(System.Double,System.String)">
      <summary> Добавляет к строке str строковое представление числа r
</summary>
    </member>
    <member name="M:in``1(``0,System.Collections.Generic.List{``0})">
      <summary>--
</summary>
    </member>
    <member name="V:CommandLineArgs">
      <summary> Содержит аргумены командой строки, с которыми была запущена программа
</summary>
    </member>
    <member name="V:output">
      <summary> Стандартный текстовый файл для вывода. Связывается процедурой Assign с файлом на диске, после чего весь вывод на консоль перенаправляется в этот файл
</summary>
    </member>
    <member name="V:input">
      <summary> Стандартный текстовый файл для ввода. Связывается процедурой Assign с файлом на диске, после чего весь ввод с консоли перенаправляется из этого файла
</summary>
    </member>
    <member name="V:CurrentIOSystem">
      <summary> Определяет текущую систему ввода-вывода
</summary>
    </member>
    <member name="V:IsConsoleApplication">
      <summary> Принимает значение True, если приложение имеет консольное окно
</summary>
    </member>
    <member name="V:RedirectIOInDebugMode">
      <summary>--
</summary>
    </member>
    <member name="V:ExecuteBeforeProcessTerminateIn__Mode">
      <summary>--
</summary>
    </member>
    <member name="V:ExitCode">
      <summary>--
</summary>
    </member>
    <member name="V:DefaultEncoding">
      <summary>--
</summary>
    </member>
    <member name="V:PrintDelimDefault">
      <summary>--
</summary>
    </member>
    <member name="V:OMP_NESTED">
      <summary>--
</summary>
    </member>
    <member name="C:MaxShortInt">
      <summary> Максимальное значение типа shortint
</summary>
    </member>
    <member name="C:MaxByte">
      <summary> Максимальное значение типа byte
</summary>
    </member>
    <member name="C:MaxSmallInt">
      <summary> Максимальное значение типа smallint
</summary>
    </member>
    <member name="C:MaxWord">
      <summary> Максимальное значение типа word
</summary>
    </member>
    <member name="C:MaxLongWord">
      <summary> Максимальное значение типа longword
</summary>
    </member>
    <member name="C:MaxInt64">
      <summary> Максимальное значение типа int64
</summary>
    </member>
    <member name="C:MaxUInt64">
      <summary> Максимальное значение типа uint64
</summary>
    </member>
    <member name="C:MaxDouble">
      <summary> Максимальное значение типа double
</summary>
    </member>
    <member name="C:MinDouble">
      <summary> Минимальное положительное значение типа double
</summary>
    </member>
    <member name="C:MaxReal">
      <summary> Максимальное значение типа real
</summary>
    </member>
    <member name="C:MinReal">
      <summary> Минимальное положительное значение типа real
</summary>
    </member>
    <member name="C:MaxSingle">
      <summary> Максимальное значение типа single
</summary>
    </member>
    <member name="C:MinSingle">
      <summary> Минимальное положительное значение типа single
</summary>
    </member>
    <member name="C:MaxInt">
      <summary> Максимальное значение типа integer
</summary>
    </member>
    <member name="C:Pi">
      <summary> Константа Pi
 !! Pi constant
</summary>
    </member>
    <member name="C:E">
      <summary> Константа E
 !! E constant
</summary>
    </member>
    <member name="C:NewLine">
      <summary> Константа перехода на новую строку
 !! The newline string defined for this environment.
</summary>
    </member>
    <member name="M:+``1(``0[],``0[])">
      <summary> Объединяет два массива
</summary>
    </member>
    <member name="M:in``1(``0,``0[])">
      <summary>--
</summary>
    </member>
    <member name="M:+=``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
      <summary>--
</summary>
    </member>
    <member name="M:+``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
      <summary>--
</summary>
    </member>
    <member name="M:+=``1(System.Collections.Generic.List{``0},``0)">
      <summary>--
</summary>
    </member>
    <member name="M:*``1(System.Collections.Generic.List{``0},System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:*``1(System.Int32,System.Collections.Generic.List{``0})">
      <summary>--
</summary>
    </member>
    <member name="M:+=``1(System.Collections.Generic.Stack{``0},``0)">
      <summary>--
</summary>
    </member>
    <member name="M:+=``1(System.Collections.Generic.Queue{``0},``0)">
      <summary>--
</summary>
    </member>
    <member name="M:in``1(``0,System.Collections.Generic.HashSet{``0})">
      <summary>--
</summary>
    </member>
    <member name="M:+``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>--
</summary>
    </member>
    <member name="M:+``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>--
</summary>
    </member>
    <member name="M:+``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>--
</summary>
    </member>
    <member name="M:*``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:*``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
      <summary>--
</summary>
    </member>
    <member name="M:in``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Iterate``1(``0,System.Func{``0,``0})">
      <summary> Возвращает бесконечную рекуррентную последовательность элементов, задаваемую начальным элементом first и функцией next
</summary>
    </member>
    <member name="M:Iterate``1(``0,System.Func{``0,``0})">
      <summary> Возвращает бесконечную рекуррентную последовательность элементов, задаваемую начальным элементом first и функцией next
</summary>
    </member>
    <member name="M:Iterate``1(``0,``0,System.Func{``0,``0,``0})">
      <summary> Возвращает бесконечную рекуррентную последовательность элементов, задаваемую начальными элементами first, second и функцией next
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Iterate``1(``0,``0,System.Func{``0,``0,``0})">
      <summary> Возвращает бесконечную рекуррентную последовательность элементов, задаваемую начальными элементами first, second и функцией next
</summary>
    </member>
    <member name="M:Iterate``1(``0,System.Func{``0,``0})">
      <summary>--
</summary>
    </member>
    <member name="M:Iterate``1(``0,``0,System.Func{``0,``0,``0})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Step(System.Int32)">
      <summary> Возвращает бесконечную последовательность целых от текущего значения с шагом 1
</summary>
    </member>
    <member name="M:Step(System.Int32)">
      <summary> Возвращает бесконечную последовательность целых от текущего значения с шагом 1
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Step(System.Int32,System.Int32)">
      <summary> Возвращает бесконечную последовательность целых от текущего значения с шагом step
</summary>
    </member>
    <member name="M:Step(System.Int32,System.Int32)">
      <summary> Возвращает бесконечную последовательность целых от текущего значения с шагом step
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Step(System.Double,System.Double)">
      <summary> Возвращает бесконечную последовательность вещественных от текущего значения с шагом step
</summary>
    </member>
    <member name="M:Step(System.Double,System.Double)">
      <summary> Возвращает бесконечную последовательность вещественных от текущего значения с шагом step
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Repeat``1(``0)">
      <summary>--
</summary>
    </member>
    <member name="M:Repeat``1(``0)">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Cycle``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Повторяет последовательность бесконечное число раз
</summary>
    </member>
    <member name="M:Cycle``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Повторяет последовательность бесконечное число раз
</summary>
    </member>
    <member name="M:Print``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary> Выводит последовательность на экран, используя delim в качестве разделителя
</summary>
    </member>
    <member name="M:Print``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Выводит последовательность на экран, используя пробел в качестве разделителя
</summary>
    </member>
    <member name="M:Println``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary> Выводит последовательность на экран, используя delim в качестве разделителя, и переходит на новую строку
</summary>
    </member>
    <member name="M:Println``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Выводит последовательность на экран, используя пробел качестве разделителя, и переходит на новую строку
</summary>
    </member>
    <member name="M:WriteLines(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary> Выводит последовательность строк в файл
</summary>
    </member>
    <member name="M:JoinIntoString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary> Преобразует элементы последовательности в строковое представление, после чего объединяет их в строку, используя delim в качестве разделителя
</summary>
    </member>
    <member name="M:JoinIntoString``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Преобразует элементы последовательности в строковое представление, после чего объединяет их в строку, используя пробел в качестве разделителя
</summary>
    </member>
    <member name="M:ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary> Применяет действие к каждому элементу последовательности
</summary>
    </member>
    <member name="M:ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
      <summary> Применяет действие к каждому элементу последовательности, зависящее от номера элемента
</summary>
    </member>
    <member name="M:Sorted``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Возвращает отсортированную по возрастанию последовательность
</summary>
    </member>
    <member name="M:SortedDescending``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Возвращает отсортированную по убыванию последовательность
</summary>
    </member>
    <member name="M:ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Возвращает множество HashSet по данной последовательности
</summary>
    </member>
    <member name="M:ToSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Возвращает множество SortedSet по данной последовательности
</summary>
    </member>
    <member name="M:ToLinkedList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Возвращает LinkedList по данной последовательности
</summary>
    </member>
    <member name="M:MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary> Возвращает первый элемент последовательности с минимальным значением ключа
</summary>
    </member>
    <member name="M:MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary> Возвращает первый элемент последовательности с максимальным значением ключа
</summary>
    </member>
    <member name="M:LastMinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary> Возвращает последний элемент последовательности с минимальным значением ключа
</summary>
    </member>
    <member name="M:LastMaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary> Возвращает последний элемент последовательности с максимальным значением ключа
</summary>
    </member>
    <member name="M:TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary> Возвращает последние count элементов последовательности
</summary>
    </member>
    <member name="M:SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary> Возвращает последовательность без последних count элементов 
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Cartesian``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary> Декартово произведение последовательностей
</summary>
    </member>
    <member name="M:Cartesian``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary> Декартово произведение последовательностей
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Cartesian``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary> Декартово произведение последовательностей
</summary>
    </member>
    <member name="M:Cartesian``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary> Декартово произведение последовательностей
</summary>
    </member>
    <member name="M:SplitAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary> Разбивает последовательности на две в позиции ind
</summary>
    </member>
    <member name="M:Partition``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary> Разделяет последовательности на две по заданному условию
</summary>
    </member>
    <member name="M:Partition``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary> Разделяет последовательности на две по заданному условию, в котором участвует индекс
</summary>
    </member>
    <member name="M:ZipTuple``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary> Объединяет две последовательности в последовательность двухэлементных кортежей
</summary>
    </member>
    <member name="M:ZipTuple``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
      <summary> Объединяет три последовательности в последовательность трехэлементных кортежей
</summary>
    </member>
    <member name="M:ZipTuple``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
      <summary> Объединяет четыре последовательности в последовательность четырехэлементных кортежей
</summary>
    </member>
    <member name="M:UnZipTuple``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
      <summary> Разъединяет последовательность двухэлементных кортежей на две последовательности
</summary>
    </member>
    <member name="M:UnZipTuple``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}})">
      <summary> Разъединяет последовательность трехэлементных кортежей на три последовательности
</summary>
    </member>
    <member name="M:UnZipTuple``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}})">
      <summary> Разъединяет последовательность четырехэлементных кортежей на четыре последовательности
</summary>
    </member>
    <member name="M:Interleave``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary> Чередует элементы двух последовательностей
</summary>
    </member>
    <member name="M:Interleave``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary> Чередует элементы трех последовательностей
</summary>
    </member>
    <member name="M:Interleave``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary> Чередует элементы четырех последовательностей
</summary>
    </member>
    <member name="M:Numerate``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Нумерует последовательность с единицы
</summary>
    </member>
    <member name="M:Numerate``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary> Нумерует последовательность с номера from
</summary>
    </member>
    <member name="M:Tabulate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary> Табулирует функцию последовательностью
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Pairwise``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Превращает последовательность в последовательность пар соседних элементов
</summary>
    </member>
    <member name="M:Pairwise``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Превращает последовательность в последовательность пар соседних элементов
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Pairwise``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
      <summary> Превращает последовательность в последовательность пар соседних элементов, применяет func к каждой паре полученных элементов и получает новую последовательность 
</summary>
    </member>
    <member name="M:Pairwise``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
      <summary> Превращает последовательность в последовательность пар соседних элементов, применяет func к каждой паре полученных элементов и получает новую последовательность 
</summary>
    </member>
    <member name="M:Batch``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary> Разбивает последовательность на серии длины size
</summary>
    </member>
    <member name="M:Batch``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
      <summary> Разбивает последовательность на серии длины size и применяет проекцию к каждой серии
</summary>
    </member>
    <member name="M:SliceSeqImpl``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
      <summary> Возвращает срез последовательности от номера from с шагом step &gt; 0
</summary>
    </member>
    <member name="M:Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает срез последовательности от номера from с шагом step &gt; 0 длины не более count
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Incremental``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
      <summary> Возвращает последовательность разностей соседних элементов исходной последовательности. В качестве функции разности используется func
</summary>
    </member>
    <member name="M:Incremental``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
      <summary> Возвращает последовательность разностей соседних элементов исходной последовательности. В качестве функции разности используется func
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Incremental``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32,``1})">
      <summary> Возвращает последовательность разностей соседних элементов исходной последовательности. В качестве функции разности используется func
</summary>
    </member>
    <member name="M:Incremental``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32,``1})">
      <summary> Возвращает последовательность разностей соседних элементов исходной последовательности. В качестве функции разности используется func
</summary>
    </member>
    <member name="M:Shuffle``1(System.Collections.Generic.List{``0})">
      <summary> Перемешивает элементы списка случайным образом
</summary>
    </member>
    <member name="M:CreateSliceFromListInternal``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:CorrectCountForSlice(System.Int32,System.Int32,System.Int32,System.Int32@)">
      <summary>-- 
</summary>
    </member>
    <member name="M:SliceListImpl``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:Slice``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
      <summary> Возвращает срез списка от индекса from с шагом step
</summary>
    </member>
    <member name="M:Slice``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает срез списка от индекса from с шагом step длины не более count
</summary>
    </member>
    <member name="M:RemoveLast``1(System.Collections.Generic.List{``0})">
      <summary> Удаляет последний элемент. Если элементов нет, генерирует исключение
</summary>
    </member>
    <member name="M:CorrectFromToAndCalcCountForSystemSliceQuestion(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:CheckAndCorrectFromToAndCalcCountForSystemSlice(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:CheckStepAndCorrectFromTo(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SystemSliceListImpl``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:SystemSlice``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SystemSlice``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SystemSliceListImplQuestion``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:SystemSliceQuestion``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SystemSliceQuestion``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:RowCount``1(``0[])">
      <summary> Количество строк в двумерном массиве
</summary>
    </member>
    <member name="M:ColCount``1(``0[])">
      <summary> Количество столбцов в двумерном массиве
</summary>
    </member>
    <member name="M:Print``1(``0[],System.Int32)">
      <summary> Вывод двумерного массива, w - ширина поля вывода
</summary>
    </member>
    <member name="M:Print(System.Double[,],System.Int32,System.Int32)">
      <summary> Вывод двумерного вещественного массива по формату :w:f
</summary>
    </member>
    <member name="M:Println``1(``0[],System.Int32)">
      <summary> Вывод двумерного массива и переход на следующую строку, w - ширина поля вывода
</summary>
    </member>
    <member name="M:Println(System.Double[,],System.Int32,System.Int32)">
      <summary> Вывод двумерного вещественного массива по формату :w:f и переход на следующую строку 
</summary>
    </member>
    <member name="M:Row``1(``0[],System.Int32)">
      <summary> k-тая строка двумерного массива
</summary>
    </member>
    <member name="M:Col``1(``0[],System.Int32)">
      <summary> k-тый столбец двумерного массива
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;RowSeq``1(``0[],System.Int32)">
      <summary> k-тая строка двумерного массива как последовательность
</summary>
    </member>
    <member name="M:RowSeq``1(``0[],System.Int32)">
      <summary> k-тая строка двумерного массива как последовательность
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;ColSeq``1(``0[],System.Int32)">
      <summary> k-тый столбец двумерного массива как последовательность
</summary>
    </member>
    <member name="M:ColSeq``1(``0[],System.Int32)">
      <summary> k-тый столбец двумерного массива как последовательность
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Rows``1(``0[])">
      <summary> Возвращает последовательность строк двумерного массива 
</summary>
    </member>
    <member name="M:Rows``1(``0[])">
      <summary> Возвращает последовательность строк двумерного массива 
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;Cols``1(``0[])">
      <summary> Возвращает последовательность столбцов двумерного массива 
</summary>
    </member>
    <member name="M:Cols``1(``0[])">
      <summary> Возвращает последовательность столбцов двумерного массива 
</summary>
    </member>
    <member name="M:SwapRows``1(``0[],System.Int32,System.Int32)">
      <summary> Меняет местами две строки двумерного массива с номерами k1 и k2
</summary>
    </member>
    <member name="M:SwapCols``1(``0[],System.Int32,System.Int32)">
      <summary> Меняет местами два столбца двумерного массива с номерами k1 и k2
</summary>
    </member>
    <member name="M:SetRow``1(``0[],System.Int32,``0[])">
      <summary> Меняет строку k двумерного массива на другую строку
</summary>
    </member>
    <member name="M:SetCol``1(``0[],System.Int32,``0[])">
      <summary> Меняет столбец k двумерного массива на другой столбец
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;ElementsWithIndexes``1(``0[])">
      <summary> Возвращает по заданному двумерному массиву последовательность (i,j,a[i,j])
</summary>
    </member>
    <member name="M:ElementsWithIndexes``1(``0[])">
      <summary> Возвращает по заданному двумерному массиву последовательность (i,j,a[i,j])
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;ElementsByRow``1(``0[])">
      <summary> Возвращает по заданному двумерному массиву последовательность его элементов по строкам
</summary>
    </member>
    <member name="M:ElementsByRow``1(``0[])">
      <summary> Возвращает по заданному двумерному массиву последовательность его элементов по строкам
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;ElementsByCol``1(``0[])">
      <summary> Возвращает по заданному двумерному массиву последовательность его элементов по столбцам
</summary>
    </member>
    <member name="M:ElementsByCol``1(``0[])">
      <summary> Возвращает по заданному двумерному массиву последовательность его элементов по столбцам
</summary>
    </member>
    <member name="M:ConvertAll``2(``0[],System.Func{``0,``1})">
      <summary> Преобразует элементы двумерного массива и возвращает преобразованный массив
</summary>
    </member>
    <member name="M:Transform``1(``0[],System.Func{``0,``0})">
      <summary> Преобразует элементы двумерного массива по заданному правилу
</summary>
    </member>
    <member name="M:Fill``1(``0[],System.Func{System.Int32,System.Int32,``0})">
      <summary> Заполняет элементы двумерного массива значениями, вычисляемыми по некоторому правилу
</summary>
    </member>
    <member name="M:Shuffle``1(``0[])">
      <summary> Перемешивает элементы массива случайным образом
</summary>
    </member>
    <member name="M:AdjacentFind``1(``0[],System.Int32)">
      <summary> Находит первую пару подряд идущих одинаковых элементов и возвращает индекс первого элемента пары. Если не найден, возвращается -1
</summary>
    </member>
    <member name="M:AdjacentFind``1(``0[],System.Func{``0,``0,System.Boolean},System.Int32)">
      <summary> Находит первую пару подряд идущих одинаковых элементов, используя функцию сравнения eq, и возвращает индекс первого элемента пары. Если не найден, возвращается -1
</summary>
    </member>
    <member name="M:&lt;yield_helper_error_checkerr&gt;AdjacentGroup``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Группирует одинаковые подряд идущие элементы, получая последовательность последовательностей 
</summary>
    </member>
    <member name="M:AdjacentGroup``1(System.Collections.Generic.IEnumerable{``0})">
      <summary> Группирует одинаковые подряд идущие элементы, получая последовательность последовательностей 
</summary>
    </member>
    <member name="M:Min``1(``0[])">
      <summary> Возвращает минимальный элемент 
</summary>
    </member>
    <member name="M:Max``1(``0[])">
      <summary> Возвращает максинимальный элемент 
</summary>
    </member>
    <member name="M:Min(System.Int32[])">
      <summary> Возвращает минимальный элемент 
</summary>
    </member>
    <member name="M:Min(System.Double[])">
      <summary> Возвращает минимальный элемент 
</summary>
    </member>
    <member name="M:Max(System.Int32[])">
      <summary> Возвращает максимальный элемент 
</summary>
    </member>
    <member name="M:Max(System.Double[])">
      <summary> Возвращает максимальный элемент 
</summary>
    </member>
    <member name="M:IndexMin``1(``0[],System.Int32)">
      <summary> Возвращает индекс первого минимального элемента начиная с позиции start
</summary>
    </member>
    <member name="M:IndexMax``1(``0[],System.Int32)">
      <summary> Возвращает индекс первого максимального элемента начиная с позиции start
</summary>
    </member>
    <member name="M:LastIndexMin``1(``0[])">
      <summary> Возвращает индекс последнего минимального элемента
</summary>
    </member>
    <member name="M:LastIndexMin``1(``0[],System.Int32)">
      <summary> Возвращает индекс последнего минимального элемента начиная с позиции start
</summary>
    </member>
    <member name="M:LastIndexMax``1(``0[])">
      <summary> Возвращает индекс последнего минимального элемента
</summary>
    </member>
    <member name="M:LastIndexMax``1(``0[],System.Int32)">
      <summary> Возвращает индекс последнего минимального элемента начиная с позиции start
</summary>
    </member>
    <member name="M:Replace``1(``0[],``0,``0)">
      <summary> Заменяет в массиве все вхождения одного значения на другое
</summary>
    </member>
    <member name="M:Transform``1(``0[],System.Func{``0,``0})">
      <summary> Преобразует элементы массива по заданному правилу
</summary>
    </member>
    <member name="M:Fill``1(``0[],System.Func{System.Int32,``0})">
      <summary> Заполняет элементы массива значениями, вычисляемыми по некоторому правилу
</summary>
    </member>
    <member name="M:BinarySearch``1(``0[],``0)">
      <summary> Выполняет бинарный поиск в отсортированном массиве
</summary>
    </member>
    <member name="M:ConvertAll``2(``0[],System.Func{``0,``1})">
      <summary> Преобразует элементы массива и возвращает преобразованный массив
</summary>
    </member>
    <member name="M:Find``1(``0[],System.Func{``0,System.Boolean})">
      <summary> Выполняет поиск первого элемента в массиве, удовлетворяющего предикату. Если не найден, возвращается нулевое значение соответствующего типа
</summary>
    </member>
    <member name="M:FindIndex``1(``0[],System.Func{``0,System.Boolean})">
      <summary> Выполняет поиск индекса первого элемента в массиве, удовлетворяющего предикату. Если не найден, возвращается -1
</summary>
    </member>
    <member name="M:FindIndex``1(``0[],System.Int32,System.Func{``0,System.Boolean})">
      <summary> Выполняет поиск индекса первого элемента в массиве, удовлетворяющего предикату, начиная с индекса start. Если не найден, возвращается -1
</summary>
    </member>
    <member name="M:FindAll``1(``0[],System.Func{``0,System.Boolean})">
      <summary> Возвращает в виде массива все элементы, удовлетворяющие предикату
</summary>
    </member>
    <member name="M:FindLast``1(``0[],System.Func{``0,System.Boolean})">
      <summary> Выполняет поиск последнего элемента в массиве, удовлетворяющего предикату. Если не найден, возвращается нулевое значение соответствующего типа
</summary>
    </member>
    <member name="M:FindLastIndex``1(``0[],System.Func{``0,System.Boolean})">
      <summary> Выполняет поиск индекса последнего элемента в массиве, удовлетворяющего предикату. Если не найден, возвращается нулевое значение соответствующего типа
</summary>
    </member>
    <member name="M:FindLastIndex``1(``0[],System.Int32,System.Func{``0,System.Boolean})">
      <summary> Выполняет поиск индекса последнего элемента в массиве, удовлетворяющего предикату, начиная с индекса start. Если не найден, возвращается нулевое значение соответствующего типа
</summary>
    </member>
    <member name="M:IndexOf``1(``0[],``0)">
      <summary> Возвращает индекс первого вхождения элемента или -1 если элемент не найден
</summary>
    </member>
    <member name="M:IndexOf``1(``0[],``0,System.Int32)">
      <summary> Возвращает индекс первого вхождения элемента начиная с индекса start или -1 если элемент не найден
</summary>
    </member>
    <member name="M:LastIndexOf``1(``0[],``0)">
      <summary> Возвращает индекс последнего вхождения элемента или -1 если элемент не найден
</summary>
    </member>
    <member name="M:LastIndexOf``1(``0[],``0,System.Int32)">
      <summary> Возвращает индекс последнего вхождения элемента начиная с индекса start или -1 если элемент не найден
</summary>
    </member>
    <member name="M:Sort``1(``0[])">
      <summary> Сортирует массив по возрастанию
</summary>
    </member>
    <member name="M:Sort``1(``0[],System.Func{``0,``0,System.Int32})">
      <summary> Сортирует массив по возрастанию, используя cmp в качестве функции сравнения элементов
</summary>
    </member>
    <member name="M:High(System.Array)">
      <summary> Возвращает индекс последнего элемента массива
</summary>
    </member>
    <member name="M:Low(System.Array)">
      <summary> Возвращает индекс первого элемента массива
</summary>
    </member>
    <member name="M:CreateSliceFromArrayInternal``1(``0[],System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:SliceArrayImpl``1(``0[],System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:Slice``1(``0[],System.Int32,System.Int32)">
      <summary> Возвращает срез массива от индекса from с шагом step
</summary>
    </member>
    <member name="M:Slice``1(``0[],System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает срез массива от индекса from с шагом step длины не более count
</summary>
    </member>
    <member name="M:SystemSliceArrayImpl``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:SystemSlice``1(``0[],System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SystemSlice``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SystemSliceArrayImplQuestion``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:SystemSliceQuestion``1(``0[],System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SystemSliceQuestion``1(``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:Sqrt(System.Int32)">
      <summary> Возвращает квадратный корень числа
</summary>
    </member>
    <member name="M:Sqr(System.Int32)">
      <summary> Возвращает квадрат числа
</summary>
    </member>
    <member name="M:IsEven(System.Int32)">
      <summary> Возвращает, является ли целое четным
</summary>
    </member>
    <member name="M:IsOdd(System.Int32)">
      <summary> Возвращает, является ли целое нечетным
</summary>
    </member>
    <member name="M:Range(System.Int32)">
      <summary> Возвращает последовательность чисел от 1 до данного
</summary>
    </member>
    <member name="M:To(System.Int32,System.Int32)">
      <summary> Генерирует последовательность целых от текущего значения до n
</summary>
    </member>
    <member name="M:Downto(System.Int32,System.Int32)">
      <summary> Генерирует последовательность целых от текущего значения до n в убывающем порядке
</summary>
    </member>
    <member name="M:Times(System.Int32)">
      <summary> Возвращает последовательность целых 0,1,...n-1
</summary>
    </member>
    <member name="M:Sqrt(System.Numerics.BigInteger)">
      <summary> Возвращает квадратный корень числа
</summary>
    </member>
    <member name="M:Sqrt(System.Double)">
      <summary> Возвращает квадратный корень числа
</summary>
    </member>
    <member name="M:Sqr(System.Double)">
      <summary> Возвращает квадрат числа
</summary>
    </member>
    <member name="M:Round(System.Double)">
      <summary> Возвращает число, округленное до ближайшего целого
</summary>
    </member>
    <member name="M:RoundBigInteger(System.Double)">
      <summary> Возвращает число, округленное до ближайшего длинного целого
</summary>
    </member>
    <member name="M:Trunc(System.Double)">
      <summary> Возвращает целую часть вещественного числа
</summary>
    </member>
    <member name="M:TruncBigInteger(System.Double)">
      <summary> Возвращает целую часть вещественного числа как длинное целое
</summary>
    </member>
    <member name="M:ToString(System.Double,System.Int32)">
      <summary> Возвращает вещественное, отформатированное к строке с frac цифрами после десятичной точки
</summary>
    </member>
    <member name="M:Pred(System.Char)">
      <summary> Предыдущий символ
</summary>
    </member>
    <member name="M:Succ(System.Char)">
      <summary> Следующий символ
</summary>
    </member>
    <member name="M:Code(System.Char)">
      <summary> Код символа в кодировке Unicode
</summary>
    </member>
    <member name="M:IsDigit(System.Char)">
      <summary> Является ли символ цифрой
</summary>
    </member>
    <member name="M:IsLetter(System.Char)">
      <summary> Является ли символ буквой
</summary>
    </member>
    <member name="M:IsLower(System.Char)">
      <summary> Принадлежит ли символ к категории букв нижнего регистра
</summary>
    </member>
    <member name="M:IsUpper(System.Char)">
      <summary> Принадлежит ли символ к категории букв верхнего регистра
</summary>
    </member>
    <member name="M:ToDigit(System.Char)">
      <summary> Преобразует символ в цифру
</summary>
    </member>
    <member name="M:ToLower(System.Char)">
      <summary> Преобразует символ в нижний регистр
</summary>
    </member>
    <member name="M:ToUpper(System.Char)">
      <summary> Преобразует символ в верхний регистр
</summary>
    </member>
    <member name="M:ReadInteger(System.String,System.Int32@)">
      <summary> Считывает целое из строки начиная с позиции from и устанавливает from за считанным значением
</summary>
    </member>
    <member name="M:ReadReal(System.String,System.Int32@)">
      <summary> Считывает вещественное из строки начиная с позиции from и устанавливает from за считанным значением
</summary>
    </member>
    <member name="M:ReadWord(System.String,System.Int32@)">
      <summary> Считывает слово из строки начиная с позиции from и устанавливает from за считанным значением
</summary>
    </member>
    <member name="M:ToInteger(System.String)">
      <summary> Преобразует строку в целое
</summary>
    </member>
    <member name="M:ToBigInteger(System.String)">
      <summary> Преобразует строку в BigInteger
</summary>
    </member>
    <member name="M:ToReal(System.String)">
      <summary> Преобразует строку в вещественное
</summary>
    </member>
    <member name="M:ToWords(System.String,System.Char[])">
      <summary> Преобразует строку в массив слов
</summary>
    </member>
    <member name="M:ToIntegers(System.String)">
      <summary> Преобразует строку в массив целых
</summary>
    </member>
    <member name="M:ToReals(System.String)">
      <summary> Преобразует строку в массив вещественных
</summary>
    </member>
    <member name="M:Inverse(System.String)">
      <summary> Возвращает инверсию строки
</summary>
    </member>
    <member name="M:RegexReplace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary> Заменяет в указанной строке все вхождения регулярного выражения указанной строкой замены и возвращает преобразованную строку
</summary>
    </member>
    <member name="M:RegexReplace(System.String,System.String,System.Func{System.Text.RegularExpressions.Match,System.String},System.Text.RegularExpressions.RegexOptions)">
      <summary> Заменяет в указанной строке все вхождения регулярного выражения указанным преобразованием замены и возвращает преобразованную строку
</summary>
    </member>
    <member name="M:Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary> Ищет в указанной строке все вхождения регулярного выражения и возвращает их в виде последовательности элементов типа Match
</summary>
    </member>
    <member name="M:MatchValue(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary> Ищет в указанной строке первое вхождение регулярного выражения и возвращает его в виде строки
</summary>
    </member>
    <member name="M:MatchValues(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary> Ищет в указанной строке все вхождения регулярного выражения и возвращает их в виде последовательности строк
</summary>
    </member>
    <member name="M:IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary> Удовлетворяет ли строка регулярному выражению
</summary>
    </member>
    <member name="M:Remove(System.String,System.String[])">
      <summary> Удаляет в строке все вхождения указанных строк
</summary>
    </member>
    <member name="M:Right(System.String,System.Int32)">
      <summary> Возвращает подстроку, полученную вырезанием из строки length самых правых символов
</summary>
    </member>
    <member name="M:Left(System.String,System.Int32)">
      <summary> Возвращает подстроку, полученную вырезанием из строки length самых левых символов
</summary>
    </member>
    <member name="M:CreateSliceFromStringInternal(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:SliceStringImpl(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:Slice(System.String,System.Int32,System.Int32)">
      <summary> Возвращает срез строки от индекса from с шагом step
</summary>
    </member>
    <member name="M:Slice(System.String,System.Int32,System.Int32,System.Int32)">
      <summary> Возвращает срез строки от индекса from с шагом step длины не более count
</summary>
    </member>
    <member name="M:SystemSliceStringImpl(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:SystemSlice(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SystemSlice(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SystemSliceStringImplQuestion(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>-- 
</summary>
    </member>
    <member name="M:SystemSliceQuestion(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:SystemSliceQuestion(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>--
</summary>
    </member>
    <member name="M:Compose``3(System.Func{``1,``2},System.Func{``0,``1})">
      <summary> Суперпозиция функций
</summary>
    </member>
    <member name="M:Conjugate(System.Numerics.Complex)">
      <summary> Возвращает комплексно сопряженное значение
</summary>
    </member>
    <member name="M:Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary> Возвращает в словаре значение, связанное с указанным ключом, а если такого ключа нет, то значение по умолчанию
</summary>
    </member>
    <member name="M:*``3(System.Func{``1,``2},System.Func{``0,``1})">
      <summary>--
</summary>
    </member>
    <member name="M:+``3(System.Tuple{``0,``1},``2)">
      <summary>--
</summary>
    </member>
    <member name="M:+``4(System.Tuple{``0,``1,``2},``3)">
      <summary>--
</summary>
    </member>
    <member name="M:+``5(System.Tuple{``0,``1,``2,``3},``4)">
      <summary>--
</summary>
    </member>
    <member name="M:+``6(System.Tuple{``0,``1,``2,``3,``4},``5)">
      <summary>--
</summary>
    </member>
    <member name="M:+``7(System.Tuple{``0,``1,``2,``3,``4,``5},``6)">
      <summary>--
</summary>
    </member>
    <member name="M:=``2(System.Tuple{``0,``1},System.Tuple{``0,``1})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;&gt;``2(System.Tuple{``0,``1},System.Tuple{``0,``1})">
      <summary>--
</summary>
    </member>
    <member name="M:CompareToTup2``2(System.Tuple{``0,``1},System.Tuple{``0,``1})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;``2(System.Tuple{``0,``1},System.Tuple{``0,``1})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;=``2(System.Tuple{``0,``1},System.Tuple{``0,``1})">
      <summary>--
</summary>
    </member>
    <member name="M:&gt;``2(System.Tuple{``0,``1},System.Tuple{``0,``1})">
      <summary>--
</summary>
    </member>
    <member name="M:&gt;=``2(System.Tuple{``0,``1},System.Tuple{``0,``1})">
      <summary>--
</summary>
    </member>
    <member name="M:=``3(System.Tuple{``0,``1,``2},System.Tuple{``0,``1,``2})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;&gt;``3(System.Tuple{``0,``1,``2},System.Tuple{``0,``1,``2})">
      <summary>--
</summary>
    </member>
    <member name="M:CompareToTup3``3(System.Tuple{``0,``1,``2},System.Tuple{``0,``1,``2})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;``3(System.Tuple{``0,``1,``2},System.Tuple{``0,``1,``2})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;=``3(System.Tuple{``0,``1,``2},System.Tuple{``0,``1,``2})">
      <summary>--
</summary>
    </member>
    <member name="M:&gt;``3(System.Tuple{``0,``1,``2},System.Tuple{``0,``1,``2})">
      <summary>--
</summary>
    </member>
    <member name="M:&gt;=``3(System.Tuple{``0,``1,``2},System.Tuple{``0,``1,``2})">
      <summary>--
</summary>
    </member>
    <member name="M:=``4(System.Tuple{``0,``1,``2,``3},System.Tuple{``0,``1,``2,``3})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;&gt;``4(System.Tuple{``0,``1,``2,``3},System.Tuple{``0,``1,``2,``3})">
      <summary>--
</summary>
    </member>
    <member name="M:CompareToTup4``4(System.Tuple{``0,``1,``2,``3},System.Tuple{``0,``1,``2,``3})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;``4(System.Tuple{``0,``1,``2,``3},System.Tuple{``0,``1,``2,``3})">
      <summary>--
</summary>
    </member>
    <member name="M:&lt;=``4(System.Tuple{``0,``1,``2,``3},System.Tuple{``0,``1,``2,``3})">
      <summary>--
</summary>
    </member>
    <member name="M:&gt;``4(System.Tuple{``0,``1,``2,``3},System.Tuple{``0,``1,``2,``3})">
      <summary>--
</summary>
    </member>
    <member name="M:&gt;=``4(System.Tuple{``0,``1,``2,``3},System.Tuple{``0,``1,``2,``3})">
      <summary>--
</summary>
    </member>
  </members>
</doc>