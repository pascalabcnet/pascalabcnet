// <file>
//     <copyright see="prj:///doc/copyright.txt"/>
//     <license see="prj:///doc/license.txt"/>
//     <owner name="David SrbeckÃ½" email="dsrbecky@gmail.com"/>
//     <version>$Revision: 2201 $</version>
// </file>

// This file is automatically generated - any changes will be lost

#pragma warning disable 1591

namespace Debugger.Wrappers.CorDebug
{
	using System;
	
	
	public partial class ICorDebugFunction2
	{
		
		private Debugger.Interop.CorDebug.ICorDebugFunction2 wrappedObject;
		
		internal Debugger.Interop.CorDebug.ICorDebugFunction2 WrappedObject
		{
			get
			{
				return this.wrappedObject;
			}
		}
		
		public ICorDebugFunction2(Debugger.Interop.CorDebug.ICorDebugFunction2 wrappedObject)
		{
			this.wrappedObject = wrappedObject;
			ResourceManager.TrackCOMObject(wrappedObject, typeof(ICorDebugFunction2));
		}
		
		public static ICorDebugFunction2 Wrap(Debugger.Interop.CorDebug.ICorDebugFunction2 objectToWrap)
		{
			if ((objectToWrap != null))
			{
				return new ICorDebugFunction2(objectToWrap);
			} else
			{
				return null;
			}
		}
		
		~ICorDebugFunction2()
		{
			object o = wrappedObject;
			wrappedObject = null;
			ResourceManager.ReleaseCOMObject(o, typeof(ICorDebugFunction2));
		}
		
		public bool Is<T>() where T: class
		{
			System.Reflection.ConstructorInfo ctor = typeof(T).GetConstructors()[0];
			System.Type paramType = ctor.GetParameters()[0].ParameterType;
			return paramType.IsInstanceOfType(this.WrappedObject);
		}
		
		public T As<T>() where T: class
		{
			try {
				return CastTo<T>();
			} catch {
				return null;
			}
		}
		
		public T CastTo<T>() where T: class
		{
			return (T)Activator.CreateInstance(typeof(T), this.WrappedObject);
		}
		
		public static bool operator ==(ICorDebugFunction2 o1, ICorDebugFunction2 o2)
		{
			return ((object)o1 == null && (object)o2 == null) ||
			       ((object)o1 != null && (object)o2 != null && o1.WrappedObject == o2.WrappedObject);
		}
		
		public static bool operator !=(ICorDebugFunction2 o1, ICorDebugFunction2 o2)
		{
			return !(o1 == o2);
		}
		
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}
		
		public override bool Equals(object o)
		{
			ICorDebugFunction2 casted = o as ICorDebugFunction2;
			return (casted != null) && (casted.WrappedObject == wrappedObject);
		}
		
		
		public void SetJMCStatus(int bIsJustMyCode)
		{
			this.WrappedObject.SetJMCStatus(bIsJustMyCode);
		}
		
		public int JMCStatus
		{
			get
			{
				int pbIsJustMyCode;
				this.WrappedObject.GetJMCStatus(out pbIsJustMyCode);
				return pbIsJustMyCode;
			}
		}
		
		public ICorDebugCodeEnum EnumerateNativeCode()
		{
			ICorDebugCodeEnum ppCodeEnum;
			Debugger.Interop.CorDebug.ICorDebugCodeEnum out_ppCodeEnum;
			this.WrappedObject.EnumerateNativeCode(out out_ppCodeEnum);
			ppCodeEnum = ICorDebugCodeEnum.Wrap(out_ppCodeEnum);
			return ppCodeEnum;
		}
		
		public uint VersionNumber
		{
			get
			{
				uint pnVersion;
				this.WrappedObject.GetVersionNumber(out pnVersion);
				return pnVersion;
			}
		}
	}
}

#pragma warning restore 1591
