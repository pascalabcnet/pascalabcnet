// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-56159VE
// DateTime: 17.04.2025 14:49:56
// UserName: ????
// Input file <SPythonParser.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using SPythonParser;

namespace SPythonParserYacc
{
public enum Tokens {
    error=1,EOF=2,FOR=3,IN=4,WHILE=5,IF=6,
    ELSE=7,ELIF=8,DEF=9,RETURN=10,BREAK=11,CONTINUE=12,
    IMPORT=13,FROM=14,GLOBAL=15,AS=16,PASS=17,CLASS=18,
    LAMBDA=19,EXIT=20,NEW=21,IS=22,INDENT=23,UNINDENT=24,
    END_OF_FILE=25,END_OF_LINE=26,INTNUM=27,REALNUM=28,TRUE=29,FALSE=30,
    BIGINT=31,LPAR=32,RPAR=33,LBRACE=34,RBRACE=35,LBRACKET=36,
    RBRACKET=37,DOT=38,COMMA=39,COLON=40,SEMICOLON=41,ARROW=42,
    STRINGNUM=43,ASSIGN=44,PLUSEQUAL=45,MINUSEQUAL=46,STAREQUAL=47,DIVEQUAL=48,
    PLUS=49,MINUS=50,STAR=51,DIVIDE=52,SLASHSLASH=53,PERCENTAGE=54,
    ID=55,LESS=56,GREATER=57,LESSEQUAL=58,GREATEREQUAL=59,EQUAL=60,
    NOTEQUAL=61,AND=62,OR=63,NOT=64,STARSTAR=65};

public partial struct ValueType
{
	public expression ex;
	public ident id;
    public Object ob;
    public op_type_node op;
    public syntax_tree_node stn;
    public token_info ti;
    public type_definition td;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class SPythonGPPGParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SPythonParser.y
   	public syntax_tree_node root;
	public List<Error> errors;
    // public string current_file_name;
    // public int max_errors = 10;
	public SPythonParserTools parserTools;
    public List<compiler_directive> CompilerDirectives;
	public ParserLambdaHelper lambdaHelper = new ParserLambdaHelper();
	public bool is_unit_to_be_parsed = false;

	public SPythonGPPGParser(AbstractScanner<ValueType, LexLocation> scanner, SPythonParserTools parserTools,
	bool isUnitToBeParsed) : base(scanner) 
	{ 
		this.parserTools = parserTools;
		this.is_unit_to_be_parsed = isUnitToBeParsed;
	}
  // End verbatim content from SPythonParser.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[126];
  private static State[] states = new State[224];
  private static string[] nonTerms = new string[] {
      "ident", "dotted_ident", "func_name_ident", "expr", "proc_func_call", "const_value", 
      "variable", "optional_condition", "act_param", "new_expr", "is_expr", "act_param_list", 
      "optional_act_param_list", "proc_func_decl", "return_stmt", "break_stmt", 
      "continue_stmt", "global_stmt", "pass_stmt", "var_stmt", "assign_stmt", 
      "if_stmt", "stmt", "proc_func_call_stmt", "while_stmt", "for_stmt", "optional_else", 
      "optional_elif", "exit_stmt", "expr_list", "stmt_list", "block", "program", 
      "param_name", "form_param_sect", "form_param_list", "optional_form_param_list", 
      "dotted_ident_list", "ident_as_ident", "ident_as_ident_list", "proc_func_header", 
      "type_ref", "simple_type_identifier", "template_type", "import_clause", 
      "template_type_params", "template_param_list", "optional_semicolon", "end_of_line", 
      "assign_type", "$accept", };

  static SPythonGPPGParser() {
    states[0] = new State(new int[]{55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,6,131,5,151,3,156,10,163,11,166,12,168,15,170,17,179,20,181,9,188,13,207,14,215},new int[]{-33,1,-31,3,-23,222,-21,8,-7,9,-1,61,-5,127,-6,128,-20,129,-22,130,-24,149,-25,150,-26,155,-15,162,-16,165,-17,167,-18,169,-19,178,-29,180,-14,185,-41,186,-45,206});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{41,223,26,220,25,-125},new int[]{-48,4,-49,6});
    states[4] = new State(new int[]{25,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,6,131,5,151,3,156,10,163,11,166,12,168,15,170,17,179,20,181,9,188,13,207,14,215},new int[]{-23,7,-21,8,-7,9,-1,61,-5,127,-6,128,-20,129,-22,130,-24,149,-25,150,-26,155,-15,162,-16,165,-17,167,-18,169,-19,178,-29,180,-14,185,-41,186,-45,206});
    states[7] = new State(-4);
    states[8] = new State(-5);
    states[9] = new State(new int[]{44,10,32,51,38,110,36,112,40,119,45,123,46,124,47,125,48,126},new int[]{-50,117});
    states[10] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,11,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[11] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,41,-36,26,-36,25,-36});
    states[12] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,13,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[13] = new State(new int[]{7,14,6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44});
    states[14] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,15,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[15] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,41,-42,26,-42,25,-42,7,-42,39,-42,33,-42,3,-42,37,-42,40,-42});
    states[16] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,17,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[17] = new State(new int[]{6,12,49,-43,51,18,52,20,50,-43,56,-43,57,-43,58,-43,59,-43,60,-43,61,-43,62,-43,63,-43,53,40,54,42,65,44,41,-43,26,-43,25,-43,7,-43,39,-43,33,-43,3,-43,37,-43,40,-43});
    states[18] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,19,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[19] = new State(new int[]{6,12,49,-44,51,-44,52,-44,50,-44,56,-44,57,-44,58,-44,59,-44,60,-44,61,-44,62,-44,63,-44,53,-44,54,-44,65,44,41,-44,26,-44,25,-44,7,-44,39,-44,33,-44,3,-44,37,-44,40,-44});
    states[20] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,21,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[21] = new State(new int[]{6,12,49,-45,51,-45,52,-45,50,-45,56,-45,57,-45,58,-45,59,-45,60,-45,61,-45,62,-45,63,-45,53,-45,54,-45,65,44,41,-45,26,-45,25,-45,7,-45,39,-45,33,-45,3,-45,37,-45,40,-45});
    states[22] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,23,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[23] = new State(new int[]{6,12,49,-46,51,18,52,20,50,-46,56,-46,57,-46,58,-46,59,-46,60,-46,61,-46,62,-46,63,-46,53,40,54,42,65,44,41,-46,26,-46,25,-46,7,-46,39,-46,33,-46,3,-46,37,-46,40,-46});
    states[24] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,25,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[25] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,-47,57,-47,58,-47,59,-47,60,-47,61,-47,62,-47,63,-47,53,40,54,42,65,44,41,-47,26,-47,25,-47,7,-47,39,-47,33,-47,3,-47,37,-47,40,-47});
    states[26] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,27,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[27] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,-48,57,-48,58,-48,59,-48,60,-48,61,-48,62,-48,63,-48,53,40,54,42,65,44,41,-48,26,-48,25,-48,7,-48,39,-48,33,-48,3,-48,37,-48,40,-48});
    states[28] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,29,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[29] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,-49,57,-49,58,-49,59,-49,60,-49,61,-49,62,-49,63,-49,53,40,54,42,65,44,41,-49,26,-49,25,-49,7,-49,39,-49,33,-49,3,-49,37,-49,40,-49});
    states[30] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,31,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[31] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,-50,57,-50,58,-50,59,-50,60,-50,61,-50,62,-50,63,-50,53,40,54,42,65,44,41,-50,26,-50,25,-50,7,-50,39,-50,33,-50,3,-50,37,-50,40,-50});
    states[32] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,33,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[33] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,-51,57,-51,58,-51,59,-51,60,-51,61,-51,62,-51,63,-51,53,40,54,42,65,44,41,-51,26,-51,25,-51,7,-51,39,-51,33,-51,3,-51,37,-51,40,-51});
    states[34] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,35,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[35] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,-52,57,-52,58,-52,59,-52,60,-52,61,-52,62,-52,63,-52,53,40,54,42,65,44,41,-52,26,-52,25,-52,7,-52,39,-52,33,-52,3,-52,37,-52,40,-52});
    states[36] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,37,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[37] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,-53,63,-53,53,40,54,42,65,44,41,-53,26,-53,25,-53,7,-53,39,-53,33,-53,3,-53,37,-53,40,-53});
    states[38] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,39,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[39] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,-54,53,40,54,42,65,44,41,-54,26,-54,25,-54,7,-54,39,-54,33,-54,3,-54,37,-54,40,-54});
    states[40] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,41,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[41] = new State(new int[]{6,12,49,-55,51,-55,52,-55,50,-55,56,-55,57,-55,58,-55,59,-55,60,-55,61,-55,62,-55,63,-55,53,-55,54,-55,65,44,41,-55,26,-55,25,-55,7,-55,39,-55,33,-55,3,-55,37,-55,40,-55});
    states[42] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,43,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[43] = new State(new int[]{6,12,49,-56,51,-56,52,-56,50,-56,56,-56,57,-56,58,-56,59,-56,60,-56,61,-56,62,-56,63,-56,53,-56,54,-56,65,44,41,-56,26,-56,25,-56,7,-56,39,-56,33,-56,3,-56,37,-56,40,-56});
    states[44] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,45,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[45] = new State(new int[]{6,12,49,-57,51,-57,52,-57,50,-57,56,-57,57,-57,58,-57,59,-57,60,-57,61,-57,62,-57,63,-57,53,-57,54,-57,65,44,41,-57,26,-57,25,-57,7,-57,39,-57,33,-57,3,-57,37,-57,40,-57});
    states[46] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,47,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[47] = new State(new int[]{6,12,49,-58,51,18,52,20,50,-58,56,-58,57,-58,58,-58,59,-58,60,-58,61,-58,62,-58,63,-58,53,40,54,42,65,44,41,-58,26,-58,25,-58,7,-58,39,-58,33,-58,3,-58,37,-58,40,-58});
    states[48] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,49,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[49] = new State(new int[]{6,12,49,-59,51,-59,52,-59,50,-59,56,-59,57,-59,58,-59,59,-59,60,-59,61,-59,62,-59,63,-59,53,-59,54,-59,65,44,41,-59,26,-59,25,-59,7,-59,39,-59,33,-59,3,-59,37,-59,40,-59});
    states[50] = new State(new int[]{32,51,38,110,36,112,22,115,6,-60,49,-60,51,-60,52,-60,50,-60,56,-60,57,-60,58,-60,59,-60,60,-60,61,-60,62,-60,63,-60,53,-60,54,-60,65,-60,41,-60,26,-60,25,-60,7,-60,39,-60,33,-60,3,-60,37,-60,40,-60});
    states[51] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86,33,-121},new int[]{-13,52,-12,54,-9,84,-4,57,-7,50,-1,58,-5,63,-6,64,-10,78,-11,85});
    states[52] = new State(new int[]{33,53});
    states[53] = new State(-101);
    states[54] = new State(new int[]{39,55,33,-120});
    states[55] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-9,56,-4,57,-7,50,-1,58,-5,63,-6,64,-10,78,-11,85});
    states[56] = new State(-119);
    states[57] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,39,-116,33,-116});
    states[58] = new State(new int[]{44,59,32,-88,38,-88,36,-88,22,-88,6,-88,49,-88,51,-88,52,-88,50,-88,56,-88,57,-88,58,-88,59,-88,60,-88,61,-88,62,-88,63,-88,53,-88,54,-88,65,-88,39,-88,33,-88});
    states[59] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,60,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[60] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,39,-117,33,-117});
    states[61] = new State(-88);
    states[62] = new State(-25);
    states[63] = new State(-89);
    states[64] = new State(new int[]{38,65,6,-61,49,-61,51,-61,52,-61,50,-61,56,-61,57,-61,58,-61,59,-61,60,-61,61,-61,62,-61,63,-61,53,-61,54,-61,65,-61,41,-61,26,-61,25,-61,7,-61,39,-61,33,-61,3,-61,37,-61,40,-61});
    states[65] = new State(new int[]{55,62},new int[]{-1,66});
    states[66] = new State(-91);
    states[67] = new State(-67);
    states[68] = new State(-68);
    states[69] = new State(-69);
    states[70] = new State(-70);
    states[71] = new State(-71);
    states[72] = new State(-72);
    states[73] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-30,74,-4,101,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[74] = new State(new int[]{37,75,39,76});
    states[75] = new State(-92);
    states[76] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,77,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[77] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,37,-74,39,-74});
    states[78] = new State(-62);
    states[79] = new State(new int[]{55,62},new int[]{-42,80,-43,89,-1,98,-44,99});
    states[80] = new State(new int[]{32,81});
    states[81] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86,33,-121},new int[]{-13,82,-12,54,-9,84,-4,57,-7,50,-1,58,-5,63,-6,64,-10,78,-11,85});
    states[82] = new State(new int[]{33,83});
    states[83] = new State(-66);
    states[84] = new State(-118);
    states[85] = new State(-63);
    states[86] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,87,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[87] = new State(new int[]{33,88,6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44});
    states[88] = new State(-64);
    states[89] = new State(new int[]{38,90,36,93,32,-104,37,-104,39,-104,6,-104,49,-104,51,-104,52,-104,50,-104,56,-104,57,-104,58,-104,59,-104,60,-104,61,-104,62,-104,63,-104,53,-104,54,-104,65,-104,41,-104,26,-104,25,-104,7,-104,33,-104,3,-104,40,-104,44,-104},new int[]{-46,92});
    states[90] = new State(new int[]{55,62},new int[]{-1,91});
    states[91] = new State(-103);
    states[92] = new State(-106);
    states[93] = new State(new int[]{55,62},new int[]{-47,94,-42,100,-43,89,-1,98,-44,99});
    states[94] = new State(new int[]{37,95,39,96});
    states[95] = new State(-107);
    states[96] = new State(new int[]{55,62},new int[]{-42,97,-43,89,-1,98,-44,99});
    states[97] = new State(-109);
    states[98] = new State(-102);
    states[99] = new State(-105);
    states[100] = new State(-108);
    states[101] = new State(new int[]{3,102,6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,37,-73,39,-73});
    states[102] = new State(new int[]{55,62},new int[]{-1,103});
    states[103] = new State(new int[]{4,104});
    states[104] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,105,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[105] = new State(new int[]{6,108,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,37,-95},new int[]{-8,106});
    states[106] = new State(new int[]{37,107});
    states[107] = new State(-94);
    states[108] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,109,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[109] = new State(new int[]{7,14,6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,37,-96});
    states[110] = new State(new int[]{55,62},new int[]{-1,111});
    states[111] = new State(-90);
    states[112] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,113,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[113] = new State(new int[]{37,114,6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44});
    states[114] = new State(-93);
    states[115] = new State(new int[]{55,62},new int[]{-42,116,-43,89,-1,98,-44,99});
    states[116] = new State(-65);
    states[117] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,118,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[118] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,41,-37,26,-37,25,-37});
    states[119] = new State(new int[]{55,62},new int[]{-42,120,-43,89,-1,98,-44,99});
    states[120] = new State(new int[]{44,121,41,-34,26,-34,25,-34});
    states[121] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,122,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[122] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,41,-35,26,-35,25,-35});
    states[123] = new State(-38);
    states[124] = new State(-39);
    states[125] = new State(-40);
    states[126] = new State(-41);
    states[127] = new State(new int[]{44,-89,32,-89,38,-89,36,-89,40,-89,45,-89,46,-89,47,-89,48,-89,41,-87,26,-87,25,-87});
    states[128] = new State(new int[]{38,65});
    states[129] = new State(-6);
    states[130] = new State(-7);
    states[131] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,132,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[132] = new State(new int[]{40,133,6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44});
    states[133] = new State(new int[]{23,145},new int[]{-32,134});
    states[134] = new State(new int[]{8,136,7,142,41,-79,26,-79,25,-79},new int[]{-28,135,-27,141});
    states[135] = new State(-75);
    states[136] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,137,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[137] = new State(new int[]{40,138,6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44});
    states[138] = new State(new int[]{23,145},new int[]{-32,139});
    states[139] = new State(new int[]{8,136,7,142,41,-79,26,-79,25,-79},new int[]{-28,140,-27,141});
    states[140] = new State(-76);
    states[141] = new State(-77);
    states[142] = new State(new int[]{40,143});
    states[143] = new State(new int[]{23,145},new int[]{-32,144});
    states[144] = new State(-78);
    states[145] = new State(new int[]{55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,6,131,5,151,3,156,10,163,11,166,12,168,15,170,17,179,20,181,9,188,13,207,14,215},new int[]{-31,146,-23,222,-21,8,-7,9,-1,61,-5,127,-6,128,-20,129,-22,130,-24,149,-25,150,-26,155,-15,162,-16,165,-17,167,-18,169,-19,178,-29,180,-14,185,-41,186,-45,206});
    states[146] = new State(new int[]{26,220,41,221},new int[]{-49,147});
    states[147] = new State(new int[]{24,148,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,6,131,5,151,3,156,10,163,11,166,12,168,15,170,17,179,20,181,9,188,13,207,14,215},new int[]{-23,7,-21,8,-7,9,-1,61,-5,127,-6,128,-20,129,-22,130,-24,149,-25,150,-26,155,-15,162,-16,165,-17,167,-18,169,-19,178,-29,180,-14,185,-41,186,-45,206});
    states[148] = new State(-97);
    states[149] = new State(-8);
    states[150] = new State(-9);
    states[151] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,152,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[152] = new State(new int[]{40,153,6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44});
    states[153] = new State(new int[]{23,145},new int[]{-32,154});
    states[154] = new State(-80);
    states[155] = new State(-10);
    states[156] = new State(new int[]{55,62},new int[]{-1,157});
    states[157] = new State(new int[]{4,158});
    states[158] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86},new int[]{-4,159,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[159] = new State(new int[]{40,160,6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44});
    states[160] = new State(new int[]{23,145},new int[]{-32,161});
    states[161] = new State(-81);
    states[162] = new State(-11);
    states[163] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86,41,-84,26,-84,25,-84},new int[]{-4,164,-7,50,-1,61,-5,63,-6,64,-10,78,-11,85});
    states[164] = new State(new int[]{6,12,49,16,51,18,52,20,50,22,56,24,57,26,58,28,59,30,60,32,61,34,62,36,63,38,53,40,54,42,65,44,41,-83,26,-83,25,-83});
    states[165] = new State(-12);
    states[166] = new State(-85);
    states[167] = new State(-13);
    states[168] = new State(-86);
    states[169] = new State(-14);
    states[170] = new State(new int[]{55,62},new int[]{-38,171,-2,177,-1,176});
    states[171] = new State(new int[]{39,172,41,-24,26,-24,25,-24});
    states[172] = new State(new int[]{55,62},new int[]{-2,173,-1,176});
    states[173] = new State(new int[]{38,174,39,-29,41,-29,26,-29,25,-29});
    states[174] = new State(new int[]{55,62},new int[]{-1,175});
    states[175] = new State(-27);
    states[176] = new State(-26);
    states[177] = new State(new int[]{38,174,39,-28,41,-28,26,-28,25,-28});
    states[178] = new State(-15);
    states[179] = new State(-22);
    states[180] = new State(-16);
    states[181] = new State(new int[]{32,182});
    states[182] = new State(new int[]{50,46,64,48,55,62,27,67,28,68,29,69,30,70,43,71,31,72,36,73,21,79,32,86,33,-121},new int[]{-13,183,-12,54,-9,84,-4,57,-7,50,-1,58,-5,63,-6,64,-10,78,-11,85});
    states[183] = new State(new int[]{33,184});
    states[184] = new State(-23);
    states[185] = new State(-17);
    states[186] = new State(new int[]{23,145},new int[]{-32,187});
    states[187] = new State(-98);
    states[188] = new State(new int[]{55,62},new int[]{-3,189,-1,205});
    states[189] = new State(new int[]{32,190});
    states[190] = new State(new int[]{55,62,33,-115},new int[]{-37,191,-36,197,-35,204,-34,200,-1,203});
    states[191] = new State(new int[]{33,192});
    states[192] = new State(new int[]{40,193,42,194});
    states[193] = new State(-99);
    states[194] = new State(new int[]{55,62},new int[]{-42,195,-43,89,-1,98,-44,99});
    states[195] = new State(new int[]{40,196});
    states[196] = new State(-100);
    states[197] = new State(new int[]{39,198,33,-114});
    states[198] = new State(new int[]{55,62},new int[]{-35,199,-34,200,-1,203});
    states[199] = new State(-113);
    states[200] = new State(new int[]{40,201});
    states[201] = new State(new int[]{55,62},new int[]{-42,202,-43,89,-1,98,-44,99});
    states[202] = new State(-111);
    states[203] = new State(-110);
    states[204] = new State(-112);
    states[205] = new State(-82);
    states[206] = new State(-18);
    states[207] = new State(new int[]{55,62},new int[]{-40,208,-39,214,-1,211});
    states[208] = new State(new int[]{39,209,41,-19,26,-19,25,-19});
    states[209] = new State(new int[]{55,62},new int[]{-39,210,-1,211});
    states[210] = new State(-33);
    states[211] = new State(new int[]{16,212,39,-31,41,-31,26,-31,25,-31});
    states[212] = new State(new int[]{55,62},new int[]{-1,213});
    states[213] = new State(-30);
    states[214] = new State(-32);
    states[215] = new State(new int[]{55,62},new int[]{-1,216});
    states[216] = new State(new int[]{13,217});
    states[217] = new State(new int[]{51,219,55,62},new int[]{-40,218,-39,214,-1,211});
    states[218] = new State(new int[]{39,209,41,-20,26,-20,25,-20});
    states[219] = new State(-21);
    states[220] = new State(-122);
    states[221] = new State(-123);
    states[222] = new State(-3);
    states[223] = new State(new int[]{25,-124,55,-123,27,-123,28,-123,29,-123,30,-123,43,-123,31,-123,36,-123,6,-123,5,-123,3,-123,10,-123,11,-123,12,-123,15,-123,17,-123,20,-123,9,-123,13,-123,14,-123});

    rules[1] = new Rule(-51, new int[]{-33,2});
    rules[2] = new Rule(-33, new int[]{-31,-48,25});
    rules[3] = new Rule(-31, new int[]{-23});
    rules[4] = new Rule(-31, new int[]{-31,-49,-23});
    rules[5] = new Rule(-23, new int[]{-21});
    rules[6] = new Rule(-23, new int[]{-20});
    rules[7] = new Rule(-23, new int[]{-22});
    rules[8] = new Rule(-23, new int[]{-24});
    rules[9] = new Rule(-23, new int[]{-25});
    rules[10] = new Rule(-23, new int[]{-26});
    rules[11] = new Rule(-23, new int[]{-15});
    rules[12] = new Rule(-23, new int[]{-16});
    rules[13] = new Rule(-23, new int[]{-17});
    rules[14] = new Rule(-23, new int[]{-18});
    rules[15] = new Rule(-23, new int[]{-19});
    rules[16] = new Rule(-23, new int[]{-29});
    rules[17] = new Rule(-23, new int[]{-14});
    rules[18] = new Rule(-23, new int[]{-45});
    rules[19] = new Rule(-45, new int[]{13,-40});
    rules[20] = new Rule(-45, new int[]{14,-1,13,-40});
    rules[21] = new Rule(-45, new int[]{14,-1,13,51});
    rules[22] = new Rule(-19, new int[]{17});
    rules[23] = new Rule(-29, new int[]{20,32,-13,33});
    rules[24] = new Rule(-18, new int[]{15,-38});
    rules[25] = new Rule(-1, new int[]{55});
    rules[26] = new Rule(-2, new int[]{-1});
    rules[27] = new Rule(-2, new int[]{-2,38,-1});
    rules[28] = new Rule(-38, new int[]{-2});
    rules[29] = new Rule(-38, new int[]{-38,39,-2});
    rules[30] = new Rule(-39, new int[]{-1,16,-1});
    rules[31] = new Rule(-39, new int[]{-1});
    rules[32] = new Rule(-40, new int[]{-39});
    rules[33] = new Rule(-40, new int[]{-40,39,-39});
    rules[34] = new Rule(-20, new int[]{-7,40,-42});
    rules[35] = new Rule(-20, new int[]{-7,40,-42,44,-4});
    rules[36] = new Rule(-21, new int[]{-7,44,-4});
    rules[37] = new Rule(-21, new int[]{-7,-50,-4});
    rules[38] = new Rule(-50, new int[]{45});
    rules[39] = new Rule(-50, new int[]{46});
    rules[40] = new Rule(-50, new int[]{47});
    rules[41] = new Rule(-50, new int[]{48});
    rules[42] = new Rule(-4, new int[]{-4,6,-4,7,-4});
    rules[43] = new Rule(-4, new int[]{-4,49,-4});
    rules[44] = new Rule(-4, new int[]{-4,51,-4});
    rules[45] = new Rule(-4, new int[]{-4,52,-4});
    rules[46] = new Rule(-4, new int[]{-4,50,-4});
    rules[47] = new Rule(-4, new int[]{-4,56,-4});
    rules[48] = new Rule(-4, new int[]{-4,57,-4});
    rules[49] = new Rule(-4, new int[]{-4,58,-4});
    rules[50] = new Rule(-4, new int[]{-4,59,-4});
    rules[51] = new Rule(-4, new int[]{-4,60,-4});
    rules[52] = new Rule(-4, new int[]{-4,61,-4});
    rules[53] = new Rule(-4, new int[]{-4,62,-4});
    rules[54] = new Rule(-4, new int[]{-4,63,-4});
    rules[55] = new Rule(-4, new int[]{-4,53,-4});
    rules[56] = new Rule(-4, new int[]{-4,54,-4});
    rules[57] = new Rule(-4, new int[]{-4,65,-4});
    rules[58] = new Rule(-4, new int[]{50,-4});
    rules[59] = new Rule(-4, new int[]{64,-4});
    rules[60] = new Rule(-4, new int[]{-7});
    rules[61] = new Rule(-4, new int[]{-6});
    rules[62] = new Rule(-4, new int[]{-10});
    rules[63] = new Rule(-4, new int[]{-11});
    rules[64] = new Rule(-4, new int[]{32,-4,33});
    rules[65] = new Rule(-11, new int[]{-7,22,-42});
    rules[66] = new Rule(-10, new int[]{21,-42,32,-13,33});
    rules[67] = new Rule(-6, new int[]{27});
    rules[68] = new Rule(-6, new int[]{28});
    rules[69] = new Rule(-6, new int[]{29});
    rules[70] = new Rule(-6, new int[]{30});
    rules[71] = new Rule(-6, new int[]{43});
    rules[72] = new Rule(-6, new int[]{31});
    rules[73] = new Rule(-30, new int[]{-4});
    rules[74] = new Rule(-30, new int[]{-30,39,-4});
    rules[75] = new Rule(-22, new int[]{6,-4,40,-32,-28});
    rules[76] = new Rule(-28, new int[]{8,-4,40,-32,-28});
    rules[77] = new Rule(-28, new int[]{-27});
    rules[78] = new Rule(-27, new int[]{7,40,-32});
    rules[79] = new Rule(-27, new int[]{});
    rules[80] = new Rule(-25, new int[]{5,-4,40,-32});
    rules[81] = new Rule(-26, new int[]{3,-1,4,-4,40,-32});
    rules[82] = new Rule(-3, new int[]{-1});
    rules[83] = new Rule(-15, new int[]{10,-4});
    rules[84] = new Rule(-15, new int[]{10});
    rules[85] = new Rule(-16, new int[]{11});
    rules[86] = new Rule(-17, new int[]{12});
    rules[87] = new Rule(-24, new int[]{-5});
    rules[88] = new Rule(-7, new int[]{-1});
    rules[89] = new Rule(-7, new int[]{-5});
    rules[90] = new Rule(-7, new int[]{-7,38,-1});
    rules[91] = new Rule(-7, new int[]{-6,38,-1});
    rules[92] = new Rule(-7, new int[]{36,-30,37});
    rules[93] = new Rule(-7, new int[]{-7,36,-4,37});
    rules[94] = new Rule(-7, new int[]{36,-4,3,-1,4,-4,-8,37});
    rules[95] = new Rule(-8, new int[]{});
    rules[96] = new Rule(-8, new int[]{6,-4});
    rules[97] = new Rule(-32, new int[]{23,-31,-49,24});
    rules[98] = new Rule(-14, new int[]{-41,-32});
    rules[99] = new Rule(-41, new int[]{9,-3,32,-37,33,40});
    rules[100] = new Rule(-41, new int[]{9,-3,32,-37,33,42,-42,40});
    rules[101] = new Rule(-5, new int[]{-7,32,-13,33});
    rules[102] = new Rule(-43, new int[]{-1});
    rules[103] = new Rule(-43, new int[]{-43,38,-1});
    rules[104] = new Rule(-42, new int[]{-43});
    rules[105] = new Rule(-42, new int[]{-44});
    rules[106] = new Rule(-44, new int[]{-43,-46});
    rules[107] = new Rule(-46, new int[]{36,-47,37});
    rules[108] = new Rule(-47, new int[]{-42});
    rules[109] = new Rule(-47, new int[]{-47,39,-42});
    rules[110] = new Rule(-34, new int[]{-1});
    rules[111] = new Rule(-35, new int[]{-34,40,-42});
    rules[112] = new Rule(-36, new int[]{-35});
    rules[113] = new Rule(-36, new int[]{-36,39,-35});
    rules[114] = new Rule(-37, new int[]{-36});
    rules[115] = new Rule(-37, new int[]{});
    rules[116] = new Rule(-9, new int[]{-4});
    rules[117] = new Rule(-9, new int[]{-1,44,-4});
    rules[118] = new Rule(-12, new int[]{-9});
    rules[119] = new Rule(-12, new int[]{-12,39,-9});
    rules[120] = new Rule(-13, new int[]{-12});
    rules[121] = new Rule(-13, new int[]{});
    rules[122] = new Rule(-49, new int[]{26});
    rules[123] = new Rule(-49, new int[]{41});
    rules[124] = new Rule(-48, new int[]{41});
    rules[125] = new Rule(-48, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> stmt_list, optional_semicolon, END_OF_FILE
{
			// main program
			if (!is_unit_to_be_parsed) {
				var stl = ValueStack[ValueStack.Depth-3].stn as statement_list;
				stl.left_logical_bracket = new token_info("");
				stl.right_logical_bracket = new token_info("");
				var bl = new block(new declarations(), stl, CurrentLocationSpan);
				root = CurrentSemanticValue.stn = NewProgramModule(null, null, new uses_list(), bl, ValueStack[ValueStack.Depth-2].ob, CurrentLocationSpan);
				root.source_context = bl.source_context;
			}
			// unit
			else {
				var interface_part = new interface_node(new declarations(), new uses_list(), null, null);
				var initialization_part = new initfinal_part(null, ValueStack[ValueStack.Depth-3].stn as statement_list, null, null, null, CurrentLocationSpan);

				root = CurrentSemanticValue.stn = new unit_module(
					new unit_name(new ident(Path.GetFileNameWithoutExtension(parserTools.currentFileName)),
					UnitHeaderKeyword.Unit, CurrentLocationSpan), interface_part, null,
					initialization_part.initialization_sect,
					initialization_part.finalization_sect, null, CurrentLocationSpan);
			}

		}
        break;
      case 3: // stmt_list -> stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 4: // stmt_list -> stmt_list, end_of_line, stmt
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 5: // stmt -> assign_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 6: // stmt -> var_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 7: // stmt -> if_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 8: // stmt -> proc_func_call_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 9: // stmt -> while_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 10: // stmt -> for_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 11: // stmt -> return_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 12: // stmt -> break_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 13: // stmt -> continue_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 14: // stmt -> global_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 15: // stmt -> pass_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 16: // stmt -> exit_stmt
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 17: // stmt -> proc_func_decl
{
			CurrentSemanticValue.stn = new declarations_as_statement(new declarations(ValueStack[ValueStack.Depth-1].stn as procedure_definition, CurrentLocationSpan), CurrentLocationSpan);
		}
        break;
      case 18: // stmt -> import_clause
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 19: // import_clause -> IMPORT, ident_as_ident_list
{
			CurrentSemanticValue.stn = new import_statement(ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
		}
        break;
      case 20: // import_clause -> FROM, ident, IMPORT, ident_as_ident_list
{
			CurrentSemanticValue.stn = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, false, ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
		}
        break;
      case 21: // import_clause -> FROM, ident, IMPORT, STAR
{
			CurrentSemanticValue.stn = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, true, null, CurrentLocationSpan);
		}
        break;
      case 22: // pass_stmt -> PASS
{
			CurrentSemanticValue.stn = new empty_statement();
		}
        break;
      case 23: // exit_stmt -> EXIT, LPAR, optional_act_param_list, RPAR
{
			parserTools.AddErrorFromResource("UNSUPPORTED_CONSTRUCTION_{0}", CurrentLocationSpan, "exit");
		}
        break;
      case 24: // global_stmt -> GLOBAL, dotted_ident_list
{
			CurrentSemanticValue.stn = new global_statement(ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan);
		}
        break;
      case 25: // ident -> ID
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 26: // dotted_ident -> ident
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 27: // dotted_ident -> dotted_ident, DOT, ident
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-3].id.name + "." + ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan); 
		}
        break;
      case 28: // dotted_ident_list -> dotted_ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 29: // dotted_ident_list -> dotted_ident_list, COMMA, dotted_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 30: // ident_as_ident -> ident, AS, ident
{ 
			CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 31: // ident_as_ident -> ident
{ 
			CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-1].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 32: // ident_as_ident_list -> ident_as_ident
{
			CurrentSemanticValue.stn = new as_statement_list(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 33: // ident_as_ident_list -> ident_as_ident_list, COMMA, ident_as_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as as_statement_list).Add(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 34: // var_stmt -> variable, COLON, type_ref
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-3].ex as ident, LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 35: // var_stmt -> variable, COLON, type_ref, ASSIGN, expr
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-5].ex as ident, LocationStack[LocationStack.Depth-5]), ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 36: // assign_stmt -> variable, ASSIGN, expr
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO", CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 37: // assign_stmt -> variable, assign_type, expr
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO", CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 38: // assign_type -> PLUSEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 39: // assign_type -> MINUSEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 40: // assign_type -> STAREQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 41: // assign_type -> DIVEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 42: // expr -> expr, IF, expr, ELSE, expr
{
			CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 43: // expr -> expr, PLUS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 44: // expr -> expr, STAR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 45: // expr -> expr, DIVIDE, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 46: // expr -> expr, MINUS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 47: // expr -> expr, LESS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 48: // expr -> expr, GREATER, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 49: // expr -> expr, LESSEQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 50: // expr -> expr, GREATEREQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 51: // expr -> expr, EQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 52: // expr -> expr, NOTEQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 53: // expr -> expr, AND, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 54: // expr -> expr, OR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 55: // expr -> expr, SLASHSLASH, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 56: // expr -> expr, PERCENTAGE, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 57: // expr -> expr, STARSTAR, expr
{
			addressed_value method_name = new ident("!pow", CurrentLocationSpan);
			expression_list el = new expression_list(new List<expression> { ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex }, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(method_name, el, CurrentLocationSpan);
		}
        break;
      case 58: // expr -> MINUS, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 59: // expr -> NOT, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 60: // expr -> variable
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 61: // expr -> const_value
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 62: // expr -> new_expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 63: // expr -> is_expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 64: // expr -> LPAR, expr, RPAR
{ 
			CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 65: // is_expr -> variable, IS, type_ref
{
			CurrentSemanticValue.ex = parserTools.NewAsIsExpr(ValueStack[ValueStack.Depth-3].ex, op_typecast.is_op, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 66: // new_expr -> NEW, type_ref, LPAR, optional_act_param_list, RPAR
{
			CurrentSemanticValue.ex = new new_expr(ValueStack[ValueStack.Depth-4].td, ValueStack[ValueStack.Depth-2].stn as expression_list, false, null, CurrentLocationSpan);
		}
        break;
      case 67: // const_value -> INTNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 68: // const_value -> REALNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 69: // const_value -> TRUE
{ 
			CurrentSemanticValue.ex = new ident("true", CurrentLocationSpan); 
		}
        break;
      case 70: // const_value -> FALSE
{ 
			CurrentSemanticValue.ex = new ident("false", CurrentLocationSpan); 
		}
        break;
      case 71: // const_value -> STRINGNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; 
		}
        break;
      case 72: // const_value -> BIGINT
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 73: // expr_list -> expr
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 74: // expr_list -> expr_list, COMMA, expr
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 75: // if_stmt -> IF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 76: // optional_elif -> ELIF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 77: // optional_elif -> optional_else
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 78: // optional_else -> ELSE, COLON, block
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 79: // optional_else -> /* empty */
{ 
			CurrentSemanticValue.stn = null; 
		}
        break;
      case 80: // while_stmt -> WHILE, expr, COLON, block
{
			CurrentSemanticValue.stn = new while_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, WhileCycleType.While, CurrentLocationSpan);
		}
        break;
      case 81: // for_stmt -> FOR, ident, IN, expr, COLON, block
{
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-5].id, new no_type_foreach(), ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan);
		}
        break;
      case 82: // func_name_ident -> ident
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 83: // return_stmt -> RETURN, expr
{
			CurrentSemanticValue.stn = new return_statement(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 84: // return_stmt -> RETURN
{
			CurrentSemanticValue.stn = new return_statement(null, CurrentLocationSpan);
		}
        break;
      case 85: // break_stmt -> BREAK
{
			CurrentSemanticValue.stn = new procedure_call(new ident("break", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 86: // continue_stmt -> CONTINUE
{
			CurrentSemanticValue.stn = new procedure_call(new ident("continue", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 87: // proc_func_call_stmt -> proc_func_call
{
			CurrentSemanticValue.stn = new procedure_call(ValueStack[ValueStack.Depth-1].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex is ident, CurrentLocationSpan);
		}
        break;
      case 88: // variable -> ident
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 89: // variable -> proc_func_call
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 90: // variable -> variable, DOT, ident
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 91: // variable -> const_value, DOT, ident
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 92: // variable -> LBRACKET, expr_list, RBRACKET
{
			var acn = new array_const_new(ValueStack[ValueStack.Depth-2].stn as expression_list, '|', CurrentLocationSpan);
			var dn = new dot_node(acn as addressed_value, (new ident("ToList", CurrentLocationSpan)) as addressed_value, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, CurrentLocationSpan);
		}
        break;
      case 93: // variable -> variable, LBRACKET, expr, RBRACKET
{
			var el = new expression_list(ValueStack[ValueStack.Depth-2].ex as expression, CurrentLocationSpan);
			CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-4].ex as addressed_value, el, CurrentLocationSpan);
		}
        break;
      case 94: // variable -> LBRACKET, expr, FOR, ident, IN, expr, optional_condition, RBRACKET
{
			CurrentSemanticValue.ex = new list_generator(ValueStack[ValueStack.Depth-7].ex, ValueStack[ValueStack.Depth-5].id, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan);
		}
        break;
      case 95: // optional_condition -> /* empty */
{ 
			CurrentSemanticValue.ex = null; 
		}
        break;
      case 96: // optional_condition -> IF, expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 97: // block -> INDENT, stmt_list, end_of_line, UNINDENT
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn as statement_list;
			(CurrentSemanticValue.stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-4].ti;
			(CurrentSemanticValue.stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
			CurrentSemanticValue.stn.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-2]);
		}
        break;
      case 98: // proc_func_decl -> proc_func_header, block
{
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, new block(null, ValueStack[ValueStack.Depth-1].stn as statement_list, LocationStack[LocationStack.Depth-1]), CurrentLocationSpan);
		}
        break;
      case 99: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
               //                     COLON
{
			CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>()), new method_name(null,null, ValueStack[ValueStack.Depth-5].id, null, LocationStack[LocationStack.Depth-5]), null, CurrentLocationSpan);
		}
        break;
      case 100: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
                //                     ARROW, type_ref, COLON
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-5].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>()), new method_name(null,null, ValueStack[ValueStack.Depth-7].id, null, LocationStack[LocationStack.Depth-7]), null, ValueStack[ValueStack.Depth-2].td as type_definition, CurrentLocationSpan);
		}
        break;
      case 101: // proc_func_call -> variable, LPAR, optional_act_param_list, RPAR
{
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value, ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 102: // simple_type_identifier -> ident
{
			CurrentSemanticValue.td = new named_type_reference(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 103: // simple_type_identifier -> simple_type_identifier, DOT, ident
{ 
			CurrentSemanticValue.td = (ValueStack[ValueStack.Depth-3].td as named_type_reference).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 104: // type_ref -> simple_type_identifier
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td as named_type_reference;
		}
        break;
      case 105: // type_ref -> template_type
{ 
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; 
		}
        break;
      case 106: // template_type -> simple_type_identifier, template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference(ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan); 
		}
        break;
      case 107: // template_type_params -> LBRACKET, template_param_list, RBRACKET
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 108: // template_param_list -> type_ref
{ 
			CurrentSemanticValue.stn = new template_param_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 109: // template_param_list -> template_param_list, COMMA, type_ref
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as template_param_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 110: // param_name -> ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 111: // form_param_sect -> param_name, COLON, type_ref
{
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan);
		}
        break;
      case 112: // form_param_list -> form_param_sect
{
			CurrentSemanticValue.stn = new formal_parameters(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 113: // form_param_list -> form_param_list, COMMA, form_param_sect
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 114: // optional_form_param_list -> form_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 115: // optional_form_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 116: // act_param -> expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 117: // act_param -> ident, ASSIGN, expr
{ 
			CurrentSemanticValue.ex = new name_assign_expr(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 118: // act_param_list -> act_param
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 119: // act_param_list -> act_param_list, COMMA, act_param
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 120: // optional_act_param_list -> act_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 121: // optional_act_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 122: // end_of_line -> END_OF_LINE
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 123: // end_of_line -> SEMICOLON
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 124: // optional_semicolon -> SEMICOLON
{ 
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; 
		}
        break;
      case 125: // optional_semicolon -> /* empty */
{ 
			CurrentSemanticValue.ob = null; 
		}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


        public program_module NewProgramModule(program_name progName, Object optHeadCompDirs, uses_list mainUsesClose, syntax_tree_node progBlock, Object optPoint, LexLocation loc)
        {
            var progModule = new program_module(progName, mainUsesClose, progBlock as block, null, loc);
            progModule.Language = "SPython";
            if (optPoint == null && progBlock != null)
            {
                var fp = progBlock.source_context.end_position;
                var err_stn = progBlock;
			    if ((progBlock is block) && (progBlock as block).program_code != null && (progBlock as block).program_code.subnodes != null && (progBlock as block).program_code.subnodes.Count > 0)
                    err_stn = (progBlock as block).program_code.subnodes[(progBlock as block).program_code.subnodes.Count - 1];
                //parserTools.errors.Add(new SPythonUnexpectedToken(parserTools.currentFileName, StringResources.Get("TKPOINT"), new SourceContext(fp.line_num, fp.column_num + 1, fp.line_num, fp.column_num + 1, 0, 0), err_stn));
            }
            return progModule;
        }
}
}
