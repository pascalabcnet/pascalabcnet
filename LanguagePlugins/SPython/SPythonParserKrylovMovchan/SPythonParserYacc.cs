// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-56159VE
// DateTime: 17.04.2025 18:49:26
// UserName: ????
// Input file <SPythonParser.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using SPythonParser;

namespace SPythonParserYacc
{
public enum Tokens {
    error=1,EOF=2,FOR=3,IN=4,WHILE=5,IF=6,
    ELSE=7,ELIF=8,DEF=9,RETURN=10,BREAK=11,CONTINUE=12,
    IMPORT=13,FROM=14,GLOBAL=15,AS=16,PASS=17,CLASS=18,
    LAMBDA=19,EXIT=20,NEW=21,IS=22,INDENT=23,UNINDENT=24,
    END_OF_FILE=25,END_OF_LINE=26,DECLTYPE=27,INTNUM=28,REALNUM=29,TRUE=30,
    FALSE=31,BIGINT=32,LPAR=33,RPAR=34,LBRACE=35,RBRACE=36,
    LBRACKET=37,RBRACKET=38,DOT=39,COMMA=40,COLON=41,SEMICOLON=42,
    ARROW=43,STRINGNUM=44,ASSIGN=45,PLUSEQUAL=46,MINUSEQUAL=47,STAREQUAL=48,
    DIVEQUAL=49,PLUS=50,MINUS=51,STAR=52,DIVIDE=53,SLASHSLASH=54,
    PERCENTAGE=55,ID=56,LESS=57,GREATER=58,LESSEQUAL=59,GREATEREQUAL=60,
    EQUAL=61,NOTEQUAL=62,AND=63,OR=64,NOT=65,STARSTAR=66,
    tkParseModeExpression=67,tkParseModeStatement=68,tkParseModeType=69};

public partial struct ValueType
{
	public expression ex;
	public ident id;
    public Object ob;
    public op_type_node op;
    public syntax_tree_node stn;
    public token_info ti;
    public type_definition td;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class SPythonGPPGParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SPythonParser.y
   	public syntax_tree_node root;
	public List<Error> errors;
    // public string current_file_name;
    // public int max_errors = 10;
	public SPythonParserTools parserTools;
    public List<compiler_directive> CompilerDirectives;
	public ParserLambdaHelper lambdaHelper = new ParserLambdaHelper();
	public bool is_unit_to_be_parsed = false;

	public SPythonGPPGParser(AbstractScanner<ValueType, LexLocation> scanner, SPythonParserTools parserTools,
	bool isUnitToBeParsed) : base(scanner) 
	{ 
		this.parserTools = parserTools;
		this.is_unit_to_be_parsed = isUnitToBeParsed;
	}
  // End verbatim content from SPythonParser.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[138];
  private static State[] states = new State[241];
  private static string[] nonTerms = new string[] {
      "ident", "dotted_ident", "func_name_ident", "type_decl_identifier", "expr", 
      "proc_func_call", "const_value", "variable", "optional_condition", "act_param", 
      "new_expr", "is_expr", "variable_as_type", "act_param_list", "optional_act_param_list", 
      "proc_func_decl", "return_stmt", "break_stmt", "continue_stmt", "global_stmt", 
      "pass_stmt", "var_stmt", "assign_stmt", "if_stmt", "stmt", "proc_func_call_stmt", 
      "while_stmt", "for_stmt", "optional_else", "optional_elif", "exit_stmt", 
      "expr_list", "stmt_list", "block", "program", "param_name", "form_param_sect", 
      "form_param_list", "optional_form_param_list", "dotted_ident_list", "ident_as_ident", 
      "ident_as_ident_list", "proc_func_header", "type_ref", "simple_type_identifier", 
      "template_type", "import_clause", "template_type_params", "template_param_list", 
      "parts", "stmt_or_expression", "optional_semicolon", "end_of_line", "assign_type", 
      "$accept", };

  static SPythonGPPGParser() {
    states[0] = new State(new int[]{56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,6,131,5,151,3,156,10,163,11,166,12,168,15,170,17,179,20,181,9,188,13,207,14,215,67,225,69,231,68,235},new int[]{-35,1,-33,3,-25,222,-23,8,-8,9,-1,61,-6,127,-7,128,-22,129,-24,130,-26,149,-27,150,-28,155,-17,162,-18,165,-19,167,-20,169,-21,178,-31,180,-16,185,-43,186,-47,206,-50,224});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{42,223,26,220,25,-137},new int[]{-52,4,-53,6});
    states[4] = new State(new int[]{25,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,6,131,5,151,3,156,10,163,11,166,12,168,15,170,17,179,20,181,9,188,13,207,14,215},new int[]{-25,7,-23,8,-8,9,-1,61,-6,127,-7,128,-22,129,-24,130,-26,149,-27,150,-28,155,-17,162,-18,165,-19,167,-20,169,-21,178,-31,180,-16,185,-43,186,-47,206});
    states[7] = new State(-16);
    states[8] = new State(-17);
    states[9] = new State(new int[]{45,10,33,51,39,110,37,112,41,119,46,123,47,124,48,125,49,126},new int[]{-54,117});
    states[10] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,11,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[11] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,42,-48,26,-48,25,-48,2,-48});
    states[12] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,13,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[13] = new State(new int[]{7,14,6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44});
    states[14] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,15,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[15] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,42,-54,26,-54,25,-54,2,-54,7,-54,40,-54,34,-54,3,-54,38,-54,41,-54});
    states[16] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,17,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[17] = new State(new int[]{6,12,50,-55,52,18,53,20,51,-55,57,-55,58,-55,59,-55,60,-55,61,-55,62,-55,63,-55,64,-55,54,40,55,42,66,44,42,-55,26,-55,25,-55,2,-55,7,-55,40,-55,34,-55,3,-55,38,-55,41,-55});
    states[18] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,19,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[19] = new State(new int[]{6,12,50,-56,52,-56,53,-56,51,-56,57,-56,58,-56,59,-56,60,-56,61,-56,62,-56,63,-56,64,-56,54,-56,55,-56,66,44,42,-56,26,-56,25,-56,2,-56,7,-56,40,-56,34,-56,3,-56,38,-56,41,-56});
    states[20] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,21,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[21] = new State(new int[]{6,12,50,-57,52,-57,53,-57,51,-57,57,-57,58,-57,59,-57,60,-57,61,-57,62,-57,63,-57,64,-57,54,-57,55,-57,66,44,42,-57,26,-57,25,-57,2,-57,7,-57,40,-57,34,-57,3,-57,38,-57,41,-57});
    states[22] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,23,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[23] = new State(new int[]{6,12,50,-58,52,18,53,20,51,-58,57,-58,58,-58,59,-58,60,-58,61,-58,62,-58,63,-58,64,-58,54,40,55,42,66,44,42,-58,26,-58,25,-58,2,-58,7,-58,40,-58,34,-58,3,-58,38,-58,41,-58});
    states[24] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,25,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[25] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,-59,58,-59,59,-59,60,-59,61,-59,62,-59,63,-59,64,-59,54,40,55,42,66,44,42,-59,26,-59,25,-59,2,-59,7,-59,40,-59,34,-59,3,-59,38,-59,41,-59});
    states[26] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,27,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[27] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,-60,58,-60,59,-60,60,-60,61,-60,62,-60,63,-60,64,-60,54,40,55,42,66,44,42,-60,26,-60,25,-60,2,-60,7,-60,40,-60,34,-60,3,-60,38,-60,41,-60});
    states[28] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,29,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[29] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,-61,58,-61,59,-61,60,-61,61,-61,62,-61,63,-61,64,-61,54,40,55,42,66,44,42,-61,26,-61,25,-61,2,-61,7,-61,40,-61,34,-61,3,-61,38,-61,41,-61});
    states[30] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,31,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[31] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,-62,58,-62,59,-62,60,-62,61,-62,62,-62,63,-62,64,-62,54,40,55,42,66,44,42,-62,26,-62,25,-62,2,-62,7,-62,40,-62,34,-62,3,-62,38,-62,41,-62});
    states[32] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,33,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[33] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,-63,58,-63,59,-63,60,-63,61,-63,62,-63,63,-63,64,-63,54,40,55,42,66,44,42,-63,26,-63,25,-63,2,-63,7,-63,40,-63,34,-63,3,-63,38,-63,41,-63});
    states[34] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,35,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[35] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,-64,58,-64,59,-64,60,-64,61,-64,62,-64,63,-64,64,-64,54,40,55,42,66,44,42,-64,26,-64,25,-64,2,-64,7,-64,40,-64,34,-64,3,-64,38,-64,41,-64});
    states[36] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,37,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[37] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,-65,64,-65,54,40,55,42,66,44,42,-65,26,-65,25,-65,2,-65,7,-65,40,-65,34,-65,3,-65,38,-65,41,-65});
    states[38] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,39,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[39] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,-66,54,40,55,42,66,44,42,-66,26,-66,25,-66,2,-66,7,-66,40,-66,34,-66,3,-66,38,-66,41,-66});
    states[40] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,41,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[41] = new State(new int[]{6,12,50,-67,52,-67,53,-67,51,-67,57,-67,58,-67,59,-67,60,-67,61,-67,62,-67,63,-67,64,-67,54,-67,55,-67,66,44,42,-67,26,-67,25,-67,2,-67,7,-67,40,-67,34,-67,3,-67,38,-67,41,-67});
    states[42] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,43,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[43] = new State(new int[]{6,12,50,-68,52,-68,53,-68,51,-68,57,-68,58,-68,59,-68,60,-68,61,-68,62,-68,63,-68,64,-68,54,-68,55,-68,66,44,42,-68,26,-68,25,-68,2,-68,7,-68,40,-68,34,-68,3,-68,38,-68,41,-68});
    states[44] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,45,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[45] = new State(new int[]{6,12,50,-69,52,-69,53,-69,51,-69,57,-69,58,-69,59,-69,60,-69,61,-69,62,-69,63,-69,64,-69,54,-69,55,-69,66,44,42,-69,26,-69,25,-69,2,-69,7,-69,40,-69,34,-69,3,-69,38,-69,41,-69});
    states[46] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,47,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[47] = new State(new int[]{6,12,50,-70,52,18,53,20,51,-70,57,-70,58,-70,59,-70,60,-70,61,-70,62,-70,63,-70,64,-70,54,40,55,42,66,44,42,-70,26,-70,25,-70,2,-70,7,-70,40,-70,34,-70,3,-70,38,-70,41,-70});
    states[48] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,49,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[49] = new State(new int[]{6,12,50,-71,52,-71,53,-71,51,-71,57,-71,58,-71,59,-71,60,-71,61,-71,62,-71,63,-71,64,-71,54,-71,55,-71,66,44,42,-71,26,-71,25,-71,2,-71,7,-71,40,-71,34,-71,3,-71,38,-71,41,-71});
    states[50] = new State(new int[]{33,51,39,110,37,112,22,115,6,-72,50,-72,52,-72,53,-72,51,-72,57,-72,58,-72,59,-72,60,-72,61,-72,62,-72,63,-72,64,-72,54,-72,55,-72,66,-72,42,-72,26,-72,25,-72,2,-72,7,-72,40,-72,34,-72,3,-72,38,-72,41,-72});
    states[51] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86,34,-133},new int[]{-15,52,-14,54,-10,84,-5,57,-8,50,-1,58,-6,63,-7,64,-11,78,-12,85});
    states[52] = new State(new int[]{34,53});
    states[53] = new State(-113);
    states[54] = new State(new int[]{40,55,34,-132});
    states[55] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-10,56,-5,57,-8,50,-1,58,-6,63,-7,64,-11,78,-12,85});
    states[56] = new State(-131);
    states[57] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,40,-128,34,-128});
    states[58] = new State(new int[]{45,59,33,-100,39,-100,37,-100,22,-100,6,-100,50,-100,52,-100,53,-100,51,-100,57,-100,58,-100,59,-100,60,-100,61,-100,62,-100,63,-100,64,-100,54,-100,55,-100,66,-100,40,-100,34,-100});
    states[59] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,60,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[60] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,40,-129,34,-129});
    states[61] = new State(-100);
    states[62] = new State(-37);
    states[63] = new State(-101);
    states[64] = new State(new int[]{39,65,6,-73,50,-73,52,-73,53,-73,51,-73,57,-73,58,-73,59,-73,60,-73,61,-73,62,-73,63,-73,64,-73,54,-73,55,-73,66,-73,42,-73,26,-73,25,-73,2,-73,7,-73,40,-73,34,-73,3,-73,38,-73,41,-73});
    states[65] = new State(new int[]{56,62},new int[]{-1,66});
    states[66] = new State(-103);
    states[67] = new State(-79);
    states[68] = new State(-80);
    states[69] = new State(-81);
    states[70] = new State(-82);
    states[71] = new State(-83);
    states[72] = new State(-84);
    states[73] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-32,74,-5,101,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[74] = new State(new int[]{38,75,40,76});
    states[75] = new State(-104);
    states[76] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,77,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[77] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,38,-86,40,-86});
    states[78] = new State(-74);
    states[79] = new State(new int[]{56,62},new int[]{-44,80,-45,89,-1,98,-46,99});
    states[80] = new State(new int[]{33,81});
    states[81] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86,34,-133},new int[]{-15,82,-14,54,-10,84,-5,57,-8,50,-1,58,-6,63,-7,64,-11,78,-12,85});
    states[82] = new State(new int[]{34,83});
    states[83] = new State(-78);
    states[84] = new State(-130);
    states[85] = new State(-75);
    states[86] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,87,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[87] = new State(new int[]{34,88,6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44});
    states[88] = new State(-76);
    states[89] = new State(new int[]{39,90,37,93,33,-116,38,-116,40,-116,6,-116,50,-116,52,-116,53,-116,51,-116,57,-116,58,-116,59,-116,60,-116,61,-116,62,-116,63,-116,64,-116,54,-116,55,-116,66,-116,42,-116,26,-116,25,-116,2,-116,7,-116,34,-116,3,-116,41,-116,45,-116},new int[]{-48,92});
    states[90] = new State(new int[]{56,62},new int[]{-1,91});
    states[91] = new State(-115);
    states[92] = new State(-118);
    states[93] = new State(new int[]{56,62},new int[]{-49,94,-44,100,-45,89,-1,98,-46,99});
    states[94] = new State(new int[]{38,95,40,96});
    states[95] = new State(-119);
    states[96] = new State(new int[]{56,62},new int[]{-44,97,-45,89,-1,98,-46,99});
    states[97] = new State(-121);
    states[98] = new State(-114);
    states[99] = new State(-117);
    states[100] = new State(-120);
    states[101] = new State(new int[]{3,102,6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,38,-85,40,-85});
    states[102] = new State(new int[]{56,62},new int[]{-1,103});
    states[103] = new State(new int[]{4,104});
    states[104] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,105,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[105] = new State(new int[]{6,108,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,38,-107},new int[]{-9,106});
    states[106] = new State(new int[]{38,107});
    states[107] = new State(-106);
    states[108] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,109,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[109] = new State(new int[]{7,14,6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,38,-108});
    states[110] = new State(new int[]{56,62},new int[]{-1,111});
    states[111] = new State(-102);
    states[112] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,113,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[113] = new State(new int[]{38,114,6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44});
    states[114] = new State(-105);
    states[115] = new State(new int[]{56,62},new int[]{-44,116,-45,89,-1,98,-46,99});
    states[116] = new State(-77);
    states[117] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,118,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[118] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,42,-49,26,-49,25,-49,2,-49});
    states[119] = new State(new int[]{56,62},new int[]{-44,120,-45,89,-1,98,-46,99});
    states[120] = new State(new int[]{45,121,42,-46,26,-46,25,-46,2,-46});
    states[121] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,122,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[122] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,42,-47,26,-47,25,-47,2,-47});
    states[123] = new State(-50);
    states[124] = new State(-51);
    states[125] = new State(-52);
    states[126] = new State(-53);
    states[127] = new State(new int[]{45,-101,33,-101,39,-101,37,-101,41,-101,46,-101,47,-101,48,-101,49,-101,42,-99,26,-99,25,-99});
    states[128] = new State(new int[]{39,65});
    states[129] = new State(-18);
    states[130] = new State(-19);
    states[131] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,132,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[132] = new State(new int[]{41,133,6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44});
    states[133] = new State(new int[]{23,145},new int[]{-34,134});
    states[134] = new State(new int[]{8,136,7,142,42,-91,26,-91,25,-91},new int[]{-30,135,-29,141});
    states[135] = new State(-87);
    states[136] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,137,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[137] = new State(new int[]{41,138,6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44});
    states[138] = new State(new int[]{23,145},new int[]{-34,139});
    states[139] = new State(new int[]{8,136,7,142,42,-91,26,-91,25,-91},new int[]{-30,140,-29,141});
    states[140] = new State(-88);
    states[141] = new State(-89);
    states[142] = new State(new int[]{41,143});
    states[143] = new State(new int[]{23,145},new int[]{-34,144});
    states[144] = new State(-90);
    states[145] = new State(new int[]{56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,6,131,5,151,3,156,10,163,11,166,12,168,15,170,17,179,20,181,9,188,13,207,14,215},new int[]{-33,146,-25,222,-23,8,-8,9,-1,61,-6,127,-7,128,-22,129,-24,130,-26,149,-27,150,-28,155,-17,162,-18,165,-19,167,-20,169,-21,178,-31,180,-16,185,-43,186,-47,206});
    states[146] = new State(new int[]{26,220,42,221},new int[]{-53,147});
    states[147] = new State(new int[]{24,148,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,6,131,5,151,3,156,10,163,11,166,12,168,15,170,17,179,20,181,9,188,13,207,14,215},new int[]{-25,7,-23,8,-8,9,-1,61,-6,127,-7,128,-22,129,-24,130,-26,149,-27,150,-28,155,-17,162,-18,165,-19,167,-20,169,-21,178,-31,180,-16,185,-43,186,-47,206});
    states[148] = new State(-109);
    states[149] = new State(-20);
    states[150] = new State(-21);
    states[151] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,152,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[152] = new State(new int[]{41,153,6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44});
    states[153] = new State(new int[]{23,145},new int[]{-34,154});
    states[154] = new State(-92);
    states[155] = new State(-22);
    states[156] = new State(new int[]{56,62},new int[]{-1,157});
    states[157] = new State(new int[]{4,158});
    states[158] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,159,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[159] = new State(new int[]{41,160,6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44});
    states[160] = new State(new int[]{23,145},new int[]{-34,161});
    states[161] = new State(-93);
    states[162] = new State(-23);
    states[163] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86,42,-96,26,-96,25,-96},new int[]{-5,164,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[164] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,42,-95,26,-95,25,-95});
    states[165] = new State(-24);
    states[166] = new State(-97);
    states[167] = new State(-25);
    states[168] = new State(-98);
    states[169] = new State(-26);
    states[170] = new State(new int[]{56,62},new int[]{-40,171,-2,177,-1,176});
    states[171] = new State(new int[]{40,172,42,-36,26,-36,25,-36});
    states[172] = new State(new int[]{56,62},new int[]{-2,173,-1,176});
    states[173] = new State(new int[]{39,174,40,-41,42,-41,26,-41,25,-41});
    states[174] = new State(new int[]{56,62},new int[]{-1,175});
    states[175] = new State(-39);
    states[176] = new State(-38);
    states[177] = new State(new int[]{39,174,40,-40,42,-40,26,-40,25,-40});
    states[178] = new State(-27);
    states[179] = new State(-34);
    states[180] = new State(-28);
    states[181] = new State(new int[]{33,182});
    states[182] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86,34,-133},new int[]{-15,183,-14,54,-10,84,-5,57,-8,50,-1,58,-6,63,-7,64,-11,78,-12,85});
    states[183] = new State(new int[]{34,184});
    states[184] = new State(-35);
    states[185] = new State(-29);
    states[186] = new State(new int[]{23,145},new int[]{-34,187});
    states[187] = new State(-110);
    states[188] = new State(new int[]{56,62},new int[]{-3,189,-1,205});
    states[189] = new State(new int[]{33,190});
    states[190] = new State(new int[]{56,62,34,-127},new int[]{-39,191,-38,197,-37,204,-36,200,-1,203});
    states[191] = new State(new int[]{34,192});
    states[192] = new State(new int[]{41,193,43,194});
    states[193] = new State(-111);
    states[194] = new State(new int[]{56,62},new int[]{-44,195,-45,89,-1,98,-46,99});
    states[195] = new State(new int[]{41,196});
    states[196] = new State(-112);
    states[197] = new State(new int[]{40,198,34,-126});
    states[198] = new State(new int[]{56,62},new int[]{-37,199,-36,200,-1,203});
    states[199] = new State(-125);
    states[200] = new State(new int[]{41,201});
    states[201] = new State(new int[]{56,62},new int[]{-44,202,-45,89,-1,98,-46,99});
    states[202] = new State(-123);
    states[203] = new State(-122);
    states[204] = new State(-124);
    states[205] = new State(-94);
    states[206] = new State(-30);
    states[207] = new State(new int[]{56,62},new int[]{-42,208,-41,214,-1,211});
    states[208] = new State(new int[]{40,209,42,-31,26,-31,25,-31});
    states[209] = new State(new int[]{56,62},new int[]{-41,210,-1,211});
    states[210] = new State(-45);
    states[211] = new State(new int[]{16,212,40,-43,42,-43,26,-43,25,-43});
    states[212] = new State(new int[]{56,62},new int[]{-1,213});
    states[213] = new State(-42);
    states[214] = new State(-44);
    states[215] = new State(new int[]{56,62},new int[]{-1,216});
    states[216] = new State(new int[]{13,217});
    states[217] = new State(new int[]{52,219,56,62},new int[]{-42,218,-41,214,-1,211});
    states[218] = new State(new int[]{40,209,42,-32,26,-32,25,-32});
    states[219] = new State(-33);
    states[220] = new State(-134);
    states[221] = new State(-135);
    states[222] = new State(-15);
    states[223] = new State(new int[]{25,-136,56,-135,28,-135,29,-135,30,-135,31,-135,44,-135,32,-135,37,-135,6,-135,5,-135,3,-135,10,-135,11,-135,12,-135,15,-135,17,-135,20,-135,9,-135,13,-135,14,-135});
    states[224] = new State(-3);
    states[225] = new State(new int[]{27,227,51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-5,226,-8,50,-1,61,-6,63,-7,64,-11,78,-12,85});
    states[226] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,2,-4});
    states[227] = new State(new int[]{56,62},new int[]{-4,228,-1,229});
    states[228] = new State(-5);
    states[229] = new State(new int[]{37,93,2,-8},new int[]{-48,230});
    states[230] = new State(-9);
    states[231] = new State(new int[]{56,62},new int[]{-13,232,-2,233,-1,176});
    states[232] = new State(-6);
    states[233] = new State(new int[]{39,174,37,93,2,-10},new int[]{-48,234});
    states[234] = new State(-11);
    states[235] = new State(new int[]{51,46,65,48,56,62,28,67,29,68,30,69,31,70,44,71,32,72,37,73,21,79,33,86},new int[]{-51,236,-5,237,-8,238,-1,61,-6,63,-7,64,-11,78,-12,85,-23,239,-22,240});
    states[236] = new State(-7);
    states[237] = new State(new int[]{6,12,50,16,52,18,53,20,51,22,57,24,58,26,59,28,60,30,61,32,62,34,63,36,64,38,54,40,55,42,66,44,2,-12});
    states[238] = new State(new int[]{33,51,39,110,37,112,22,115,45,10,41,119,46,123,47,124,48,125,49,126,6,-72,50,-72,52,-72,53,-72,51,-72,57,-72,58,-72,59,-72,60,-72,61,-72,62,-72,63,-72,64,-72,54,-72,55,-72,66,-72,2,-72},new int[]{-54,117});
    states[239] = new State(-13);
    states[240] = new State(-14);

    rules[1] = new Rule(-55, new int[]{-35,2});
    rules[2] = new Rule(-35, new int[]{-33,-52,25});
    rules[3] = new Rule(-35, new int[]{-50});
    rules[4] = new Rule(-50, new int[]{67,-5});
    rules[5] = new Rule(-50, new int[]{67,27,-4});
    rules[6] = new Rule(-50, new int[]{69,-13});
    rules[7] = new Rule(-50, new int[]{68,-51});
    rules[8] = new Rule(-4, new int[]{-1});
    rules[9] = new Rule(-4, new int[]{-1,-48});
    rules[10] = new Rule(-13, new int[]{-2});
    rules[11] = new Rule(-13, new int[]{-2,-48});
    rules[12] = new Rule(-51, new int[]{-5});
    rules[13] = new Rule(-51, new int[]{-23});
    rules[14] = new Rule(-51, new int[]{-22});
    rules[15] = new Rule(-33, new int[]{-25});
    rules[16] = new Rule(-33, new int[]{-33,-53,-25});
    rules[17] = new Rule(-25, new int[]{-23});
    rules[18] = new Rule(-25, new int[]{-22});
    rules[19] = new Rule(-25, new int[]{-24});
    rules[20] = new Rule(-25, new int[]{-26});
    rules[21] = new Rule(-25, new int[]{-27});
    rules[22] = new Rule(-25, new int[]{-28});
    rules[23] = new Rule(-25, new int[]{-17});
    rules[24] = new Rule(-25, new int[]{-18});
    rules[25] = new Rule(-25, new int[]{-19});
    rules[26] = new Rule(-25, new int[]{-20});
    rules[27] = new Rule(-25, new int[]{-21});
    rules[28] = new Rule(-25, new int[]{-31});
    rules[29] = new Rule(-25, new int[]{-16});
    rules[30] = new Rule(-25, new int[]{-47});
    rules[31] = new Rule(-47, new int[]{13,-42});
    rules[32] = new Rule(-47, new int[]{14,-1,13,-42});
    rules[33] = new Rule(-47, new int[]{14,-1,13,52});
    rules[34] = new Rule(-21, new int[]{17});
    rules[35] = new Rule(-31, new int[]{20,33,-15,34});
    rules[36] = new Rule(-20, new int[]{15,-40});
    rules[37] = new Rule(-1, new int[]{56});
    rules[38] = new Rule(-2, new int[]{-1});
    rules[39] = new Rule(-2, new int[]{-2,39,-1});
    rules[40] = new Rule(-40, new int[]{-2});
    rules[41] = new Rule(-40, new int[]{-40,40,-2});
    rules[42] = new Rule(-41, new int[]{-1,16,-1});
    rules[43] = new Rule(-41, new int[]{-1});
    rules[44] = new Rule(-42, new int[]{-41});
    rules[45] = new Rule(-42, new int[]{-42,40,-41});
    rules[46] = new Rule(-22, new int[]{-8,41,-44});
    rules[47] = new Rule(-22, new int[]{-8,41,-44,45,-5});
    rules[48] = new Rule(-23, new int[]{-8,45,-5});
    rules[49] = new Rule(-23, new int[]{-8,-54,-5});
    rules[50] = new Rule(-54, new int[]{46});
    rules[51] = new Rule(-54, new int[]{47});
    rules[52] = new Rule(-54, new int[]{48});
    rules[53] = new Rule(-54, new int[]{49});
    rules[54] = new Rule(-5, new int[]{-5,6,-5,7,-5});
    rules[55] = new Rule(-5, new int[]{-5,50,-5});
    rules[56] = new Rule(-5, new int[]{-5,52,-5});
    rules[57] = new Rule(-5, new int[]{-5,53,-5});
    rules[58] = new Rule(-5, new int[]{-5,51,-5});
    rules[59] = new Rule(-5, new int[]{-5,57,-5});
    rules[60] = new Rule(-5, new int[]{-5,58,-5});
    rules[61] = new Rule(-5, new int[]{-5,59,-5});
    rules[62] = new Rule(-5, new int[]{-5,60,-5});
    rules[63] = new Rule(-5, new int[]{-5,61,-5});
    rules[64] = new Rule(-5, new int[]{-5,62,-5});
    rules[65] = new Rule(-5, new int[]{-5,63,-5});
    rules[66] = new Rule(-5, new int[]{-5,64,-5});
    rules[67] = new Rule(-5, new int[]{-5,54,-5});
    rules[68] = new Rule(-5, new int[]{-5,55,-5});
    rules[69] = new Rule(-5, new int[]{-5,66,-5});
    rules[70] = new Rule(-5, new int[]{51,-5});
    rules[71] = new Rule(-5, new int[]{65,-5});
    rules[72] = new Rule(-5, new int[]{-8});
    rules[73] = new Rule(-5, new int[]{-7});
    rules[74] = new Rule(-5, new int[]{-11});
    rules[75] = new Rule(-5, new int[]{-12});
    rules[76] = new Rule(-5, new int[]{33,-5,34});
    rules[77] = new Rule(-12, new int[]{-8,22,-44});
    rules[78] = new Rule(-11, new int[]{21,-44,33,-15,34});
    rules[79] = new Rule(-7, new int[]{28});
    rules[80] = new Rule(-7, new int[]{29});
    rules[81] = new Rule(-7, new int[]{30});
    rules[82] = new Rule(-7, new int[]{31});
    rules[83] = new Rule(-7, new int[]{44});
    rules[84] = new Rule(-7, new int[]{32});
    rules[85] = new Rule(-32, new int[]{-5});
    rules[86] = new Rule(-32, new int[]{-32,40,-5});
    rules[87] = new Rule(-24, new int[]{6,-5,41,-34,-30});
    rules[88] = new Rule(-30, new int[]{8,-5,41,-34,-30});
    rules[89] = new Rule(-30, new int[]{-29});
    rules[90] = new Rule(-29, new int[]{7,41,-34});
    rules[91] = new Rule(-29, new int[]{});
    rules[92] = new Rule(-27, new int[]{5,-5,41,-34});
    rules[93] = new Rule(-28, new int[]{3,-1,4,-5,41,-34});
    rules[94] = new Rule(-3, new int[]{-1});
    rules[95] = new Rule(-17, new int[]{10,-5});
    rules[96] = new Rule(-17, new int[]{10});
    rules[97] = new Rule(-18, new int[]{11});
    rules[98] = new Rule(-19, new int[]{12});
    rules[99] = new Rule(-26, new int[]{-6});
    rules[100] = new Rule(-8, new int[]{-1});
    rules[101] = new Rule(-8, new int[]{-6});
    rules[102] = new Rule(-8, new int[]{-8,39,-1});
    rules[103] = new Rule(-8, new int[]{-7,39,-1});
    rules[104] = new Rule(-8, new int[]{37,-32,38});
    rules[105] = new Rule(-8, new int[]{-8,37,-5,38});
    rules[106] = new Rule(-8, new int[]{37,-5,3,-1,4,-5,-9,38});
    rules[107] = new Rule(-9, new int[]{});
    rules[108] = new Rule(-9, new int[]{6,-5});
    rules[109] = new Rule(-34, new int[]{23,-33,-53,24});
    rules[110] = new Rule(-16, new int[]{-43,-34});
    rules[111] = new Rule(-43, new int[]{9,-3,33,-39,34,41});
    rules[112] = new Rule(-43, new int[]{9,-3,33,-39,34,43,-44,41});
    rules[113] = new Rule(-6, new int[]{-8,33,-15,34});
    rules[114] = new Rule(-45, new int[]{-1});
    rules[115] = new Rule(-45, new int[]{-45,39,-1});
    rules[116] = new Rule(-44, new int[]{-45});
    rules[117] = new Rule(-44, new int[]{-46});
    rules[118] = new Rule(-46, new int[]{-45,-48});
    rules[119] = new Rule(-48, new int[]{37,-49,38});
    rules[120] = new Rule(-49, new int[]{-44});
    rules[121] = new Rule(-49, new int[]{-49,40,-44});
    rules[122] = new Rule(-36, new int[]{-1});
    rules[123] = new Rule(-37, new int[]{-36,41,-44});
    rules[124] = new Rule(-38, new int[]{-37});
    rules[125] = new Rule(-38, new int[]{-38,40,-37});
    rules[126] = new Rule(-39, new int[]{-38});
    rules[127] = new Rule(-39, new int[]{});
    rules[128] = new Rule(-10, new int[]{-5});
    rules[129] = new Rule(-10, new int[]{-1,45,-5});
    rules[130] = new Rule(-14, new int[]{-10});
    rules[131] = new Rule(-14, new int[]{-14,40,-10});
    rules[132] = new Rule(-15, new int[]{-14});
    rules[133] = new Rule(-15, new int[]{});
    rules[134] = new Rule(-53, new int[]{26});
    rules[135] = new Rule(-53, new int[]{42});
    rules[136] = new Rule(-52, new int[]{42});
    rules[137] = new Rule(-52, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> stmt_list, optional_semicolon, END_OF_FILE
{
			// main program
			if (!is_unit_to_be_parsed) {
				var stl = ValueStack[ValueStack.Depth-3].stn as statement_list;
				stl.left_logical_bracket = new token_info("");
				stl.right_logical_bracket = new token_info("");
				var bl = new block(new declarations(), stl, CurrentLocationSpan);
				root = CurrentSemanticValue.stn = NewProgramModule(null, null, new uses_list(), bl, ValueStack[ValueStack.Depth-2].ob, CurrentLocationSpan);
				root.source_context = bl.source_context;
			}
			// unit
			else {
				var interface_part = new interface_node(new declarations(), new uses_list(), null, null);
				var initialization_part = new initfinal_part(null, ValueStack[ValueStack.Depth-3].stn as statement_list, null, null, null, CurrentLocationSpan);

				root = CurrentSemanticValue.stn = new unit_module(
					new unit_name(new ident(Path.GetFileNameWithoutExtension(parserTools.currentFileName)),
					UnitHeaderKeyword.Unit, CurrentLocationSpan), interface_part, null,
					initialization_part.initialization_sect,
					initialization_part.finalization_sect, null, CurrentLocationSpan);
			}
		}
        break;
      case 3: // program -> parts
{ 
			root = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 4: // parts -> tkParseModeExpression, expr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 5: // parts -> tkParseModeExpression, DECLTYPE, type_decl_identifier
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 6: // parts -> tkParseModeType, variable_as_type
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 7: // parts -> tkParseModeStatement, stmt_or_expression
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 8: // type_decl_identifier -> ident
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 9: // type_decl_identifier -> ident, template_type_params
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-2].id.name, ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 10: // variable_as_type -> dotted_ident
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 11: // variable_as_type -> dotted_ident, template_type_params
{ 
			CurrentSemanticValue.ex = new ident_with_templateparams(ValueStack[ValueStack.Depth-2].id as addressed_value, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan);   
		}
        break;
      case 12: // stmt_or_expression -> expr
{ CurrentSemanticValue.stn = new expression_as_statement(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);}
        break;
      case 13: // stmt_or_expression -> assign_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 14: // stmt_or_expression -> var_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 15: // stmt_list -> stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 16: // stmt_list -> stmt_list, end_of_line, stmt
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 17: // stmt -> assign_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 18: // stmt -> var_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 19: // stmt -> if_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 20: // stmt -> proc_func_call_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 21: // stmt -> while_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 22: // stmt -> for_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 23: // stmt -> return_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 24: // stmt -> break_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 25: // stmt -> continue_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 26: // stmt -> global_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 27: // stmt -> pass_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 28: // stmt -> exit_stmt
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 29: // stmt -> proc_func_decl
{
			CurrentSemanticValue.stn = new declarations_as_statement(new declarations(ValueStack[ValueStack.Depth-1].stn as procedure_definition, CurrentLocationSpan), CurrentLocationSpan);
		}
        break;
      case 30: // stmt -> import_clause
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 31: // import_clause -> IMPORT, ident_as_ident_list
{
			CurrentSemanticValue.stn = new import_statement(ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
		}
        break;
      case 32: // import_clause -> FROM, ident, IMPORT, ident_as_ident_list
{
			CurrentSemanticValue.stn = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, false, ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
		}
        break;
      case 33: // import_clause -> FROM, ident, IMPORT, STAR
{
			CurrentSemanticValue.stn = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, true, null, CurrentLocationSpan);
		}
        break;
      case 34: // pass_stmt -> PASS
{
			CurrentSemanticValue.stn = new empty_statement();
		}
        break;
      case 35: // exit_stmt -> EXIT, LPAR, optional_act_param_list, RPAR
{
			parserTools.AddErrorFromResource("UNSUPPORTED_CONSTRUCTION_{0}", CurrentLocationSpan, "exit");
		}
        break;
      case 36: // global_stmt -> GLOBAL, dotted_ident_list
{
			CurrentSemanticValue.stn = new global_statement(ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan);
		}
        break;
      case 37: // ident -> ID
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 38: // dotted_ident -> ident
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 39: // dotted_ident -> dotted_ident, DOT, ident
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-3].id.name + "." + ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan); 
		}
        break;
      case 40: // dotted_ident_list -> dotted_ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 41: // dotted_ident_list -> dotted_ident_list, COMMA, dotted_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 42: // ident_as_ident -> ident, AS, ident
{ 
			CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 43: // ident_as_ident -> ident
{ 
			CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-1].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 44: // ident_as_ident_list -> ident_as_ident
{
			CurrentSemanticValue.stn = new as_statement_list(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 45: // ident_as_ident_list -> ident_as_ident_list, COMMA, ident_as_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as as_statement_list).Add(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 46: // var_stmt -> variable, COLON, type_ref
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-3].ex as ident, LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 47: // var_stmt -> variable, COLON, type_ref, ASSIGN, expr
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-5].ex as ident, LocationStack[LocationStack.Depth-5]), ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 48: // assign_stmt -> variable, ASSIGN, expr
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO", CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 49: // assign_stmt -> variable, assign_type, expr
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO", CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 50: // assign_type -> PLUSEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 51: // assign_type -> MINUSEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 52: // assign_type -> STAREQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 53: // assign_type -> DIVEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 54: // expr -> expr, IF, expr, ELSE, expr
{
			CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 55: // expr -> expr, PLUS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 56: // expr -> expr, STAR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 57: // expr -> expr, DIVIDE, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 58: // expr -> expr, MINUS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 59: // expr -> expr, LESS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 60: // expr -> expr, GREATER, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 61: // expr -> expr, LESSEQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 62: // expr -> expr, GREATEREQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 63: // expr -> expr, EQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 64: // expr -> expr, NOTEQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 65: // expr -> expr, AND, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 66: // expr -> expr, OR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 67: // expr -> expr, SLASHSLASH, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 68: // expr -> expr, PERCENTAGE, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 69: // expr -> expr, STARSTAR, expr
{
			addressed_value method_name = new ident("!pow", CurrentLocationSpan);
			expression_list el = new expression_list(new List<expression> { ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex }, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(method_name, el, CurrentLocationSpan);
		}
        break;
      case 70: // expr -> MINUS, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 71: // expr -> NOT, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 72: // expr -> variable
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 73: // expr -> const_value
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 74: // expr -> new_expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 75: // expr -> is_expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 76: // expr -> LPAR, expr, RPAR
{ 
			CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 77: // is_expr -> variable, IS, type_ref
{
			CurrentSemanticValue.ex = parserTools.NewAsIsExpr(ValueStack[ValueStack.Depth-3].ex, op_typecast.is_op, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 78: // new_expr -> NEW, type_ref, LPAR, optional_act_param_list, RPAR
{
			CurrentSemanticValue.ex = new new_expr(ValueStack[ValueStack.Depth-4].td, ValueStack[ValueStack.Depth-2].stn as expression_list, false, null, CurrentLocationSpan);
		}
        break;
      case 79: // const_value -> INTNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 80: // const_value -> REALNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 81: // const_value -> TRUE
{ 
			CurrentSemanticValue.ex = new ident("true", CurrentLocationSpan); 
		}
        break;
      case 82: // const_value -> FALSE
{ 
			CurrentSemanticValue.ex = new ident("false", CurrentLocationSpan); 
		}
        break;
      case 83: // const_value -> STRINGNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; 
		}
        break;
      case 84: // const_value -> BIGINT
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 85: // expr_list -> expr
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 86: // expr_list -> expr_list, COMMA, expr
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 87: // if_stmt -> IF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 88: // optional_elif -> ELIF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 89: // optional_elif -> optional_else
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 90: // optional_else -> ELSE, COLON, block
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 91: // optional_else -> /* empty */
{ 
			CurrentSemanticValue.stn = null; 
		}
        break;
      case 92: // while_stmt -> WHILE, expr, COLON, block
{
			CurrentSemanticValue.stn = new while_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, WhileCycleType.While, CurrentLocationSpan);
		}
        break;
      case 93: // for_stmt -> FOR, ident, IN, expr, COLON, block
{
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-5].id, new no_type_foreach(), ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan);
		}
        break;
      case 94: // func_name_ident -> ident
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 95: // return_stmt -> RETURN, expr
{
			CurrentSemanticValue.stn = new return_statement(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 96: // return_stmt -> RETURN
{
			CurrentSemanticValue.stn = new return_statement(null, CurrentLocationSpan);
		}
        break;
      case 97: // break_stmt -> BREAK
{
			CurrentSemanticValue.stn = new procedure_call(new ident("break", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 98: // continue_stmt -> CONTINUE
{
			CurrentSemanticValue.stn = new procedure_call(new ident("continue", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 99: // proc_func_call_stmt -> proc_func_call
{
			CurrentSemanticValue.stn = new procedure_call(ValueStack[ValueStack.Depth-1].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex is ident, CurrentLocationSpan);
		}
        break;
      case 100: // variable -> ident
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 101: // variable -> proc_func_call
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 102: // variable -> variable, DOT, ident
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 103: // variable -> const_value, DOT, ident
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 104: // variable -> LBRACKET, expr_list, RBRACKET
{
			var acn = new array_const_new(ValueStack[ValueStack.Depth-2].stn as expression_list, '|', CurrentLocationSpan);
			var dn = new dot_node(acn as addressed_value, (new ident("ToList", CurrentLocationSpan)) as addressed_value, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, CurrentLocationSpan);
		}
        break;
      case 105: // variable -> variable, LBRACKET, expr, RBRACKET
{
			var el = new expression_list(ValueStack[ValueStack.Depth-2].ex as expression, CurrentLocationSpan);
			CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-4].ex as addressed_value, el, CurrentLocationSpan);
		}
        break;
      case 106: // variable -> LBRACKET, expr, FOR, ident, IN, expr, optional_condition, RBRACKET
{
			CurrentSemanticValue.ex = new list_generator(ValueStack[ValueStack.Depth-7].ex, ValueStack[ValueStack.Depth-5].id, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan);
		}
        break;
      case 107: // optional_condition -> /* empty */
{ 
			CurrentSemanticValue.ex = null; 
		}
        break;
      case 108: // optional_condition -> IF, expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 109: // block -> INDENT, stmt_list, end_of_line, UNINDENT
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn as statement_list;
			(CurrentSemanticValue.stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-4].ti;
			(CurrentSemanticValue.stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
			CurrentSemanticValue.stn.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-2]);
		}
        break;
      case 110: // proc_func_decl -> proc_func_header, block
{
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, new block(null, ValueStack[ValueStack.Depth-1].stn as statement_list, LocationStack[LocationStack.Depth-1]), CurrentLocationSpan);
		}
        break;
      case 111: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
                //                     COLON
{
			CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>()), new method_name(null,null, ValueStack[ValueStack.Depth-5].id, null, LocationStack[LocationStack.Depth-5]), null, CurrentLocationSpan);
		}
        break;
      case 112: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
                //                     ARROW, type_ref, COLON
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-5].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>()), new method_name(null,null, ValueStack[ValueStack.Depth-7].id, null, LocationStack[LocationStack.Depth-7]), null, ValueStack[ValueStack.Depth-2].td as type_definition, CurrentLocationSpan);
		}
        break;
      case 113: // proc_func_call -> variable, LPAR, optional_act_param_list, RPAR
{
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value, ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 114: // simple_type_identifier -> ident
{
			CurrentSemanticValue.td = new named_type_reference(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 115: // simple_type_identifier -> simple_type_identifier, DOT, ident
{ 
			CurrentSemanticValue.td = (ValueStack[ValueStack.Depth-3].td as named_type_reference).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 116: // type_ref -> simple_type_identifier
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td as named_type_reference;
		}
        break;
      case 117: // type_ref -> template_type
{ 
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; 
		}
        break;
      case 118: // template_type -> simple_type_identifier, template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference(ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan); 
		}
        break;
      case 119: // template_type_params -> LBRACKET, template_param_list, RBRACKET
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 120: // template_param_list -> type_ref
{ 
			CurrentSemanticValue.stn = new template_param_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 121: // template_param_list -> template_param_list, COMMA, type_ref
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as template_param_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 122: // param_name -> ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 123: // form_param_sect -> param_name, COLON, type_ref
{
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan);
		}
        break;
      case 124: // form_param_list -> form_param_sect
{
			CurrentSemanticValue.stn = new formal_parameters(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 125: // form_param_list -> form_param_list, COMMA, form_param_sect
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 126: // optional_form_param_list -> form_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 127: // optional_form_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 128: // act_param -> expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 129: // act_param -> ident, ASSIGN, expr
{ 
			CurrentSemanticValue.ex = new name_assign_expr(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 130: // act_param_list -> act_param
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 131: // act_param_list -> act_param_list, COMMA, act_param
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 132: // optional_act_param_list -> act_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 133: // optional_act_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 134: // end_of_line -> END_OF_LINE
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 135: // end_of_line -> SEMICOLON
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 136: // optional_semicolon -> SEMICOLON
{ 
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; 
		}
        break;
      case 137: // optional_semicolon -> /* empty */
{ 
			CurrentSemanticValue.ob = null; 
		}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


        public program_module NewProgramModule(program_name progName, Object optHeadCompDirs, uses_list mainUsesClose, syntax_tree_node progBlock, Object optPoint, LexLocation loc)
        {
            var progModule = new program_module(progName, mainUsesClose, progBlock as block, null, loc);
            progModule.Language = "SPython";
            if (optPoint == null && progBlock != null)
            {
                var fp = progBlock.source_context.end_position;
                var err_stn = progBlock;
			    if ((progBlock is block) && (progBlock as block).program_code != null && (progBlock as block).program_code.subnodes != null && (progBlock as block).program_code.subnodes.Count > 0)
                    err_stn = (progBlock as block).program_code.subnodes[(progBlock as block).program_code.subnodes.Count - 1];
                //parserTools.errors.Add(new SPythonUnexpectedToken(parserTools.currentFileName, StringResources.Get("TKPOINT"), new SourceContext(fp.line_num, fp.column_num + 1, fp.line_num, fp.column_num + 1, 0, 0), err_stn));
            }
            return progModule;
        }
}
}
