// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-56159VE
// DateTime: 18.05.2025 13:52:37
// UserName: ????
// Input file <SPythonParser.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using SPythonParser;

namespace SPythonParserYacc
{
public enum Tokens {
    error=1,EOF=2,FOR=3,IN=4,WHILE=5,IF=6,
    ELSE=7,ELIF=8,DEF=9,RETURN=10,BREAK=11,CONTINUE=12,
    IMPORT=13,FROM=14,GLOBAL=15,AS=16,PASS=17,CLASS=18,
    LAMBDA=19,EXIT=20,NEW=21,IS=22,INDENT=23,UNINDENT=24,
    END_OF_FILE=25,END_OF_LINE=26,DECLTYPE=27,INTNUM=28,REALNUM=29,TRUE=30,
    FALSE=31,BIGINT=32,FSTRINGNUM=33,LPAR=34,RPAR=35,LBRACE=36,
    RBRACE=37,LBRACKET=38,RBRACKET=39,DOT=40,COMMA=41,COLON=42,
    SEMICOLON=43,ARROW=44,STRINGNUM=45,ASSIGN=46,PLUSEQUAL=47,MINUSEQUAL=48,
    STAREQUAL=49,DIVEQUAL=50,BINXOREQUAL=51,SHLEQUAL=52,SHREQUAL=53,BINANDEQUAL=54,
    BINOREQUAL=55,PLUS=56,MINUS=57,STAR=58,DIVIDE=59,SLASHSLASH=60,
    PERCENTAGE=61,ID=62,LESS=63,GREATER=64,LESSEQUAL=65,GREATEREQUAL=66,
    EQUAL=67,NOTEQUAL=68,AND=69,OR=70,NOT=71,STARSTAR=72,
    BINNOT=73,BINXOR=74,SHL=75,SHR=76,BINAND=77,BINOR=78,
    tkParseModeExpression=79,tkParseModeStatement=80,tkParseModeType=81};

public partial struct ValueType
{
	public expression ex;
	public ident id;
    public Object ob;
    public op_type_node op;
    public syntax_tree_node stn;
    public token_info ti;
    public type_definition td;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class SPythonGPPGParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SPythonParser.y
   	public syntax_tree_node root;
	public List<Error> errors;
    // public string current_file_name;
    // public int max_errors = 10;
	public SPythonParserTools parserTools;
    public List<compiler_directive> CompilerDirectives;
	public ParserLambdaHelper lambdaHelper = new ParserLambdaHelper();
	public bool is_unit_to_be_parsed = false;

	public SPythonGPPGParser(AbstractScanner<ValueType, LexLocation> scanner, SPythonParserTools parserTools,
	bool isUnitToBeParsed) : base(scanner) 
	{ 
		this.parserTools = parserTools;
		this.is_unit_to_be_parsed = isUnitToBeParsed;
	}
  // End verbatim content from SPythonParser.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[167];
  private static State[] states = new State[294];
  private static string[] nonTerms = new string[] {
      "ident", "dotted_ident", "func_name_ident", "type_decl_identifier", "expr", 
      "proc_func_call", "const_value", "variable", "optional_condition", "act_param", 
      "new_expr", "is_expr", "variable_as_type", "act_param_list", "optional_act_param_list", 
      "proc_func_decl", "return_stmt", "break_stmt", "continue_stmt", "global_stmt", 
      "pass_stmt", "var_stmt", "assign_stmt", "if_stmt", "stmt", "proc_func_call_stmt", 
      "while_stmt", "for_stmt", "optional_else", "optional_elif", "exit_stmt", 
      "expr_list", "stmt_list", "block", "program", "param_name", "form_param_sect", 
      "form_param_list", "optional_form_param_list", "dotted_ident_list", "ident_as_ident", 
      "ident_as_ident_list", "proc_func_header", "type_ref", "simple_type_identifier", 
      "template_type", "import_clause", "template_type_params", "template_param_list", 
      "parts", "stmt_or_expression", "expr_mapping_list", "optional_semicolon", 
      "end_of_line", "assign_type", "expr_mapping", "list_constant", "set_constant", 
      "dict_constant", "generator_object", "generator_object_for_dict", "$accept", 
      };

  static SPythonGPPGParser() {
    states[0] = new State(new int[]{62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,6,183,5,203,3,208,10,215,11,218,12,220,15,222,17,231,20,233,9,240,13,259,14,267,79,278,81,284,80,288},new int[]{-35,1,-33,3,-25,274,-23,8,-8,9,-1,78,-6,179,-7,180,-57,91,-58,97,-59,108,-22,181,-24,182,-26,201,-27,202,-28,207,-17,214,-18,217,-19,219,-20,221,-21,230,-31,232,-16,237,-43,238,-47,258,-50,276});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{43,275,26,272,25,-166},new int[]{-53,4,-54,6});
    states[4] = new State(new int[]{25,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,6,183,5,203,3,208,10,215,11,218,12,220,15,222,17,231,20,233,9,240,13,259,14,267},new int[]{-25,7,-23,8,-8,9,-1,78,-6,179,-7,180,-57,91,-58,97,-59,108,-22,181,-24,182,-26,201,-27,202,-28,207,-17,214,-18,217,-19,219,-20,221,-21,230,-31,232,-16,237,-43,238,-47,258});
    states[7] = new State(-16);
    states[8] = new State(-17);
    states[9] = new State(new int[]{46,10,34,68,40,157,38,159,42,166,47,170,48,171,49,172,50,173,51,174,52,175,53,176,54,177,55,178},new int[]{-55,164});
    states[10] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,11,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[11] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,43,-51,26,-51,25,-51});
    states[12] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,13,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[13] = new State(new int[]{7,14,6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58});
    states[14] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,15,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[15] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,43,-62,26,-62,25,-62,7,-62,3,-62,41,-62,35,-62,39,-62,37,-62,42,-62});
    states[16] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,17,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[17] = new State(new int[]{6,12,56,-63,58,18,59,20,57,-63,63,-63,64,-63,65,-63,66,-63,67,-63,68,-63,69,-63,70,-63,60,40,61,42,75,-63,76,-63,77,-63,78,-63,74,-63,72,54,4,56,71,-63,43,-63,26,-63,25,-63,7,-63,3,-63,41,-63,35,-63,39,-63,37,-63,42,-63});
    states[18] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,19,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[19] = new State(new int[]{6,12,56,-64,58,-64,59,-64,57,-64,63,-64,64,-64,65,-64,66,-64,67,-64,68,-64,69,-64,70,-64,60,-64,61,-64,75,-64,76,-64,77,-64,78,-64,74,-64,72,54,4,56,71,-64,43,-64,26,-64,25,-64,7,-64,3,-64,41,-64,35,-64,39,-64,37,-64,42,-64});
    states[20] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,21,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[21] = new State(new int[]{6,12,56,-65,58,-65,59,-65,57,-65,63,-65,64,-65,65,-65,66,-65,67,-65,68,-65,69,-65,70,-65,60,-65,61,-65,75,-65,76,-65,77,-65,78,-65,74,-65,72,54,4,56,71,-65,43,-65,26,-65,25,-65,7,-65,3,-65,41,-65,35,-65,39,-65,37,-65,42,-65});
    states[22] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,23,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[23] = new State(new int[]{6,12,56,-66,58,18,59,20,57,-66,63,-66,64,-66,65,-66,66,-66,67,-66,68,-66,69,-66,70,-66,60,40,61,42,75,-66,76,-66,77,-66,78,-66,74,-66,72,54,4,56,71,-66,43,-66,26,-66,25,-66,7,-66,3,-66,41,-66,35,-66,39,-66,37,-66,42,-66});
    states[24] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,25,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[25] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-67,64,-67,65,-67,66,-67,67,-67,68,-67,69,-67,70,-67,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,-67,43,-67,26,-67,25,-67,7,-67,3,-67,41,-67,35,-67,39,-67,37,-67,42,-67});
    states[26] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,27,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[27] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-68,64,-68,65,-68,66,-68,67,-68,68,-68,69,-68,70,-68,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,-68,43,-68,26,-68,25,-68,7,-68,3,-68,41,-68,35,-68,39,-68,37,-68,42,-68});
    states[28] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,29,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[29] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-69,64,-69,65,-69,66,-69,67,-69,68,-69,69,-69,70,-69,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,-69,43,-69,26,-69,25,-69,7,-69,3,-69,41,-69,35,-69,39,-69,37,-69,42,-69});
    states[30] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,31,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[31] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-70,64,-70,65,-70,66,-70,67,-70,68,-70,69,-70,70,-70,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,-70,43,-70,26,-70,25,-70,7,-70,3,-70,41,-70,35,-70,39,-70,37,-70,42,-70});
    states[32] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,33,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[33] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-71,64,-71,65,-71,66,-71,67,-71,68,-71,69,-71,70,-71,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,-71,43,-71,26,-71,25,-71,7,-71,3,-71,41,-71,35,-71,39,-71,37,-71,42,-71});
    states[34] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,35,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[35] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-72,64,-72,65,-72,66,-72,67,-72,68,-72,69,-72,70,-72,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,-72,43,-72,26,-72,25,-72,7,-72,3,-72,41,-72,35,-72,39,-72,37,-72,42,-72});
    states[36] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,37,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[37] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,-73,70,-73,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,43,-73,26,-73,25,-73,7,-73,3,-73,41,-73,35,-73,39,-73,37,-73,42,-73});
    states[38] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,39,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[39] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,-74,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,43,-74,26,-74,25,-74,7,-74,3,-74,41,-74,35,-74,39,-74,37,-74,42,-74});
    states[40] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,41,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[41] = new State(new int[]{6,12,56,-75,58,-75,59,-75,57,-75,63,-75,64,-75,65,-75,66,-75,67,-75,68,-75,69,-75,70,-75,60,-75,61,-75,75,-75,76,-75,77,-75,78,-75,74,-75,72,54,4,56,71,-75,43,-75,26,-75,25,-75,7,-75,3,-75,41,-75,35,-75,39,-75,37,-75,42,-75});
    states[42] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,43,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[43] = new State(new int[]{6,12,56,-76,58,-76,59,-76,57,-76,63,-76,64,-76,65,-76,66,-76,67,-76,68,-76,69,-76,70,-76,60,-76,61,-76,75,-76,76,-76,77,-76,78,-76,74,-76,72,54,4,56,71,-76,43,-76,26,-76,25,-76,7,-76,3,-76,41,-76,35,-76,39,-76,37,-76,42,-76});
    states[44] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,45,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[45] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-77,64,-77,65,-77,66,-77,67,-77,68,-77,69,-77,70,-77,60,40,61,42,75,-77,76,-77,77,-77,78,-77,74,-77,72,54,4,56,71,-77,43,-77,26,-77,25,-77,7,-77,3,-77,41,-77,35,-77,39,-77,37,-77,42,-77});
    states[46] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,47,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[47] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-78,64,-78,65,-78,66,-78,67,-78,68,-78,69,-78,70,-78,60,40,61,42,75,-78,76,-78,77,-78,78,-78,74,-78,72,54,4,56,71,-78,43,-78,26,-78,25,-78,7,-78,3,-78,41,-78,35,-78,39,-78,37,-78,42,-78});
    states[48] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,49,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[49] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-79,64,-79,65,-79,66,-79,67,-79,68,-79,69,-79,70,-79,60,40,61,42,75,44,76,46,77,-79,78,-79,74,-79,72,54,4,56,71,-79,43,-79,26,-79,25,-79,7,-79,3,-79,41,-79,35,-79,39,-79,37,-79,42,-79});
    states[50] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,51,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[51] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-80,64,-80,65,-80,66,-80,67,-80,68,-80,69,-80,70,-80,60,40,61,42,75,44,76,46,77,48,78,-80,74,52,72,54,4,56,71,-80,43,-80,26,-80,25,-80,7,-80,3,-80,41,-80,35,-80,39,-80,37,-80,42,-80});
    states[52] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,53,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[53] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,-81,64,-81,65,-81,66,-81,67,-81,68,-81,69,-81,70,-81,60,40,61,42,75,44,76,46,77,48,78,-81,74,-81,72,54,4,56,71,-81,43,-81,26,-81,25,-81,7,-81,3,-81,41,-81,35,-81,39,-81,37,-81,42,-81});
    states[54] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,55,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[55] = new State(new int[]{6,12,56,-82,58,-82,59,-82,57,-82,63,-82,64,-82,65,-82,66,-82,67,-82,68,-82,69,-82,70,-82,60,-82,61,-82,75,-82,76,-82,77,-82,78,-82,74,-82,72,54,4,56,71,-82,43,-82,26,-82,25,-82,7,-82,3,-82,41,-82,35,-82,39,-82,37,-82,42,-82});
    states[56] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,57,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[57] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,43,-83,26,-83,25,-83,7,-83,3,-83,41,-83,35,-83,39,-83,37,-83,42,-83});
    states[58] = new State(new int[]{4,59});
    states[59] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,60,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[60] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,43,-84,26,-84,25,-84,7,-84,3,-84,41,-84,35,-84,39,-84,37,-84,42,-84});
    states[61] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,62,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[62] = new State(new int[]{6,12,56,-85,58,18,59,20,57,-85,63,-85,64,-85,65,-85,66,-85,67,-85,68,-85,69,-85,70,-85,60,40,61,42,75,-85,76,-85,77,-85,78,-85,74,-85,72,54,4,56,71,-85,43,-85,26,-85,25,-85,7,-85,3,-85,41,-85,35,-85,39,-85,37,-85,42,-85});
    states[63] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,64,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[64] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,-86,70,-86,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,-86,43,-86,26,-86,25,-86,7,-86,3,-86,41,-86,35,-86,39,-86,37,-86,42,-86});
    states[65] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,66,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[66] = new State(new int[]{6,12,56,-87,58,-87,59,-87,57,-87,63,-87,64,-87,65,-87,66,-87,67,-87,68,-87,69,-87,70,-87,60,-87,61,-87,75,-87,76,-87,77,-87,78,-87,74,-87,72,-87,4,56,71,-87,43,-87,26,-87,25,-87,7,-87,3,-87,41,-87,35,-87,39,-87,37,-87,42,-87});
    states[67] = new State(new int[]{34,68,40,157,38,159,22,162,6,-88,56,-88,58,-88,59,-88,57,-88,63,-88,64,-88,65,-88,66,-88,67,-88,68,-88,69,-88,70,-88,60,-88,61,-88,75,-88,76,-88,77,-88,78,-88,74,-88,72,-88,4,-88,71,-88,43,-88,26,-88,25,-88,7,-88,3,-88,41,-88,35,-88,39,-88,37,-88,42,-88});
    states[68] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125,35,-162},new int[]{-15,69,-14,71,-10,115,-5,116,-8,67,-1,75,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124,-60,128});
    states[69] = new State(new int[]{35,70});
    states[70] = new State(-141);
    states[71] = new State(new int[]{41,72,35,-160});
    states[72] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-10,73,-5,74,-8,67,-1,75,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[73] = new State(-159);
    states[74] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,41,-156,35,-156});
    states[75] = new State(new int[]{46,76,34,-117,40,-117,38,-117,22,-117,6,-117,56,-117,58,-117,59,-117,57,-117,63,-117,64,-117,65,-117,66,-117,67,-117,68,-117,69,-117,70,-117,60,-117,61,-117,75,-117,76,-117,77,-117,78,-117,74,-117,72,-117,4,-117,71,-117,3,-117,41,-117,35,-117});
    states[76] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,77,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[77] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,41,-157,35,-157});
    states[78] = new State(-117);
    states[79] = new State(-37);
    states[80] = new State(-118);
    states[81] = new State(new int[]{40,82,6,-89,56,-89,58,-89,59,-89,57,-89,63,-89,64,-89,65,-89,66,-89,67,-89,68,-89,69,-89,70,-89,60,-89,61,-89,75,-89,76,-89,77,-89,78,-89,74,-89,72,-89,4,-89,71,-89,43,-89,26,-89,25,-89,7,-89,3,-89,41,-89,35,-89,39,-89,37,-89,42,-89});
    states[82] = new State(new int[]{62,79},new int[]{-1,83});
    states[83] = new State(-120);
    states[84] = new State(-95);
    states[85] = new State(-96);
    states[86] = new State(-97);
    states[87] = new State(-98);
    states[88] = new State(-99);
    states[89] = new State(-100);
    states[90] = new State(-101);
    states[91] = new State(-121);
    states[92] = new State(new int[]{39,153,57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-32,93,-60,154,-5,156,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[93] = new State(new int[]{39,94,41,95});
    states[94] = new State(-133);
    states[95] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,96,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[96] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,39,-103,41,-103,37,-103});
    states[97] = new State(-122);
    states[98] = new State(new int[]{37,141,57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-32,99,-52,101,-60,142,-61,144,-5,146,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124,-56,147});
    states[99] = new State(new int[]{37,100,41,95});
    states[100] = new State(-132);
    states[101] = new State(new int[]{37,102,41,103});
    states[102] = new State(-130);
    states[103] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-56,104,-5,105,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[104] = new State(-48);
    states[105] = new State(new int[]{42,106,6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58});
    states[106] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,107,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[107] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,3,-46,37,-46,41,-46});
    states[108] = new State(-123);
    states[109] = new State(-90);
    states[110] = new State(new int[]{62,79},new int[]{-44,111,-45,129,-1,138,-46,139});
    states[111] = new State(new int[]{34,112});
    states[112] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125,35,-162},new int[]{-15,113,-14,71,-10,115,-5,116,-8,67,-1,75,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124,-60,128});
    states[113] = new State(new int[]{35,114});
    states[114] = new State(-94);
    states[115] = new State(-158);
    states[116] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,3,117,41,-156,35,-156});
    states[117] = new State(new int[]{62,79},new int[]{-1,118});
    states[118] = new State(new int[]{4,119});
    states[119] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,120,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[120] = new State(new int[]{6,122,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,35,-135,39,-135,37,-135},new int[]{-9,121});
    states[121] = new State(-128);
    states[122] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,123,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[123] = new State(new int[]{7,14,6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,35,-136,39,-136,37,-136});
    states[124] = new State(-91);
    states[125] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,126,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[126] = new State(new int[]{35,127,6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58});
    states[127] = new State(-92);
    states[128] = new State(-161);
    states[129] = new State(new int[]{40,130,38,133,34,-144,39,-144,41,-144,6,-144,56,-144,58,-144,59,-144,57,-144,63,-144,64,-144,65,-144,66,-144,67,-144,68,-144,69,-144,70,-144,60,-144,61,-144,75,-144,76,-144,77,-144,78,-144,74,-144,72,-144,4,-144,71,-144,43,-144,26,-144,25,-144,7,-144,3,-144,35,-144,37,-144,42,-144,46,-144},new int[]{-48,132});
    states[130] = new State(new int[]{62,79},new int[]{-1,131});
    states[131] = new State(-143);
    states[132] = new State(-146);
    states[133] = new State(new int[]{62,79},new int[]{-49,134,-44,140,-45,129,-1,138,-46,139});
    states[134] = new State(new int[]{39,135,41,136});
    states[135] = new State(-147);
    states[136] = new State(new int[]{62,79},new int[]{-44,137,-45,129,-1,138,-46,139});
    states[137] = new State(-149);
    states[138] = new State(-142);
    states[139] = new State(-145);
    states[140] = new State(-148);
    states[141] = new State(-131);
    states[142] = new State(new int[]{37,143});
    states[143] = new State(-126);
    states[144] = new State(new int[]{37,145});
    states[145] = new State(-127);
    states[146] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,42,106,3,117,37,-102,41,-102});
    states[147] = new State(new int[]{3,148,37,-47,41,-47});
    states[148] = new State(new int[]{62,79},new int[]{-1,149});
    states[149] = new State(new int[]{4,150});
    states[150] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,151,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[151] = new State(new int[]{6,122,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,37,-135},new int[]{-9,152});
    states[152] = new State(-129);
    states[153] = new State(-134);
    states[154] = new State(new int[]{39,155});
    states[155] = new State(-125);
    states[156] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,3,117,39,-102,41,-102});
    states[157] = new State(new int[]{62,79},new int[]{-1,158});
    states[158] = new State(-119);
    states[159] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,160,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[160] = new State(new int[]{39,161,6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58});
    states[161] = new State(-124);
    states[162] = new State(new int[]{62,79},new int[]{-44,163,-45,129,-1,138,-46,139});
    states[163] = new State(-93);
    states[164] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,165,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[165] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,43,-52,26,-52,25,-52});
    states[166] = new State(new int[]{62,79},new int[]{-44,167,-45,129,-1,138,-46,139});
    states[167] = new State(new int[]{46,168,43,-49,26,-49,25,-49});
    states[168] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,169,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[169] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,43,-50,26,-50,25,-50});
    states[170] = new State(-53);
    states[171] = new State(-54);
    states[172] = new State(-55);
    states[173] = new State(-56);
    states[174] = new State(-57);
    states[175] = new State(-58);
    states[176] = new State(-59);
    states[177] = new State(-60);
    states[178] = new State(-61);
    states[179] = new State(new int[]{46,-118,34,-118,40,-118,38,-118,42,-118,47,-118,48,-118,49,-118,50,-118,51,-118,52,-118,53,-118,54,-118,55,-118,43,-116,26,-116,25,-116});
    states[180] = new State(new int[]{40,82});
    states[181] = new State(-18);
    states[182] = new State(-19);
    states[183] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,184,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[184] = new State(new int[]{42,185,6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58});
    states[185] = new State(new int[]{23,197},new int[]{-34,186});
    states[186] = new State(new int[]{8,188,7,194,43,-108,26,-108,25,-108},new int[]{-30,187,-29,193});
    states[187] = new State(-104);
    states[188] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,189,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[189] = new State(new int[]{42,190,6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58});
    states[190] = new State(new int[]{23,197},new int[]{-34,191});
    states[191] = new State(new int[]{8,188,7,194,43,-108,26,-108,25,-108},new int[]{-30,192,-29,193});
    states[192] = new State(-105);
    states[193] = new State(-106);
    states[194] = new State(new int[]{42,195});
    states[195] = new State(new int[]{23,197},new int[]{-34,196});
    states[196] = new State(-107);
    states[197] = new State(new int[]{62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,6,183,5,203,3,208,10,215,11,218,12,220,15,222,17,231,20,233,9,240,13,259,14,267},new int[]{-33,198,-25,274,-23,8,-8,9,-1,78,-6,179,-7,180,-57,91,-58,97,-59,108,-22,181,-24,182,-26,201,-27,202,-28,207,-17,214,-18,217,-19,219,-20,221,-21,230,-31,232,-16,237,-43,238,-47,258});
    states[198] = new State(new int[]{26,272,43,273},new int[]{-54,199});
    states[199] = new State(new int[]{24,200,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,6,183,5,203,3,208,10,215,11,218,12,220,15,222,17,231,20,233,9,240,13,259,14,267},new int[]{-25,7,-23,8,-8,9,-1,78,-6,179,-7,180,-57,91,-58,97,-59,108,-22,181,-24,182,-26,201,-27,202,-28,207,-17,214,-18,217,-19,219,-20,221,-21,230,-31,232,-16,237,-43,238,-47,258});
    states[200] = new State(-137);
    states[201] = new State(-20);
    states[202] = new State(-21);
    states[203] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,204,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[204] = new State(new int[]{42,205,6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58});
    states[205] = new State(new int[]{23,197},new int[]{-34,206});
    states[206] = new State(-109);
    states[207] = new State(-22);
    states[208] = new State(new int[]{62,79},new int[]{-1,209});
    states[209] = new State(new int[]{4,210});
    states[210] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,211,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[211] = new State(new int[]{42,212,6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58});
    states[212] = new State(new int[]{23,197},new int[]{-34,213});
    states[213] = new State(-110);
    states[214] = new State(-23);
    states[215] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125,43,-113,26,-113,25,-113},new int[]{-5,216,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[216] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,43,-112,26,-112,25,-112});
    states[217] = new State(-24);
    states[218] = new State(-114);
    states[219] = new State(-25);
    states[220] = new State(-115);
    states[221] = new State(-26);
    states[222] = new State(new int[]{62,79},new int[]{-40,223,-2,229,-1,228});
    states[223] = new State(new int[]{41,224,43,-36,26,-36,25,-36});
    states[224] = new State(new int[]{62,79},new int[]{-2,225,-1,228});
    states[225] = new State(new int[]{40,226,41,-41,43,-41,26,-41,25,-41});
    states[226] = new State(new int[]{62,79},new int[]{-1,227});
    states[227] = new State(-39);
    states[228] = new State(-38);
    states[229] = new State(new int[]{40,226,41,-40,43,-40,26,-40,25,-40});
    states[230] = new State(-27);
    states[231] = new State(-34);
    states[232] = new State(-28);
    states[233] = new State(new int[]{34,234});
    states[234] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125,35,-162},new int[]{-15,235,-14,71,-10,115,-5,116,-8,67,-1,75,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124,-60,128});
    states[235] = new State(new int[]{35,236});
    states[236] = new State(-35);
    states[237] = new State(-29);
    states[238] = new State(new int[]{23,197},new int[]{-34,239});
    states[239] = new State(-138);
    states[240] = new State(new int[]{62,79},new int[]{-3,241,-1,257});
    states[241] = new State(new int[]{34,242});
    states[242] = new State(new int[]{62,79,35,-155},new int[]{-39,243,-38,249,-37,256,-36,252,-1,255});
    states[243] = new State(new int[]{35,244});
    states[244] = new State(new int[]{42,245,44,246});
    states[245] = new State(-139);
    states[246] = new State(new int[]{62,79},new int[]{-44,247,-45,129,-1,138,-46,139});
    states[247] = new State(new int[]{42,248});
    states[248] = new State(-140);
    states[249] = new State(new int[]{41,250,35,-154});
    states[250] = new State(new int[]{62,79},new int[]{-37,251,-36,252,-1,255});
    states[251] = new State(-153);
    states[252] = new State(new int[]{42,253});
    states[253] = new State(new int[]{62,79},new int[]{-44,254,-45,129,-1,138,-46,139});
    states[254] = new State(-151);
    states[255] = new State(-150);
    states[256] = new State(-152);
    states[257] = new State(-111);
    states[258] = new State(-30);
    states[259] = new State(new int[]{62,79},new int[]{-42,260,-41,266,-1,263});
    states[260] = new State(new int[]{41,261,43,-31,26,-31,25,-31});
    states[261] = new State(new int[]{62,79},new int[]{-41,262,-1,263});
    states[262] = new State(-45);
    states[263] = new State(new int[]{16,264,41,-43,43,-43,26,-43,25,-43});
    states[264] = new State(new int[]{62,79},new int[]{-1,265});
    states[265] = new State(-42);
    states[266] = new State(-44);
    states[267] = new State(new int[]{62,79},new int[]{-1,268});
    states[268] = new State(new int[]{13,269});
    states[269] = new State(new int[]{58,271,62,79},new int[]{-42,270,-41,266,-1,263});
    states[270] = new State(new int[]{41,261,43,-32,26,-32,25,-32});
    states[271] = new State(-33);
    states[272] = new State(-163);
    states[273] = new State(-164);
    states[274] = new State(-15);
    states[275] = new State(new int[]{25,-165,62,-164,28,-164,29,-164,30,-164,31,-164,45,-164,33,-164,32,-164,38,-164,36,-164,6,-164,5,-164,3,-164,10,-164,11,-164,12,-164,15,-164,17,-164,20,-164,9,-164,13,-164,14,-164});
    states[276] = new State(new int[]{25,277});
    states[277] = new State(-3);
    states[278] = new State(new int[]{27,280,57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-5,279,-8,67,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124});
    states[279] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,25,-4});
    states[280] = new State(new int[]{62,79},new int[]{-4,281,-1,282});
    states[281] = new State(-5);
    states[282] = new State(new int[]{38,133,25,-8},new int[]{-48,283});
    states[283] = new State(-9);
    states[284] = new State(new int[]{62,79},new int[]{-13,285,-2,286,-1,228});
    states[285] = new State(-6);
    states[286] = new State(new int[]{40,226,38,133,25,-10},new int[]{-48,287});
    states[287] = new State(-11);
    states[288] = new State(new int[]{57,61,71,63,73,65,62,79,28,84,29,85,30,86,31,87,45,88,33,89,32,90,38,92,36,98,21,110,34,125},new int[]{-51,289,-5,290,-8,291,-1,78,-6,80,-7,81,-57,91,-58,97,-59,108,-11,109,-12,124,-23,292,-22,293});
    states[289] = new State(-7);
    states[290] = new State(new int[]{6,12,56,16,58,18,59,20,57,22,63,24,64,26,65,28,66,30,67,32,68,34,69,36,70,38,60,40,61,42,75,44,76,46,77,48,78,50,74,52,72,54,4,56,71,58,25,-12});
    states[291] = new State(new int[]{34,68,40,157,38,159,22,162,46,10,42,166,47,170,48,171,49,172,50,173,51,174,52,175,53,176,54,177,55,178,6,-88,56,-88,58,-88,59,-88,57,-88,63,-88,64,-88,65,-88,66,-88,67,-88,68,-88,69,-88,70,-88,60,-88,61,-88,75,-88,76,-88,77,-88,78,-88,74,-88,72,-88,4,-88,71,-88,25,-88},new int[]{-55,164});
    states[292] = new State(-13);
    states[293] = new State(-14);

    rules[1] = new Rule(-62, new int[]{-35,2});
    rules[2] = new Rule(-35, new int[]{-33,-53,25});
    rules[3] = new Rule(-35, new int[]{-50,25});
    rules[4] = new Rule(-50, new int[]{79,-5});
    rules[5] = new Rule(-50, new int[]{79,27,-4});
    rules[6] = new Rule(-50, new int[]{81,-13});
    rules[7] = new Rule(-50, new int[]{80,-51});
    rules[8] = new Rule(-4, new int[]{-1});
    rules[9] = new Rule(-4, new int[]{-1,-48});
    rules[10] = new Rule(-13, new int[]{-2});
    rules[11] = new Rule(-13, new int[]{-2,-48});
    rules[12] = new Rule(-51, new int[]{-5});
    rules[13] = new Rule(-51, new int[]{-23});
    rules[14] = new Rule(-51, new int[]{-22});
    rules[15] = new Rule(-33, new int[]{-25});
    rules[16] = new Rule(-33, new int[]{-33,-54,-25});
    rules[17] = new Rule(-25, new int[]{-23});
    rules[18] = new Rule(-25, new int[]{-22});
    rules[19] = new Rule(-25, new int[]{-24});
    rules[20] = new Rule(-25, new int[]{-26});
    rules[21] = new Rule(-25, new int[]{-27});
    rules[22] = new Rule(-25, new int[]{-28});
    rules[23] = new Rule(-25, new int[]{-17});
    rules[24] = new Rule(-25, new int[]{-18});
    rules[25] = new Rule(-25, new int[]{-19});
    rules[26] = new Rule(-25, new int[]{-20});
    rules[27] = new Rule(-25, new int[]{-21});
    rules[28] = new Rule(-25, new int[]{-31});
    rules[29] = new Rule(-25, new int[]{-16});
    rules[30] = new Rule(-25, new int[]{-47});
    rules[31] = new Rule(-47, new int[]{13,-42});
    rules[32] = new Rule(-47, new int[]{14,-1,13,-42});
    rules[33] = new Rule(-47, new int[]{14,-1,13,58});
    rules[34] = new Rule(-21, new int[]{17});
    rules[35] = new Rule(-31, new int[]{20,34,-15,35});
    rules[36] = new Rule(-20, new int[]{15,-40});
    rules[37] = new Rule(-1, new int[]{62});
    rules[38] = new Rule(-2, new int[]{-1});
    rules[39] = new Rule(-2, new int[]{-2,40,-1});
    rules[40] = new Rule(-40, new int[]{-2});
    rules[41] = new Rule(-40, new int[]{-40,41,-2});
    rules[42] = new Rule(-41, new int[]{-1,16,-1});
    rules[43] = new Rule(-41, new int[]{-1});
    rules[44] = new Rule(-42, new int[]{-41});
    rules[45] = new Rule(-42, new int[]{-42,41,-41});
    rules[46] = new Rule(-56, new int[]{-5,42,-5});
    rules[47] = new Rule(-52, new int[]{-56});
    rules[48] = new Rule(-52, new int[]{-52,41,-56});
    rules[49] = new Rule(-22, new int[]{-8,42,-44});
    rules[50] = new Rule(-22, new int[]{-8,42,-44,46,-5});
    rules[51] = new Rule(-23, new int[]{-8,46,-5});
    rules[52] = new Rule(-23, new int[]{-8,-55,-5});
    rules[53] = new Rule(-55, new int[]{47});
    rules[54] = new Rule(-55, new int[]{48});
    rules[55] = new Rule(-55, new int[]{49});
    rules[56] = new Rule(-55, new int[]{50});
    rules[57] = new Rule(-55, new int[]{51});
    rules[58] = new Rule(-55, new int[]{52});
    rules[59] = new Rule(-55, new int[]{53});
    rules[60] = new Rule(-55, new int[]{54});
    rules[61] = new Rule(-55, new int[]{55});
    rules[62] = new Rule(-5, new int[]{-5,6,-5,7,-5});
    rules[63] = new Rule(-5, new int[]{-5,56,-5});
    rules[64] = new Rule(-5, new int[]{-5,58,-5});
    rules[65] = new Rule(-5, new int[]{-5,59,-5});
    rules[66] = new Rule(-5, new int[]{-5,57,-5});
    rules[67] = new Rule(-5, new int[]{-5,63,-5});
    rules[68] = new Rule(-5, new int[]{-5,64,-5});
    rules[69] = new Rule(-5, new int[]{-5,65,-5});
    rules[70] = new Rule(-5, new int[]{-5,66,-5});
    rules[71] = new Rule(-5, new int[]{-5,67,-5});
    rules[72] = new Rule(-5, new int[]{-5,68,-5});
    rules[73] = new Rule(-5, new int[]{-5,69,-5});
    rules[74] = new Rule(-5, new int[]{-5,70,-5});
    rules[75] = new Rule(-5, new int[]{-5,60,-5});
    rules[76] = new Rule(-5, new int[]{-5,61,-5});
    rules[77] = new Rule(-5, new int[]{-5,75,-5});
    rules[78] = new Rule(-5, new int[]{-5,76,-5});
    rules[79] = new Rule(-5, new int[]{-5,77,-5});
    rules[80] = new Rule(-5, new int[]{-5,78,-5});
    rules[81] = new Rule(-5, new int[]{-5,74,-5});
    rules[82] = new Rule(-5, new int[]{-5,72,-5});
    rules[83] = new Rule(-5, new int[]{-5,4,-5});
    rules[84] = new Rule(-5, new int[]{-5,71,4,-5});
    rules[85] = new Rule(-5, new int[]{57,-5});
    rules[86] = new Rule(-5, new int[]{71,-5});
    rules[87] = new Rule(-5, new int[]{73,-5});
    rules[88] = new Rule(-5, new int[]{-8});
    rules[89] = new Rule(-5, new int[]{-7});
    rules[90] = new Rule(-5, new int[]{-11});
    rules[91] = new Rule(-5, new int[]{-12});
    rules[92] = new Rule(-5, new int[]{34,-5,35});
    rules[93] = new Rule(-12, new int[]{-8,22,-44});
    rules[94] = new Rule(-11, new int[]{21,-44,34,-15,35});
    rules[95] = new Rule(-7, new int[]{28});
    rules[96] = new Rule(-7, new int[]{29});
    rules[97] = new Rule(-7, new int[]{30});
    rules[98] = new Rule(-7, new int[]{31});
    rules[99] = new Rule(-7, new int[]{45});
    rules[100] = new Rule(-7, new int[]{33});
    rules[101] = new Rule(-7, new int[]{32});
    rules[102] = new Rule(-32, new int[]{-5});
    rules[103] = new Rule(-32, new int[]{-32,41,-5});
    rules[104] = new Rule(-24, new int[]{6,-5,42,-34,-30});
    rules[105] = new Rule(-30, new int[]{8,-5,42,-34,-30});
    rules[106] = new Rule(-30, new int[]{-29});
    rules[107] = new Rule(-29, new int[]{7,42,-34});
    rules[108] = new Rule(-29, new int[]{});
    rules[109] = new Rule(-27, new int[]{5,-5,42,-34});
    rules[110] = new Rule(-28, new int[]{3,-1,4,-5,42,-34});
    rules[111] = new Rule(-3, new int[]{-1});
    rules[112] = new Rule(-17, new int[]{10,-5});
    rules[113] = new Rule(-17, new int[]{10});
    rules[114] = new Rule(-18, new int[]{11});
    rules[115] = new Rule(-19, new int[]{12});
    rules[116] = new Rule(-26, new int[]{-6});
    rules[117] = new Rule(-8, new int[]{-1});
    rules[118] = new Rule(-8, new int[]{-6});
    rules[119] = new Rule(-8, new int[]{-8,40,-1});
    rules[120] = new Rule(-8, new int[]{-7,40,-1});
    rules[121] = new Rule(-8, new int[]{-57});
    rules[122] = new Rule(-8, new int[]{-58});
    rules[123] = new Rule(-8, new int[]{-59});
    rules[124] = new Rule(-8, new int[]{-8,38,-5,39});
    rules[125] = new Rule(-8, new int[]{38,-60,39});
    rules[126] = new Rule(-8, new int[]{36,-60,37});
    rules[127] = new Rule(-8, new int[]{36,-61,37});
    rules[128] = new Rule(-60, new int[]{-5,3,-1,4,-5,-9});
    rules[129] = new Rule(-61, new int[]{-56,3,-1,4,-5,-9});
    rules[130] = new Rule(-59, new int[]{36,-52,37});
    rules[131] = new Rule(-59, new int[]{36,37});
    rules[132] = new Rule(-58, new int[]{36,-32,37});
    rules[133] = new Rule(-57, new int[]{38,-32,39});
    rules[134] = new Rule(-57, new int[]{38,39});
    rules[135] = new Rule(-9, new int[]{});
    rules[136] = new Rule(-9, new int[]{6,-5});
    rules[137] = new Rule(-34, new int[]{23,-33,-54,24});
    rules[138] = new Rule(-16, new int[]{-43,-34});
    rules[139] = new Rule(-43, new int[]{9,-3,34,-39,35,42});
    rules[140] = new Rule(-43, new int[]{9,-3,34,-39,35,44,-44,42});
    rules[141] = new Rule(-6, new int[]{-8,34,-15,35});
    rules[142] = new Rule(-45, new int[]{-1});
    rules[143] = new Rule(-45, new int[]{-45,40,-1});
    rules[144] = new Rule(-44, new int[]{-45});
    rules[145] = new Rule(-44, new int[]{-46});
    rules[146] = new Rule(-46, new int[]{-45,-48});
    rules[147] = new Rule(-48, new int[]{38,-49,39});
    rules[148] = new Rule(-49, new int[]{-44});
    rules[149] = new Rule(-49, new int[]{-49,41,-44});
    rules[150] = new Rule(-36, new int[]{-1});
    rules[151] = new Rule(-37, new int[]{-36,42,-44});
    rules[152] = new Rule(-38, new int[]{-37});
    rules[153] = new Rule(-38, new int[]{-38,41,-37});
    rules[154] = new Rule(-39, new int[]{-38});
    rules[155] = new Rule(-39, new int[]{});
    rules[156] = new Rule(-10, new int[]{-5});
    rules[157] = new Rule(-10, new int[]{-1,46,-5});
    rules[158] = new Rule(-14, new int[]{-10});
    rules[159] = new Rule(-14, new int[]{-14,41,-10});
    rules[160] = new Rule(-15, new int[]{-14});
    rules[161] = new Rule(-15, new int[]{-60});
    rules[162] = new Rule(-15, new int[]{});
    rules[163] = new Rule(-54, new int[]{26});
    rules[164] = new Rule(-54, new int[]{43});
    rules[165] = new Rule(-53, new int[]{43});
    rules[166] = new Rule(-53, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> stmt_list, optional_semicolon, END_OF_FILE
{
			// main program
			if (!is_unit_to_be_parsed) {
				var stl = ValueStack[ValueStack.Depth-3].stn as statement_list;
				stl.left_logical_bracket = new token_info("");
				stl.right_logical_bracket = new token_info("");
				var bl = new block(new declarations(), stl, CurrentLocationSpan);
				root = CurrentSemanticValue.stn = NewProgramModule(null, null, new uses_list(), bl, ValueStack[ValueStack.Depth-2].ob, CurrentLocationSpan);
				root.source_context = bl.source_context;
			}
			// unit
			else {
				var interface_part = new interface_node(new declarations(), new uses_list(), null, null);
				var initialization_part = new initfinal_part(null, ValueStack[ValueStack.Depth-3].stn as statement_list, null, null, null, CurrentLocationSpan);

				root = CurrentSemanticValue.stn = new unit_module(
					new unit_name(new ident(Path.GetFileNameWithoutExtension(parserTools.currentFileName)),
					UnitHeaderKeyword.Unit, CurrentLocationSpan), interface_part, null,
					initialization_part.initialization_sect,
					initialization_part.finalization_sect, null, CurrentLocationSpan);
			}
		}
        break;
      case 3: // program -> parts, END_OF_FILE
{ 
			root = ValueStack[ValueStack.Depth-2].stn; 
		}
        break;
      case 4: // parts -> tkParseModeExpression, expr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 5: // parts -> tkParseModeExpression, DECLTYPE, type_decl_identifier
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 6: // parts -> tkParseModeType, variable_as_type
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 7: // parts -> tkParseModeStatement, stmt_or_expression
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 8: // type_decl_identifier -> ident
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 9: // type_decl_identifier -> ident, template_type_params
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-2].id.name, ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 10: // variable_as_type -> dotted_ident
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 11: // variable_as_type -> dotted_ident, template_type_params
{ 
			CurrentSemanticValue.ex = new ident_with_templateparams(ValueStack[ValueStack.Depth-2].id as addressed_value, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan);   
		}
        break;
      case 12: // stmt_or_expression -> expr
{ CurrentSemanticValue.stn = new expression_as_statement(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);}
        break;
      case 13: // stmt_or_expression -> assign_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 14: // stmt_or_expression -> var_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 15: // stmt_list -> stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 16: // stmt_list -> stmt_list, end_of_line, stmt
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 17: // stmt -> assign_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 18: // stmt -> var_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 19: // stmt -> if_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 20: // stmt -> proc_func_call_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 21: // stmt -> while_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 22: // stmt -> for_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 23: // stmt -> return_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 24: // stmt -> break_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 25: // stmt -> continue_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 26: // stmt -> global_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 27: // stmt -> pass_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 28: // stmt -> exit_stmt
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 29: // stmt -> proc_func_decl
{
			CurrentSemanticValue.stn = new declarations_as_statement(new declarations(ValueStack[ValueStack.Depth-1].stn as procedure_definition, CurrentLocationSpan), CurrentLocationSpan);
		}
        break;
      case 30: // stmt -> import_clause
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 31: // import_clause -> IMPORT, ident_as_ident_list
{
			CurrentSemanticValue.stn = new import_statement(ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
		}
        break;
      case 32: // import_clause -> FROM, ident, IMPORT, ident_as_ident_list
{
			CurrentSemanticValue.stn = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, false, ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
		}
        break;
      case 33: // import_clause -> FROM, ident, IMPORT, STAR
{
			CurrentSemanticValue.stn = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, true, null, CurrentLocationSpan);
		}
        break;
      case 34: // pass_stmt -> PASS
{
			CurrentSemanticValue.stn = new empty_statement();
		}
        break;
      case 35: // exit_stmt -> EXIT, LPAR, optional_act_param_list, RPAR
{
			parserTools.AddErrorFromResource("UNSUPPORTED_CONSTRUCTION_{0}", CurrentLocationSpan, "exit");
		}
        break;
      case 36: // global_stmt -> GLOBAL, dotted_ident_list
{
			CurrentSemanticValue.stn = new global_statement(ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan);
		}
        break;
      case 37: // ident -> ID
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 38: // dotted_ident -> ident
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 39: // dotted_ident -> dotted_ident, DOT, ident
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-3].id.name + "." + ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan); 
		}
        break;
      case 40: // dotted_ident_list -> dotted_ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 41: // dotted_ident_list -> dotted_ident_list, COMMA, dotted_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 42: // ident_as_ident -> ident, AS, ident
{ 
			CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 43: // ident_as_ident -> ident
{ 
			CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-1].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 44: // ident_as_ident_list -> ident_as_ident
{
			CurrentSemanticValue.stn = new as_statement_list(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 45: // ident_as_ident_list -> ident_as_ident_list, COMMA, ident_as_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as as_statement_list).Add(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 46: // expr_mapping -> expr, COLON, expr
{
			expression_list el = new expression_list(new List<expression> { ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex }, CurrentLocationSpan);
			CurrentSemanticValue.ex = new tuple_node(el, CurrentLocationSpan);
		}
        break;
      case 47: // expr_mapping_list -> expr_mapping
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 48: // expr_mapping_list -> expr_mapping_list, COMMA, expr_mapping
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 49: // var_stmt -> variable, COLON, type_ref
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-3].ex as ident, LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 50: // var_stmt -> variable, COLON, type_ref, ASSIGN, expr
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-5].ex as ident, LocationStack[LocationStack.Depth-5]), ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 51: // assign_stmt -> variable, ASSIGN, expr
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO", CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 52: // assign_stmt -> variable, assign_type, expr
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO", CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 53: // assign_type -> PLUSEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 54: // assign_type -> MINUSEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 55: // assign_type -> STAREQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 56: // assign_type -> DIVEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 57: // assign_type -> BINXOREQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 58: // assign_type -> SHLEQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 59: // assign_type -> SHREQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 60: // assign_type -> BINANDEQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 61: // assign_type -> BINOREQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 62: // expr -> expr, IF, expr, ELSE, expr
{
			CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 63: // expr -> expr, PLUS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 64: // expr -> expr, STAR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 65: // expr -> expr, DIVIDE, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 66: // expr -> expr, MINUS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 67: // expr -> expr, LESS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 68: // expr -> expr, GREATER, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 69: // expr -> expr, LESSEQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 70: // expr -> expr, GREATEREQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 71: // expr -> expr, EQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 72: // expr -> expr, NOTEQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 73: // expr -> expr, AND, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 74: // expr -> expr, OR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 75: // expr -> expr, SLASHSLASH, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 76: // expr -> expr, PERCENTAGE, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 77: // expr -> expr, SHL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 78: // expr -> expr, SHR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 79: // expr -> expr, BINAND, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 80: // expr -> expr, BINOR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 81: // expr -> expr, BINXOR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 82: // expr -> expr, STARSTAR, expr
{
			addressed_value method_name = new ident("!pow", CurrentLocationSpan);
			expression_list el = new expression_list(new List<expression> { ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex }, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(method_name, el, CurrentLocationSpan);
		}
        break;
      case 83: // expr -> expr, IN, expr
{
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, Operators.In, CurrentLocationSpan); 
		}
        break;
      case 84: // expr -> expr, NOT, IN, expr
{
			// $$ = new bin_expr($1, $4, Operators.NotIn, @$); 
			CurrentSemanticValue.ex = new un_expr(new bin_expr(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-1].ex, Operators.In, CurrentLocationSpan),Operators.LogicalNOT,CurrentLocationSpan);
		}
        break;
      case 85: // expr -> MINUS, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 86: // expr -> NOT, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 87: // expr -> BINNOT, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 88: // expr -> variable
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 89: // expr -> const_value
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 90: // expr -> new_expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 91: // expr -> is_expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 92: // expr -> LPAR, expr, RPAR
{ 
			CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 93: // is_expr -> variable, IS, type_ref
{
			CurrentSemanticValue.ex = parserTools.NewAsIsExpr(ValueStack[ValueStack.Depth-3].ex, op_typecast.is_op, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 94: // new_expr -> NEW, type_ref, LPAR, optional_act_param_list, RPAR
{
			CurrentSemanticValue.ex = new new_expr(ValueStack[ValueStack.Depth-4].td, ValueStack[ValueStack.Depth-2].stn as expression_list, false, null, CurrentLocationSpan);
		}
        break;
      case 95: // const_value -> INTNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 96: // const_value -> REALNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 97: // const_value -> TRUE
{ 
			CurrentSemanticValue.ex = new ident("true", CurrentLocationSpan); 
		}
        break;
      case 98: // const_value -> FALSE
{ 
			CurrentSemanticValue.ex = new ident("false", CurrentLocationSpan); 
		}
        break;
      case 99: // const_value -> STRINGNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; 
		}
        break;
      case 100: // const_value -> FSTRINGNUM
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 101: // const_value -> BIGINT
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 102: // expr_list -> expr
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 103: // expr_list -> expr_list, COMMA, expr
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 104: // if_stmt -> IF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 105: // optional_elif -> ELIF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 106: // optional_elif -> optional_else
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 107: // optional_else -> ELSE, COLON, block
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 108: // optional_else -> /* empty */
{ 
			CurrentSemanticValue.stn = null; 
		}
        break;
      case 109: // while_stmt -> WHILE, expr, COLON, block
{
			CurrentSemanticValue.stn = new while_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, WhileCycleType.While, CurrentLocationSpan);
		}
        break;
      case 110: // for_stmt -> FOR, ident, IN, expr, COLON, block
{
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-5].id, new no_type_foreach(), ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan);
		}
        break;
      case 111: // func_name_ident -> ident
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 112: // return_stmt -> RETURN, expr
{
			CurrentSemanticValue.stn = new return_statement(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 113: // return_stmt -> RETURN
{
			CurrentSemanticValue.stn = new return_statement(null, CurrentLocationSpan);
		}
        break;
      case 114: // break_stmt -> BREAK
{
			CurrentSemanticValue.stn = new procedure_call(new ident("break", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 115: // continue_stmt -> CONTINUE
{
			CurrentSemanticValue.stn = new procedure_call(new ident("continue", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 116: // proc_func_call_stmt -> proc_func_call
{
			CurrentSemanticValue.stn = new procedure_call(ValueStack[ValueStack.Depth-1].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex is ident, CurrentLocationSpan);
		}
        break;
      case 117: // variable -> ident
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 118: // variable -> proc_func_call
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 119: // variable -> variable, DOT, ident
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 120: // variable -> const_value, DOT, ident
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 121: // variable -> list_constant
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 122: // variable -> set_constant
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 123: // variable -> dict_constant
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 124: // variable -> variable, LBRACKET, expr, RBRACKET
{
			var el = new expression_list(ValueStack[ValueStack.Depth-2].ex as expression, CurrentLocationSpan);
			CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-4].ex as addressed_value, el, CurrentLocationSpan);
		}
        break;
      case 125: // variable -> LBRACKET, generator_object, RBRACKET
{
			dot_node dn = new dot_node(ValueStack[ValueStack.Depth-2].ex as addressed_value, (new ident("ToList")) as addressed_value, ValueStack[ValueStack.Depth-2].ex.source_context);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, ValueStack[ValueStack.Depth-2].ex.source_context);
		}
        break;
      case 126: // variable -> LBRACE, generator_object, RBRACE
{
			dot_node dn = new dot_node(ValueStack[ValueStack.Depth-2].ex as addressed_value, (new ident("ToSet")) as addressed_value, ValueStack[ValueStack.Depth-2].ex.source_context);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, ValueStack[ValueStack.Depth-2].ex.source_context);
		}
        break;
      case 127: // variable -> LBRACE, generator_object_for_dict, RBRACE
{
			dot_node dn = new dot_node(ValueStack[ValueStack.Depth-2].ex as addressed_value, (new ident("ToDictionary")) as addressed_value, ValueStack[ValueStack.Depth-2].ex.source_context);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, ValueStack[ValueStack.Depth-2].ex.source_context);
		}
        break;
      case 128: // generator_object -> expr, FOR, ident, IN, expr, optional_condition
{
			CurrentSemanticValue.ex = new generator_object(ValueStack[ValueStack.Depth-6].ex, ValueStack[ValueStack.Depth-4].id, ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 129: // generator_object_for_dict -> expr_mapping, FOR, ident, IN, expr, 
                //                              optional_condition
{
			CurrentSemanticValue.ex = new generator_object(ValueStack[ValueStack.Depth-6].ex, ValueStack[ValueStack.Depth-4].id, ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 130: // dict_constant -> LBRACE, expr_mapping_list, RBRACE
{
			CurrentSemanticValue.ex = new method_call(new ident("Dict", CurrentLocationSpan), ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 131: // dict_constant -> LBRACE, RBRACE
{
			CurrentSemanticValue.ex = new method_call(new ident("!empty_dict", CurrentLocationSpan), null, CurrentLocationSpan);
		}
        break;
      case 132: // set_constant -> LBRACE, expr_list, RBRACE
{
			CurrentSemanticValue.ex = new pascal_set_constant(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 133: // list_constant -> LBRACKET, expr_list, RBRACKET
{
			var acn = new array_const_new(ValueStack[ValueStack.Depth-2].stn as expression_list, '|', CurrentLocationSpan);
			var dn = new dot_node(acn as addressed_value, (new ident("ToList", CurrentLocationSpan)) as addressed_value, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, CurrentLocationSpan);
		}
        break;
      case 134: // list_constant -> LBRACKET, RBRACKET
{
			CurrentSemanticValue.ex = new method_call(new ident("!empty_list", CurrentLocationSpan), null, CurrentLocationSpan);
		}
        break;
      case 135: // optional_condition -> /* empty */
{ 
			CurrentSemanticValue.ex = null; 
		}
        break;
      case 136: // optional_condition -> IF, expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 137: // block -> INDENT, stmt_list, end_of_line, UNINDENT
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn as statement_list;
			(CurrentSemanticValue.stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-4].ti;
			(CurrentSemanticValue.stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
			CurrentSemanticValue.stn.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-2]);
		}
        break;
      case 138: // proc_func_decl -> proc_func_header, block
{
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, new block(null, ValueStack[ValueStack.Depth-1].stn as statement_list, LocationStack[LocationStack.Depth-1]), CurrentLocationSpan);
		}
        break;
      case 139: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
                //                     COLON
{
			CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>()), new method_name(null,null, ValueStack[ValueStack.Depth-5].id, null, LocationStack[LocationStack.Depth-5]), null, CurrentLocationSpan);
		}
        break;
      case 140: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
                //                     ARROW, type_ref, COLON
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-5].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>()), new method_name(null,null, ValueStack[ValueStack.Depth-7].id, null, LocationStack[LocationStack.Depth-7]), null, ValueStack[ValueStack.Depth-2].td as type_definition, CurrentLocationSpan);
		}
        break;
      case 141: // proc_func_call -> variable, LPAR, optional_act_param_list, RPAR
{
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value, ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 142: // simple_type_identifier -> ident
{
			CurrentSemanticValue.td = new named_type_reference(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 143: // simple_type_identifier -> simple_type_identifier, DOT, ident
{ 
			CurrentSemanticValue.td = (ValueStack[ValueStack.Depth-3].td as named_type_reference).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 144: // type_ref -> simple_type_identifier
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td as named_type_reference;
		}
        break;
      case 145: // type_ref -> template_type
{ 
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; 
		}
        break;
      case 146: // template_type -> simple_type_identifier, template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference(ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan); 
		}
        break;
      case 147: // template_type_params -> LBRACKET, template_param_list, RBRACKET
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 148: // template_param_list -> type_ref
{ 
			CurrentSemanticValue.stn = new template_param_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 149: // template_param_list -> template_param_list, COMMA, type_ref
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as template_param_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 150: // param_name -> ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 151: // form_param_sect -> param_name, COLON, type_ref
{
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan);
		}
        break;
      case 152: // form_param_list -> form_param_sect
{
			CurrentSemanticValue.stn = new formal_parameters(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 153: // form_param_list -> form_param_list, COMMA, form_param_sect
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 154: // optional_form_param_list -> form_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 155: // optional_form_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 156: // act_param -> expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 157: // act_param -> ident, ASSIGN, expr
{ 
			CurrentSemanticValue.ex = new name_assign_expr(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 158: // act_param_list -> act_param
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 159: // act_param_list -> act_param_list, COMMA, act_param
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 160: // optional_act_param_list -> act_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 161: // optional_act_param_list -> generator_object
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 162: // optional_act_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 163: // end_of_line -> END_OF_LINE
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 164: // end_of_line -> SEMICOLON
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 165: // optional_semicolon -> SEMICOLON
{ 
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; 
		}
        break;
      case 166: // optional_semicolon -> /* empty */
{ 
			CurrentSemanticValue.ob = null; 
		}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


        public program_module NewProgramModule(program_name progName, Object optHeadCompDirs, uses_list mainUsesClose, syntax_tree_node progBlock, Object optPoint, LexLocation loc)
        {
            var progModule = new program_module(progName, mainUsesClose, progBlock as block, null, loc);
            progModule.Language = "SPython";
            if (optPoint == null && progBlock != null)
            {
                var fp = progBlock.source_context.end_position;
                var err_stn = progBlock;
			    if ((progBlock is block) && (progBlock as block).program_code != null && (progBlock as block).program_code.subnodes != null && (progBlock as block).program_code.subnodes.Count > 0)
                    err_stn = (progBlock as block).program_code.subnodes[(progBlock as block).program_code.subnodes.Count - 1];
                //parserTools.errors.Add(new SPythonUnexpectedToken(parserTools.currentFileName, StringResources.Get("TKPOINT"), new SourceContext(fp.line_num, fp.column_num + 1, fp.line_num, fp.column_num + 1, 0, 0), err_stn));
            }
            return progModule;
        }
}
}
