// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-56159VE
// DateTime: 04.03.2025 14:05:48
// UserName: ????
// Input file <SPythonParser.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using SPythonParser;

namespace SPythonParserYacc
{
public enum Tokens {
    error=1,EOF=2,FOR=3,IN=4,WHILE=5,IF=6,
    ELSE=7,ELIF=8,DEF=9,RETURN=10,BREAK=11,CONTINUE=12,
    IMPORT=13,FROM=14,GLOBAL=15,AS=16,INTNUM=17,REALNUM=18,
    TRUE=19,FALSE=20,LPAR=21,RPAR=22,LBRACE=23,RBRACE=24,
    LBRACKET=25,RBRACKET=26,DOT=27,COMMA=28,COLON=29,SEMICOLON=30,
    INDENT=31,UNINDENT=32,ARROW=33,STRINGNUM=34,ASSIGN=35,PLUSEQUAL=36,
    MINUSEQUAL=37,STAREQUAL=38,DIVEQUAL=39,PLUS=40,MINUS=41,STAR=42,
    DIVIDE=43,SLASHSLASH=44,PERCENTAGE=45,ID=46,LESS=47,GREATER=48,
    LESSEQUAL=49,GREATEREQUAL=50,EQUAL=51,NOTEQUAL=52,AND=53,OR=54,
    NOT=55,STARSTAR=56};

public partial struct ValueType
{
	public expression ex;
	public ident id;
    public Object ob;
    public op_type_node op;
    public syntax_tree_node stn;
    public token_info ti;
    public type_definition td;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class SPythonGPPGParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SPythonParser.y
   	public syntax_tree_node root;
	public List<Error> errors;
    // public string current_file_name;
    // public int max_errors = 10;
	public SPythonParserTools parserTools;
    public List<compiler_directive> CompilerDirectives;
	public ParserLambdaHelper lambdaHelper = new ParserLambdaHelper();

	private int ScopeCounter = 0;
	private HashSet<string> globalVariables = new HashSet<string>();
	private uses_list imports = new uses_list();

	public bool is_unit_to_be_parsed = false;

	public SPythonGPPGParser(AbstractScanner<ValueType, LexLocation> scanner, SPythonParserTools parserTools,
	bool isUnitToBeParsed) : base(scanner) 
	{ 
		this.parserTools = parserTools;
		this.is_unit_to_be_parsed = isUnitToBeParsed;
	}
  // End verbatim content from SPythonParser.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[118];
  private static State[] states = new State[203];
  private static string[] nonTerms = new string[] {
      "ident", "dotted_ident", "func_name_ident", "expr", "proc_func_call", "const_value", 
      "variable", "optional_condition", "act_param", "act_param_list", "optional_act_param_list", 
      "proc_func_decl", "return_stmt", "break_stmt", "continue_stmt", "global_stmt", 
      "var_stmt", "assign_stmt", "if_stmt", "stmt", "proc_func_call_stmt", "while_stmt", 
      "for_stmt", "optional_else", "optional_elif", "import_or_decl_or_stmt", 
      "import_and_decl_and_stmt_list", "expr_list", "stmt_list", "block", "program", 
      "import_or_decl", "param_name", "form_param_sect", "form_param_list", "optional_form_param_list", 
      "dotted_ident_list", "ident_as_ident", "ident_as_ident_list", "proc_func_header", 
      "type_ref", "simple_type_identifier", "template_type", "import_clause", 
      "template_type_params", "template_param_list", "optional_semicolon", "assign_type", 
      "$accept", };

  static SPythonGPPGParser() {
    states[0] = new State(new int[]{46,58,17,63,18,64,19,65,20,66,34,67,25,68,6,117,5,138,3,143,10,150,11,153,12,155,15,157,9,170,13,189,14,197},new int[]{-31,1,-27,3,-26,202,-20,7,-18,8,-7,9,-1,57,-5,113,-6,114,-17,115,-19,116,-21,136,-22,137,-23,142,-13,149,-14,152,-15,154,-16,156,-32,166,-12,167,-40,168,-44,188});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{30,5,2,-117},new int[]{-47,4});
    states[4] = new State(-2);
    states[5] = new State(new int[]{46,58,17,63,18,64,19,65,20,66,34,67,25,68,6,117,5,138,3,143,10,150,11,153,12,155,15,157,9,170,13,189,14,197,2,-116},new int[]{-26,6,-20,7,-18,8,-7,9,-1,57,-5,113,-6,114,-17,115,-19,116,-21,136,-22,137,-23,142,-13,149,-14,152,-15,154,-16,156,-32,166,-12,167,-40,168,-44,188});
    states[6] = new State(-11);
    states[7] = new State(-6);
    states[8] = new State(-14);
    states[9] = new State(new int[]{35,10,21,47,27,86,25,88,29,93,36,109,37,110,38,111,39,112},new int[]{-48,91});
    states[10] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,11,-7,46,-1,57,-5,59,-6,60});
    states[11] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40,30,-36,2,-36});
    states[12] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,13,-7,46,-1,57,-5,59,-6,60});
    states[13] = new State(new int[]{40,-42,42,14,43,16,41,-42,47,-42,48,-42,49,-42,50,-42,51,-42,52,-42,53,-42,54,-42,44,36,45,38,56,40,30,-42,2,-42,28,-42,22,-42,3,-42,26,-42,6,-42,29,-42});
    states[14] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,15,-7,46,-1,57,-5,59,-6,60});
    states[15] = new State(new int[]{40,-43,42,-43,43,-43,41,-43,47,-43,48,-43,49,-43,50,-43,51,-43,52,-43,53,-43,54,-43,44,-43,45,-43,56,40,30,-43,2,-43,28,-43,22,-43,3,-43,26,-43,6,-43,29,-43});
    states[16] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,17,-7,46,-1,57,-5,59,-6,60});
    states[17] = new State(new int[]{40,-44,42,-44,43,-44,41,-44,47,-44,48,-44,49,-44,50,-44,51,-44,52,-44,53,-44,54,-44,44,-44,45,-44,56,40,30,-44,2,-44,28,-44,22,-44,3,-44,26,-44,6,-44,29,-44});
    states[18] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,19,-7,46,-1,57,-5,59,-6,60});
    states[19] = new State(new int[]{40,-45,42,14,43,16,41,-45,47,-45,48,-45,49,-45,50,-45,51,-45,52,-45,53,-45,54,-45,44,36,45,38,56,40,30,-45,2,-45,28,-45,22,-45,3,-45,26,-45,6,-45,29,-45});
    states[20] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,21,-7,46,-1,57,-5,59,-6,60});
    states[21] = new State(new int[]{40,12,42,14,43,16,41,18,47,-46,48,-46,49,-46,50,-46,51,-46,52,-46,53,-46,54,-46,44,36,45,38,56,40,30,-46,2,-46,28,-46,22,-46,3,-46,26,-46,6,-46,29,-46});
    states[22] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,23,-7,46,-1,57,-5,59,-6,60});
    states[23] = new State(new int[]{40,12,42,14,43,16,41,18,47,-47,48,-47,49,-47,50,-47,51,-47,52,-47,53,-47,54,-47,44,36,45,38,56,40,30,-47,2,-47,28,-47,22,-47,3,-47,26,-47,6,-47,29,-47});
    states[24] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,25,-7,46,-1,57,-5,59,-6,60});
    states[25] = new State(new int[]{40,12,42,14,43,16,41,18,47,-48,48,-48,49,-48,50,-48,51,-48,52,-48,53,-48,54,-48,44,36,45,38,56,40,30,-48,2,-48,28,-48,22,-48,3,-48,26,-48,6,-48,29,-48});
    states[26] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,27,-7,46,-1,57,-5,59,-6,60});
    states[27] = new State(new int[]{40,12,42,14,43,16,41,18,47,-49,48,-49,49,-49,50,-49,51,-49,52,-49,53,-49,54,-49,44,36,45,38,56,40,30,-49,2,-49,28,-49,22,-49,3,-49,26,-49,6,-49,29,-49});
    states[28] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,29,-7,46,-1,57,-5,59,-6,60});
    states[29] = new State(new int[]{40,12,42,14,43,16,41,18,47,-50,48,-50,49,-50,50,-50,51,-50,52,-50,53,-50,54,-50,44,36,45,38,56,40,30,-50,2,-50,28,-50,22,-50,3,-50,26,-50,6,-50,29,-50});
    states[30] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,31,-7,46,-1,57,-5,59,-6,60});
    states[31] = new State(new int[]{40,12,42,14,43,16,41,18,47,-51,48,-51,49,-51,50,-51,51,-51,52,-51,53,-51,54,-51,44,36,45,38,56,40,30,-51,2,-51,28,-51,22,-51,3,-51,26,-51,6,-51,29,-51});
    states[32] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,33,-7,46,-1,57,-5,59,-6,60});
    states[33] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,-52,54,-52,44,36,45,38,56,40,30,-52,2,-52,28,-52,22,-52,3,-52,26,-52,6,-52,29,-52});
    states[34] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,35,-7,46,-1,57,-5,59,-6,60});
    states[35] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,-53,44,36,45,38,56,40,30,-53,2,-53,28,-53,22,-53,3,-53,26,-53,6,-53,29,-53});
    states[36] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,37,-7,46,-1,57,-5,59,-6,60});
    states[37] = new State(new int[]{40,-54,42,-54,43,-54,41,-54,47,-54,48,-54,49,-54,50,-54,51,-54,52,-54,53,-54,54,-54,44,-54,45,-54,56,40,30,-54,2,-54,28,-54,22,-54,3,-54,26,-54,6,-54,29,-54});
    states[38] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,39,-7,46,-1,57,-5,59,-6,60});
    states[39] = new State(new int[]{40,-55,42,-55,43,-55,41,-55,47,-55,48,-55,49,-55,50,-55,51,-55,52,-55,53,-55,54,-55,44,-55,45,-55,56,40,30,-55,2,-55,28,-55,22,-55,3,-55,26,-55,6,-55,29,-55});
    states[40] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,41,-7,46,-1,57,-5,59,-6,60});
    states[41] = new State(new int[]{40,-56,42,-56,43,-56,41,-56,47,-56,48,-56,49,-56,50,-56,51,-56,52,-56,53,-56,54,-56,44,-56,45,-56,56,40,30,-56,2,-56,28,-56,22,-56,3,-56,26,-56,6,-56,29,-56});
    states[42] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,43,-7,46,-1,57,-5,59,-6,60});
    states[43] = new State(new int[]{40,-57,42,14,43,16,41,-57,47,-57,48,-57,49,-57,50,-57,51,-57,52,-57,53,-57,54,-57,44,36,45,38,56,40,30,-57,2,-57,28,-57,22,-57,3,-57,26,-57,6,-57,29,-57});
    states[44] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,45,-7,46,-1,57,-5,59,-6,60});
    states[45] = new State(new int[]{40,-58,42,-58,43,-58,41,-58,47,-58,48,-58,49,-58,50,-58,51,-58,52,-58,53,-58,54,-58,44,-58,45,-58,56,40,30,-58,2,-58,28,-58,22,-58,3,-58,26,-58,6,-58,29,-58});
    states[46] = new State(new int[]{21,47,27,86,25,88,40,-59,42,-59,43,-59,41,-59,47,-59,48,-59,49,-59,50,-59,51,-59,52,-59,53,-59,54,-59,44,-59,45,-59,56,-59,30,-59,2,-59,28,-59,22,-59,3,-59,26,-59,6,-59,29,-59});
    states[47] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73,22,-115},new int[]{-11,48,-10,50,-9,85,-4,53,-7,46,-1,54,-5,59,-6,60});
    states[48] = new State(new int[]{22,49});
    states[49] = new State(-95);
    states[50] = new State(new int[]{28,51,22,-114});
    states[51] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-9,52,-4,53,-7,46,-1,54,-5,59,-6,60});
    states[52] = new State(-113);
    states[53] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40,28,-110,22,-110});
    states[54] = new State(new int[]{35,55,21,-82,27,-82,25,-82,40,-82,42,-82,43,-82,41,-82,47,-82,48,-82,49,-82,50,-82,51,-82,52,-82,53,-82,54,-82,44,-82,45,-82,56,-82,28,-82,22,-82});
    states[55] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,56,-7,46,-1,57,-5,59,-6,60});
    states[56] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40,28,-111,22,-111});
    states[57] = new State(-82);
    states[58] = new State(-25);
    states[59] = new State(-83);
    states[60] = new State(new int[]{27,61,40,-60,42,-60,43,-60,41,-60,47,-60,48,-60,49,-60,50,-60,51,-60,52,-60,53,-60,54,-60,44,-60,45,-60,56,-60,30,-60,2,-60,28,-60,22,-60,3,-60,26,-60,6,-60,29,-60});
    states[61] = new State(new int[]{46,58},new int[]{-1,62});
    states[62] = new State(-85);
    states[63] = new State(-62);
    states[64] = new State(-63);
    states[65] = new State(-64);
    states[66] = new State(-65);
    states[67] = new State(-66);
    states[68] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-28,69,-4,76,-7,46,-1,57,-5,59,-6,60});
    states[69] = new State(new int[]{26,70,28,71});
    states[70] = new State(-86);
    states[71] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,72,-7,46,-1,57,-5,59,-6,60});
    states[72] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40,26,-68,28,-68});
    states[73] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,74,-7,46,-1,57,-5,59,-6,60});
    states[74] = new State(new int[]{22,75,40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40});
    states[75] = new State(-61);
    states[76] = new State(new int[]{3,77,40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40,26,-67,28,-67});
    states[77] = new State(new int[]{46,58},new int[]{-1,78});
    states[78] = new State(new int[]{4,79});
    states[79] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,80,-7,46,-1,57,-5,59,-6,60});
    states[80] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40,6,83,26,-89},new int[]{-8,81});
    states[81] = new State(new int[]{26,82});
    states[82] = new State(-88);
    states[83] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,84,-7,46,-1,57,-5,59,-6,60});
    states[84] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40,26,-90});
    states[85] = new State(-112);
    states[86] = new State(new int[]{46,58},new int[]{-1,87});
    states[87] = new State(-84);
    states[88] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,89,-7,46,-1,57,-5,59,-6,60});
    states[89] = new State(new int[]{26,90,40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40});
    states[90] = new State(-87);
    states[91] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,92,-7,46,-1,57,-5,59,-6,60});
    states[92] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40,30,-37,2,-37});
    states[93] = new State(new int[]{46,58},new int[]{-41,94,-42,97,-1,106,-43,107});
    states[94] = new State(new int[]{35,95,30,-34,2,-34});
    states[95] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,96,-7,46,-1,57,-5,59,-6,60});
    states[96] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40,30,-35,2,-35});
    states[97] = new State(new int[]{27,98,25,101,35,-98,30,-98,2,-98,26,-98,28,-98,29,-98,22,-98},new int[]{-45,100});
    states[98] = new State(new int[]{46,58},new int[]{-1,99});
    states[99] = new State(-97);
    states[100] = new State(-100);
    states[101] = new State(new int[]{46,58},new int[]{-46,102,-41,108,-42,97,-1,106,-43,107});
    states[102] = new State(new int[]{26,103,28,104});
    states[103] = new State(-101);
    states[104] = new State(new int[]{46,58},new int[]{-41,105,-42,97,-1,106,-43,107});
    states[105] = new State(-103);
    states[106] = new State(-96);
    states[107] = new State(-99);
    states[108] = new State(-102);
    states[109] = new State(-38);
    states[110] = new State(-39);
    states[111] = new State(-40);
    states[112] = new State(-41);
    states[113] = new State(new int[]{35,-83,21,-83,27,-83,25,-83,29,-83,36,-83,37,-83,38,-83,39,-83,30,-81,2,-81});
    states[114] = new State(new int[]{27,61});
    states[115] = new State(-15);
    states[116] = new State(-16);
    states[117] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,118,-7,46,-1,57,-5,59,-6,60});
    states[118] = new State(new int[]{29,119,40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40});
    states[119] = new State(new int[]{31,131},new int[]{-30,120});
    states[120] = new State(new int[]{8,122,7,128,30,-73,2,-73},new int[]{-25,121,-24,127});
    states[121] = new State(-69);
    states[122] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,123,-7,46,-1,57,-5,59,-6,60});
    states[123] = new State(new int[]{29,124,40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40});
    states[124] = new State(new int[]{31,131},new int[]{-30,125});
    states[125] = new State(new int[]{8,122,7,128,30,-73,2,-73},new int[]{-25,126,-24,127});
    states[126] = new State(-70);
    states[127] = new State(-71);
    states[128] = new State(new int[]{29,129});
    states[129] = new State(new int[]{31,131},new int[]{-30,130});
    states[130] = new State(-72);
    states[131] = new State(new int[]{46,58,17,63,18,64,19,65,20,66,34,67,25,68,6,117,5,138,3,143,10,150,11,153,12,155,15,157},new int[]{-29,132,-20,165,-18,8,-7,9,-1,57,-5,113,-6,114,-17,115,-19,116,-21,136,-22,137,-23,142,-13,149,-14,152,-15,154,-16,156});
    states[132] = new State(new int[]{30,133});
    states[133] = new State(new int[]{32,134,46,58,17,63,18,64,19,65,20,66,34,67,25,68,6,117,5,138,3,143,10,150,11,153,12,155,15,157},new int[]{-20,135,-18,8,-7,9,-1,57,-5,113,-6,114,-17,115,-19,116,-21,136,-22,137,-23,142,-13,149,-14,152,-15,154,-16,156});
    states[134] = new State(-91);
    states[135] = new State(-13);
    states[136] = new State(-17);
    states[137] = new State(-18);
    states[138] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,139,-7,46,-1,57,-5,59,-6,60});
    states[139] = new State(new int[]{29,140,40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40});
    states[140] = new State(new int[]{31,131},new int[]{-30,141});
    states[141] = new State(-74);
    states[142] = new State(-19);
    states[143] = new State(new int[]{46,58},new int[]{-1,144});
    states[144] = new State(new int[]{4,145});
    states[145] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73},new int[]{-4,146,-7,46,-1,57,-5,59,-6,60});
    states[146] = new State(new int[]{29,147,40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40});
    states[147] = new State(new int[]{31,131},new int[]{-30,148});
    states[148] = new State(-75);
    states[149] = new State(-20);
    states[150] = new State(new int[]{41,42,55,44,46,58,17,63,18,64,19,65,20,66,34,67,25,68,21,73,30,-78,2,-78},new int[]{-4,151,-7,46,-1,57,-5,59,-6,60});
    states[151] = new State(new int[]{40,12,42,14,43,16,41,18,47,20,48,22,49,24,50,26,51,28,52,30,53,32,54,34,44,36,45,38,56,40,30,-77,2,-77});
    states[152] = new State(-21);
    states[153] = new State(-79);
    states[154] = new State(-22);
    states[155] = new State(-80);
    states[156] = new State(-23);
    states[157] = new State(new int[]{46,58},new int[]{-37,158,-2,164,-1,163});
    states[158] = new State(new int[]{28,159,30,-24,2,-24});
    states[159] = new State(new int[]{46,58},new int[]{-2,160,-1,163});
    states[160] = new State(new int[]{27,161,28,-29,30,-29,2,-29});
    states[161] = new State(new int[]{46,58},new int[]{-1,162});
    states[162] = new State(-27);
    states[163] = new State(-26);
    states[164] = new State(new int[]{27,161,28,-28,30,-28,2,-28});
    states[165] = new State(-12);
    states[166] = new State(-7);
    states[167] = new State(-8);
    states[168] = new State(new int[]{31,131},new int[]{-30,169});
    states[169] = new State(-92);
    states[170] = new State(new int[]{46,58},new int[]{-3,171,-1,187});
    states[171] = new State(new int[]{21,172});
    states[172] = new State(new int[]{46,58,22,-109},new int[]{-36,173,-35,179,-34,186,-33,182,-1,185});
    states[173] = new State(new int[]{22,174});
    states[174] = new State(new int[]{29,175,33,176});
    states[175] = new State(-93);
    states[176] = new State(new int[]{46,58},new int[]{-41,177,-42,97,-1,106,-43,107});
    states[177] = new State(new int[]{29,178});
    states[178] = new State(-94);
    states[179] = new State(new int[]{28,180,22,-108});
    states[180] = new State(new int[]{46,58},new int[]{-34,181,-33,182,-1,185});
    states[181] = new State(-107);
    states[182] = new State(new int[]{29,183});
    states[183] = new State(new int[]{46,58},new int[]{-41,184,-42,97,-1,106,-43,107});
    states[184] = new State(-105);
    states[185] = new State(-104);
    states[186] = new State(-106);
    states[187] = new State(-76);
    states[188] = new State(-9);
    states[189] = new State(new int[]{46,58},new int[]{-39,190,-38,196,-1,193});
    states[190] = new State(new int[]{28,191,30,-3,2,-3});
    states[191] = new State(new int[]{46,58},new int[]{-38,192,-1,193});
    states[192] = new State(-33);
    states[193] = new State(new int[]{16,194,28,-31,30,-31,2,-31});
    states[194] = new State(new int[]{46,58},new int[]{-1,195});
    states[195] = new State(-30);
    states[196] = new State(-32);
    states[197] = new State(new int[]{46,58},new int[]{-1,198});
    states[198] = new State(new int[]{13,199});
    states[199] = new State(new int[]{42,201,46,58},new int[]{-39,200,-38,196,-1,193});
    states[200] = new State(new int[]{28,191,30,-4,2,-4});
    states[201] = new State(-5);
    states[202] = new State(-10);

    rules[1] = new Rule(-49, new int[]{-31,2});
    rules[2] = new Rule(-31, new int[]{-27,-47});
    rules[3] = new Rule(-44, new int[]{13,-39});
    rules[4] = new Rule(-44, new int[]{14,-1,13,-39});
    rules[5] = new Rule(-44, new int[]{14,-1,13,42});
    rules[6] = new Rule(-26, new int[]{-20});
    rules[7] = new Rule(-26, new int[]{-32});
    rules[8] = new Rule(-32, new int[]{-12});
    rules[9] = new Rule(-32, new int[]{-44});
    rules[10] = new Rule(-27, new int[]{-26});
    rules[11] = new Rule(-27, new int[]{-27,30,-26});
    rules[12] = new Rule(-29, new int[]{-20});
    rules[13] = new Rule(-29, new int[]{-29,30,-20});
    rules[14] = new Rule(-20, new int[]{-18});
    rules[15] = new Rule(-20, new int[]{-17});
    rules[16] = new Rule(-20, new int[]{-19});
    rules[17] = new Rule(-20, new int[]{-21});
    rules[18] = new Rule(-20, new int[]{-22});
    rules[19] = new Rule(-20, new int[]{-23});
    rules[20] = new Rule(-20, new int[]{-13});
    rules[21] = new Rule(-20, new int[]{-14});
    rules[22] = new Rule(-20, new int[]{-15});
    rules[23] = new Rule(-20, new int[]{-16});
    rules[24] = new Rule(-16, new int[]{15,-37});
    rules[25] = new Rule(-1, new int[]{46});
    rules[26] = new Rule(-2, new int[]{-1});
    rules[27] = new Rule(-2, new int[]{-2,27,-1});
    rules[28] = new Rule(-37, new int[]{-2});
    rules[29] = new Rule(-37, new int[]{-37,28,-2});
    rules[30] = new Rule(-38, new int[]{-1,16,-1});
    rules[31] = new Rule(-38, new int[]{-1});
    rules[32] = new Rule(-39, new int[]{-38});
    rules[33] = new Rule(-39, new int[]{-39,28,-38});
    rules[34] = new Rule(-17, new int[]{-7,29,-41});
    rules[35] = new Rule(-17, new int[]{-7,29,-41,35,-4});
    rules[36] = new Rule(-18, new int[]{-7,35,-4});
    rules[37] = new Rule(-18, new int[]{-7,-48,-4});
    rules[38] = new Rule(-48, new int[]{36});
    rules[39] = new Rule(-48, new int[]{37});
    rules[40] = new Rule(-48, new int[]{38});
    rules[41] = new Rule(-48, new int[]{39});
    rules[42] = new Rule(-4, new int[]{-4,40,-4});
    rules[43] = new Rule(-4, new int[]{-4,42,-4});
    rules[44] = new Rule(-4, new int[]{-4,43,-4});
    rules[45] = new Rule(-4, new int[]{-4,41,-4});
    rules[46] = new Rule(-4, new int[]{-4,47,-4});
    rules[47] = new Rule(-4, new int[]{-4,48,-4});
    rules[48] = new Rule(-4, new int[]{-4,49,-4});
    rules[49] = new Rule(-4, new int[]{-4,50,-4});
    rules[50] = new Rule(-4, new int[]{-4,51,-4});
    rules[51] = new Rule(-4, new int[]{-4,52,-4});
    rules[52] = new Rule(-4, new int[]{-4,53,-4});
    rules[53] = new Rule(-4, new int[]{-4,54,-4});
    rules[54] = new Rule(-4, new int[]{-4,44,-4});
    rules[55] = new Rule(-4, new int[]{-4,45,-4});
    rules[56] = new Rule(-4, new int[]{-4,56,-4});
    rules[57] = new Rule(-4, new int[]{41,-4});
    rules[58] = new Rule(-4, new int[]{55,-4});
    rules[59] = new Rule(-4, new int[]{-7});
    rules[60] = new Rule(-4, new int[]{-6});
    rules[61] = new Rule(-4, new int[]{21,-4,22});
    rules[62] = new Rule(-6, new int[]{17});
    rules[63] = new Rule(-6, new int[]{18});
    rules[64] = new Rule(-6, new int[]{19});
    rules[65] = new Rule(-6, new int[]{20});
    rules[66] = new Rule(-6, new int[]{34});
    rules[67] = new Rule(-28, new int[]{-4});
    rules[68] = new Rule(-28, new int[]{-28,28,-4});
    rules[69] = new Rule(-19, new int[]{6,-4,29,-30,-25});
    rules[70] = new Rule(-25, new int[]{8,-4,29,-30,-25});
    rules[71] = new Rule(-25, new int[]{-24});
    rules[72] = new Rule(-24, new int[]{7,29,-30});
    rules[73] = new Rule(-24, new int[]{});
    rules[74] = new Rule(-22, new int[]{5,-4,29,-30});
    rules[75] = new Rule(-23, new int[]{3,-1,4,-4,29,-30});
    rules[76] = new Rule(-3, new int[]{-1});
    rules[77] = new Rule(-13, new int[]{10,-4});
    rules[78] = new Rule(-13, new int[]{10});
    rules[79] = new Rule(-14, new int[]{11});
    rules[80] = new Rule(-15, new int[]{12});
    rules[81] = new Rule(-21, new int[]{-5});
    rules[82] = new Rule(-7, new int[]{-1});
    rules[83] = new Rule(-7, new int[]{-5});
    rules[84] = new Rule(-7, new int[]{-7,27,-1});
    rules[85] = new Rule(-7, new int[]{-6,27,-1});
    rules[86] = new Rule(-7, new int[]{25,-28,26});
    rules[87] = new Rule(-7, new int[]{-7,25,-4,26});
    rules[88] = new Rule(-7, new int[]{25,-4,3,-1,4,-4,-8,26});
    rules[89] = new Rule(-8, new int[]{});
    rules[90] = new Rule(-8, new int[]{6,-4});
    rules[91] = new Rule(-30, new int[]{31,-29,30,32});
    rules[92] = new Rule(-12, new int[]{-40,-30});
    rules[93] = new Rule(-40, new int[]{9,-3,21,-36,22,29});
    rules[94] = new Rule(-40, new int[]{9,-3,21,-36,22,33,-41,29});
    rules[95] = new Rule(-5, new int[]{-7,21,-11,22});
    rules[96] = new Rule(-42, new int[]{-1});
    rules[97] = new Rule(-42, new int[]{-42,27,-1});
    rules[98] = new Rule(-41, new int[]{-42});
    rules[99] = new Rule(-41, new int[]{-43});
    rules[100] = new Rule(-43, new int[]{-42,-45});
    rules[101] = new Rule(-45, new int[]{25,-46,26});
    rules[102] = new Rule(-46, new int[]{-41});
    rules[103] = new Rule(-46, new int[]{-46,28,-41});
    rules[104] = new Rule(-33, new int[]{-1});
    rules[105] = new Rule(-34, new int[]{-33,29,-41});
    rules[106] = new Rule(-35, new int[]{-34});
    rules[107] = new Rule(-35, new int[]{-35,28,-34});
    rules[108] = new Rule(-36, new int[]{-35});
    rules[109] = new Rule(-36, new int[]{});
    rules[110] = new Rule(-9, new int[]{-4});
    rules[111] = new Rule(-9, new int[]{-1,35,-4});
    rules[112] = new Rule(-10, new int[]{-9});
    rules[113] = new Rule(-10, new int[]{-10,28,-9});
    rules[114] = new Rule(-11, new int[]{-10});
    rules[115] = new Rule(-11, new int[]{});
    rules[116] = new Rule(-47, new int[]{30});
    rules[117] = new Rule(-47, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> import_and_decl_and_stmt_list, optional_semicolon
{
			// main program
			if (!is_unit_to_be_parsed) {
				var stl = ValueStack[ValueStack.Depth-2].stn as statement_list;
				stl.left_logical_bracket = new token_info("");
				stl.right_logical_bracket = new token_info("");
				var bl = new block(new declarations(), stl, CurrentLocationSpan);
				root = CurrentSemanticValue.stn = NewProgramModule(null, null, new uses_list(), bl, ValueStack[ValueStack.Depth-1].ob, CurrentLocationSpan);
				root.source_context = bl.source_context;
			}
			// unit
			else {
				var interface_part = new interface_node(new declarations(), imports, null, null);
				var initialization_part = new initfinal_part(null, ValueStack[ValueStack.Depth-2].stn as statement_list, null, null, null, CurrentLocationSpan);

				root = CurrentSemanticValue.stn = new unit_module(
					new unit_name(new ident(Path.GetFileNameWithoutExtension(parserTools.currentFileName)),
					UnitHeaderKeyword.Unit, CurrentLocationSpan), interface_part, null,
					initialization_part.initialization_sect,
					initialization_part.finalization_sect, null, CurrentLocationSpan);
			}

		}
        break;
      case 3: // import_clause -> IMPORT, ident_as_ident_list
{
			foreach (as_statement as_Statement in (ValueStack[ValueStack.Depth-1].stn as as_statement_list).as_statements)
				imports.AddUsesList(new uses_list(as_Statement.real_name.name));
			import_statement import_stmt =  new import_statement(ValueStack[ValueStack.Depth-1].stn as as_statement_list, LocationStack[LocationStack.Depth-1]);
			CurrentSemanticValue.stn = import_stmt;
		}
        break;
      case 4: // import_clause -> FROM, ident, IMPORT, ident_as_ident_list
{
			imports.AddUsesList(new uses_list((ValueStack[ValueStack.Depth-3].id as ident).name));
			from_import_statement fis = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, false, ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
			CurrentSemanticValue.stn = fis;
		}
        break;
      case 5: // import_clause -> FROM, ident, IMPORT, STAR
{
			imports.AddUsesList(new uses_list((ValueStack[ValueStack.Depth-3].id as ident).name));
			from_import_statement fis = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, true, null, CurrentLocationSpan);
			CurrentSemanticValue.stn = fis;
		}
        break;
      case 6: // import_or_decl_or_stmt -> stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 7: // import_or_decl_or_stmt -> import_or_decl
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 8: // import_or_decl -> proc_func_decl
{
			CurrentSemanticValue.stn = new declarations_as_statement(new declarations(ValueStack[ValueStack.Depth-1].stn as procedure_definition, CurrentLocationSpan), CurrentLocationSpan);
		}
        break;
      case 9: // import_or_decl -> import_clause
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 10: // import_and_decl_and_stmt_list -> import_or_decl_or_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, LocationStack[LocationStack.Depth-1]);
		}
        break;
      case 11: // import_and_decl_and_stmt_list -> import_and_decl_and_stmt_list, SEMICOLON, 
               //                                  import_or_decl_or_stmt
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 12: // stmt_list -> stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, LocationStack[LocationStack.Depth-1]);
		}
        break;
      case 13: // stmt_list -> stmt_list, SEMICOLON, stmt
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 14: // stmt -> assign_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 15: // stmt -> var_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 16: // stmt -> if_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 17: // stmt -> proc_func_call_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 18: // stmt -> while_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 19: // stmt -> for_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 20: // stmt -> return_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 21: // stmt -> break_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 22: // stmt -> continue_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 23: // stmt -> global_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 24: // global_stmt -> GLOBAL, dotted_ident_list
{
			CurrentSemanticValue.stn = new global_statement(ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan);
		}
        break;
      case 25: // ident -> ID
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 26: // dotted_ident -> ident
{ CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 27: // dotted_ident -> dotted_ident, DOT, ident
{ CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-3].id.name + "." + ValueStack[ValueStack.Depth-1].id.name); }
        break;
      case 28: // dotted_ident_list -> dotted_ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 29: // dotted_ident_list -> dotted_ident_list, COMMA, dotted_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 30: // ident_as_ident -> ident, AS, ident
{ CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); }
        break;
      case 31: // ident_as_ident -> ident
{ CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-1].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); }
        break;
      case 32: // ident_as_ident_list -> ident_as_ident
{
			CurrentSemanticValue.stn = new as_statement_list(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 33: // ident_as_ident_list -> ident_as_ident_list, COMMA, ident_as_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as as_statement_list).Add(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 34: // var_stmt -> variable, COLON, type_ref
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-3].ex as ident, LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 35: // var_stmt -> variable, COLON, type_ref, ASSIGN, expr
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-5].ex as ident, LocationStack[LocationStack.Depth-5]), ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 36: // assign_stmt -> variable, ASSIGN, expr
{
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 37: // assign_stmt -> variable, assign_type, expr
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO",CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 38: // assign_type -> PLUSEQUAL
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 39: // assign_type -> MINUSEQUAL
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 40: // assign_type -> STAREQUAL
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 41: // assign_type -> DIVEQUAL
{ CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; }
        break;
      case 42: // expr -> expr, PLUS, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 43: // expr -> expr, STAR, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 44: // expr -> expr, DIVIDE, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 45: // expr -> expr, MINUS, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 46: // expr -> expr, LESS, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 47: // expr -> expr, GREATER, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 48: // expr -> expr, LESSEQUAL, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 49: // expr -> expr, GREATEREQUAL, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 50: // expr -> expr, EQUAL, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 51: // expr -> expr, NOTEQUAL, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 52: // expr -> expr, AND, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 53: // expr -> expr, OR, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 54: // expr -> expr, SLASHSLASH, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 55: // expr -> expr, PERCENTAGE, expr
{ CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 56: // expr -> expr, STARSTAR, expr
{
			addressed_value method_name = new ident("!pow", CurrentLocationSpan);
			expression_list el = new expression_list(new List<expression> { ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex }, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(method_name, el, CurrentLocationSpan);
		}
        break;
      case 57: // expr -> MINUS, expr
{ CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 58: // expr -> NOT, expr
{ CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); }
        break;
      case 59: // expr -> variable
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 60: // expr -> const_value
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 61: // expr -> LPAR, expr, RPAR
{ CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); }
        break;
      case 62: // const_value -> INTNUM
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 63: // const_value -> REALNUM
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 64: // const_value -> TRUE
{ CurrentSemanticValue.ex = new ident("true"); }
        break;
      case 65: // const_value -> FALSE
{ CurrentSemanticValue.ex = new ident("false"); }
        break;
      case 66: // const_value -> STRINGNUM
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; }
        break;
      case 67: // expr_list -> expr
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 68: // expr_list -> expr_list, COMMA, expr
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 69: // if_stmt -> IF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 70: // optional_elif -> ELIF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 71: // optional_elif -> optional_else
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 72: // optional_else -> ELSE, COLON, block
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 73: // optional_else -> /* empty */
{ CurrentSemanticValue.stn = null; }
        break;
      case 74: // while_stmt -> WHILE, expr, COLON, block
{
			CurrentSemanticValue.stn = new while_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, WhileCycleType.While, CurrentLocationSpan);
		}
        break;
      case 75: // for_stmt -> FOR, ident, IN, expr, COLON, block
{
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-5].id, new no_type_foreach(), ValueStack[ValueStack.Depth-3].ex, (statement)ValueStack[ValueStack.Depth-1].stn, null, CurrentLocationSpan);
		}
        break;
      case 76: // func_name_ident -> ident
{
			globalVariables.Add(ValueStack[ValueStack.Depth-1].id.name);
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 77: // return_stmt -> RETURN, expr
{
			statement res_assign = new assign(new ident("result"), ValueStack[ValueStack.Depth-1].ex, Operators.Assignment, CurrentLocationSpan);
			statement exit_call = new procedure_call(new ident("exit"), true, CurrentLocationSpan);
			CurrentSemanticValue.stn = new statement_list(res_assign, CurrentLocationSpan);
			(CurrentSemanticValue.stn  as statement_list).Add(exit_call, CurrentLocationSpan);
		}
        break;
      case 78: // return_stmt -> RETURN
{
			CurrentSemanticValue.stn = new procedure_call(new ident("exit"), true, CurrentLocationSpan);
		}
        break;
      case 79: // break_stmt -> BREAK
{
			CurrentSemanticValue.stn = new procedure_call(new ident("break"), true, CurrentLocationSpan);
		}
        break;
      case 80: // continue_stmt -> CONTINUE
{
			CurrentSemanticValue.stn = new procedure_call(new ident("continue"), true, CurrentLocationSpan);
		}
        break;
      case 81: // proc_func_call_stmt -> proc_func_call
{
			CurrentSemanticValue.stn = new procedure_call(ValueStack[ValueStack.Depth-1].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex is ident, CurrentLocationSpan);
		}
        break;
      case 82: // variable -> ident
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 83: // variable -> proc_func_call
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 84: // variable -> variable, DOT, ident
{ CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); }
        break;
      case 85: // variable -> const_value, DOT, ident
{ CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); }
        break;
      case 86: // variable -> LBRACKET, expr_list, RBRACKET
{
			var acn = new array_const_new(ValueStack[ValueStack.Depth-2].stn as expression_list, '|', CurrentLocationSpan);
			var dn = new dot_node(acn as addressed_value, (new ident("ToList")) as addressed_value, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, CurrentLocationSpan);
		}
        break;
      case 87: // variable -> variable, LBRACKET, expr, RBRACKET
{
			var el = new expression_list(ValueStack[ValueStack.Depth-2].ex as expression);
			CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-4].ex as addressed_value, el, CurrentLocationSpan);
		}
        break;
      case 88: // variable -> LBRACKET, expr, FOR, ident, IN, expr, optional_condition, RBRACKET
{
			CurrentSemanticValue.ex = new list_generator(ValueStack[ValueStack.Depth-7].ex, ValueStack[ValueStack.Depth-5].id, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].ex);
			
			/*
			dot_node dn;
			ident_list idList;
			formal_parameters formalPars;
			statement_list sl;
			function_lambda_definition lambda;
			method_call mc;

			// [ expr1 for ident in expr2 if expr3 ] -> expr2.Where(ident -> expr3).Select(ident -> expr1).ToList()
			if ($7 != null) {
				string ident_name = $4.name;
				idList = new ident_list(new ident(ident_name), @4);
				formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new lambda_any_type_node_syntax(), @4), parametr_kind.none, null, @4), @4);

				dn = new dot_node($6 as addressed_value, (new ident("Where")) as addressed_value, @$);

				sl = new statement_list(new assign("result",$7,@8),@8);
				sl.expr_lambda_body = true;
				lambda = new function_lambda_definition(
				lambdaHelper.CreateLambdaName(), formalPars,
				new lambda_inferred_type(new lambda_any_type_node_syntax(), @4), sl, @$);

				mc = new method_call(dn as addressed_value, new expression_list(lambda as expression), @$);
				dn = new dot_node(mc as addressed_value, (new ident("Select")) as addressed_value, @$);
			}
			// [ expr1 for ident in expr2 ] -> expr2.Select(ident -> expr1).ToList()
			else
				dn = new dot_node($6 as addressed_value, (new ident("Select")) as addressed_value, @$);


			idList = new ident_list($4, @4);
			formalPars = new formal_parameters(new typed_parameters(idList, new lambda_inferred_type(new lambda_any_type_node_syntax(), @4), parametr_kind.none, null, @4), @4);

			sl = new statement_list(new assign("result",$2,@2),@2);
			sl.expr_lambda_body = true;

			lambda = new function_lambda_definition(
				lambdaHelper.CreateLambdaName(), formalPars,
				new lambda_inferred_type(new lambda_any_type_node_syntax(), @4), sl, @$);


			mc = new method_call(dn as addressed_value, new expression_list(lambda as expression), @$);
			dn = new dot_node(mc as addressed_value, (new ident("ToList")) as addressed_value, @$);
			$$ = new method_call(dn as addressed_value, null, @$);
			*/
		}
        break;
      case 89: // optional_condition -> /* empty */
{ CurrentSemanticValue.ex = null; }
        break;
      case 90: // optional_condition -> IF, expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 91: // block -> INDENT, stmt_list, SEMICOLON, UNINDENT
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn as statement_list;
			(CurrentSemanticValue.stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-4].ti;
			(CurrentSemanticValue.stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-2].ti;
			CurrentSemanticValue.stn.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-4],LocationStack[LocationStack.Depth-3],LocationStack[LocationStack.Depth-2]);
		}
        break;
      case 92: // proc_func_decl -> proc_func_header, block
{
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, new block(null, ValueStack[ValueStack.Depth-1].stn as statement_list, LocationStack[LocationStack.Depth-1]), CurrentLocationSpan);
		}
        break;
      case 93: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
               //                     COLON
{
			CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>(), CurrentLocationSpan), new method_name(null,null, ValueStack[ValueStack.Depth-5].id, null, CurrentLocationSpan), null, CurrentLocationSpan);
		}
        break;
      case 94: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
               //                     ARROW, type_ref, COLON
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-5].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>(), CurrentLocationSpan), new method_name(null,null, ValueStack[ValueStack.Depth-7].id, null, CurrentLocationSpan), null, ValueStack[ValueStack.Depth-2].td as type_definition, CurrentLocationSpan);
		}
        break;
      case 95: // proc_func_call -> variable, LPAR, optional_act_param_list, RPAR
{
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value, ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);

			/*
			if ($3 is expression_list exprl) {
				expression_list args = new expression_list();
				expression_list kvargs = new expression_list();

				foreach (var expr in exprl.expressions) {
					if (expr is name_assign_expr) {
						kvargs.Add(expr);
						kvargs.source_context = new SourceContext(kvargs.source_context, expr.source_context);
					}
					else if (kvargs.expressions.Count() == 0) {
						args.Add(expr);
						args.source_context = new SourceContext(args.source_context, expr.source_context);
					}
					else parserTools.AddErrorFromResource("Arg after Kvarg", @$);
				}

				if (kvargs.expressions.Count() == 0)
					$$ = new method_call($1 as addressed_value, args, @$);
				else {
					method_call mc = new method_call(new ident("!" + ($1 as ident).name + ".Get"), kvargs, @$);
					dot_node dn = new dot_node(mc as addressed_value, $1 as addressed_value, @$);
					$$ = new method_call(dn as addressed_value, args, @$);
				}
			}
			else
				$$ = new method_call($1 as addressed_value, null, @$);
			*/
		}
        break;
      case 96: // simple_type_identifier -> ident
{
			CurrentSemanticValue.td = new named_type_reference(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
			/*
			switch ($1.name) {
				case "bool":
					$$ = new named_type_reference("boolean", @$);
					break;
				case "int":
					$$ = new named_type_reference("integer", @$);
					break;
				case "float":
					$$ = new named_type_reference("real", @$);
					break;
				case "str":
					$$ = new named_type_reference("string", @$);
					break;

				//case "integer":
				//case "real":
				//case "string":
				//case "boolean":
				//	$$ = new named_type_reference("error", @$);
				//	break;

				default:
					$$ = new named_type_reference($1, @$);
					break;
			}*/
		}
        break;
      case 97: // simple_type_identifier -> simple_type_identifier, DOT, ident
{ 
			CurrentSemanticValue.td = (ValueStack[ValueStack.Depth-3].td as named_type_reference).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 98: // type_ref -> simple_type_identifier
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td as named_type_reference;
		}
        break;
      case 99: // type_ref -> template_type
{ CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; }
        break;
      case 100: // template_type -> simple_type_identifier, template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference(ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan); 
		}
        break;
      case 101: // template_type_params -> LBRACKET, template_param_list, RBRACKET
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 102: // template_param_list -> type_ref
{ 
			CurrentSemanticValue.stn = new template_param_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 103: // template_param_list -> template_param_list, COMMA, type_ref
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as template_param_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 104: // param_name -> ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 105: // form_param_sect -> param_name, COLON, type_ref
{
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan);
		}
        break;
      case 106: // form_param_list -> form_param_sect
{
			CurrentSemanticValue.stn = new formal_parameters(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 107: // form_param_list -> form_param_list, COMMA, form_param_sect
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 108: // optional_form_param_list -> form_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			if (CurrentSemanticValue.stn != null)
				CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 109: // optional_form_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 110: // act_param -> expr
{ CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 111: // act_param -> ident, ASSIGN, expr
{ CurrentSemanticValue.ex = new name_assign_expr(ValueStack[ValueStack.Depth-3].id,ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan); }
        break;
      case 112: // act_param_list -> act_param
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 113: // act_param_list -> act_param_list, COMMA, act_param
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 114: // optional_act_param_list -> act_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
			if (CurrentSemanticValue.stn != null)
				CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 115: // optional_act_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 116: // optional_semicolon -> SEMICOLON
{ CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; }
        break;
      case 117: // optional_semicolon -> /* empty */
{ CurrentSemanticValue.ob = null; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


        public program_module NewProgramModule(program_name progName, Object optHeadCompDirs, uses_list mainUsesClose, syntax_tree_node progBlock, Object optPoint, LexLocation loc)
        {
            var progModule = new program_module(progName, mainUsesClose, progBlock as block, null, loc);
            progModule.Language = "Spython";
            if (optPoint == null && progBlock != null)
            {
                var fp = progBlock.source_context.end_position;
                var err_stn = progBlock;
			    if ((progBlock is block) && (progBlock as block).program_code != null && (progBlock as block).program_code.subnodes != null && (progBlock as block).program_code.subnodes.Count > 0)
                    err_stn = (progBlock as block).program_code.subnodes[(progBlock as block).program_code.subnodes.Count - 1];
                //parserTools.errors.Add(new SPythonUnexpectedToken(parserTools.currentFileName, StringResources.Get("TKPOINT"), new SourceContext(fp.line_num, fp.column_num + 1, fp.line_num, fp.column_num + 1, 0, 0), err_stn));
            }
            return progModule;
        }
}
}
