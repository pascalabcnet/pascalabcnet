// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-56159VE
// DateTime: 17.03.2025 13:03:49
// UserName: ????
// Input file <SPythonParser.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using SPythonParser;

namespace SPythonParserYacc
{
public enum Tokens {
    error=1,EOF=2,FOR=3,IN=4,WHILE=5,IF=6,
    ELSE=7,ELIF=8,DEF=9,RETURN=10,BREAK=11,CONTINUE=12,
    IMPORT=13,FROM=14,GLOBAL=15,AS=16,PASS=17,INDENT=18,
    UNINDENT=19,END_OF_FILE=20,END_OF_LINE=21,INTNUM=22,REALNUM=23,TRUE=24,
    FALSE=25,LPAR=26,RPAR=27,LBRACE=28,RBRACE=29,LBRACKET=30,
    RBRACKET=31,DOT=32,COMMA=33,COLON=34,SEMICOLON=35,ARROW=36,
    STRINGNUM=37,ASSIGN=38,PLUSEQUAL=39,MINUSEQUAL=40,STAREQUAL=41,DIVEQUAL=42,
    PLUS=43,MINUS=44,STAR=45,DIVIDE=46,SLASHSLASH=47,PERCENTAGE=48,
    ID=49,LESS=50,GREATER=51,LESSEQUAL=52,GREATEREQUAL=53,EQUAL=54,
    NOTEQUAL=55,AND=56,OR=57,NOT=58,STARSTAR=59};

public partial struct ValueType
{
	public expression ex;
	public ident id;
    public Object ob;
    public op_type_node op;
    public syntax_tree_node stn;
    public token_info ti;
    public type_definition td;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class SPythonGPPGParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SPythonParser.y
   	public syntax_tree_node root;
	public List<Error> errors;
    // public string current_file_name;
    // public int max_errors = 10;
	public SPythonParserTools parserTools;
    public List<compiler_directive> CompilerDirectives;
	public ParserLambdaHelper lambdaHelper = new ParserLambdaHelper();
	public bool is_unit_to_be_parsed = false;

	public SPythonGPPGParser(AbstractScanner<ValueType, LexLocation> scanner, SPythonParserTools parserTools,
	bool isUnitToBeParsed) : base(scanner) 
	{ 
		this.parserTools = parserTools;
		this.is_unit_to_be_parsed = isUnitToBeParsed;
	}
  // End verbatim content from SPythonParser.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[123];
  private static State[] states = new State[213];
  private static string[] nonTerms = new string[] {
      "ident", "dotted_ident", "func_name_ident", "expr", "proc_func_call", "const_value", 
      "variable", "optional_condition", "act_param", "act_param_list", "optional_act_param_list", 
      "proc_func_decl", "return_stmt", "break_stmt", "continue_stmt", "global_stmt", 
      "pass_stmt", "var_stmt", "assign_stmt", "if_stmt", "stmt", "proc_func_call_stmt", 
      "while_stmt", "for_stmt", "optional_else", "optional_elif", "import_or_decl_or_stmt", 
      "import_and_decl_and_stmt_list", "expr_list", "stmt_list", "block", "program", 
      "import_or_decl", "param_name", "form_param_sect", "form_param_list", "optional_form_param_list", 
      "dotted_ident_list", "ident_as_ident", "ident_as_ident_list", "proc_func_header", 
      "type_ref", "simple_type_identifier", "template_type", "import_clause", 
      "template_type_params", "template_param_list", "optional_semicolon", "end_of_line", 
      "assign_type", "$accept", };

  static SPythonGPPGParser() {
    states[0] = new State(new int[]{49,63,22,68,23,69,24,70,25,71,37,72,30,73,6,122,5,143,3,148,10,155,11,158,12,160,15,162,17,171,9,179,13,198,14,206},new int[]{-32,1,-28,3,-27,212,-21,8,-19,9,-7,10,-1,62,-5,118,-6,119,-18,120,-20,121,-22,141,-23,142,-24,147,-13,154,-14,157,-15,159,-16,161,-17,170,-33,175,-12,176,-41,177,-45,197});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{35,211,21,172,20,-122},new int[]{-48,4,-49,6});
    states[4] = new State(new int[]{20,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{49,63,22,68,23,69,24,70,25,71,37,72,30,73,6,122,5,143,3,148,10,155,11,158,12,160,15,162,17,171,9,179,13,198,14,206},new int[]{-27,7,-21,8,-19,9,-7,10,-1,62,-5,118,-6,119,-18,120,-20,121,-22,141,-23,142,-24,147,-13,154,-14,157,-15,159,-16,161,-17,170,-33,175,-12,176,-41,177,-45,197});
    states[7] = new State(-11);
    states[8] = new State(-6);
    states[9] = new State(-14);
    states[10] = new State(new int[]{38,11,26,52,32,91,30,93,34,98,39,114,40,115,41,116,42,117},new int[]{-50,96});
    states[11] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,12,-7,51,-1,62,-5,64,-6,65});
    states[12] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,35,-38,21,-38,20,-38});
    states[13] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,14,-7,51,-1,62,-5,64,-6,65});
    states[14] = new State(new int[]{7,15,6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45});
    states[15] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,16,-7,51,-1,62,-5,64,-6,65});
    states[16] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,35,-44,21,-44,20,-44,7,-44,33,-44,27,-44,3,-44,31,-44,34,-44});
    states[17] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,18,-7,51,-1,62,-5,64,-6,65});
    states[18] = new State(new int[]{6,13,43,-45,45,19,46,21,44,-45,50,-45,51,-45,52,-45,53,-45,54,-45,55,-45,56,-45,57,-45,47,41,48,43,59,45,35,-45,21,-45,20,-45,7,-45,33,-45,27,-45,3,-45,31,-45,34,-45});
    states[19] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,20,-7,51,-1,62,-5,64,-6,65});
    states[20] = new State(new int[]{6,13,43,-46,45,-46,46,-46,44,-46,50,-46,51,-46,52,-46,53,-46,54,-46,55,-46,56,-46,57,-46,47,-46,48,-46,59,45,35,-46,21,-46,20,-46,7,-46,33,-46,27,-46,3,-46,31,-46,34,-46});
    states[21] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,22,-7,51,-1,62,-5,64,-6,65});
    states[22] = new State(new int[]{6,13,43,-47,45,-47,46,-47,44,-47,50,-47,51,-47,52,-47,53,-47,54,-47,55,-47,56,-47,57,-47,47,-47,48,-47,59,45,35,-47,21,-47,20,-47,7,-47,33,-47,27,-47,3,-47,31,-47,34,-47});
    states[23] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,24,-7,51,-1,62,-5,64,-6,65});
    states[24] = new State(new int[]{6,13,43,-48,45,19,46,21,44,-48,50,-48,51,-48,52,-48,53,-48,54,-48,55,-48,56,-48,57,-48,47,41,48,43,59,45,35,-48,21,-48,20,-48,7,-48,33,-48,27,-48,3,-48,31,-48,34,-48});
    states[25] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,26,-7,51,-1,62,-5,64,-6,65});
    states[26] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,-49,51,-49,52,-49,53,-49,54,-49,55,-49,56,-49,57,-49,47,41,48,43,59,45,35,-49,21,-49,20,-49,7,-49,33,-49,27,-49,3,-49,31,-49,34,-49});
    states[27] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,28,-7,51,-1,62,-5,64,-6,65});
    states[28] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,-50,51,-50,52,-50,53,-50,54,-50,55,-50,56,-50,57,-50,47,41,48,43,59,45,35,-50,21,-50,20,-50,7,-50,33,-50,27,-50,3,-50,31,-50,34,-50});
    states[29] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,30,-7,51,-1,62,-5,64,-6,65});
    states[30] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,-51,51,-51,52,-51,53,-51,54,-51,55,-51,56,-51,57,-51,47,41,48,43,59,45,35,-51,21,-51,20,-51,7,-51,33,-51,27,-51,3,-51,31,-51,34,-51});
    states[31] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,32,-7,51,-1,62,-5,64,-6,65});
    states[32] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,-52,51,-52,52,-52,53,-52,54,-52,55,-52,56,-52,57,-52,47,41,48,43,59,45,35,-52,21,-52,20,-52,7,-52,33,-52,27,-52,3,-52,31,-52,34,-52});
    states[33] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,34,-7,51,-1,62,-5,64,-6,65});
    states[34] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,-53,51,-53,52,-53,53,-53,54,-53,55,-53,56,-53,57,-53,47,41,48,43,59,45,35,-53,21,-53,20,-53,7,-53,33,-53,27,-53,3,-53,31,-53,34,-53});
    states[35] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,36,-7,51,-1,62,-5,64,-6,65});
    states[36] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,-54,51,-54,52,-54,53,-54,54,-54,55,-54,56,-54,57,-54,47,41,48,43,59,45,35,-54,21,-54,20,-54,7,-54,33,-54,27,-54,3,-54,31,-54,34,-54});
    states[37] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,38,-7,51,-1,62,-5,64,-6,65});
    states[38] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,-55,57,-55,47,41,48,43,59,45,35,-55,21,-55,20,-55,7,-55,33,-55,27,-55,3,-55,31,-55,34,-55});
    states[39] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,40,-7,51,-1,62,-5,64,-6,65});
    states[40] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,-56,47,41,48,43,59,45,35,-56,21,-56,20,-56,7,-56,33,-56,27,-56,3,-56,31,-56,34,-56});
    states[41] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,42,-7,51,-1,62,-5,64,-6,65});
    states[42] = new State(new int[]{6,13,43,-57,45,-57,46,-57,44,-57,50,-57,51,-57,52,-57,53,-57,54,-57,55,-57,56,-57,57,-57,47,-57,48,-57,59,45,35,-57,21,-57,20,-57,7,-57,33,-57,27,-57,3,-57,31,-57,34,-57});
    states[43] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,44,-7,51,-1,62,-5,64,-6,65});
    states[44] = new State(new int[]{6,13,43,-58,45,-58,46,-58,44,-58,50,-58,51,-58,52,-58,53,-58,54,-58,55,-58,56,-58,57,-58,47,-58,48,-58,59,45,35,-58,21,-58,20,-58,7,-58,33,-58,27,-58,3,-58,31,-58,34,-58});
    states[45] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,46,-7,51,-1,62,-5,64,-6,65});
    states[46] = new State(new int[]{6,13,43,-59,45,-59,46,-59,44,-59,50,-59,51,-59,52,-59,53,-59,54,-59,55,-59,56,-59,57,-59,47,-59,48,-59,59,45,35,-59,21,-59,20,-59,7,-59,33,-59,27,-59,3,-59,31,-59,34,-59});
    states[47] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,48,-7,51,-1,62,-5,64,-6,65});
    states[48] = new State(new int[]{6,13,43,-60,45,19,46,21,44,-60,50,-60,51,-60,52,-60,53,-60,54,-60,55,-60,56,-60,57,-60,47,41,48,43,59,45,35,-60,21,-60,20,-60,7,-60,33,-60,27,-60,3,-60,31,-60,34,-60});
    states[49] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,50,-7,51,-1,62,-5,64,-6,65});
    states[50] = new State(new int[]{6,13,43,-61,45,-61,46,-61,44,-61,50,-61,51,-61,52,-61,53,-61,54,-61,55,-61,56,-61,57,-61,47,-61,48,-61,59,45,35,-61,21,-61,20,-61,7,-61,33,-61,27,-61,3,-61,31,-61,34,-61});
    states[51] = new State(new int[]{26,52,32,91,30,93,6,-62,43,-62,45,-62,46,-62,44,-62,50,-62,51,-62,52,-62,53,-62,54,-62,55,-62,56,-62,57,-62,47,-62,48,-62,59,-62,35,-62,21,-62,20,-62,7,-62,33,-62,27,-62,3,-62,31,-62,34,-62});
    states[52] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78,27,-118},new int[]{-11,53,-10,55,-9,90,-4,58,-7,51,-1,59,-5,64,-6,65});
    states[53] = new State(new int[]{27,54});
    states[54] = new State(-98);
    states[55] = new State(new int[]{33,56,27,-117});
    states[56] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-9,57,-4,58,-7,51,-1,59,-5,64,-6,65});
    states[57] = new State(-116);
    states[58] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,33,-113,27,-113});
    states[59] = new State(new int[]{38,60,26,-85,32,-85,30,-85,6,-85,43,-85,45,-85,46,-85,44,-85,50,-85,51,-85,52,-85,53,-85,54,-85,55,-85,56,-85,57,-85,47,-85,48,-85,59,-85,33,-85,27,-85});
    states[60] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,61,-7,51,-1,62,-5,64,-6,65});
    states[61] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,33,-114,27,-114});
    states[62] = new State(-85);
    states[63] = new State(-27);
    states[64] = new State(-86);
    states[65] = new State(new int[]{32,66,6,-63,43,-63,45,-63,46,-63,44,-63,50,-63,51,-63,52,-63,53,-63,54,-63,55,-63,56,-63,57,-63,47,-63,48,-63,59,-63,35,-63,21,-63,20,-63,7,-63,33,-63,27,-63,3,-63,31,-63,34,-63});
    states[66] = new State(new int[]{49,63},new int[]{-1,67});
    states[67] = new State(-88);
    states[68] = new State(-65);
    states[69] = new State(-66);
    states[70] = new State(-67);
    states[71] = new State(-68);
    states[72] = new State(-69);
    states[73] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-29,74,-4,81,-7,51,-1,62,-5,64,-6,65});
    states[74] = new State(new int[]{31,75,33,76});
    states[75] = new State(-89);
    states[76] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,77,-7,51,-1,62,-5,64,-6,65});
    states[77] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,31,-71,33,-71});
    states[78] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,79,-7,51,-1,62,-5,64,-6,65});
    states[79] = new State(new int[]{27,80,6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45});
    states[80] = new State(-64);
    states[81] = new State(new int[]{3,82,6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,31,-70,33,-70});
    states[82] = new State(new int[]{49,63},new int[]{-1,83});
    states[83] = new State(new int[]{4,84});
    states[84] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,85,-7,51,-1,62,-5,64,-6,65});
    states[85] = new State(new int[]{6,88,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,31,-92},new int[]{-8,86});
    states[86] = new State(new int[]{31,87});
    states[87] = new State(-91);
    states[88] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,89,-7,51,-1,62,-5,64,-6,65});
    states[89] = new State(new int[]{7,15,6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,31,-93});
    states[90] = new State(-115);
    states[91] = new State(new int[]{49,63},new int[]{-1,92});
    states[92] = new State(-87);
    states[93] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,94,-7,51,-1,62,-5,64,-6,65});
    states[94] = new State(new int[]{31,95,6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45});
    states[95] = new State(-90);
    states[96] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,97,-7,51,-1,62,-5,64,-6,65});
    states[97] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,35,-39,21,-39,20,-39});
    states[98] = new State(new int[]{49,63},new int[]{-42,99,-43,102,-1,111,-44,112});
    states[99] = new State(new int[]{38,100,35,-36,21,-36,20,-36});
    states[100] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,101,-7,51,-1,62,-5,64,-6,65});
    states[101] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,35,-37,21,-37,20,-37});
    states[102] = new State(new int[]{32,103,30,106,38,-101,35,-101,21,-101,20,-101,31,-101,33,-101,34,-101,27,-101},new int[]{-46,105});
    states[103] = new State(new int[]{49,63},new int[]{-1,104});
    states[104] = new State(-100);
    states[105] = new State(-103);
    states[106] = new State(new int[]{49,63},new int[]{-47,107,-42,113,-43,102,-1,111,-44,112});
    states[107] = new State(new int[]{31,108,33,109});
    states[108] = new State(-104);
    states[109] = new State(new int[]{49,63},new int[]{-42,110,-43,102,-1,111,-44,112});
    states[110] = new State(-106);
    states[111] = new State(-99);
    states[112] = new State(-102);
    states[113] = new State(-105);
    states[114] = new State(-40);
    states[115] = new State(-41);
    states[116] = new State(-42);
    states[117] = new State(-43);
    states[118] = new State(new int[]{38,-86,26,-86,32,-86,30,-86,34,-86,39,-86,40,-86,41,-86,42,-86,35,-84,21,-84,20,-84});
    states[119] = new State(new int[]{32,66});
    states[120] = new State(-15);
    states[121] = new State(-16);
    states[122] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,123,-7,51,-1,62,-5,64,-6,65});
    states[123] = new State(new int[]{34,124,6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45});
    states[124] = new State(new int[]{18,136},new int[]{-31,125});
    states[125] = new State(new int[]{8,127,7,133,35,-76,21,-76,20,-76},new int[]{-26,126,-25,132});
    states[126] = new State(-72);
    states[127] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,128,-7,51,-1,62,-5,64,-6,65});
    states[128] = new State(new int[]{34,129,6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45});
    states[129] = new State(new int[]{18,136},new int[]{-31,130});
    states[130] = new State(new int[]{8,127,7,133,35,-76,21,-76,20,-76},new int[]{-26,131,-25,132});
    states[131] = new State(-73);
    states[132] = new State(-74);
    states[133] = new State(new int[]{34,134});
    states[134] = new State(new int[]{18,136},new int[]{-31,135});
    states[135] = new State(-75);
    states[136] = new State(new int[]{49,63,22,68,23,69,24,70,25,71,37,72,30,73,6,122,5,143,3,148,10,155,11,158,12,160,15,162,17,171},new int[]{-30,137,-21,174,-19,9,-7,10,-1,62,-5,118,-6,119,-18,120,-20,121,-22,141,-23,142,-24,147,-13,154,-14,157,-15,159,-16,161,-17,170});
    states[137] = new State(new int[]{21,172,35,173},new int[]{-49,138});
    states[138] = new State(new int[]{19,139,49,63,22,68,23,69,24,70,25,71,37,72,30,73,6,122,5,143,3,148,10,155,11,158,12,160,15,162,17,171},new int[]{-21,140,-19,9,-7,10,-1,62,-5,118,-6,119,-18,120,-20,121,-22,141,-23,142,-24,147,-13,154,-14,157,-15,159,-16,161,-17,170});
    states[139] = new State(-94);
    states[140] = new State(-13);
    states[141] = new State(-17);
    states[142] = new State(-18);
    states[143] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,144,-7,51,-1,62,-5,64,-6,65});
    states[144] = new State(new int[]{34,145,6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45});
    states[145] = new State(new int[]{18,136},new int[]{-31,146});
    states[146] = new State(-77);
    states[147] = new State(-19);
    states[148] = new State(new int[]{49,63},new int[]{-1,149});
    states[149] = new State(new int[]{4,150});
    states[150] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78},new int[]{-4,151,-7,51,-1,62,-5,64,-6,65});
    states[151] = new State(new int[]{34,152,6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45});
    states[152] = new State(new int[]{18,136},new int[]{-31,153});
    states[153] = new State(-78);
    states[154] = new State(-20);
    states[155] = new State(new int[]{44,47,58,49,49,63,22,68,23,69,24,70,25,71,37,72,30,73,26,78,35,-81,21,-81,20,-81},new int[]{-4,156,-7,51,-1,62,-5,64,-6,65});
    states[156] = new State(new int[]{6,13,43,17,45,19,46,21,44,23,50,25,51,27,52,29,53,31,54,33,55,35,56,37,57,39,47,41,48,43,59,45,35,-80,21,-80,20,-80});
    states[157] = new State(-21);
    states[158] = new State(-82);
    states[159] = new State(-22);
    states[160] = new State(-83);
    states[161] = new State(-23);
    states[162] = new State(new int[]{49,63},new int[]{-38,163,-2,169,-1,168});
    states[163] = new State(new int[]{33,164,35,-26,21,-26,20,-26});
    states[164] = new State(new int[]{49,63},new int[]{-2,165,-1,168});
    states[165] = new State(new int[]{32,166,33,-31,35,-31,21,-31,20,-31});
    states[166] = new State(new int[]{49,63},new int[]{-1,167});
    states[167] = new State(-29);
    states[168] = new State(-28);
    states[169] = new State(new int[]{32,166,33,-30,35,-30,21,-30,20,-30});
    states[170] = new State(-24);
    states[171] = new State(-25);
    states[172] = new State(-119);
    states[173] = new State(-120);
    states[174] = new State(-12);
    states[175] = new State(-7);
    states[176] = new State(-8);
    states[177] = new State(new int[]{18,136},new int[]{-31,178});
    states[178] = new State(-95);
    states[179] = new State(new int[]{49,63},new int[]{-3,180,-1,196});
    states[180] = new State(new int[]{26,181});
    states[181] = new State(new int[]{49,63,27,-112},new int[]{-37,182,-36,188,-35,195,-34,191,-1,194});
    states[182] = new State(new int[]{27,183});
    states[183] = new State(new int[]{34,184,36,185});
    states[184] = new State(-96);
    states[185] = new State(new int[]{49,63},new int[]{-42,186,-43,102,-1,111,-44,112});
    states[186] = new State(new int[]{34,187});
    states[187] = new State(-97);
    states[188] = new State(new int[]{33,189,27,-111});
    states[189] = new State(new int[]{49,63},new int[]{-35,190,-34,191,-1,194});
    states[190] = new State(-110);
    states[191] = new State(new int[]{34,192});
    states[192] = new State(new int[]{49,63},new int[]{-42,193,-43,102,-1,111,-44,112});
    states[193] = new State(-108);
    states[194] = new State(-107);
    states[195] = new State(-109);
    states[196] = new State(-79);
    states[197] = new State(-9);
    states[198] = new State(new int[]{49,63},new int[]{-40,199,-39,205,-1,202});
    states[199] = new State(new int[]{33,200,35,-3,21,-3,20,-3});
    states[200] = new State(new int[]{49,63},new int[]{-39,201,-1,202});
    states[201] = new State(-35);
    states[202] = new State(new int[]{16,203,33,-33,35,-33,21,-33,20,-33});
    states[203] = new State(new int[]{49,63},new int[]{-1,204});
    states[204] = new State(-32);
    states[205] = new State(-34);
    states[206] = new State(new int[]{49,63},new int[]{-1,207});
    states[207] = new State(new int[]{13,208});
    states[208] = new State(new int[]{45,210,49,63},new int[]{-40,209,-39,205,-1,202});
    states[209] = new State(new int[]{33,200,35,-4,21,-4,20,-4});
    states[210] = new State(-5);
    states[211] = new State(new int[]{20,-121,49,-120,22,-120,23,-120,24,-120,25,-120,37,-120,30,-120,6,-120,5,-120,3,-120,10,-120,11,-120,12,-120,15,-120,17,-120,9,-120,13,-120,14,-120});
    states[212] = new State(-10);

    rules[1] = new Rule(-51, new int[]{-32,2});
    rules[2] = new Rule(-32, new int[]{-28,-48,20});
    rules[3] = new Rule(-45, new int[]{13,-40});
    rules[4] = new Rule(-45, new int[]{14,-1,13,-40});
    rules[5] = new Rule(-45, new int[]{14,-1,13,45});
    rules[6] = new Rule(-27, new int[]{-21});
    rules[7] = new Rule(-27, new int[]{-33});
    rules[8] = new Rule(-33, new int[]{-12});
    rules[9] = new Rule(-33, new int[]{-45});
    rules[10] = new Rule(-28, new int[]{-27});
    rules[11] = new Rule(-28, new int[]{-28,-49,-27});
    rules[12] = new Rule(-30, new int[]{-21});
    rules[13] = new Rule(-30, new int[]{-30,-49,-21});
    rules[14] = new Rule(-21, new int[]{-19});
    rules[15] = new Rule(-21, new int[]{-18});
    rules[16] = new Rule(-21, new int[]{-20});
    rules[17] = new Rule(-21, new int[]{-22});
    rules[18] = new Rule(-21, new int[]{-23});
    rules[19] = new Rule(-21, new int[]{-24});
    rules[20] = new Rule(-21, new int[]{-13});
    rules[21] = new Rule(-21, new int[]{-14});
    rules[22] = new Rule(-21, new int[]{-15});
    rules[23] = new Rule(-21, new int[]{-16});
    rules[24] = new Rule(-21, new int[]{-17});
    rules[25] = new Rule(-17, new int[]{17});
    rules[26] = new Rule(-16, new int[]{15,-38});
    rules[27] = new Rule(-1, new int[]{49});
    rules[28] = new Rule(-2, new int[]{-1});
    rules[29] = new Rule(-2, new int[]{-2,32,-1});
    rules[30] = new Rule(-38, new int[]{-2});
    rules[31] = new Rule(-38, new int[]{-38,33,-2});
    rules[32] = new Rule(-39, new int[]{-1,16,-1});
    rules[33] = new Rule(-39, new int[]{-1});
    rules[34] = new Rule(-40, new int[]{-39});
    rules[35] = new Rule(-40, new int[]{-40,33,-39});
    rules[36] = new Rule(-18, new int[]{-7,34,-42});
    rules[37] = new Rule(-18, new int[]{-7,34,-42,38,-4});
    rules[38] = new Rule(-19, new int[]{-7,38,-4});
    rules[39] = new Rule(-19, new int[]{-7,-50,-4});
    rules[40] = new Rule(-50, new int[]{39});
    rules[41] = new Rule(-50, new int[]{40});
    rules[42] = new Rule(-50, new int[]{41});
    rules[43] = new Rule(-50, new int[]{42});
    rules[44] = new Rule(-4, new int[]{-4,6,-4,7,-4});
    rules[45] = new Rule(-4, new int[]{-4,43,-4});
    rules[46] = new Rule(-4, new int[]{-4,45,-4});
    rules[47] = new Rule(-4, new int[]{-4,46,-4});
    rules[48] = new Rule(-4, new int[]{-4,44,-4});
    rules[49] = new Rule(-4, new int[]{-4,50,-4});
    rules[50] = new Rule(-4, new int[]{-4,51,-4});
    rules[51] = new Rule(-4, new int[]{-4,52,-4});
    rules[52] = new Rule(-4, new int[]{-4,53,-4});
    rules[53] = new Rule(-4, new int[]{-4,54,-4});
    rules[54] = new Rule(-4, new int[]{-4,55,-4});
    rules[55] = new Rule(-4, new int[]{-4,56,-4});
    rules[56] = new Rule(-4, new int[]{-4,57,-4});
    rules[57] = new Rule(-4, new int[]{-4,47,-4});
    rules[58] = new Rule(-4, new int[]{-4,48,-4});
    rules[59] = new Rule(-4, new int[]{-4,59,-4});
    rules[60] = new Rule(-4, new int[]{44,-4});
    rules[61] = new Rule(-4, new int[]{58,-4});
    rules[62] = new Rule(-4, new int[]{-7});
    rules[63] = new Rule(-4, new int[]{-6});
    rules[64] = new Rule(-4, new int[]{26,-4,27});
    rules[65] = new Rule(-6, new int[]{22});
    rules[66] = new Rule(-6, new int[]{23});
    rules[67] = new Rule(-6, new int[]{24});
    rules[68] = new Rule(-6, new int[]{25});
    rules[69] = new Rule(-6, new int[]{37});
    rules[70] = new Rule(-29, new int[]{-4});
    rules[71] = new Rule(-29, new int[]{-29,33,-4});
    rules[72] = new Rule(-20, new int[]{6,-4,34,-31,-26});
    rules[73] = new Rule(-26, new int[]{8,-4,34,-31,-26});
    rules[74] = new Rule(-26, new int[]{-25});
    rules[75] = new Rule(-25, new int[]{7,34,-31});
    rules[76] = new Rule(-25, new int[]{});
    rules[77] = new Rule(-23, new int[]{5,-4,34,-31});
    rules[78] = new Rule(-24, new int[]{3,-1,4,-4,34,-31});
    rules[79] = new Rule(-3, new int[]{-1});
    rules[80] = new Rule(-13, new int[]{10,-4});
    rules[81] = new Rule(-13, new int[]{10});
    rules[82] = new Rule(-14, new int[]{11});
    rules[83] = new Rule(-15, new int[]{12});
    rules[84] = new Rule(-22, new int[]{-5});
    rules[85] = new Rule(-7, new int[]{-1});
    rules[86] = new Rule(-7, new int[]{-5});
    rules[87] = new Rule(-7, new int[]{-7,32,-1});
    rules[88] = new Rule(-7, new int[]{-6,32,-1});
    rules[89] = new Rule(-7, new int[]{30,-29,31});
    rules[90] = new Rule(-7, new int[]{-7,30,-4,31});
    rules[91] = new Rule(-7, new int[]{30,-4,3,-1,4,-4,-8,31});
    rules[92] = new Rule(-8, new int[]{});
    rules[93] = new Rule(-8, new int[]{6,-4});
    rules[94] = new Rule(-31, new int[]{18,-30,-49,19});
    rules[95] = new Rule(-12, new int[]{-41,-31});
    rules[96] = new Rule(-41, new int[]{9,-3,26,-37,27,34});
    rules[97] = new Rule(-41, new int[]{9,-3,26,-37,27,36,-42,34});
    rules[98] = new Rule(-5, new int[]{-7,26,-11,27});
    rules[99] = new Rule(-43, new int[]{-1});
    rules[100] = new Rule(-43, new int[]{-43,32,-1});
    rules[101] = new Rule(-42, new int[]{-43});
    rules[102] = new Rule(-42, new int[]{-44});
    rules[103] = new Rule(-44, new int[]{-43,-46});
    rules[104] = new Rule(-46, new int[]{30,-47,31});
    rules[105] = new Rule(-47, new int[]{-42});
    rules[106] = new Rule(-47, new int[]{-47,33,-42});
    rules[107] = new Rule(-34, new int[]{-1});
    rules[108] = new Rule(-35, new int[]{-34,34,-42});
    rules[109] = new Rule(-36, new int[]{-35});
    rules[110] = new Rule(-36, new int[]{-36,33,-35});
    rules[111] = new Rule(-37, new int[]{-36});
    rules[112] = new Rule(-37, new int[]{});
    rules[113] = new Rule(-9, new int[]{-4});
    rules[114] = new Rule(-9, new int[]{-1,38,-4});
    rules[115] = new Rule(-10, new int[]{-9});
    rules[116] = new Rule(-10, new int[]{-10,33,-9});
    rules[117] = new Rule(-11, new int[]{-10});
    rules[118] = new Rule(-11, new int[]{});
    rules[119] = new Rule(-49, new int[]{21});
    rules[120] = new Rule(-49, new int[]{35});
    rules[121] = new Rule(-48, new int[]{35});
    rules[122] = new Rule(-48, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> import_and_decl_and_stmt_list, optional_semicolon, END_OF_FILE
{
			// main program
			if (!is_unit_to_be_parsed) {
				var stl = ValueStack[ValueStack.Depth-3].stn as statement_list;
				stl.left_logical_bracket = new token_info("");
				stl.right_logical_bracket = new token_info("");
				var bl = new block(new declarations(), stl, CurrentLocationSpan);
				root = CurrentSemanticValue.stn = NewProgramModule(null, null, new uses_list(), bl, ValueStack[ValueStack.Depth-2].ob, CurrentLocationSpan);
				root.source_context = bl.source_context;
			}
			// unit
			else {
				var interface_part = new interface_node(new declarations(), new uses_list(), null, null);
				var initialization_part = new initfinal_part(null, ValueStack[ValueStack.Depth-3].stn as statement_list, null, null, null, CurrentLocationSpan);

				root = CurrentSemanticValue.stn = new unit_module(
					new unit_name(new ident(Path.GetFileNameWithoutExtension(parserTools.currentFileName)),
					UnitHeaderKeyword.Unit, CurrentLocationSpan), interface_part, null,
					initialization_part.initialization_sect,
					initialization_part.finalization_sect, null, CurrentLocationSpan);
			}

		}
        break;
      case 3: // import_clause -> IMPORT, ident_as_ident_list
{
			CurrentSemanticValue.stn = new import_statement(ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
		}
        break;
      case 4: // import_clause -> FROM, ident, IMPORT, ident_as_ident_list
{
			CurrentSemanticValue.stn = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, false, ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
		}
        break;
      case 5: // import_clause -> FROM, ident, IMPORT, STAR
{
			CurrentSemanticValue.stn = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, true, null, CurrentLocationSpan);
		}
        break;
      case 6: // import_or_decl_or_stmt -> stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 7: // import_or_decl_or_stmt -> import_or_decl
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 8: // import_or_decl -> proc_func_decl
{
			CurrentSemanticValue.stn = new declarations_as_statement(new declarations(ValueStack[ValueStack.Depth-1].stn as procedure_definition, CurrentLocationSpan), CurrentLocationSpan);
		}
        break;
      case 9: // import_or_decl -> import_clause
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 10: // import_and_decl_and_stmt_list -> import_or_decl_or_stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 11: // import_and_decl_and_stmt_list -> import_and_decl_and_stmt_list, end_of_line, 
               //                                  import_or_decl_or_stmt
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 12: // stmt_list -> stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 13: // stmt_list -> stmt_list, end_of_line, stmt
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 14: // stmt -> assign_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 15: // stmt -> var_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 16: // stmt -> if_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 17: // stmt -> proc_func_call_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 18: // stmt -> while_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 19: // stmt -> for_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 20: // stmt -> return_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 21: // stmt -> break_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 22: // stmt -> continue_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 23: // stmt -> global_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 24: // stmt -> pass_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 25: // pass_stmt -> PASS
{
			CurrentSemanticValue.stn = new empty_statement();
		}
        break;
      case 26: // global_stmt -> GLOBAL, dotted_ident_list
{
			CurrentSemanticValue.stn = new global_statement(ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan);
		}
        break;
      case 27: // ident -> ID
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 28: // dotted_ident -> ident
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 29: // dotted_ident -> dotted_ident, DOT, ident
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-3].id.name + "." + ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan); 
		}
        break;
      case 30: // dotted_ident_list -> dotted_ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 31: // dotted_ident_list -> dotted_ident_list, COMMA, dotted_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 32: // ident_as_ident -> ident, AS, ident
{ 
			CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 33: // ident_as_ident -> ident
{ 
			CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-1].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 34: // ident_as_ident_list -> ident_as_ident
{
			CurrentSemanticValue.stn = new as_statement_list(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 35: // ident_as_ident_list -> ident_as_ident_list, COMMA, ident_as_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as as_statement_list).Add(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 36: // var_stmt -> variable, COLON, type_ref
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-3].ex as ident, LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 37: // var_stmt -> variable, COLON, type_ref, ASSIGN, expr
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-5].ex as ident, LocationStack[LocationStack.Depth-5]), ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 38: // assign_stmt -> variable, ASSIGN, expr
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO", CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 39: // assign_stmt -> variable, assign_type, expr
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO", CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 40: // assign_type -> PLUSEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 41: // assign_type -> MINUSEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 42: // assign_type -> STAREQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 43: // assign_type -> DIVEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op; 
		}
        break;
      case 44: // expr -> expr, IF, expr, ELSE, expr
{
			CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 45: // expr -> expr, PLUS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 46: // expr -> expr, STAR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 47: // expr -> expr, DIVIDE, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 48: // expr -> expr, MINUS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 49: // expr -> expr, LESS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 50: // expr -> expr, GREATER, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 51: // expr -> expr, LESSEQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 52: // expr -> expr, GREATEREQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 53: // expr -> expr, EQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 54: // expr -> expr, NOTEQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 55: // expr -> expr, AND, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 56: // expr -> expr, OR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 57: // expr -> expr, SLASHSLASH, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 58: // expr -> expr, PERCENTAGE, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 59: // expr -> expr, STARSTAR, expr
{
			addressed_value method_name = new ident("!pow", CurrentLocationSpan);
			expression_list el = new expression_list(new List<expression> { ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex }, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(method_name, el, CurrentLocationSpan);
		}
        break;
      case 60: // expr -> MINUS, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 61: // expr -> NOT, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 62: // expr -> variable
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 63: // expr -> const_value
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 64: // expr -> LPAR, expr, RPAR
{ 
			CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 65: // const_value -> INTNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 66: // const_value -> REALNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 67: // const_value -> TRUE
{ 
			CurrentSemanticValue.ex = new ident("true", CurrentLocationSpan); 
		}
        break;
      case 68: // const_value -> FALSE
{ 
			CurrentSemanticValue.ex = new ident("false", CurrentLocationSpan); 
		}
        break;
      case 69: // const_value -> STRINGNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; 
		}
        break;
      case 70: // expr_list -> expr
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 71: // expr_list -> expr_list, COMMA, expr
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 72: // if_stmt -> IF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 73: // optional_elif -> ELIF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 74: // optional_elif -> optional_else
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 75: // optional_else -> ELSE, COLON, block
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 76: // optional_else -> /* empty */
{ 
			CurrentSemanticValue.stn = null; 
		}
        break;
      case 77: // while_stmt -> WHILE, expr, COLON, block
{
			CurrentSemanticValue.stn = new while_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, WhileCycleType.While, CurrentLocationSpan);
		}
        break;
      case 78: // for_stmt -> FOR, ident, IN, expr, COLON, block
{
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-5].id, new no_type_foreach(), ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan);
		}
        break;
      case 79: // func_name_ident -> ident
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 80: // return_stmt -> RETURN, expr
{
			statement res_assign = new assign(new ident("result"), ValueStack[ValueStack.Depth-1].ex, Operators.Assignment, CurrentLocationSpan);
			statement exit_call = new procedure_call(new ident("exit"), true, CurrentLocationSpan);
			CurrentSemanticValue.stn = new statement_list(res_assign, CurrentLocationSpan);
			(CurrentSemanticValue.stn as statement_list).Add(exit_call, CurrentLocationSpan);
		}
        break;
      case 81: // return_stmt -> RETURN
{
			CurrentSemanticValue.stn = new procedure_call(new ident("exit", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 82: // break_stmt -> BREAK
{
			CurrentSemanticValue.stn = new procedure_call(new ident("break", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 83: // continue_stmt -> CONTINUE
{
			CurrentSemanticValue.stn = new procedure_call(new ident("continue", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 84: // proc_func_call_stmt -> proc_func_call
{
			CurrentSemanticValue.stn = new procedure_call(ValueStack[ValueStack.Depth-1].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex is ident, CurrentLocationSpan);
		}
        break;
      case 85: // variable -> ident
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 86: // variable -> proc_func_call
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 87: // variable -> variable, DOT, ident
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 88: // variable -> const_value, DOT, ident
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 89: // variable -> LBRACKET, expr_list, RBRACKET
{
			var acn = new array_const_new(ValueStack[ValueStack.Depth-2].stn as expression_list, '|', CurrentLocationSpan);
			var dn = new dot_node(acn as addressed_value, (new ident("ToList", CurrentLocationSpan)) as addressed_value, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, CurrentLocationSpan);
		}
        break;
      case 90: // variable -> variable, LBRACKET, expr, RBRACKET
{
			var el = new expression_list(ValueStack[ValueStack.Depth-2].ex as expression, CurrentLocationSpan);
			CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-4].ex as addressed_value, el, CurrentLocationSpan);
		}
        break;
      case 91: // variable -> LBRACKET, expr, FOR, ident, IN, expr, optional_condition, RBRACKET
{
			CurrentSemanticValue.ex = new list_generator(ValueStack[ValueStack.Depth-7].ex, ValueStack[ValueStack.Depth-5].id, ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan);
		}
        break;
      case 92: // optional_condition -> /* empty */
{ 
			CurrentSemanticValue.ex = null; 
		}
        break;
      case 93: // optional_condition -> IF, expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 94: // block -> INDENT, stmt_list, end_of_line, UNINDENT
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn as statement_list;
			(CurrentSemanticValue.stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-4].ti;
			(CurrentSemanticValue.stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
			CurrentSemanticValue.stn.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-2]);
		}
        break;
      case 95: // proc_func_decl -> proc_func_header, block
{
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, new block(null, ValueStack[ValueStack.Depth-1].stn as statement_list, LocationStack[LocationStack.Depth-1]), CurrentLocationSpan);
		}
        break;
      case 96: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
               //                     COLON
{
			CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>()), new method_name(null,null, ValueStack[ValueStack.Depth-5].id, null, LocationStack[LocationStack.Depth-5]), null, CurrentLocationSpan);
		}
        break;
      case 97: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
               //                     ARROW, type_ref, COLON
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-5].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>()), new method_name(null,null, ValueStack[ValueStack.Depth-7].id, null, LocationStack[LocationStack.Depth-7]), null, ValueStack[ValueStack.Depth-2].td as type_definition, CurrentLocationSpan);
		}
        break;
      case 98: // proc_func_call -> variable, LPAR, optional_act_param_list, RPAR
{
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value, ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 99: // simple_type_identifier -> ident
{
			CurrentSemanticValue.td = new named_type_reference(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 100: // simple_type_identifier -> simple_type_identifier, DOT, ident
{ 
			CurrentSemanticValue.td = (ValueStack[ValueStack.Depth-3].td as named_type_reference).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 101: // type_ref -> simple_type_identifier
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td as named_type_reference;
		}
        break;
      case 102: // type_ref -> template_type
{ 
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; 
		}
        break;
      case 103: // template_type -> simple_type_identifier, template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference(ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan); 
		}
        break;
      case 104: // template_type_params -> LBRACKET, template_param_list, RBRACKET
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 105: // template_param_list -> type_ref
{ 
			CurrentSemanticValue.stn = new template_param_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 106: // template_param_list -> template_param_list, COMMA, type_ref
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as template_param_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 107: // param_name -> ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 108: // form_param_sect -> param_name, COLON, type_ref
{
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan);
		}
        break;
      case 109: // form_param_list -> form_param_sect
{
			CurrentSemanticValue.stn = new formal_parameters(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 110: // form_param_list -> form_param_list, COMMA, form_param_sect
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 111: // optional_form_param_list -> form_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 112: // optional_form_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 113: // act_param -> expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 114: // act_param -> ident, ASSIGN, expr
{ 
			CurrentSemanticValue.ex = new name_assign_expr(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 115: // act_param_list -> act_param
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 116: // act_param_list -> act_param_list, COMMA, act_param
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 117: // optional_act_param_list -> act_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 118: // optional_act_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 119: // end_of_line -> END_OF_LINE
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 120: // end_of_line -> SEMICOLON
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 121: // optional_semicolon -> SEMICOLON
{ 
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; 
		}
        break;
      case 122: // optional_semicolon -> /* empty */
{ 
			CurrentSemanticValue.ob = null; 
		}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


        public program_module NewProgramModule(program_name progName, Object optHeadCompDirs, uses_list mainUsesClose, syntax_tree_node progBlock, Object optPoint, LexLocation loc)
        {
            var progModule = new program_module(progName, mainUsesClose, progBlock as block, null, loc);
            progModule.Language = "Spython";
            if (optPoint == null && progBlock != null)
            {
                var fp = progBlock.source_context.end_position;
                var err_stn = progBlock;
			    if ((progBlock is block) && (progBlock as block).program_code != null && (progBlock as block).program_code.subnodes != null && (progBlock as block).program_code.subnodes.Count > 0)
                    err_stn = (progBlock as block).program_code.subnodes[(progBlock as block).program_code.subnodes.Count - 1];
                //parserTools.errors.Add(new SPythonUnexpectedToken(parserTools.currentFileName, StringResources.Get("TKPOINT"), new SourceContext(fp.line_num, fp.column_num + 1, fp.line_num, fp.column_num + 1, 0, 0), err_stn));
            }
            return progModule;
        }
}
}
