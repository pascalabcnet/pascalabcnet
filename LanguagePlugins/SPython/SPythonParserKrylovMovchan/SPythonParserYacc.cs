// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-56159VE
// DateTime: 16.06.2025 14:15:27
// UserName: ????
// Input file <SPythonParser.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using PascalABCCompiler.SyntaxTree;
using PascalABCCompiler.ParserTools;
using PascalABCCompiler.Errors;
using System.Linq;
using System.Collections.Generic;
using System.IO;
using SPythonParser;

namespace SPythonParserYacc
{
public enum Tokens {
    error=1,EOF=2,FOR=3,IN=4,WHILE=5,IF=6,
    ELSE=7,ELIF=8,DEF=9,RETURN=10,BREAK=11,CONTINUE=12,
    IMPORT=13,FROM=14,GLOBAL=15,AS=16,PASS=17,CLASS=18,
    LAMBDA=19,EXIT=20,NEW=21,IS=22,INDENT=23,UNINDENT=24,
    END_OF_FILE=25,END_OF_LINE=26,DECLTYPE=27,INTNUM=28,REALNUM=29,TRUE=30,
    FALSE=31,BIGINT=32,FSTRINGNUM=33,LPAR=34,RPAR=35,LBRACE=36,
    RBRACE=37,LBRACKET=38,RBRACKET=39,DOT=40,COMMA=41,COLON=42,
    SEMICOLON=43,ARROW=44,STRINGNUM=45,ASSIGN=46,PLUSEQUAL=47,MINUSEQUAL=48,
    STAREQUAL=49,DIVEQUAL=50,BINXOREQUAL=51,SHLEQUAL=52,SHREQUAL=53,BINANDEQUAL=54,
    BINOREQUAL=55,INTDIVISIONEQUAL=56,PLUS=57,MINUS=58,STAR=59,DIVIDE=60,
    SLASHSLASH=61,PERCENTAGE=62,ID=63,LESS=64,GREATER=65,LESSEQUAL=66,
    GREATEREQUAL=67,EQUAL=68,NOTEQUAL=69,AND=70,OR=71,NOT=72,
    STARSTAR=73,BINNOT=74,BINXOR=75,SHL=76,SHR=77,BINAND=78,
    BINOR=79,tkParseModeExpression=80,tkParseModeStatement=81,tkParseModeType=82};

public partial struct ValueType
{
	public expression ex;
	public ident id;
    public Object ob;
    public op_type_node op;
    public syntax_tree_node stn;
    public token_info ti;
    public type_definition td;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public partial class SPythonGPPGParser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from SPythonParser.y
   	public syntax_tree_node root;
	public List<Error> errors;
    // public string current_file_name;
    // public int max_errors = 10;
	public SPythonParserTools parserTools;
    public List<compiler_directive> CompilerDirectives;
	public ParserLambdaHelper lambdaHelper = new ParserLambdaHelper();
	public bool is_unit_to_be_parsed = false;

	public SPythonGPPGParser(AbstractScanner<ValueType, LexLocation> scanner, SPythonParserTools parserTools,
	bool isUnitToBeParsed) : base(scanner) 
	{ 
		this.parserTools = parserTools;
		this.is_unit_to_be_parsed = isUnitToBeParsed;
	}
  // End verbatim content from SPythonParser.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[178];
  private static State[] states = new State[321];
  private static string[] nonTerms = new string[] {
      "ident", "dotted_ident", "func_name_ident", "type_decl_identifier", "expr", 
      "proc_func_call", "const_value", "variable", "optional_condition", "act_param", 
      "new_expr", "is_expr", "variable_as_type", "act_param_list", "optional_act_param_list", 
      "proc_func_decl", "return_stmt", "break_stmt", "continue_stmt", "global_stmt", 
      "pass_stmt", "var_stmt", "assign_stmt", "if_stmt", "stmt", "proc_func_call_stmt", 
      "while_stmt", "for_stmt", "optional_else", "optional_elif", "exit_stmt", 
      "expr_list", "stmt_list", "block", "program", "param_name", "form_param_sect", 
      "form_param_list", "optional_form_param_list", "dotted_ident_list", "ident_as_ident", 
      "ident_as_ident_list", "ident_list", "proc_func_header", "type_ref", "simple_type_identifier", 
      "template_type", "import_clause", "template_type_params", "template_param_list", 
      "parts", "stmt_or_expression", "expr_mapping_list", "optional_semicolon", 
      "end_of_line", "assign_type", "expr_mapping", "list_constant", "set_constant", 
      "dict_constant", "generator_object", "generator_object_for_dict", "tuple_expr", 
      "assign_right_part", "turbo_tuple_expr", "$accept", };

  static SPythonGPPGParser() {
    states[0] = new State(new int[]{63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,6,193,5,213,3,218,10,234,11,237,12,239,15,241,17,250,20,252,9,259,13,286,14,294,80,305,82,311,81,315},new int[]{-35,1,-33,3,-25,301,-23,8,-8,9,-1,79,-6,189,-7,190,-58,92,-59,98,-60,109,-22,191,-24,192,-26,211,-27,212,-28,217,-17,233,-18,236,-19,238,-20,240,-21,249,-31,251,-16,256,-44,257,-48,285,-51,303});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{43,302,26,299,25,-177},new int[]{-54,4,-55,6});
    states[4] = new State(new int[]{25,5});
    states[5] = new State(-2);
    states[6] = new State(new int[]{63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,6,193,5,213,3,218,10,234,11,237,12,239,15,241,17,250,20,252,9,259,13,286,14,294},new int[]{-25,7,-23,8,-8,9,-1,79,-6,189,-7,190,-58,92,-59,98,-60,109,-22,191,-24,192,-26,211,-27,212,-28,217,-17,233,-18,236,-19,238,-20,240,-21,249,-31,251,-16,256,-44,257,-48,285});
    states[7] = new State(-16);
    states[8] = new State(-17);
    states[9] = new State(new int[]{46,10,34,69,40,163,38,165,42,175,47,179,48,180,49,181,50,182,51,183,52,184,53,185,54,186,55,187,56,188},new int[]{-56,173});
    states[10] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-64,11,-5,12,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126,-65,172});
    states[11] = new State(-53);
    states[12] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,41,170,43,-51,26,-51,25,-51});
    states[13] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,14,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[14] = new State(new int[]{7,15,6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59});
    states[15] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,16,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[16] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,41,-65,43,-65,26,-65,25,-65,7,-65,3,-65,35,-65,39,-65,37,-65,42,-65});
    states[17] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,18,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[18] = new State(new int[]{6,13,57,-66,59,19,60,21,58,-66,64,-66,65,-66,66,-66,67,-66,68,-66,69,-66,70,-66,71,-66,61,41,62,43,76,-66,77,-66,78,-66,79,-66,75,-66,73,55,4,57,72,-66,41,-66,43,-66,26,-66,25,-66,7,-66,3,-66,35,-66,39,-66,37,-66,42,-66});
    states[19] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,20,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[20] = new State(new int[]{6,13,57,-67,59,-67,60,-67,58,-67,64,-67,65,-67,66,-67,67,-67,68,-67,69,-67,70,-67,71,-67,61,-67,62,-67,76,-67,77,-67,78,-67,79,-67,75,-67,73,55,4,57,72,-67,41,-67,43,-67,26,-67,25,-67,7,-67,3,-67,35,-67,39,-67,37,-67,42,-67});
    states[21] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,22,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[22] = new State(new int[]{6,13,57,-68,59,-68,60,-68,58,-68,64,-68,65,-68,66,-68,67,-68,68,-68,69,-68,70,-68,71,-68,61,-68,62,-68,76,-68,77,-68,78,-68,79,-68,75,-68,73,55,4,57,72,-68,41,-68,43,-68,26,-68,25,-68,7,-68,3,-68,35,-68,39,-68,37,-68,42,-68});
    states[23] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,24,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[24] = new State(new int[]{6,13,57,-69,59,19,60,21,58,-69,64,-69,65,-69,66,-69,67,-69,68,-69,69,-69,70,-69,71,-69,61,41,62,43,76,-69,77,-69,78,-69,79,-69,75,-69,73,55,4,57,72,-69,41,-69,43,-69,26,-69,25,-69,7,-69,3,-69,35,-69,39,-69,37,-69,42,-69});
    states[25] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,26,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[26] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-70,65,-70,66,-70,67,-70,68,-70,69,-70,70,-70,71,-70,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,-70,41,-70,43,-70,26,-70,25,-70,7,-70,3,-70,35,-70,39,-70,37,-70,42,-70});
    states[27] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,28,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[28] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-71,65,-71,66,-71,67,-71,68,-71,69,-71,70,-71,71,-71,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,-71,41,-71,43,-71,26,-71,25,-71,7,-71,3,-71,35,-71,39,-71,37,-71,42,-71});
    states[29] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,30,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[30] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-72,65,-72,66,-72,67,-72,68,-72,69,-72,70,-72,71,-72,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,-72,41,-72,43,-72,26,-72,25,-72,7,-72,3,-72,35,-72,39,-72,37,-72,42,-72});
    states[31] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,32,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[32] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-73,65,-73,66,-73,67,-73,68,-73,69,-73,70,-73,71,-73,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,-73,41,-73,43,-73,26,-73,25,-73,7,-73,3,-73,35,-73,39,-73,37,-73,42,-73});
    states[33] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,34,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[34] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-74,65,-74,66,-74,67,-74,68,-74,69,-74,70,-74,71,-74,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,-74,41,-74,43,-74,26,-74,25,-74,7,-74,3,-74,35,-74,39,-74,37,-74,42,-74});
    states[35] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,36,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[36] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-75,65,-75,66,-75,67,-75,68,-75,69,-75,70,-75,71,-75,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,-75,41,-75,43,-75,26,-75,25,-75,7,-75,3,-75,35,-75,39,-75,37,-75,42,-75});
    states[37] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,38,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[38] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,-76,71,-76,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,41,-76,43,-76,26,-76,25,-76,7,-76,3,-76,35,-76,39,-76,37,-76,42,-76});
    states[39] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,40,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[40] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,-77,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,41,-77,43,-77,26,-77,25,-77,7,-77,3,-77,35,-77,39,-77,37,-77,42,-77});
    states[41] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,42,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[42] = new State(new int[]{6,13,57,-78,59,-78,60,-78,58,-78,64,-78,65,-78,66,-78,67,-78,68,-78,69,-78,70,-78,71,-78,61,-78,62,-78,76,-78,77,-78,78,-78,79,-78,75,-78,73,55,4,57,72,-78,41,-78,43,-78,26,-78,25,-78,7,-78,3,-78,35,-78,39,-78,37,-78,42,-78});
    states[43] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,44,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[44] = new State(new int[]{6,13,57,-79,59,-79,60,-79,58,-79,64,-79,65,-79,66,-79,67,-79,68,-79,69,-79,70,-79,71,-79,61,-79,62,-79,76,-79,77,-79,78,-79,79,-79,75,-79,73,55,4,57,72,-79,41,-79,43,-79,26,-79,25,-79,7,-79,3,-79,35,-79,39,-79,37,-79,42,-79});
    states[45] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,46,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[46] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-80,65,-80,66,-80,67,-80,68,-80,69,-80,70,-80,71,-80,61,41,62,43,76,-80,77,-80,78,-80,79,-80,75,-80,73,55,4,57,72,-80,41,-80,43,-80,26,-80,25,-80,7,-80,3,-80,35,-80,39,-80,37,-80,42,-80});
    states[47] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,48,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[48] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-81,65,-81,66,-81,67,-81,68,-81,69,-81,70,-81,71,-81,61,41,62,43,76,-81,77,-81,78,-81,79,-81,75,-81,73,55,4,57,72,-81,41,-81,43,-81,26,-81,25,-81,7,-81,3,-81,35,-81,39,-81,37,-81,42,-81});
    states[49] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,50,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[50] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-82,65,-82,66,-82,67,-82,68,-82,69,-82,70,-82,71,-82,61,41,62,43,76,45,77,47,78,-82,79,-82,75,-82,73,55,4,57,72,-82,41,-82,43,-82,26,-82,25,-82,7,-82,3,-82,35,-82,39,-82,37,-82,42,-82});
    states[51] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,52,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[52] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-83,65,-83,66,-83,67,-83,68,-83,69,-83,70,-83,71,-83,61,41,62,43,76,45,77,47,78,49,79,-83,75,53,73,55,4,57,72,-83,41,-83,43,-83,26,-83,25,-83,7,-83,3,-83,35,-83,39,-83,37,-83,42,-83});
    states[53] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,54,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[54] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,-84,65,-84,66,-84,67,-84,68,-84,69,-84,70,-84,71,-84,61,41,62,43,76,45,77,47,78,49,79,-84,75,-84,73,55,4,57,72,-84,41,-84,43,-84,26,-84,25,-84,7,-84,3,-84,35,-84,39,-84,37,-84,42,-84});
    states[55] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,56,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[56] = new State(new int[]{6,13,57,-85,59,-85,60,-85,58,-85,64,-85,65,-85,66,-85,67,-85,68,-85,69,-85,70,-85,71,-85,61,-85,62,-85,76,-85,77,-85,78,-85,79,-85,75,-85,73,55,4,57,72,-85,41,-85,43,-85,26,-85,25,-85,7,-85,3,-85,35,-85,39,-85,37,-85,42,-85});
    states[57] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,58,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[58] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,41,-86,43,-86,26,-86,25,-86,7,-86,3,-86,35,-86,39,-86,37,-86,42,-86});
    states[59] = new State(new int[]{4,60});
    states[60] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,61,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[61] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,41,-87,43,-87,26,-87,25,-87,7,-87,3,-87,35,-87,39,-87,37,-87,42,-87});
    states[62] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,63,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[63] = new State(new int[]{6,13,57,-88,59,19,60,21,58,-88,64,-88,65,-88,66,-88,67,-88,68,-88,69,-88,70,-88,71,-88,61,41,62,43,76,-88,77,-88,78,-88,79,-88,75,-88,73,55,4,57,72,-88,41,-88,43,-88,26,-88,25,-88,7,-88,3,-88,35,-88,39,-88,37,-88,42,-88});
    states[64] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,65,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[65] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,-89,71,-89,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,-89,41,-89,43,-89,26,-89,25,-89,7,-89,3,-89,35,-89,39,-89,37,-89,42,-89});
    states[66] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,67,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[67] = new State(new int[]{6,13,57,-90,59,-90,60,-90,58,-90,64,-90,65,-90,66,-90,67,-90,68,-90,69,-90,70,-90,71,-90,61,-90,62,-90,76,-90,77,-90,78,-90,79,-90,75,-90,73,-90,4,57,72,-90,41,-90,43,-90,26,-90,25,-90,7,-90,3,-90,35,-90,39,-90,37,-90,42,-90});
    states[68] = new State(new int[]{34,69,40,163,38,165,22,168,6,-91,57,-91,59,-91,60,-91,58,-91,64,-91,65,-91,66,-91,67,-91,68,-91,69,-91,70,-91,71,-91,61,-91,62,-91,76,-91,77,-91,78,-91,79,-91,75,-91,73,-91,4,-91,72,-91,41,-91,43,-91,26,-91,25,-91,7,-91,3,-91,35,-91,39,-91,37,-91,42,-91});
    states[69] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127,35,-173},new int[]{-15,70,-14,72,-10,116,-5,117,-8,68,-1,76,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126,-61,134});
    states[70] = new State(new int[]{35,71});
    states[71] = new State(-150);
    states[72] = new State(new int[]{41,73,35,-171});
    states[73] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-10,74,-5,75,-8,68,-1,76,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[74] = new State(-170);
    states[75] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,41,-167,35,-167});
    states[76] = new State(new int[]{46,77,34,-126,40,-126,38,-126,22,-126,6,-126,57,-126,59,-126,60,-126,58,-126,64,-126,65,-126,66,-126,67,-126,68,-126,69,-126,70,-126,71,-126,61,-126,62,-126,76,-126,77,-126,78,-126,79,-126,75,-126,73,-126,4,-126,72,-126,3,-126,41,-126,35,-126});
    states[77] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,78,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[78] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,41,-168,35,-168});
    states[79] = new State(-126);
    states[80] = new State(-37);
    states[81] = new State(-127);
    states[82] = new State(new int[]{40,83,6,-92,57,-92,59,-92,60,-92,58,-92,64,-92,65,-92,66,-92,67,-92,68,-92,69,-92,70,-92,71,-92,61,-92,62,-92,76,-92,77,-92,78,-92,79,-92,75,-92,73,-92,4,-92,72,-92,41,-92,43,-92,26,-92,25,-92,7,-92,3,-92,35,-92,39,-92,37,-92,42,-92});
    states[83] = new State(new int[]{63,80},new int[]{-1,84});
    states[84] = new State(-129);
    states[85] = new State(-101);
    states[86] = new State(-102);
    states[87] = new State(-103);
    states[88] = new State(-104);
    states[89] = new State(-105);
    states[90] = new State(-106);
    states[91] = new State(-107);
    states[92] = new State(-130);
    states[93] = new State(new int[]{39,159,58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-32,94,-61,160,-5,162,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[94] = new State(new int[]{39,95,41,96});
    states[95] = new State(-142);
    states[96] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,97,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[97] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,39,-109,41,-109,37,-109,35,-109,43,-109,26,-109,25,-109});
    states[98] = new State(-131);
    states[99] = new State(new int[]{37,147,58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-32,100,-53,102,-61,148,-62,150,-5,152,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126,-57,153});
    states[100] = new State(new int[]{37,101,41,96});
    states[101] = new State(-141);
    states[102] = new State(new int[]{37,103,41,104});
    states[103] = new State(-139);
    states[104] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-57,105,-5,106,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[105] = new State(-48);
    states[106] = new State(new int[]{42,107,6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59});
    states[107] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,108,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[108] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,3,-46,37,-46,41,-46});
    states[109] = new State(-132);
    states[110] = new State(-93);
    states[111] = new State(new int[]{63,80},new int[]{-45,112,-46,135,-1,144,-47,145});
    states[112] = new State(new int[]{34,113});
    states[113] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127,35,-173},new int[]{-15,114,-14,72,-10,116,-5,117,-8,68,-1,76,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126,-61,134});
    states[114] = new State(new int[]{35,115});
    states[115] = new State(-100);
    states[116] = new State(-169);
    states[117] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,3,118,41,-167,35,-167});
    states[118] = new State(new int[]{63,80},new int[]{-1,119});
    states[119] = new State(new int[]{4,120});
    states[120] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,121,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[121] = new State(new int[]{6,123,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,35,-144,39,-144,37,-144},new int[]{-9,122});
    states[122] = new State(-137);
    states[123] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,124,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[124] = new State(new int[]{7,15,6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,35,-145,39,-145,37,-145});
    states[125] = new State(-94);
    states[126] = new State(-95);
    states[127] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,128,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[128] = new State(new int[]{41,129,35,133,6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59});
    states[129] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-32,130,-5,132,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[130] = new State(new int[]{35,131,41,96});
    states[131] = new State(-97);
    states[132] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,35,-108,41,-108,43,-108,26,-108,25,-108});
    states[133] = new State(-96);
    states[134] = new State(-172);
    states[135] = new State(new int[]{40,136,38,139,34,-153,39,-153,41,-153,6,-153,57,-153,59,-153,60,-153,58,-153,64,-153,65,-153,66,-153,67,-153,68,-153,69,-153,70,-153,71,-153,61,-153,62,-153,76,-153,77,-153,78,-153,79,-153,75,-153,73,-153,4,-153,72,-153,43,-153,26,-153,25,-153,7,-153,3,-153,35,-153,37,-153,42,-153,46,-153},new int[]{-49,138});
    states[136] = new State(new int[]{63,80},new int[]{-1,137});
    states[137] = new State(-152);
    states[138] = new State(-155);
    states[139] = new State(new int[]{63,80},new int[]{-50,140,-45,146,-46,135,-1,144,-47,145});
    states[140] = new State(new int[]{39,141,41,142});
    states[141] = new State(-156);
    states[142] = new State(new int[]{63,80},new int[]{-45,143,-46,135,-1,144,-47,145});
    states[143] = new State(-158);
    states[144] = new State(-151);
    states[145] = new State(-154);
    states[146] = new State(-157);
    states[147] = new State(-140);
    states[148] = new State(new int[]{37,149});
    states[149] = new State(-135);
    states[150] = new State(new int[]{37,151});
    states[151] = new State(-136);
    states[152] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,42,107,3,118,37,-108,41,-108});
    states[153] = new State(new int[]{3,154,37,-47,41,-47});
    states[154] = new State(new int[]{63,80},new int[]{-1,155});
    states[155] = new State(new int[]{4,156});
    states[156] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,157,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[157] = new State(new int[]{6,123,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,37,-144},new int[]{-9,158});
    states[158] = new State(-138);
    states[159] = new State(-143);
    states[160] = new State(new int[]{39,161});
    states[161] = new State(-134);
    states[162] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,3,118,39,-108,41,-108});
    states[163] = new State(new int[]{63,80},new int[]{-1,164});
    states[164] = new State(-128);
    states[165] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,166,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[166] = new State(new int[]{39,167,6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59});
    states[167] = new State(-133);
    states[168] = new State(new int[]{63,80},new int[]{-45,169,-46,135,-1,144,-47,145});
    states[169] = new State(-99);
    states[170] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-32,171,-5,132,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[171] = new State(new int[]{41,96,43,-98,26,-98,25,-98});
    states[172] = new State(-52);
    states[173] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-64,174,-5,12,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126,-65,172});
    states[174] = new State(-54);
    states[175] = new State(new int[]{63,80},new int[]{-45,176,-46,135,-1,144,-47,145});
    states[176] = new State(new int[]{46,177,43,-49,26,-49,25,-49});
    states[177] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,178,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[178] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,43,-50,26,-50,25,-50});
    states[179] = new State(-55);
    states[180] = new State(-56);
    states[181] = new State(-57);
    states[182] = new State(-58);
    states[183] = new State(-59);
    states[184] = new State(-60);
    states[185] = new State(-61);
    states[186] = new State(-62);
    states[187] = new State(-63);
    states[188] = new State(-64);
    states[189] = new State(new int[]{46,-127,34,-127,40,-127,38,-127,42,-127,47,-127,48,-127,49,-127,50,-127,51,-127,52,-127,53,-127,54,-127,55,-127,56,-127,43,-125,26,-125,25,-125});
    states[190] = new State(new int[]{40,83});
    states[191] = new State(-18);
    states[192] = new State(-19);
    states[193] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,194,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[194] = new State(new int[]{42,195,6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59});
    states[195] = new State(new int[]{23,207},new int[]{-34,196});
    states[196] = new State(new int[]{8,198,7,204,43,-114,26,-114,25,-114},new int[]{-30,197,-29,203});
    states[197] = new State(-110);
    states[198] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,199,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[199] = new State(new int[]{42,200,6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59});
    states[200] = new State(new int[]{23,207},new int[]{-34,201});
    states[201] = new State(new int[]{8,198,7,204,43,-114,26,-114,25,-114},new int[]{-30,202,-29,203});
    states[202] = new State(-111);
    states[203] = new State(-112);
    states[204] = new State(new int[]{42,205});
    states[205] = new State(new int[]{23,207},new int[]{-34,206});
    states[206] = new State(-113);
    states[207] = new State(new int[]{63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,6,193,5,213,3,218,10,234,11,237,12,239,15,241,17,250,20,252,9,259,13,286,14,294},new int[]{-33,208,-25,301,-23,8,-8,9,-1,79,-6,189,-7,190,-58,92,-59,98,-60,109,-22,191,-24,192,-26,211,-27,212,-28,217,-17,233,-18,236,-19,238,-20,240,-21,249,-31,251,-16,256,-44,257,-48,285});
    states[208] = new State(new int[]{26,299,43,300},new int[]{-55,209});
    states[209] = new State(new int[]{24,210,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,6,193,5,213,3,218,10,234,11,237,12,239,15,241,17,250,20,252,9,259,13,286,14,294},new int[]{-25,7,-23,8,-8,9,-1,79,-6,189,-7,190,-58,92,-59,98,-60,109,-22,191,-24,192,-26,211,-27,212,-28,217,-17,233,-18,236,-19,238,-20,240,-21,249,-31,251,-16,256,-44,257,-48,285});
    states[210] = new State(-146);
    states[211] = new State(-20);
    states[212] = new State(-21);
    states[213] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,214,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[214] = new State(new int[]{42,215,6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59});
    states[215] = new State(new int[]{23,207},new int[]{-34,216});
    states[216] = new State(-115);
    states[217] = new State(-22);
    states[218] = new State(new int[]{63,80},new int[]{-1,219});
    states[219] = new State(new int[]{4,220,41,224});
    states[220] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,221,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[221] = new State(new int[]{42,222,6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59});
    states[222] = new State(new int[]{23,207},new int[]{-34,223});
    states[223] = new State(-116);
    states[224] = new State(new int[]{63,80},new int[]{-43,225,-1,232});
    states[225] = new State(new int[]{4,226,41,230});
    states[226] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,227,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[227] = new State(new int[]{42,228,6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59});
    states[228] = new State(new int[]{23,207},new int[]{-34,229});
    states[229] = new State(-117);
    states[230] = new State(new int[]{63,80},new int[]{-1,231});
    states[231] = new State(-119);
    states[232] = new State(-118);
    states[233] = new State(-23);
    states[234] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127,43,-122,26,-122,25,-122},new int[]{-5,235,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[235] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,43,-121,26,-121,25,-121});
    states[236] = new State(-24);
    states[237] = new State(-123);
    states[238] = new State(-25);
    states[239] = new State(-124);
    states[240] = new State(-26);
    states[241] = new State(new int[]{63,80},new int[]{-40,242,-2,248,-1,247});
    states[242] = new State(new int[]{41,243,43,-36,26,-36,25,-36});
    states[243] = new State(new int[]{63,80},new int[]{-2,244,-1,247});
    states[244] = new State(new int[]{40,245,41,-41,43,-41,26,-41,25,-41});
    states[245] = new State(new int[]{63,80},new int[]{-1,246});
    states[246] = new State(-39);
    states[247] = new State(-38);
    states[248] = new State(new int[]{40,245,41,-40,43,-40,26,-40,25,-40});
    states[249] = new State(-27);
    states[250] = new State(-34);
    states[251] = new State(-28);
    states[252] = new State(new int[]{34,253});
    states[253] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127,35,-173},new int[]{-15,254,-14,72,-10,116,-5,117,-8,68,-1,76,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126,-61,134});
    states[254] = new State(new int[]{35,255});
    states[255] = new State(-35);
    states[256] = new State(-29);
    states[257] = new State(new int[]{23,207},new int[]{-34,258});
    states[258] = new State(-147);
    states[259] = new State(new int[]{63,80},new int[]{-3,260,-1,284});
    states[260] = new State(new int[]{34,261});
    states[261] = new State(new int[]{63,80,59,275,73,279,35,-166},new int[]{-39,262,-38,268,-37,283,-36,271,-1,274});
    states[262] = new State(new int[]{35,263});
    states[263] = new State(new int[]{42,264,44,265});
    states[264] = new State(-148);
    states[265] = new State(new int[]{63,80},new int[]{-45,266,-46,135,-1,144,-47,145});
    states[266] = new State(new int[]{42,267});
    states[267] = new State(-149);
    states[268] = new State(new int[]{41,269,35,-165});
    states[269] = new State(new int[]{63,80,59,275,73,279},new int[]{-37,270,-36,271,-1,274});
    states[270] = new State(-164);
    states[271] = new State(new int[]{42,272});
    states[272] = new State(new int[]{63,80},new int[]{-45,273,-46,135,-1,144,-47,145});
    states[273] = new State(-160);
    states[274] = new State(-159);
    states[275] = new State(new int[]{63,80},new int[]{-36,276,-1,274});
    states[276] = new State(new int[]{42,277});
    states[277] = new State(new int[]{63,80},new int[]{-45,278,-46,135,-1,144,-47,145});
    states[278] = new State(-161);
    states[279] = new State(new int[]{63,80},new int[]{-36,280,-1,274});
    states[280] = new State(new int[]{42,281});
    states[281] = new State(new int[]{63,80},new int[]{-45,282,-46,135,-1,144,-47,145});
    states[282] = new State(-162);
    states[283] = new State(-163);
    states[284] = new State(-120);
    states[285] = new State(-30);
    states[286] = new State(new int[]{63,80},new int[]{-42,287,-41,293,-1,290});
    states[287] = new State(new int[]{41,288,43,-31,26,-31,25,-31});
    states[288] = new State(new int[]{63,80},new int[]{-41,289,-1,290});
    states[289] = new State(-45);
    states[290] = new State(new int[]{16,291,41,-43,43,-43,26,-43,25,-43});
    states[291] = new State(new int[]{63,80},new int[]{-1,292});
    states[292] = new State(-42);
    states[293] = new State(-44);
    states[294] = new State(new int[]{63,80},new int[]{-1,295});
    states[295] = new State(new int[]{13,296});
    states[296] = new State(new int[]{59,298,63,80},new int[]{-42,297,-41,293,-1,290});
    states[297] = new State(new int[]{41,288,43,-32,26,-32,25,-32});
    states[298] = new State(-33);
    states[299] = new State(-174);
    states[300] = new State(-175);
    states[301] = new State(-15);
    states[302] = new State(new int[]{25,-176,63,-175,28,-175,29,-175,30,-175,31,-175,45,-175,33,-175,32,-175,38,-175,36,-175,6,-175,5,-175,3,-175,10,-175,11,-175,12,-175,15,-175,17,-175,20,-175,9,-175,13,-175,14,-175});
    states[303] = new State(new int[]{25,304});
    states[304] = new State(-3);
    states[305] = new State(new int[]{27,307,58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-5,306,-8,68,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126});
    states[306] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,25,-4});
    states[307] = new State(new int[]{63,80},new int[]{-4,308,-1,309});
    states[308] = new State(-5);
    states[309] = new State(new int[]{38,139,25,-8},new int[]{-49,310});
    states[310] = new State(-9);
    states[311] = new State(new int[]{63,80},new int[]{-13,312,-2,313,-1,247});
    states[312] = new State(-6);
    states[313] = new State(new int[]{40,245,38,139,25,-10},new int[]{-49,314});
    states[314] = new State(-11);
    states[315] = new State(new int[]{58,62,72,64,74,66,63,80,28,85,29,86,30,87,31,88,45,89,33,90,32,91,38,93,36,99,21,111,34,127},new int[]{-52,316,-5,317,-8,318,-1,79,-6,81,-7,82,-58,92,-59,98,-60,109,-11,110,-12,125,-63,126,-23,319,-22,320});
    states[316] = new State(-7);
    states[317] = new State(new int[]{6,13,57,17,59,19,60,21,58,23,64,25,65,27,66,29,67,31,68,33,69,35,70,37,71,39,61,41,62,43,76,45,77,47,78,49,79,51,75,53,73,55,4,57,72,59,25,-12});
    states[318] = new State(new int[]{34,69,40,163,38,165,22,168,46,10,42,175,47,179,48,180,49,181,50,182,51,183,52,184,53,185,54,186,55,187,56,188,6,-91,57,-91,59,-91,60,-91,58,-91,64,-91,65,-91,66,-91,67,-91,68,-91,69,-91,70,-91,71,-91,61,-91,62,-91,76,-91,77,-91,78,-91,79,-91,75,-91,73,-91,4,-91,72,-91,25,-91},new int[]{-56,173});
    states[319] = new State(-13);
    states[320] = new State(-14);

    rules[1] = new Rule(-66, new int[]{-35,2});
    rules[2] = new Rule(-35, new int[]{-33,-54,25});
    rules[3] = new Rule(-35, new int[]{-51,25});
    rules[4] = new Rule(-51, new int[]{80,-5});
    rules[5] = new Rule(-51, new int[]{80,27,-4});
    rules[6] = new Rule(-51, new int[]{82,-13});
    rules[7] = new Rule(-51, new int[]{81,-52});
    rules[8] = new Rule(-4, new int[]{-1});
    rules[9] = new Rule(-4, new int[]{-1,-49});
    rules[10] = new Rule(-13, new int[]{-2});
    rules[11] = new Rule(-13, new int[]{-2,-49});
    rules[12] = new Rule(-52, new int[]{-5});
    rules[13] = new Rule(-52, new int[]{-23});
    rules[14] = new Rule(-52, new int[]{-22});
    rules[15] = new Rule(-33, new int[]{-25});
    rules[16] = new Rule(-33, new int[]{-33,-55,-25});
    rules[17] = new Rule(-25, new int[]{-23});
    rules[18] = new Rule(-25, new int[]{-22});
    rules[19] = new Rule(-25, new int[]{-24});
    rules[20] = new Rule(-25, new int[]{-26});
    rules[21] = new Rule(-25, new int[]{-27});
    rules[22] = new Rule(-25, new int[]{-28});
    rules[23] = new Rule(-25, new int[]{-17});
    rules[24] = new Rule(-25, new int[]{-18});
    rules[25] = new Rule(-25, new int[]{-19});
    rules[26] = new Rule(-25, new int[]{-20});
    rules[27] = new Rule(-25, new int[]{-21});
    rules[28] = new Rule(-25, new int[]{-31});
    rules[29] = new Rule(-25, new int[]{-16});
    rules[30] = new Rule(-25, new int[]{-48});
    rules[31] = new Rule(-48, new int[]{13,-42});
    rules[32] = new Rule(-48, new int[]{14,-1,13,-42});
    rules[33] = new Rule(-48, new int[]{14,-1,13,59});
    rules[34] = new Rule(-21, new int[]{17});
    rules[35] = new Rule(-31, new int[]{20,34,-15,35});
    rules[36] = new Rule(-20, new int[]{15,-40});
    rules[37] = new Rule(-1, new int[]{63});
    rules[38] = new Rule(-2, new int[]{-1});
    rules[39] = new Rule(-2, new int[]{-2,40,-1});
    rules[40] = new Rule(-40, new int[]{-2});
    rules[41] = new Rule(-40, new int[]{-40,41,-2});
    rules[42] = new Rule(-41, new int[]{-1,16,-1});
    rules[43] = new Rule(-41, new int[]{-1});
    rules[44] = new Rule(-42, new int[]{-41});
    rules[45] = new Rule(-42, new int[]{-42,41,-41});
    rules[46] = new Rule(-57, new int[]{-5,42,-5});
    rules[47] = new Rule(-53, new int[]{-57});
    rules[48] = new Rule(-53, new int[]{-53,41,-57});
    rules[49] = new Rule(-22, new int[]{-8,42,-45});
    rules[50] = new Rule(-22, new int[]{-8,42,-45,46,-5});
    rules[51] = new Rule(-64, new int[]{-5});
    rules[52] = new Rule(-64, new int[]{-65});
    rules[53] = new Rule(-23, new int[]{-8,46,-64});
    rules[54] = new Rule(-23, new int[]{-8,-56,-64});
    rules[55] = new Rule(-56, new int[]{47});
    rules[56] = new Rule(-56, new int[]{48});
    rules[57] = new Rule(-56, new int[]{49});
    rules[58] = new Rule(-56, new int[]{50});
    rules[59] = new Rule(-56, new int[]{51});
    rules[60] = new Rule(-56, new int[]{52});
    rules[61] = new Rule(-56, new int[]{53});
    rules[62] = new Rule(-56, new int[]{54});
    rules[63] = new Rule(-56, new int[]{55});
    rules[64] = new Rule(-56, new int[]{56});
    rules[65] = new Rule(-5, new int[]{-5,6,-5,7,-5});
    rules[66] = new Rule(-5, new int[]{-5,57,-5});
    rules[67] = new Rule(-5, new int[]{-5,59,-5});
    rules[68] = new Rule(-5, new int[]{-5,60,-5});
    rules[69] = new Rule(-5, new int[]{-5,58,-5});
    rules[70] = new Rule(-5, new int[]{-5,64,-5});
    rules[71] = new Rule(-5, new int[]{-5,65,-5});
    rules[72] = new Rule(-5, new int[]{-5,66,-5});
    rules[73] = new Rule(-5, new int[]{-5,67,-5});
    rules[74] = new Rule(-5, new int[]{-5,68,-5});
    rules[75] = new Rule(-5, new int[]{-5,69,-5});
    rules[76] = new Rule(-5, new int[]{-5,70,-5});
    rules[77] = new Rule(-5, new int[]{-5,71,-5});
    rules[78] = new Rule(-5, new int[]{-5,61,-5});
    rules[79] = new Rule(-5, new int[]{-5,62,-5});
    rules[80] = new Rule(-5, new int[]{-5,76,-5});
    rules[81] = new Rule(-5, new int[]{-5,77,-5});
    rules[82] = new Rule(-5, new int[]{-5,78,-5});
    rules[83] = new Rule(-5, new int[]{-5,79,-5});
    rules[84] = new Rule(-5, new int[]{-5,75,-5});
    rules[85] = new Rule(-5, new int[]{-5,73,-5});
    rules[86] = new Rule(-5, new int[]{-5,4,-5});
    rules[87] = new Rule(-5, new int[]{-5,72,4,-5});
    rules[88] = new Rule(-5, new int[]{58,-5});
    rules[89] = new Rule(-5, new int[]{72,-5});
    rules[90] = new Rule(-5, new int[]{74,-5});
    rules[91] = new Rule(-5, new int[]{-8});
    rules[92] = new Rule(-5, new int[]{-7});
    rules[93] = new Rule(-5, new int[]{-11});
    rules[94] = new Rule(-5, new int[]{-12});
    rules[95] = new Rule(-5, new int[]{-63});
    rules[96] = new Rule(-5, new int[]{34,-5,35});
    rules[97] = new Rule(-63, new int[]{34,-5,41,-32,35});
    rules[98] = new Rule(-65, new int[]{-5,41,-32});
    rules[99] = new Rule(-12, new int[]{-8,22,-45});
    rules[100] = new Rule(-11, new int[]{21,-45,34,-15,35});
    rules[101] = new Rule(-7, new int[]{28});
    rules[102] = new Rule(-7, new int[]{29});
    rules[103] = new Rule(-7, new int[]{30});
    rules[104] = new Rule(-7, new int[]{31});
    rules[105] = new Rule(-7, new int[]{45});
    rules[106] = new Rule(-7, new int[]{33});
    rules[107] = new Rule(-7, new int[]{32});
    rules[108] = new Rule(-32, new int[]{-5});
    rules[109] = new Rule(-32, new int[]{-32,41,-5});
    rules[110] = new Rule(-24, new int[]{6,-5,42,-34,-30});
    rules[111] = new Rule(-30, new int[]{8,-5,42,-34,-30});
    rules[112] = new Rule(-30, new int[]{-29});
    rules[113] = new Rule(-29, new int[]{7,42,-34});
    rules[114] = new Rule(-29, new int[]{});
    rules[115] = new Rule(-27, new int[]{5,-5,42,-34});
    rules[116] = new Rule(-28, new int[]{3,-1,4,-5,42,-34});
    rules[117] = new Rule(-28, new int[]{3,-1,41,-43,4,-5,42,-34});
    rules[118] = new Rule(-43, new int[]{-1});
    rules[119] = new Rule(-43, new int[]{-43,41,-1});
    rules[120] = new Rule(-3, new int[]{-1});
    rules[121] = new Rule(-17, new int[]{10,-5});
    rules[122] = new Rule(-17, new int[]{10});
    rules[123] = new Rule(-18, new int[]{11});
    rules[124] = new Rule(-19, new int[]{12});
    rules[125] = new Rule(-26, new int[]{-6});
    rules[126] = new Rule(-8, new int[]{-1});
    rules[127] = new Rule(-8, new int[]{-6});
    rules[128] = new Rule(-8, new int[]{-8,40,-1});
    rules[129] = new Rule(-8, new int[]{-7,40,-1});
    rules[130] = new Rule(-8, new int[]{-58});
    rules[131] = new Rule(-8, new int[]{-59});
    rules[132] = new Rule(-8, new int[]{-60});
    rules[133] = new Rule(-8, new int[]{-8,38,-5,39});
    rules[134] = new Rule(-8, new int[]{38,-61,39});
    rules[135] = new Rule(-8, new int[]{36,-61,37});
    rules[136] = new Rule(-8, new int[]{36,-62,37});
    rules[137] = new Rule(-61, new int[]{-5,3,-1,4,-5,-9});
    rules[138] = new Rule(-62, new int[]{-57,3,-1,4,-5,-9});
    rules[139] = new Rule(-60, new int[]{36,-53,37});
    rules[140] = new Rule(-60, new int[]{36,37});
    rules[141] = new Rule(-59, new int[]{36,-32,37});
    rules[142] = new Rule(-58, new int[]{38,-32,39});
    rules[143] = new Rule(-58, new int[]{38,39});
    rules[144] = new Rule(-9, new int[]{});
    rules[145] = new Rule(-9, new int[]{6,-5});
    rules[146] = new Rule(-34, new int[]{23,-33,-55,24});
    rules[147] = new Rule(-16, new int[]{-44,-34});
    rules[148] = new Rule(-44, new int[]{9,-3,34,-39,35,42});
    rules[149] = new Rule(-44, new int[]{9,-3,34,-39,35,44,-45,42});
    rules[150] = new Rule(-6, new int[]{-8,34,-15,35});
    rules[151] = new Rule(-46, new int[]{-1});
    rules[152] = new Rule(-46, new int[]{-46,40,-1});
    rules[153] = new Rule(-45, new int[]{-46});
    rules[154] = new Rule(-45, new int[]{-47});
    rules[155] = new Rule(-47, new int[]{-46,-49});
    rules[156] = new Rule(-49, new int[]{38,-50,39});
    rules[157] = new Rule(-50, new int[]{-45});
    rules[158] = new Rule(-50, new int[]{-50,41,-45});
    rules[159] = new Rule(-36, new int[]{-1});
    rules[160] = new Rule(-37, new int[]{-36,42,-45});
    rules[161] = new Rule(-37, new int[]{59,-36,42,-45});
    rules[162] = new Rule(-37, new int[]{73,-36,42,-45});
    rules[163] = new Rule(-38, new int[]{-37});
    rules[164] = new Rule(-38, new int[]{-38,41,-37});
    rules[165] = new Rule(-39, new int[]{-38});
    rules[166] = new Rule(-39, new int[]{});
    rules[167] = new Rule(-10, new int[]{-5});
    rules[168] = new Rule(-10, new int[]{-1,46,-5});
    rules[169] = new Rule(-14, new int[]{-10});
    rules[170] = new Rule(-14, new int[]{-14,41,-10});
    rules[171] = new Rule(-15, new int[]{-14});
    rules[172] = new Rule(-15, new int[]{-61});
    rules[173] = new Rule(-15, new int[]{});
    rules[174] = new Rule(-55, new int[]{26});
    rules[175] = new Rule(-55, new int[]{43});
    rules[176] = new Rule(-54, new int[]{43});
    rules[177] = new Rule(-54, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> stmt_list, optional_semicolon, END_OF_FILE
{
			// main program
			if (!is_unit_to_be_parsed) {
				var stl = ValueStack[ValueStack.Depth-3].stn as statement_list;
				stl.left_logical_bracket = new token_info("");
				stl.right_logical_bracket = new token_info("");
				var bl = new block(new declarations(), stl, CurrentLocationSpan);
				root = CurrentSemanticValue.stn = NewProgramModule(null, null, new uses_list(), bl, ValueStack[ValueStack.Depth-2].ob, CurrentLocationSpan);
				root.source_context = bl.source_context;
			}
			// unit
			else {
				var interface_part = new interface_node(new declarations(), new uses_list(), null, null);
				var initialization_part = new initfinal_part(null, ValueStack[ValueStack.Depth-3].stn as statement_list, null, null, null, CurrentLocationSpan);

				root = CurrentSemanticValue.stn = new unit_module(
					new unit_name(new ident(Path.GetFileNameWithoutExtension(parserTools.currentFileName)),
					UnitHeaderKeyword.Unit, CurrentLocationSpan), interface_part, null,
					initialization_part.initialization_sect,
					initialization_part.finalization_sect, null, CurrentLocationSpan);
			}
		}
        break;
      case 3: // program -> parts, END_OF_FILE
{ 
			root = ValueStack[ValueStack.Depth-2].stn; 
		}
        break;
      case 4: // parts -> tkParseModeExpression, expr
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 5: // parts -> tkParseModeExpression, DECLTYPE, type_decl_identifier
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].id; }
        break;
      case 6: // parts -> tkParseModeType, variable_as_type
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].ex; }
        break;
      case 7: // parts -> tkParseModeStatement, stmt_or_expression
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 8: // type_decl_identifier -> ident
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 9: // type_decl_identifier -> ident, template_type_params
{ 
			CurrentSemanticValue.id = new template_type_name(ValueStack[ValueStack.Depth-2].id.name, ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan); 
        }
        break;
      case 10: // variable_as_type -> dotted_ident
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 11: // variable_as_type -> dotted_ident, template_type_params
{ 
			CurrentSemanticValue.ex = new ident_with_templateparams(ValueStack[ValueStack.Depth-2].id as addressed_value, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan);   
		}
        break;
      case 12: // stmt_or_expression -> expr
{ CurrentSemanticValue.stn = new expression_as_statement(ValueStack[ValueStack.Depth-1].ex,CurrentLocationSpan);}
        break;
      case 13: // stmt_or_expression -> assign_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 14: // stmt_or_expression -> var_stmt
{ CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; }
        break;
      case 15: // stmt_list -> stmt
{
			CurrentSemanticValue.stn = new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 16: // stmt_list -> stmt_list, end_of_line, stmt
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as statement_list).Add(ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 17: // stmt -> assign_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 18: // stmt -> var_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 19: // stmt -> if_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 20: // stmt -> proc_func_call_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 21: // stmt -> while_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 22: // stmt -> for_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 23: // stmt -> return_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 24: // stmt -> break_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 25: // stmt -> continue_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 26: // stmt -> global_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 27: // stmt -> pass_stmt
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 28: // stmt -> exit_stmt
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 29: // stmt -> proc_func_decl
{
			CurrentSemanticValue.stn = new declarations_as_statement(new declarations(ValueStack[ValueStack.Depth-1].stn as procedure_definition, CurrentLocationSpan), CurrentLocationSpan);
		}
        break;
      case 30: // stmt -> import_clause
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 31: // import_clause -> IMPORT, ident_as_ident_list
{
			CurrentSemanticValue.stn = new import_statement(ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
		}
        break;
      case 32: // import_clause -> FROM, ident, IMPORT, ident_as_ident_list
{
			CurrentSemanticValue.stn = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, false, ValueStack[ValueStack.Depth-1].stn as as_statement_list, CurrentLocationSpan);
		}
        break;
      case 33: // import_clause -> FROM, ident, IMPORT, STAR
{
			CurrentSemanticValue.stn = new from_import_statement(ValueStack[ValueStack.Depth-3].id as ident, true, null, CurrentLocationSpan);
		}
        break;
      case 34: // pass_stmt -> PASS
{
			CurrentSemanticValue.stn = new empty_statement();
		}
        break;
      case 35: // exit_stmt -> EXIT, LPAR, optional_act_param_list, RPAR
{
			parserTools.AddErrorFromResource("UNSUPPORTED_CONSTRUCTION_{0}", CurrentLocationSpan, "exit");
		}
        break;
      case 36: // global_stmt -> GLOBAL, dotted_ident_list
{
			CurrentSemanticValue.stn = new global_statement(ValueStack[ValueStack.Depth-1].stn as ident_list, CurrentLocationSpan);
		}
        break;
      case 37: // ident -> ID
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 38: // dotted_ident -> ident
{ 
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 39: // dotted_ident -> dotted_ident, DOT, ident
{ 
			CurrentSemanticValue.id = new ident(ValueStack[ValueStack.Depth-3].id.name + "." + ValueStack[ValueStack.Depth-1].id.name, CurrentLocationSpan); 
		}
        break;
      case 40: // dotted_ident_list -> dotted_ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 41: // dotted_ident_list -> dotted_ident_list, COMMA, dotted_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 42: // ident_as_ident -> ident, AS, ident
{ 
			CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 43: // ident_as_ident -> ident
{ 
			CurrentSemanticValue.stn = new as_statement(ValueStack[ValueStack.Depth-1].id, ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan); 
		}
        break;
      case 44: // ident_as_ident_list -> ident_as_ident
{
			CurrentSemanticValue.stn = new as_statement_list(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 45: // ident_as_ident_list -> ident_as_ident_list, COMMA, ident_as_ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as as_statement_list).Add(ValueStack[ValueStack.Depth-1].stn as as_statement, CurrentLocationSpan);
		}
        break;
      case 46: // expr_mapping -> expr, COLON, expr
{
			expression_list el = new expression_list(new List<expression> { ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex }, CurrentLocationSpan);
			CurrentSemanticValue.ex = new tuple_node(el, CurrentLocationSpan);
		}
        break;
      case 47: // expr_mapping_list -> expr_mapping
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 48: // expr_mapping_list -> expr_mapping_list, COMMA, expr_mapping
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 49: // var_stmt -> variable, COLON, type_ref
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-3].ex as ident, LocationStack[LocationStack.Depth-3]), ValueStack[ValueStack.Depth-1].td, null, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 50: // var_stmt -> variable, COLON, type_ref, ASSIGN, expr
{
			var vds = new var_def_statement(new ident_list(ValueStack[ValueStack.Depth-5].ex as ident, LocationStack[LocationStack.Depth-5]), ValueStack[ValueStack.Depth-3].td, ValueStack[ValueStack.Depth-1].ex, definition_attribute.None, false, CurrentLocationSpan);
			CurrentSemanticValue.stn = new var_statement(vds, CurrentLocationSpan);
		}
        break;
      case 51: // assign_right_part -> expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 52: // assign_right_part -> turbo_tuple_expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 53: // assign_stmt -> variable, ASSIGN, assign_right_part
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO", CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 54: // assign_stmt -> variable, assign_type, assign_right_part
{
			if (!(ValueStack[ValueStack.Depth-3].ex is addressed_value))
        		parserTools.AddErrorFromResource("LEFT_SIDE_CANNOT_BE_ASSIGNED_TO", CurrentLocationSpan);
			CurrentSemanticValue.stn = new assign(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan);
		}
        break;
      case 55: // assign_type -> PLUSEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op;
		}
        break;
      case 56: // assign_type -> MINUSEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op;
		}
        break;
      case 57: // assign_type -> STAREQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op;
		}
        break;
      case 58: // assign_type -> DIVEQUAL
{ 
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op;
		}
        break;
      case 59: // assign_type -> BINXOREQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op;
		}
        break;
      case 60: // assign_type -> SHLEQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op;
		}
        break;
      case 61: // assign_type -> SHREQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op;
		}
        break;
      case 62: // assign_type -> BINANDEQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op;
		}
        break;
      case 63: // assign_type -> BINOREQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op;
		}
        break;
      case 64: // assign_type -> INTDIVISIONEQUAL
{
			CurrentSemanticValue.op = ValueStack[ValueStack.Depth-1].op;
		}
        break;
      case 65: // expr -> expr, IF, expr, ELSE, expr
{
			CurrentSemanticValue.ex = new question_colon_expression(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-5].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 66: // expr -> expr, PLUS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 67: // expr -> expr, STAR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 68: // expr -> expr, DIVIDE, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 69: // expr -> expr, MINUS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 70: // expr -> expr, LESS, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 71: // expr -> expr, GREATER, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 72: // expr -> expr, LESSEQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 73: // expr -> expr, GREATEREQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 74: // expr -> expr, EQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 75: // expr -> expr, NOTEQUAL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 76: // expr -> expr, AND, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 77: // expr -> expr, OR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 78: // expr -> expr, SLASHSLASH, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 79: // expr -> expr, PERCENTAGE, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 80: // expr -> expr, SHL, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 81: // expr -> expr, SHR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 82: // expr -> expr, BINAND, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 83: // expr -> expr, BINOR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 84: // expr -> expr, BINXOR, expr
{ 
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 85: // expr -> expr, STARSTAR, expr
{
			addressed_value method_name = new ident("!pow", CurrentLocationSpan);
			expression_list el = new expression_list(new List<expression> { ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex }, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(method_name, el, CurrentLocationSpan);
		}
        break;
      case 86: // expr -> expr, IN, expr
{
			CurrentSemanticValue.ex = new bin_expr(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].ex, Operators.In, CurrentLocationSpan); 
		}
        break;
      case 87: // expr -> expr, NOT, IN, expr
{
			// $$ = new bin_expr($1, $4, Operators.NotIn, @$); 
			CurrentSemanticValue.ex = new un_expr(new bin_expr(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-1].ex, Operators.In, CurrentLocationSpan),Operators.LogicalNOT,CurrentLocationSpan);
		}
        break;
      case 88: // expr -> MINUS, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 89: // expr -> NOT, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 90: // expr -> BINNOT, expr
{ 
			CurrentSemanticValue.ex = new un_expr(ValueStack[ValueStack.Depth-1].ex, ValueStack[ValueStack.Depth-2].op.type, CurrentLocationSpan); 
		}
        break;
      case 91: // expr -> variable
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 92: // expr -> const_value
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 93: // expr -> new_expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 94: // expr -> is_expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 95: // expr -> tuple_expr
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 96: // expr -> LPAR, expr, RPAR
{ 
			CurrentSemanticValue.ex = new bracket_expr(ValueStack[ValueStack.Depth-2].ex, CurrentLocationSpan); 
		}
        break;
      case 97: // tuple_expr -> LPAR, expr, COMMA, expr_list, RPAR
{
			// inherited from PABC
			if ((ValueStack[ValueStack.Depth-2].stn as expression_list).Count > 6) 
				parserTools.AddErrorFromResource("TUPLE_ELEMENTS_COUNT_MUST_BE_LESSEQUAL_7", CurrentLocationSpan);
            (ValueStack[ValueStack.Depth-2].stn as expression_list).Insert(0, ValueStack[ValueStack.Depth-4].ex);
			CurrentSemanticValue.ex = new tuple_node(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 98: // turbo_tuple_expr -> expr, COMMA, expr_list
{
			// inherited from PABC
			if ((ValueStack[ValueStack.Depth-1].stn as expression_list).Count > 6) 
				parserTools.AddErrorFromResource("TUPLE_ELEMENTS_COUNT_MUST_BE_LESSEQUAL_7", CurrentLocationSpan);
            (ValueStack[ValueStack.Depth-1].stn as expression_list).Insert(0, ValueStack[ValueStack.Depth-3].ex);
			CurrentSemanticValue.ex = new tuple_node(ValueStack[ValueStack.Depth-1].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 99: // is_expr -> variable, IS, type_ref
{
			CurrentSemanticValue.ex = parserTools.NewAsIsExpr(ValueStack[ValueStack.Depth-3].ex, op_typecast.is_op, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 100: // new_expr -> NEW, type_ref, LPAR, optional_act_param_list, RPAR
{
			CurrentSemanticValue.ex = new new_expr(ValueStack[ValueStack.Depth-4].td, ValueStack[ValueStack.Depth-2].stn as expression_list, false, null, CurrentLocationSpan);
		}
        break;
      case 101: // const_value -> INTNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 102: // const_value -> REALNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 103: // const_value -> TRUE
{ 
			CurrentSemanticValue.ex = new ident("true", CurrentLocationSpan); 
		}
        break;
      case 104: // const_value -> FALSE
{ 
			CurrentSemanticValue.ex = new ident("false", CurrentLocationSpan); 
		}
        break;
      case 105: // const_value -> STRINGNUM
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].stn as literal; 
		}
        break;
      case 106: // const_value -> FSTRINGNUM
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 107: // const_value -> BIGINT
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 108: // expr_list -> expr
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 109: // expr_list -> expr_list, COMMA, expr
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 110: // if_stmt -> IF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 111: // optional_elif -> ELIF, expr, COLON, block, optional_elif
{
			CurrentSemanticValue.stn = new if_node(ValueStack[ValueStack.Depth-4].ex, ValueStack[ValueStack.Depth-2].stn as statement, ValueStack[ValueStack.Depth-1].stn as statement, CurrentLocationSpan);
		}
        break;
      case 112: // optional_elif -> optional_else
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 113: // optional_else -> ELSE, COLON, block
{ 
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn; 
		}
        break;
      case 114: // optional_else -> /* empty */
{ 
			CurrentSemanticValue.stn = null; 
		}
        break;
      case 115: // while_stmt -> WHILE, expr, COLON, block
{
			CurrentSemanticValue.stn = new while_node(ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, WhileCycleType.While, CurrentLocationSpan);
		}
        break;
      case 116: // for_stmt -> FOR, ident, IN, expr, COLON, block
{
			CurrentSemanticValue.stn = new foreach_stmt(ValueStack[ValueStack.Depth-5].id, new no_type_foreach(), ValueStack[ValueStack.Depth-3].ex, ValueStack[ValueStack.Depth-1].stn as statement, null, CurrentLocationSpan);
		}
        break;
      case 117: // for_stmt -> FOR, ident, COMMA, ident_list, IN, expr, COLON, block
{
			(ValueStack[ValueStack.Depth-5].stn as ident_list).AddFirst(ValueStack[ValueStack.Depth-7].id);
			var id = parserTools.NewId("#fe",LocationStack[LocationStack.Depth-5]);
            var tttt = new assign_var_tuple(ValueStack[ValueStack.Depth-5].stn as ident_list, id, CurrentLocationSpan);
            statement_list nine = ValueStack[ValueStack.Depth-1].stn is statement_list ? ValueStack[ValueStack.Depth-1].stn as statement_list : new statement_list(ValueStack[ValueStack.Depth-1].stn as statement, LocationStack[LocationStack.Depth-1]);
            nine.Insert(0, tttt);
			var fe = new foreach_stmt(id, new no_type_foreach(), ValueStack[ValueStack.Depth-3].ex, nine, null, CurrentLocationSpan);
			fe.ext = ValueStack[ValueStack.Depth-5].stn as ident_list;
			CurrentSemanticValue.stn = fe;
		}
        break;
      case 118: // ident_list -> ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 119: // ident_list -> ident_list, COMMA, ident
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as ident_list).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 120: // func_name_ident -> ident
{
			CurrentSemanticValue.id = ValueStack[ValueStack.Depth-1].id;
		}
        break;
      case 121: // return_stmt -> RETURN, expr
{
			CurrentSemanticValue.stn = new return_statement(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 122: // return_stmt -> RETURN
{
			CurrentSemanticValue.stn = new return_statement(null, CurrentLocationSpan);
		}
        break;
      case 123: // break_stmt -> BREAK
{
			CurrentSemanticValue.stn = new procedure_call(new ident("break", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 124: // continue_stmt -> CONTINUE
{
			CurrentSemanticValue.stn = new procedure_call(new ident("continue", CurrentLocationSpan), true, CurrentLocationSpan);
		}
        break;
      case 125: // proc_func_call_stmt -> proc_func_call
{
			CurrentSemanticValue.stn = new procedure_call(ValueStack[ValueStack.Depth-1].ex as addressed_value, ValueStack[ValueStack.Depth-1].ex is ident, CurrentLocationSpan);
		}
        break;
      case 126: // variable -> ident
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].id; 
		}
        break;
      case 127: // variable -> proc_func_call
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 128: // variable -> variable, DOT, ident
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 129: // variable -> const_value, DOT, ident
{ 
			CurrentSemanticValue.ex = new dot_node(ValueStack[ValueStack.Depth-3].ex as addressed_value, ValueStack[ValueStack.Depth-1].id as addressed_value, CurrentLocationSpan); 
		}
        break;
      case 130: // variable -> list_constant
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 131: // variable -> set_constant
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 132: // variable -> dict_constant
{
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex;
		}
        break;
      case 133: // variable -> variable, LBRACKET, expr, RBRACKET
{
			var el = new expression_list(ValueStack[ValueStack.Depth-2].ex as expression, CurrentLocationSpan);
			CurrentSemanticValue.ex = new indexer(ValueStack[ValueStack.Depth-4].ex as addressed_value, el, CurrentLocationSpan);
		}
        break;
      case 134: // variable -> LBRACKET, generator_object, RBRACKET
{
			dot_node dn = new dot_node(ValueStack[ValueStack.Depth-2].ex as addressed_value, (new ident("ToList")) as addressed_value, ValueStack[ValueStack.Depth-2].ex.source_context);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, ValueStack[ValueStack.Depth-2].ex.source_context);
		}
        break;
      case 135: // variable -> LBRACE, generator_object, RBRACE
{
			dot_node dn = new dot_node(ValueStack[ValueStack.Depth-2].ex as addressed_value, (new ident("ToSet")) as addressed_value, ValueStack[ValueStack.Depth-2].ex.source_context);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, ValueStack[ValueStack.Depth-2].ex.source_context);
		}
        break;
      case 136: // variable -> LBRACE, generator_object_for_dict, RBRACE
{
			dot_node dn = new dot_node(ValueStack[ValueStack.Depth-2].ex as addressed_value, (new ident("ToDictionary")) as addressed_value, ValueStack[ValueStack.Depth-2].ex.source_context);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, ValueStack[ValueStack.Depth-2].ex.source_context);
		}
        break;
      case 137: // generator_object -> expr, FOR, ident, IN, expr, optional_condition
{
			CurrentSemanticValue.ex = new generator_object(ValueStack[ValueStack.Depth-6].ex, ValueStack[ValueStack.Depth-4].id, ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 138: // generator_object_for_dict -> expr_mapping, FOR, ident, IN, expr, 
                //                              optional_condition
{
			CurrentSemanticValue.ex = new generator_object(ValueStack[ValueStack.Depth-6].ex, ValueStack[ValueStack.Depth-4].id, ValueStack[ValueStack.Depth-2].ex, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 139: // dict_constant -> LBRACE, expr_mapping_list, RBRACE
{
			CurrentSemanticValue.ex = new method_call(new ident("Dict", CurrentLocationSpan), ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 140: // dict_constant -> LBRACE, RBRACE
{
			CurrentSemanticValue.ex = new method_call(new ident("!empty_dict", CurrentLocationSpan), null, CurrentLocationSpan);
		}
        break;
      case 141: // set_constant -> LBRACE, expr_list, RBRACE
{
			CurrentSemanticValue.ex = new pascal_set_constant(ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 142: // list_constant -> LBRACKET, expr_list, RBRACKET
{
			var acn = new array_const_new(ValueStack[ValueStack.Depth-2].stn as expression_list, '|', CurrentLocationSpan);
			var dn = new dot_node(acn as addressed_value, (new ident("ToList", CurrentLocationSpan)) as addressed_value, CurrentLocationSpan);
			CurrentSemanticValue.ex = new method_call(dn as addressed_value, null, CurrentLocationSpan);
		}
        break;
      case 143: // list_constant -> LBRACKET, RBRACKET
{
			CurrentSemanticValue.ex = new method_call(new ident("!empty_list", CurrentLocationSpan), null, CurrentLocationSpan);
		}
        break;
      case 144: // optional_condition -> /* empty */
{ 
			CurrentSemanticValue.ex = null; 
		}
        break;
      case 145: // optional_condition -> IF, expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 146: // block -> INDENT, stmt_list, end_of_line, UNINDENT
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-3].stn as statement_list;
			(CurrentSemanticValue.stn as statement_list).left_logical_bracket = ValueStack[ValueStack.Depth-4].ti;
			(CurrentSemanticValue.stn as statement_list).right_logical_bracket = ValueStack[ValueStack.Depth-1].ti;
			CurrentSemanticValue.stn.source_context = LexLocation.MergeAll(LocationStack[LocationStack.Depth-3], LocationStack[LocationStack.Depth-2]);
		}
        break;
      case 147: // proc_func_decl -> proc_func_header, block
{
			CurrentSemanticValue.stn = new procedure_definition(ValueStack[ValueStack.Depth-2].td as procedure_header, new block(null, ValueStack[ValueStack.Depth-1].stn as statement_list, LocationStack[LocationStack.Depth-1]), CurrentLocationSpan);
		}
        break;
      case 148: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
                //                     COLON
{
			CurrentSemanticValue.td = new procedure_header(ValueStack[ValueStack.Depth-3].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>()), new method_name(null,null, ValueStack[ValueStack.Depth-5].id, null, LocationStack[LocationStack.Depth-5]), null, CurrentLocationSpan);
		}
        break;
      case 149: // proc_func_header -> DEF, func_name_ident, LPAR, optional_form_param_list, RPAR, 
                //                     ARROW, type_ref, COLON
{
			CurrentSemanticValue.td = new function_header(ValueStack[ValueStack.Depth-5].stn as formal_parameters, new procedure_attributes_list(new List<procedure_attribute>()), new method_name(null,null, ValueStack[ValueStack.Depth-7].id, null, LocationStack[LocationStack.Depth-7]), null, ValueStack[ValueStack.Depth-2].td as type_definition, CurrentLocationSpan);
		}
        break;
      case 150: // proc_func_call -> variable, LPAR, optional_act_param_list, RPAR
{
			CurrentSemanticValue.ex = new method_call(ValueStack[ValueStack.Depth-4].ex as addressed_value, ValueStack[ValueStack.Depth-2].stn as expression_list, CurrentLocationSpan);
		}
        break;
      case 151: // simple_type_identifier -> ident
{
			CurrentSemanticValue.td = new named_type_reference(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 152: // simple_type_identifier -> simple_type_identifier, DOT, ident
{ 
			CurrentSemanticValue.td = (ValueStack[ValueStack.Depth-3].td as named_type_reference).Add(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 153: // type_ref -> simple_type_identifier
{
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td as named_type_reference;
		}
        break;
      case 154: // type_ref -> template_type
{ 
			CurrentSemanticValue.td = ValueStack[ValueStack.Depth-1].td; 
		}
        break;
      case 155: // template_type -> simple_type_identifier, template_type_params
{ 
			CurrentSemanticValue.td = new template_type_reference(ValueStack[ValueStack.Depth-2].td as named_type_reference, ValueStack[ValueStack.Depth-1].stn as template_param_list, CurrentLocationSpan); 
		}
        break;
      case 156: // template_type_params -> LBRACKET, template_param_list, RBRACKET
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-2].stn;
			CurrentSemanticValue.stn.source_context = CurrentLocationSpan;
		}
        break;
      case 157: // template_param_list -> type_ref
{ 
			CurrentSemanticValue.stn = new template_param_list(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 158: // template_param_list -> template_param_list, COMMA, type_ref
{ 
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as template_param_list).Add(ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan);
		}
        break;
      case 159: // param_name -> ident
{
			CurrentSemanticValue.stn = new ident_list(ValueStack[ValueStack.Depth-1].id, CurrentLocationSpan);
		}
        break;
      case 160: // form_param_sect -> param_name, COLON, type_ref
{
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.none, null, CurrentLocationSpan);
		}
        break;
      case 161: // form_param_sect -> STAR, param_name, COLON, type_ref
{
			var at = new array_type(null, ValueStack[ValueStack.Depth-1].td, CurrentLocationSpan); 
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, at, parametr_kind.params_parametr, null, CurrentLocationSpan); 
		}
        break;
      case 162: // form_param_sect -> STARSTAR, param_name, COLON, type_ref
{
			CurrentSemanticValue.stn = new typed_parameters(ValueStack[ValueStack.Depth-3].stn as ident_list, ValueStack[ValueStack.Depth-1].td, parametr_kind.kwargs_parameter, null, CurrentLocationSpan);
		}
        break;
      case 163: // form_param_list -> form_param_sect
{
			CurrentSemanticValue.stn = new formal_parameters(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 164: // form_param_list -> form_param_list, COMMA, form_param_sect
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as formal_parameters).Add(ValueStack[ValueStack.Depth-1].stn as typed_parameters, CurrentLocationSpan);
        }
        break;
      case 165: // optional_form_param_list -> form_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 166: // optional_form_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 167: // act_param -> expr
{ 
			CurrentSemanticValue.ex = ValueStack[ValueStack.Depth-1].ex; 
		}
        break;
      case 168: // act_param -> ident, ASSIGN, expr
{ 
			CurrentSemanticValue.ex = new name_assign_expr(ValueStack[ValueStack.Depth-3].id, ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan); 
		}
        break;
      case 169: // act_param_list -> act_param
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 170: // act_param_list -> act_param_list, COMMA, act_param
{
			CurrentSemanticValue.stn = (ValueStack[ValueStack.Depth-3].stn as expression_list).Add(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 171: // optional_act_param_list -> act_param_list
{
			CurrentSemanticValue.stn = ValueStack[ValueStack.Depth-1].stn;
		}
        break;
      case 172: // optional_act_param_list -> generator_object
{
			CurrentSemanticValue.stn = new expression_list(ValueStack[ValueStack.Depth-1].ex, CurrentLocationSpan);
		}
        break;
      case 173: // optional_act_param_list -> /* empty */
{
			CurrentSemanticValue.stn = null;
		}
        break;
      case 174: // end_of_line -> END_OF_LINE
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 175: // end_of_line -> SEMICOLON
{
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti;
		}
        break;
      case 176: // optional_semicolon -> SEMICOLON
{ 
			CurrentSemanticValue.ob = ValueStack[ValueStack.Depth-1].ti; 
		}
        break;
      case 177: // optional_semicolon -> /* empty */
{ 
			CurrentSemanticValue.ob = null; 
		}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


        public program_module NewProgramModule(program_name progName, Object optHeadCompDirs, uses_list mainUsesClose, syntax_tree_node progBlock, Object optPoint, LexLocation loc)
        {
            var progModule = new program_module(progName, mainUsesClose, progBlock as block, null, loc);
            progModule.Language = "SPython";
            if (optPoint == null && progBlock != null)
            {
                var fp = progBlock.source_context.end_position;
                var err_stn = progBlock;
			    if ((progBlock is block) && (progBlock as block).program_code != null && (progBlock as block).program_code.subnodes != null && (progBlock as block).program_code.subnodes.Count > 0)
                    err_stn = (progBlock as block).program_code.subnodes[(progBlock as block).program_code.subnodes.Count - 1];
                //parserTools.errors.Add(new SPythonUnexpectedToken(parserTools.currentFileName, StringResources.Get("TKPOINT"), new SourceContext(fp.line_num, fp.column_num + 1, fp.line_num, fp.column_num + 1, 0, 0), err_stn));
            }
            return progModule;
        }
}
}
