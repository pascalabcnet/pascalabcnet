<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten">
      <summary>
              Позволяет задать делегат (метод обработчика событий), вызывается каждый раз при публикации события, соответствующего критериям, указанный в событии запроса для этого объекта.
            </summary>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>
              Возникает при смене значения свойства.
            </summary>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>
              Представляет пустой набор ограничений привязки.
               Это поле доступно только для чтения.
            </summary>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>
              Представляет пустой массив типа <see cref="T:System.Dynamic.DynamicMetaObject" />.
               Это поле доступно только для чтения.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances">
      <summary>
              Представляет максимальное число экземпляров сервера, допускаемое системными ресурсами.
            </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>
              Кэш уровня 0 — специализированные делегат на основе журнала сайта.
            </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Constants">
      <summary>
              Представляет нетривиальные константы и локально выполняемые выражения, на которые ссылается динамически создаваемый метод.
            </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Locals">
      <summary>
              Представляет поднятые локальные переменные из родительского контекста.
            </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>
              Представляет нетривиальные константы и локально выполняемые выражения, на которые ссылается динамически создаваемый метод.
            </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>
              Представляет поднятые локальные переменные из родительского контекста.
            </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>
              Представляет область выполнения вызывающего делегата.
            </summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>
              Представляет значение, <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> ссылки.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.A">
      <summary>
              Первый коэффициент для явной кривой.
              A для коротких кривых Вейерштрасса, кривых Монтгомери и скрученных кривых Эдвардса.
            </summary>
      <returns>
              Коэффициент A.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.B">
      <summary>
              Второй коэффициент для явной кривой.
              B для коротких кривых Вейерштрасса и d для скрученных кривых Эдвардса.
            </summary>
      <returns>
              Коэффициент B.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
      <summary>
              Кофактор кривой.
            </summary>
      <returns>
              Кофактор кривой.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.CurveType">
      <summary>
              Определяет состав объекта <see cref="T:System.Security.Cryptography.ECCurve" />.
            </summary>
      <returns>
              Тип кривой.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.G">
      <summary>
              Генератор или базовая точка для операций на кривой.
            </summary>
      <returns>
              Базовая точка.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Hash">
      <summary>
              Имя хэш-алгоритма, который использовался для создания коэффициентов кривой (<see cref="F:System.Security.Cryptography.ECCurve.A" /> и <see cref="F:System.Security.Cryptography.ECCurve.B" />) из <see cref="F:System.Security.Cryptography.ECCurve.Seed" /> согласно алгоритму формирования ANSI X9.62.
               Применяется только к явным кривым.
            </summary>
      <returns>
              Имя хэш-алгоритма, используемого для формирования коэффициентов кривой.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Order">
      <summary>
              Порядок кривой.
               Применяется только к явным кривым.
            </summary>
      <returns>
              Порядок кривой.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
      <summary>
              Полином, описывающий кривую.
               Применяется только к кривым характеристики 2.
            </summary>
      <returns>
              Полином, описывающий кривую.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Prime">
      <summary>
              Простое число, указывающее простое поле.
               Применяется только к простым кривым.
            </summary>
      <returns>
              Простое число P.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Seed">
      <summary>
              Начальное значение для создания коэффициента по алгоритму создания ANSI X9.62.
               Применяется только к явным кривым.
            </summary>
      <returns>
              Начальное значение.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Curve">
      <summary>
              Представляет кривую, связанную с открытым ключом (<see cref="F:System.Security.Cryptography.ECParameters.Q" />) и, дополнительно, с закрытым ключом (<see cref="F:System.Security.Cryptography.ECParameters.D" />).
            </summary>
      <returns>
              Кривая.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.D">
      <summary>
              Представляет закрытый ключ <see langword="D" /> для алгоритма шифрования на основе эллиптических кривых (ECC), хранящийся в формате с обратным порядком байтов.
            </summary>
      <returns>
              Параметр <see langword="D" /> для алгоритма шифрования на основе эллиптических кривых (ECC).
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Q">
      <summary>
              Представляет открытый ключ <see langword="Q" /> для алгоритма шифрования на основе эллиптических кривых (ECC).
            </summary>
      <returns>
              Параметр <see langword="Q" /> для алгоритма шифрования на основе эллиптических кривых (ECC).
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.X">
      <summary>
              Представляет координату Х.
            </summary>
      <returns>
              Координата Х.
            </returns>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.Y">
      <summary>
              Представляет координату Y.
            </summary>
      <returns>
              Y-координата.
            </returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" />.
            </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle">
      <summary>
              Освобождает дескриптор, используемый объектом криптографии следующего поколения (CNG).
            </summary>
      <returns>
              <see langword="true" />Если дескриптор освобождается успешно; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle">
      <summary>
              Освобождает собственный дескриптор, используемый объектом криптографии следующего поколения (CNG).
            </summary>
      <returns>
              <see langword="true" />Если дескриптор освобождается успешно; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" />.
            </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle" />.
            </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" />.
            </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />.
            </summary>
      <param name="preexistingHandle">
                Объект <see cref="T:System.IntPtr" />, представляющий ранее существующий дескриптор для использования.
              </param>
      <param name="ownsHandle">
                Значение <see langword="true" />, чтобы надежно освободить маркер на стадии завершения; значение <see langword="false" />, чтобы предотвратить надежное освобождение (не рекомендуется).
              </param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>
              Инициализирует пустой экземпляр класса <see cref="T:System.Collections.Generic.HashSet`1" />, который использует функцию сравнения по умолчанию для типа набора.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Collections.Generic.HashSet`1" />, который использует функцию сравнения по умолчанию для типа набора, содержит элементы, скопированные из указанной коллекции, и обладает емкостью, достаточной для того, чтобы вместить количество скопированных элементов.
            </summary>
      <param name="collection">
                Коллекция, элементы которой копируются в новый набор.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="collection" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Collections.Generic.HashSet`1" />, который использует заданную функцию сравнения для типа набора, содержит элементы, скопированные из указанной коллекции, и обладает емкостью, достаточной для того, чтобы вместить количество скопированных элементов.
            </summary>
      <param name="collection">
                Коллекция, элементы которой копируются в новый набор.
              </param>
      <param name="comparer">
                Реализация <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, которую следует использовать при сравнении значений в наборе, или значение <see langword="null" />, чтобы использовать реализацию <see cref="T:System.Collections.Generic.EqualityComparer`1" /> по умолчанию для типа набора.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="collection" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
              Инициализирует пустой экземпляр класса <see cref="T:System.Collections.Generic.HashSet`1" />, который использует указанную функцию сравнения для типа набора.
            </summary>
      <param name="comparer">
                Реализация <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, которую следует использовать при сравнении значений в наборе, или значение <see langword="null" />, чтобы использовать реализацию <see cref="T:System.Collections.Generic.EqualityComparer`1" /> по умолчанию для типа набора.
              </param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Collections.Generic.HashSet`1" /> с сериализованными данными.
            </summary>
      <param name="info">
                Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который содержит сведения, требуемые для сериализации объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <param name="context">
                Структура <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащая исходный и конечный объекты сериализованного потока, связанного с объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>
              Добавляет указанный элемент в набор.
            </summary>
      <param name="item">
                Элемент, добавляемый в набор.
              </param>
      <returns>
              Значение <see langword="true" />, если элемент добавлен в объект <see cref="T:System.Collections.Generic.HashSet`1" />; значение <see langword="false" />, если элемент уже присутствует в нем.
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>
              Удаляет все элементы из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>
              Определяет, содержит ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> указанный элемент.
            </summary>
      <param name="item">
                Элемент, который нужно найти в объекте <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <returns>
              Значение <see langword="true" />, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> содержит указанный элемент; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>
              Копирует элементы объекта <see cref="T:System.Collections.Generic.HashSet`1" /> в массив.
            </summary>
      <param name="array">
                Одномерный массив, являющийся назначением элементов, копируемых из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
                 Индекс в массиве должен начинаться с нуля.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="array" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>
              Копирует элементы объекта <see cref="T:System.Collections.Generic.HashSet`1" /> в массив, начиная с указанного индекса массива.
            </summary>
      <param name="array">
                Одномерный массив, являющийся назначением элементов, копируемых из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
                 Индекс в массиве должен начинаться с нуля.
              </param>
      <param name="arrayIndex">
                Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="array" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="arrayIndex" /> меньше 0.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="arrayIndex" /> больше, чем длина назначения <paramref name="array" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>
              Копирует указанное количество элементов объекта <see cref="T:System.Collections.Generic.HashSet`1" /> в массив, начиная с указанного индекса массива.
            </summary>
      <param name="array">
                Одномерный массив, являющийся назначением элементов, копируемых из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
                 Индекс в массиве должен начинаться с нуля.
              </param>
      <param name="arrayIndex">
                Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.
              </param>
      <param name="count">
                Число элементов, копируемых в массив <paramref name="array" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="array" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="arrayIndex" /> меньше 0.
                
                  -или-
                
                  Значение параметра <paramref name="count" /> меньше 0.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="arrayIndex" /> больше, чем длина назначения <paramref name="array" />.
                
                  -или-
                
                  <paramref name="count" /> больше, чем свободное пространство от <paramref name="index" /> до конца массива назначения <paramref name="array" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>
              Возвращает объект <see cref="T:System.Collections.IEqualityComparer" />, который можно использовать для проверки равенства объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.IEqualityComparer" />, который можно использовать для выполнения глубокой проверки равенства объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>
              Освобождает все ресурсы, используемые <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> объекта.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>
              Перемещает перечислитель к следующему элементу <see cref="T:System.Collections.Generic.HashSet`1" /> коллекции.
            </summary>
      <returns>
              Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца коллекции.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Коллекция была изменена после создания перечислителя.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>
              Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом коллекции.
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  Коллекция была изменена после создания перечислителя.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Удаляет все элементы в указанной коллекции из текущего объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
      <param name="other">
                Коллекция элементов, удаляемая из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="other" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий итерацию элементов объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> для объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Реализует интерфейс <see cref="T:System.Runtime.Serialization.ISerializable" /> и возвращает данные, необходимые для сериализации объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
      <param name="info">
                Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который содержит сведения, требуемые для сериализации объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <param name="context">
                Структура <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащая исходный и конечный объекты сериализованного потока, связанного с объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="info" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Изменяет текущий объект <see cref="T:System.Collections.Generic.HashSet`1" /> так, чтобы он содержал только элементы, которые имеются в этом объекте и в указанной коллекции.
            </summary>
      <param name="other">
                Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="other" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> строгим подмножеством указанной коллекции.
            </summary>
      <param name="other">
                Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <returns>
              Значение <see langword="true" />, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="other" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> строгим супермножеством указанной коллекции.
            </summary>
      <param name="other">
                Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <returns>
              Значение <see langword="true" />, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> является строгим супермножеством <paramref name="other" />; в противном случае — значение <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="other" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> подмножеством указанной коллекции.
            </summary>
      <param name="other">
                Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <returns>
              Значение <see langword="true" />, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> является подмножеством <paramref name="other" />; в противном случае — значение <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="other" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> супермножеством указанной коллекции.
            </summary>
      <param name="other">
                Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <returns>
              Значение <see langword="true" />, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> является супермножеством <paramref name="other" />; в противном случае — значение <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="other" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>
              Реализует интерфейс <see cref="T:System.Runtime.Serialization.ISerializable" /> и вызывает событие десериализации при завершении десериализации.
            </summary>
      <param name="sender">
                Источник события десериализации.
              </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
                  <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Объект, связанный с текущим <see cref="T:System.Collections.Generic.HashSet`1" /> Недопустимый объект.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Определяет, имеются ли общие элементы в текущем объекте <see cref="T:System.Collections.Generic.HashSet`1" /> и в указанной коллекции.
            </summary>
      <param name="other">
                Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <returns>
              Значение <see langword="true" />, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> и коллекция <paramref name="other" /> имеют по крайней мере один общий элемент; в противном случае — значение <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="other" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>
              Удаляет указанный элемент из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
      <param name="item">
                Подлежащий удалению элемент.
              </param>
      <returns>
              Значение <see langword="true" />, если элемент был найден и удален; в противном случае — значение <see langword="false" />.
                Этот метод возвращает значение <see langword="false" />, если элемент <paramref name="item" /> не удалось найти в объекте <see cref="T:System.Collections.Generic.HashSet`1" />.
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>
              Удаляет все элементы, удовлетворяющие условиям, которые были определены указанным предикатом из коллекции <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
      <param name="match">
                Делегат <see cref="T:System.Predicate`1" />, определяющий условия удаления элемента.
              </param>
      <returns>
              Количество элементов, удаленных из коллекции <see cref="T:System.Collections.Generic.HashSet`1" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="match" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Определяет, содержат ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> и указанная коллекция одни и те же элементы.
            </summary>
      <param name="other">
                Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <returns>
              Значение <see langword="true" />, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> равен <paramref name="other" />; в противном случае — значение false.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="other" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Изменяет текущий объект <see cref="T:System.Collections.Generic.HashSet`1" /> так, чтобы он содержал только элементы, которые имеются либо в этом объекте, либо в указанной коллекции, но не одновременно в них обоих.
            </summary>
      <param name="other">
                Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="other" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
              Добавляет элемент в объект <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">
                Объект, добавляемый в объект <see cref="T:System.Collections.Generic.ICollection`1" />.
              </param>
      <exception cref="T:System.NotSupportedException">
                  Объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения.
                </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
              Возвращает перечислитель, который осуществляет итерацию по коллекции.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который используется для прохода по коллекции.
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              Возвращает перечислитель, который осуществляет итерацию по коллекции.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.IEnumerator" />, который используется для прохода по коллекции.
            </returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>
              Задает емкость объекта <see cref="T:System.Collections.Generic.HashSet`1" /> равной фактическому числу элементов, которые в нем содержатся, округленному в большую сторону ближайшего значения, зависящего от реализации.
            </summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Изменяет текущий объект <see cref="T:System.Collections.Generic.HashSet`1" /> так, чтобы он содержал все элементы, имеющиеся в нем или в указанной коллекции либо как в нем, так и в указанной коллекции.
            </summary>
      <param name="other">
                Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="other" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventDescriptor.#ctor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Int64)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />.
            </summary>
      <param name="id">
                Идентификатор события.
              </param>
      <param name="version">
                Версия события.
                 Эта версия указывает редакцию для определения события.
                 Этот элемент и его идентификатор можно использовать для определения уникального события.
              </param>
      <param name="channel">
                Определяет потенциальный целевой объект для события.
              </param>
      <param name="level">
                Задает уровень детализации сведений, включенных в событие.
              </param>
      <param name="opcode">
                Операция, выполняемая в момент создания события.
              </param>
      <param name="task">
                Идентифицирует логический компонент приложения, выполняющего запись события.
              </param>
      <param name="keywords">
                Битовая маска, указывающая категорию события.
                 Ключевое слово может содержать одно или несколько определяемых поставщиком или стандартных ключевых слов либо их сочетание.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.EventProvider" />.
            </summary>
      <param name="providerGuid">
                Идентификатор GUID, однозначно определяющий поставщика.
              </param>
      <exception cref="T:System.InsufficientMemoryException">
                  Не хватает памяти для завершения операции.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Классы в <see cref="N:System.Diagnostics.Eventing" /> рабочего пространства имен только в Windows Vista.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="providerGuid" /> не может иметь значение null.
                </exception>
      <exception cref="T:System.ComponentModel.Win32Exception">
                  Ошибки, возвращенной в подсистему ETW.
                </exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Close">
      <summary>
              Удаляет регистрацию поставщика из подсистемы ETW и освобождает все неуправляемые ресурсы.
            </summary>
      <exception cref="T:System.ComponentModel.Win32Exception">
                  Ошибки, возвращенной в подсистему ETW.
                </exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId">
      <summary>
              Создает уникальный идентификатор действия для поставщика.
            </summary>
      <returns>
              Уникальный идентификатор Guid, который используется при вызове <see cref="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)" /> метода, чтобы задать идентификатор действия для поставщика.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose">
      <summary>
              Освобождает ресурсы, используемые объектом <see cref="T:System.Diagnostics.Eventing.EventProvider" />.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)">
      <summary>
              Освобождает ресурсы, используемые объектом <see cref="T:System.Diagnostics.Eventing.EventProvider" />.
            </summary>
      <param name="disposing">
                Этот параметр игнорируется этим методом ввиду отсутствия неуправляемых ресурсов.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Finalize">
      <summary>
              Освобождает ресурсы и внутреннюю очистку, прежде чем экземпляр будет удален при сборке мусора.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError">
      <summary>
              Возвращает код последней ошибки, связанные со сбоем записи события.
            </summary>
      <returns>
              Используйте значение для определения причины сбоя записи события.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled">
      <summary>
              Определяет, разрешен ли любого сеанса поставщика, независимо от того, уровень и ключевое слово значения, используемые для разрешения этого поставщика.
            </summary>
      <returns>
              — <see langword="true" /> Если поставщик включен для любого сеанса; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)">
      <summary>
              Определяет, запрашивает ли любого сеанса указанного события от поставщика.
            </summary>
      <param name="level">
                Уровень детализации сведений, включаемых в событие.
              </param>
      <param name="keywords">
                Битовая маска, указывающая категорию события.
                 Эта маска должна быть ту же ключевое слово маску, которая определена в манифесте события.
              </param>
      <returns>
              Является <see langword="true" /> при любой сеансе запрашивается указанное событие; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)">
      <summary>
              Задает текущий идентификатор действия, используемые <see cref="Overload:System.Diagnostics.Eventing.EventProvider.WriteEvent" /> методы.
            </summary>
      <param name="id">
                Уникальный идентификатор действия, <see cref="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId" /> возвращает метод.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)">
      <summary>
              Записывает событие.
               Данные события указываются в виде блока памяти.
            </summary>
      <param name="eventDescriptor">
                Экземпляр <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> определяющий события для записи.
              </param>
      <param name="dataCount">
                Размер данных события, к которому <paramref name="data" /> параметр точек.
                 Максимальный размер данных события ограничен 64 КБ за вычетом размера заголовков события.
                 Размер события меньше, если меньше размер буфера сеанса и сеанс включает в себя расширенные элементы данных с событием.
              </param>
      <param name="data">
                Указатель на данные события для записи.
              </param>
      <returns>
              — <see langword="true" /> Если событие является запись; в противном случае — <see langword="false" />.
               Если значение равно false, вызовите <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> метод для определения причины сбоя.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])">
      <summary>
              Записывает событие.
               Данные события указываются в виде массива объектов.
            </summary>
      <param name="eventDescriptor">
                Экземпляр <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> определяющий события для записи.
              </param>
      <param name="eventPayload">
                Массив объектов, содержащих данные события для записи.
                 Объект должен быть в порядке, указанном в манифесте.
                 Массив ограничен 32 объектами, из которых только 8 могут быть строчными.
                 Максимальный размер данных события ограничен 64 КБ за вычетом размера заголовков события.
                 Размер события меньше, если меньше размер буфера сеанса и сеанс включает в себя расширенные элементы данных с событием.
              
                Этот параметр может быть нулевым.
              </param>
      <returns>
              — <see langword="true" /> Если событие является запись; в противном случае — <see langword="false" />.
               Если значение равно false, вызовите <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> метод для определения причины сбоя.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="eventPayload" /> Параметр содержит слишком много объектов или строк.
                </exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)">
      <summary>
              Записывает событие.
               Данные события указаны в виде строки.
            </summary>
      <param name="eventDescriptor">
                Экземпляр <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> определяющий события для записи.
              </param>
      <param name="data">
                Строка для записи в качестве данных события.
              </param>
      <returns>
              — <see langword="true" /> Если событие является запись; в противном случае — <see langword="false" />.
               Если значение равно false, вызовите <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> метод для определения причины сбоя.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Если <paramref name="data" /> является <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)">
      <summary>
              Записывает событие, которое содержит строку в качестве данных.
            </summary>
      <param name="eventMessage">
                Строка для записи в качестве данных события.
              </param>
      <returns>
              — <see langword="true" /> Если событие является запись; в противном случае — <see langword="false" />.
               Если значение равно false, вызовите <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> метод для определения причины сбоя.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Если <paramref name="eventMessage" /> является <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)">
      <summary>
              Записывает событие, которое содержит строку в качестве данных, если уровень и ключевое слово соответствуют событиям, запрашиваемым сеансом.
            </summary>
      <param name="eventMessage">
                Строка для записи в качестве данных события.
              </param>
      <param name="eventLevel">
                Уровень детализации сведений, включаемых в событие.
                 Если поставщик использует манифест для определения события, это значение того же уровня, определенное в манифесте.
              </param>
      <param name="eventKeywords">
                Битовая маска, указывающая категорию события.
                 Если поставщик использует манифест для определения события, это значение равно же маску ключевого слова, определенное в манифесте.
              </param>
      <returns>
              — <see langword="true" /> Если событие является запись; в противном случае — <see langword="false" />.
               Если значение равно false, вызовите <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> метод для определения причины сбоя.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Если <paramref name="eventMessage" /> является <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)">
      <summary>
              Связывает события при трассировке событий в сценарии end-to-end.
               Данные события указываются в виде блока памяти.
            </summary>
      <param name="eventDescriptor">
                Экземпляр <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> определяющий события для записи.
              </param>
      <param name="relatedActivityId">
                Идентификатор действия от предыдущего компонента.
                 Используйте этот параметр для связи событий компонента с событиями предыдущего компонента.
              </param>
      <param name="dataCount">
                Размер данных события, к которому <paramref name="data" /> параметр точек.
                 Максимальный размер данных события ограничен 64 КБ за вычетом размера заголовков события.
                 Размер события меньше, если меньше размер буфера сеанса и сеанс включает в себя расширенные элементы данных с событием.
              </param>
      <param name="data">
                Указатель на данные события для записи.
              </param>
      <returns>
              — <see langword="true" /> Если событие является запись; в противном случае — <see langword="false" />.
               Если значение равно false, вызовите <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> метод для определения причины сбоя.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])">
      <summary>
              Связывает события при трассировке событий в сценарии end-to-end.
               Данные события указываются в виде массива объектов.
            </summary>
      <param name="eventDescriptor">
                Экземпляр <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> определяющий события для записи.
              </param>
      <param name="relatedActivityId">
                Идентификатор действия от предыдущего компонента.
                 Используйте этот параметр для связи событий компонента с событиями предыдущего компонента.
              </param>
      <param name="eventPayload">
                Массив объектов, содержащих данные события для записи.
                 Данные должны быть в порядке, указанном в манифесте.
                 Массив ограничен 32 объектами, из которых только 8 могут быть строчными.
                 Максимальный размер данных события ограничен 64 КБ за вычетом размера заголовков события.
                 Размер события меньше, если меньше размер буфера сеанса и сеанс включает в себя расширенные элементы данных с событием.
              </param>
      <returns>
              — <see langword="true" /> Если событие является запись; в противном случае — <see langword="false" />.
               Если значение равно false, вызовите <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> метод для определения причины сбоя.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Если <paramref name="eventPayload" /> содержит слишком много объектов или строк.
                </exception>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> класса с помощью указанного поставщика идентификатора.
            </summary>
      <param name="providerId">
                Уникальная строка <see cref="T:System.Guid" /> определяющий поставщика.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> с использованием указанного поставщика идентификатор и имя прослушивателя.
            </summary>
      <param name="providerId">
                Уникальная строка <see cref="T:System.Guid" /> определяющий поставщика.
              </param>
      <param name="name">
                Имя прослушивателя.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> класса, используя идентификатор указанного поставщика имя прослушивателя и разделитель.
            </summary>
      <param name="providerId">
                Уникальная строка <see cref="T:System.Guid" /> определяющий поставщика.
              </param>
      <param name="name">
                Имя прослушивателя.
              </param>
      <param name="delimiter">
                Разделитель, используемый для разделения данных события.
                 (Дополнительные сведения см. в разделе <see cref="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter" /> Свойства.)
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Close">
      <summary>
              Закрывает выходной поток, который больше не будет принимать выходные данные трассировки и отладки.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Fail(System.String,System.String)">
      <summary>
              Выдает простое и подробное сообщение об ошибке в прослушиватель, создаваемый при реализации класса <see cref="T:System.Diagnostics.TraceListener" />.
            </summary>
      <param name="message">
                Выдаваемое сообщение.
              </param>
      <param name="detailMessage">
                Выдаваемое подробное сообщение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Flush">
      <summary>
              Очищает выходной буфер.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes">
      <summary>
              Возвращает настраиваемые атрибуты, поддерживаемые прослушивателем трассировки.
            </summary>
      <returns>
              Строковый массив, именующий настраиваемые атрибуты, поддерживаемые прослушивателем трассировки, или <see langword="null" />, если нет никаких настраиваемых атрибутов.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>
              Записывает сведения трассировки, объект данных и сведения о событиях в специальные выходные данные прослушивателя.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека.
              </param>
      <param name="source">
                Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки.
              </param>
      <param name="eventType">
                Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />, задающее тип события, ставшего причиной трассировки.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
      <param name="data">
                Выдаваемые данные трассировки.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>
              Записывает сведения трассировки, объект данных и сведения о событиях в специальные выходные данные прослушивателя.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека.
              </param>
      <param name="source">
                Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки.
              </param>
      <param name="eventType">
                Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />, задающее тип события, ставшего причиной трассировки.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
      <param name="data">
                Выдаваемые данные массива объектов.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <summary>
              Записывает сведения трассировки и сведения о событиях в специальные выходные данные прослушивателя.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека.
              </param>
      <param name="source">
                Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки.
              </param>
      <param name="eventType">
                Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />, задающее тип события, ставшего причиной трассировки.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>
              Записывает сведения трассировки, сообщение и сведения о событиях в специальные выходные данные прослушивателя.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека.
              </param>
      <param name="source">
                Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки.
              </param>
      <param name="eventType">
                Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />, задающее тип события, ставшего причиной трассировки.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
      <param name="message">
                Записываемое сообщение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>
              Записывает сведения трассировки, форматированный массив объектов данных и сведения о событиях в специальные выходные данные прослушивателя.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека.
              </param>
      <param name="source">
                Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки.
              </param>
      <param name="eventType">
                Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />, задающее тип события, ставшего причиной трассировки.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
      <param name="format">
                Строка формата, не содержащая элементов формата или содержащая один либо несколько элементов формата, связанных с объектами в массиве <paramref name="args" />.
              </param>
      <param name="args">
                Массив <see langword="object" />, содержащий несколько объектов (или ни одного), которые необходимо отформатировать.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>
              Записывает сведения трассировки, сообщение, идентификатор сопутствующего действия и сведения о событиях в специальные выходные данные прослушивателя.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификатор процесса, идентификатор потока и сведения о трассировке стека.
              </param>
      <param name="source">
                Имя, используемое для идентификации выходных данных, обычно имя приложения, создавшего событие трассировки.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
      <param name="message">
                Записываемое сообщение.
              </param>
      <param name="relatedActivityId">
                Объект <see cref="T:System.Guid" />, идентифицирующий сопутствующее действие.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Write(System.String)">
      <summary>
              Если переопределено в производном классе, записывает заданное сообщение в прослушиватель, создаваемый в производном классе.
            </summary>
      <param name="message">
                Записываемое сообщение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(System.String)">
      <summary>
              Если переопределено в производном классе, записывает сообщение, заканчивающееся знаком завершения строки, в прослушиватель, создаваемый в производном классе.
            </summary>
      <param name="message">
                Записываемое сообщение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> из указанных экземпляров <see cref="T:System.Runtime.Serialization.SerializationInfo" /> и <see cref="T:System.Runtime.Serialization.StreamingContext" />.
            </summary>
      <param name="info">
                Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> содержащий сведения, необходимые для сериализации нового <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> объекта.
              </param>
      <param name="context">
                Объект <see cref="T:System.Runtime.Serialization.StreamingContext" /> содержащий источник сериализованного потока, связанного с новым <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Заполняет <see cref="T:System.Runtime.Serialization.SerializationInfo" /> объект с данными, необходимыми для сериализации целевого объекта.
            </summary>
      <param name="info">
                Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который требуется заполнить данными.
              </param>
      <param name="context">
                Целевой объект этой сериализации.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации целевого объекта.
            </summary>
      <param name="info">
                Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который требуется заполнить данными.
              </param>
      <param name="context">
                Целевой объект этой сериализации.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String)">
      <summary>
              Инициализирует новый <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" /> объекта, указав локальный журнал событий, для которого необходимо получить информацию и параметры конфигурации.
            </summary>
      <param name="logName">
                Имя локального журнала событий, для которого необходимо получить информацию и параметры конфигурации.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)">
      <summary>
              Инициализирует новый <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" /> объектов путем указания имени журнала, для которого необходимо получить информацию и параметры конфигурации.
               Этот журнал может быть на локальном или удаленном компьютере, в зависимости от указанного сеанса журнала событий.
            </summary>
      <param name="logName">
                Имя журнала событий, для которого необходимо получить информацию и параметры конфигурации.
              </param>
      <param name="session">
                Сеанс журнала событий, используемый для определения службы журнала событий, к которой принадлежит указанный журнал.
                 Сеанс или подключен к службе журнала событий на локальном или удаленном компьютере.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose">
      <summary>
              Освобождает все ресурсы, используемые этим объектом.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые этим объектом и при необходимости освобождает также управляемые ресурсы.
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges">
      <summary>
              Сохраняет параметры конфигурации 
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" />.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Int32)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> класса с кодом ошибки для исключения.
            </summary>
      <param name="errorCode">
                Сведения, связанные с код ошибки для ошибки, возникшей при чтении или настройке журнала событий.
                 Дополнительные сведения и список журнала событий связанные коды в разделе http://go.microsoft.com/fwlink/?LinkId=82629.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> с сериализованными данными.
            </summary>
      <param name="serializationInfo">
                Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, содержащий сериализованные данные объекта по возникающему исключению.
              </param>
      <param name="streamingContext">
                Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> класс, указав сообщение об ошибке, описывающее текущее исключение.
            </summary>
      <param name="message">
                Сообщение об ошибке, описывающее текущее исключение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String,System.Exception)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> класса ошибка сообщением и внутренним исключением.
            </summary>
      <param name="message">
                Сообщение об ошибке, описывающее текущее исключение.
              </param>
      <param name="innerException">
                Экземпляр исключения, вызвавший текущее исключение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Задает объект SerializationInfo со сведениями об исключении.
            </summary>
      <param name="info">
                <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Объект, содержащий сериализованные данные объекта о вызванном исключении.
              </param>
      <param name="context">
                Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" />.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> с сериализованными данными.
            </summary>
      <param name="serializationInfo">
                <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Объект, содержащий сериализованные данные объекта о вызванном исключении.
              </param>
      <param name="streamingContext">
                Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> класс, указав сообщение об ошибке, описывающее текущее исключение.
            </summary>
      <param name="message">
                Сообщение об ошибке, описывающее текущее исключение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String,System.Exception)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> класса ошибка сообщением и внутренним исключением.
            </summary>
      <param name="message">
                Сообщение об ошибке, описывающее текущее исключение.
              </param>
      <param name="innerException">
                Экземпляр исключения, вызвавший текущее исключение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" />.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> с сериализованными данными.
            </summary>
      <param name="serializationInfo">
                <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Объект, содержащий сериализованные данные объекта о вызванном исключении.
              </param>
      <param name="streamingContext">
                Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> класс, указав сообщение об ошибке, описывающее текущее исключение.
            </summary>
      <param name="message">
                Сообщение об ошибке, описывающее текущее исключение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> класса ошибка сообщением и внутренним исключением.
            </summary>
      <param name="message">
                Сообщение об ошибке, описывающее текущее исключение.
              </param>
      <param name="innerException">
                Экземпляр исключения, вызвавший текущее исключение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
              Инициализирует новый <see cref="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector" /> экземпляра класса.
            </summary>
      <param name="propertyQueries">
                Запросы XPath, используемые для извлечения значений из XML-представление события.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose">
      <summary>
              Освобождает все ресурсы, используемые этим объектом.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые этим объектом и при необходимости освобождает также управляемые ресурсы.
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" />.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> с сериализованными данными.
            </summary>
      <param name="serializationInfo">
                <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Объект, содержащий сериализованные данные объекта о вызванном исключении.
              </param>
      <param name="streamingContext">
                Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> класс, указав сообщение об ошибке, описывающее текущее исключение.
            </summary>
      <param name="message">
                Сообщение об ошибке, описывающее текущее исключение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String,System.Exception)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> класса ошибка сообщением и внутренним исключением.
            </summary>
      <param name="message">
                Сообщение об ошибке, описывающее текущее исключение.
              </param>
      <param name="innerException">
                Экземпляр исключения, вызвавший текущее исключение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> класса путем указания целевого запроса.
               Целевой объект может быть активного журнала событий или файла журнала.
            </summary>
      <param name="path">
                Имя запрашиваемому или путь к файлу журнала событий для запроса.
              </param>
      <param name="pathType">
                Указывает ли строка, используемая в параметре path указывает имя журнала событий или путь к файлу журнала событий.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> класса путем указания целевого запроса и запроса событий.
               Целевой объект может быть активного журнала событий или файла журнала.
            </summary>
      <param name="path">
                Имя запрашиваемому или путь к файлу журнала событий для запроса.
              </param>
      <param name="pathType">
                Указывает ли строка, используемая в параметре path указывает имя журнала событий или путь к файлу журнала событий.
              </param>
      <param name="query">
                Запрос события, используемый для получения событий, которые удовлетворяют условиям запроса.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> класса путем указания запроса событий.
            </summary>
      <param name="eventQuery">
                Запрос события, используемый для извлечения событий.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> класса путем указания запроса событий и закладка, которая используется в качестве начальной позиции для запроса.
            </summary>
      <param name="eventQuery">
                Запрос события, используемый для извлечения событий.
              </param>
      <param name="bookmark">
                Закладка (местозаполнитель), используемые в качестве начальной позиции в журнале событий или потоке событий.
                 Только события, зарегистрированные после события закладки будет возвращаться в результатах запроса.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> класса путем указания для получения событий из активного журнала событий.
            </summary>
      <param name="path">
                Имя журнала событий, чтобы извлечь события.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> класса путем указания имени для получения событий из журнала событий или путь к файлу журнала следует извлечь события.
            </summary>
      <param name="path">
                Имя журнала событий, чтобы извлечь события или путь к файлу журнала событий следует извлечь события.
              </param>
      <param name="pathType">
                Указывает ли строка, используемая в параметре path указывает имя журнала событий или путь к файлу журнала событий.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading">
      <summary>
              Отменяет текущую операцию запроса.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose">
      <summary>
              Освобождает все ресурсы, используемые этим объектом.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые этим объектом и при необходимости освобождает также управляемые ресурсы.
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent">
      <summary>
              Считывает следующее событие, возвращенные из запроса события в данном объекте.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> объекта.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)">
      <summary>
              Считывает следующее событие, возвращенные из запроса события в данном объекте.
            </summary>
      <param name="timeout">
                Максимальное время, операции чтения для запуска до отмены операции.
              </param>
      <returns>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> объекта.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>
              Изменяет позицию в потоке событий, источник следующего события, которое считывается путем указания события закладки.
               Нет события, зарегистрированные до события закладки, будут извлечены.
            </summary>
      <param name="bookmark">
                Закладка (местозаполнитель), используемые в качестве начальной позиции в журнале событий или потоке событий.
                 Только события, зарегистрированные после события закладки будет возвращаться в результатах запроса.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)">
      <summary>
              Изменения позицию в потоке событий источник следующего события, которое считывается путем указания события закладки и числа смещения событий из закладки.
               События, не зарегистрированные до закладки с учетом смещения, будут извлечены.
            </summary>
      <param name="bookmark">
                Закладка (местозаполнитель), используемые в качестве начальной позиции в журнале событий или потоке событий.
                 Только события, зарегистрированные после события закладки будет возвращаться в результатах запроса.
              </param>
      <param name="offset">
                Число смещения событий для изменения позиции закладки.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)">
      <summary>
              Изменяет позицию в потоке событий, источник следующего события, которое считывается путем указания начальной позиции и смещения от начальной позиции.
               Нет события, зарегистрированные до начальной позиции с учетом смещения, будут извлечены.
            </summary>
      <param name="origin">
                Значение из <see cref="T:System.IO.SeekOrigin" /> перечисление определяет, где в поток событий для запуска запроса событий.
              </param>
      <param name="offset">
                Число смещения событий для добавления к началу координат.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" />.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> с сериализованными данными.
            </summary>
      <param name="serializationInfo">
                <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Объект, содержащий сериализованные данные объекта о вызванном исключении.
              </param>
      <param name="streamingContext">
                Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> класс, указав сообщение об ошибке, описывающее текущее исключение.
            </summary>
      <param name="message">
                Сообщение об ошибке, описывающее текущее исключение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String,System.Exception)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> класса ошибка сообщением и внутренним исключением.
            </summary>
      <param name="message">
                Сообщение об ошибке, описывающее текущее исключение.
              </param>
      <param name="innerException">
                Экземпляр исключения, вызвавший текущее исключение.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые этим объектом и при необходимости освобождает также управляемые ресурсы.
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription">
      <summary>
              Получает сообщение события в текущем языковом стандарте.
            </summary>
      <returns>
              Возвращает строку, содержащую сообщение события в текущем языковом стандарте.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
              Получает сообщение события, замещая переменные в сообщении с указанными значениями.
            </summary>
      <param name="values">
                Значения, используемые для замещения переменных в сообщении о событии.
                 Переменные представлены %n, где n является числом.
              </param>
      <returns>
              Возвращает строку, содержащую сообщение события в текущем языковом стандарте.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.GetPropertyValues(System.Diagnostics.Eventing.Reader.EventLogPropertySelector)">
      <summary>
              Возвращает перечисление значений свойств определяемых пользователем событий или результаты данных на основе XPath, если событие имеет представление XML.
            </summary>
      <param name="propertySelector">
                Выбирает возвращаемые значения свойств.
              </param>
      <returns>
              Возвращает список объектов.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.ToXml">
      <summary>
              Возвращает XML-представление события.
               Все свойства события представлены в XML события.
               XML соответствует приведенному event schema.
            </summary>
      <returns>
              Возвращает строку, содержащую XML-представление события.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor">
      <summary>
              Инициализирует новый <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> объекта, устанавливает соединение с локальной службой журнала событий.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String)">
      <summary>
              Инициализирует новый <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> а также устанавливает соединение со службой журнала событий на указанном компьютере.
               Учетные данные (имя пользователя и пароль) пользователя, вызывающего метод используется для учетных данных для доступа к серверу терминалов.
            </summary>
      <param name="server">
                Имя компьютера, на котором для подключения к службе журнала событий.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String,System.String,System.String,System.Security.SecureString,System.Diagnostics.Eventing.Reader.SessionAuthentication)">
      <summary>
              Инициализирует новый <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> а также устанавливает соединение со службой журнала событий на указанном компьютере.
               Указанные учетные данные (имя пользователя и пароль) используются для учетных данных для доступа к серверу терминалов.
            </summary>
      <param name="server">
                Имя компьютера, на котором для подключения к службе журнала событий.
              </param>
      <param name="domain">
                Домен указанного пользователя.
              </param>
      <param name="user">
                Имя пользователя, используемое для подключения к удаленному компьютеру.
              </param>
      <param name="password">
                Пароль, используемый для подключения к удаленному компьютеру.
              </param>
      <param name="logOnType">
                Тип соединения для подключения к удаленному компьютеру.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.CancelCurrentOperations">
      <summary>
              Отменяет любые операции (например, чтение журнала событий или подписка на журнал событий), которые активны в данный момент для службы журнала событий, который подключен этот объект сеанса.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String)">
      <summary>
              Удаляет события из указанного журнала событий.
            </summary>
      <param name="logName">
                Имя журнала событий, чтобы очистить все события.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String,System.String)">
      <summary>
              Удаляет события из указанного журнала событий и сохраняет удаленные события в указанном файле.
            </summary>
      <param name="logName">
                Имя журнала событий, чтобы очистить все события.
              </param>
      <param name="backupPath">
                Путь к файлу, в котором будут сохранены удаленные события.
                 Файл должен заканчиваться .evtx.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose">
      <summary>
              Освобождает все ресурсы, используемые этим объектом.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые этим объектом и при необходимости освобождает также управляемые ресурсы.
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>
              Экспортирует события во внешний файл журнала.
               События хранятся без сообщений о событиях.
            </summary>
      <param name="path">
                Имя журнала событий, чтобы экспорт событий или путь к файлу журнала событий для экспорта событий из.
              </param>
      <param name="pathType">
                Указывает ли строка, используемая в параметре path указывает имя журнала событий или путь к файлу журнала событий.
              </param>
      <param name="query">
                Запрос, используемый для выбора экспортируемых событий.
                  Будут экспортированы только события, возвращенные из запроса.
              </param>
      <param name="targetFilePath">
                Путь к файлу журнала (с расширением .evtx), в котором будут храниться экспортированные события после выполнения данного метода.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean)">
      <summary>
              Экспортирует события во внешний файл журнала.
               Можно установить флаг для указания, что метод продолжит экспортирование событий даже в случае сбоя указанного запроса для некоторых журналов.
               События хранятся без сообщений о событиях.
            </summary>
      <param name="path">
                Имя журнала событий, чтобы экспорт событий или путь к файлу журнала событий для экспорта событий из.
              </param>
      <param name="pathType">
                Указывает ли строка, используемая в параметре path указывает имя журнала событий или путь к файлу журнала событий.
              </param>
      <param name="query">
                Запрос, используемый для выбора экспортируемых событий.
                 Будут экспортированы только события, возвращенные из запроса.
              </param>
      <param name="targetFilePath">
                Путь к файлу журнала (с расширением .evtx), в котором будут храниться экспортированные события после выполнения данного метода.
              </param>
      <param name="tolerateQueryErrors">
                <see langword="true" /> Указывает, что метод продолжит экспортирование событий даже в случае сбоя указанного запроса для некоторых журналов и <see langword="false" /> Указывает, что этот метод не будет экспортировать события при сбое указанного запроса.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>
              Экспортирует события и связанные сообщения в файл внешнего журнала.
            </summary>
      <param name="path">
                Имя журнала событий или путь к файлу журнала событий, из которого экспортируются события.
              </param>
      <param name="pathType">
                Указывает, определяет ли строка, которая используется в параметре пути, имя журнала событий или путь к файлу журнала событий.
              </param>
      <param name="query">
                Запрос, используемый для выбора экспортируемых событий.
                  Будут экспортированы только события, возвращенные запросом.
              </param>
      <param name="targetFilePath">
                Путь к файлу журнала (с расширением .evtx), в котором будут храниться экспортированные события после выполнения этого метода.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>
              Экспортирует события и связанные сообщения в файл внешнего журнала.
               Флаг задается для указания того, что метод продолжит экспорт событий даже в случае сбоя при выполнении указанного запроса для некоторых журналов.
               Сообщения о событиях экспортируются на указанном языке.
            </summary>
      <param name="path">
                Имя журнала событий или путь к файлу журнала событий, из которого экспортируются события.
              </param>
      <param name="pathType">
                Указывает, определяет ли строка, которая используется в параметре пути, имя журнала событий или путь к файлу журнала событий.
              </param>
      <param name="query">
                Запрос, используемый для выбора экспортируемых событий.
                  Будут экспортированы только события, возвращенные запросом.
              </param>
      <param name="targetFilePath">
                Путь к файлу журнала (с расширением .evtx), в котором будут храниться экспортированные события после выполнения этого метода.
              </param>
      <param name="tolerateQueryErrors">
                <see langword="true" /> указывает на то, что метод продолжит экспорт событий даже в случае сбоя выполнения указанного запроса для некоторых журналов. <see langword="false" /> указывает на то, что этот метод не будет продолжать экспорт событий при сбое выполнения указанного запроса.
              </param>
      <param name="targetCultureInfo">
                Язык и региональные параметры, которые определяют язык, на котором будут экспортироваться сообщения о событиях.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogInformation(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>
              Возвращает объект, содержащий информацию выполнения для указанного журнала событий.
            </summary>
      <param name="logName">
                Имя журнала событий для получения сведений о или путь к файлу журнала событий для получения сведений о.
              </param>
      <param name="pathType">
                Указывает ли строка, используемая в параметре path указывает имя журнала событий или путь к файлу журнала событий.
              </param>
      <returns>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInformation" /> содержащий сведения о указанного журнала.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogNames">
      <summary>
              Возвращает перечисляемую коллекцию всех имен журналов событий, зарегистрированных со службой журнала событий.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию строк, содержащих имена журналов событий.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetProviderNames">
      <summary>
              Получает перечисляемую коллекцию всех имен поставщиков событий, зарегистрированных со службой журнала событий.
               Поставщик событий является приложение, которое публикует события в журнал событий.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию строк, содержащих имена поставщиков событий.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> класса путем указания запроса событий.
            </summary>
      <param name="eventQuery">
                Указывает запрос для подписки на событие.
                 При регистрации события, соответствующего критериям, выраженное в запросе, то <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> события.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> класса путем указания запроса событий и закладка, которая используется в качестве начальной позиции для запроса.
            </summary>
      <param name="eventQuery">
                Указывает запрос для подписки на событие.
                 При регистрации события, соответствующего критериям, выраженное в запросе, то <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> события.
              </param>
      <param name="bookmark">
                Закладка (местозаполнитель), используемые в качестве начальной позиции в журнале событий или потоке событий.
                 Только события, зарегистрированные после события закладки будет возвращаться в результатах запроса.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> класс, указав запрос события, закладку, которая используется в качестве начальной позиции для запроса и логическое значение, определяющее, следует ли считывать события, уже существует в журнале событий.
            </summary>
      <param name="eventQuery">
                Указывает запрос для подписки на событие.
                 При регистрации события, соответствующего критериям, выраженное в запросе, то <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> события.
              </param>
      <param name="bookmark">
                Закладка (местозаполнитель), используемые в качестве начальной позиции в журнале событий или потоке событий.
                 Только события, зарегистрированные после события закладки будет возвращаться в результатах запроса.
              </param>
      <param name="readExistingEvents">
                Логическое значение, определяющее, следует ли считывать события, которые уже существуют в журнале событий.
                 Если это значение равно <see langword="true" />, затем считываются существующих событий, и если это значение равно <see langword="false" />, а затем существующих событий не считываются.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> класс, указав имя или путь к журналу событий.
            </summary>
      <param name="path">
                Путь или имя монитора журнала событий.
                 Если любое событие регистрируется в журнале событий, а затем <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> события.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose">
      <summary>
              Освобождает все ресурсы, используемые этим объектом.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые этим объектом и при необходимости освобождает также управляемые ресурсы.
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose">
      <summary>
              Освобождает все ресурсы, используемые этим объектом.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые этим объектом и при необходимости освобождает также управляемые ресурсы.
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription">
      <summary>
              Получает сообщение события в текущем языковом стандарте.
            </summary>
      <returns>
              Возвращает строку, содержащую сообщение события в текущем языковом стандарте.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
              Получает сообщение события, замещая переменные в сообщении с указанными значениями.
            </summary>
      <param name="values">
                Значения, используемые для замещения переменных в сообщении о событии.
                 Переменные представлены %n, где n является числом.
              </param>
      <returns>
              Возвращает строку, содержащую сообщение события в текущем языковом стандарте.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.ToXml">
      <summary>
              Возвращает XML-представление события.
               Все свойства события представлены в XML.
               XML соответствует приведенному event schema.
            </summary>
      <returns>
              Возвращает строку, содержащую XML-представление события.
            </returns>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" /> класса путем указания имени поставщика, который вы хотите получить сведения о.
            </summary>
      <param name="providerName">
                Имя поставщика событий, который вы хотите получить сведения о.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession,System.Globalization.CultureInfo)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" /> класса путем указания имени поставщика, чтобы получить сведения о службе журнала событий, который зарегистрирован поставщик и язык, который требуется возвратить информацию.
            </summary>
      <param name="providerName">
                Имя поставщика событий, который вы хотите получить сведения о.
              </param>
      <param name="session">
                <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> Объект, который указывает, следует ли получить сведения о поставщике из поставщика на локальном компьютере или поставщика на удаленном компьютере.
              </param>
      <param name="targetCultureInfo">
                Язык и региональные параметры, язык, данные должны быть возвращены в по.
              </param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose">
      <summary>
              Освобождает все ресурсы, используемые этим объектом.
            </summary>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые этим объектом и при необходимости освобождает также управляемые ресурсы.
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" />, используя указанный файл в качестве получателя выходных данных отладки и трассировки.
            </summary>
      <param name="fileName">
                Путь к файлу журнала.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> заданным именем, используя указанный файл в качестве получателя выходных данных отладки и трассировки.
            </summary>
      <param name="fileName">
                Путь к файлу журнала.
              </param>
      <param name="name">
                Имя прослушивателя.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> заданным именем и указанным размером буфера, используя указанный файл в качестве получателя выходных данных отладки и трассировки.
            </summary>
      <param name="fileName">
                Путь к файлу журнала.
              </param>
      <param name="name">
                Имя прослушивателя.
              </param>
      <param name="bufferSize">
                Размер выходного буфера в байтах.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> заданным именем и указанным размером буфера, используя указанный файл с заданной политикой хранения журнала в качестве получателя выходных данных отладки и трассировки.
            </summary>
      <param name="fileName">
                Путь к файлу журнала.
              </param>
      <param name="name">
                Имя прослушивателя.
              </param>
      <param name="bufferSize">
                Размер выходного буфера в байтах.
              </param>
      <param name="logRetentionOption">
                Одно из значений <see cref="T:System.Diagnostics.TraceLogRetentionOption" />.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> заданным именем и указанным размером буфера, используя указанный файл с заданной политикой хранения и максимальным размером журнала в качестве получателя выходных данных отладки и трассировки.
            </summary>
      <param name="fileName">
                Путь к файлу журнала.
              </param>
      <param name="name">
                Имя прослушивателя.
              </param>
      <param name="bufferSize">
                Размер выходного буфера в байтах.
              </param>
      <param name="logRetentionOption">
                Одно из значений <see cref="T:System.Diagnostics.TraceLogRetentionOption" />.
              </param>
      <param name="maximumFileSize">
                Максимальный размер файла в байтах.
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="maximumFileSize" /> меньше <paramref name="bufferSize" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="maximumFileSize" /> является отрицательным числом.
                </exception>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> заданным именем и указанным размером буфера, используя в качестве получателя выходных данных отладки и трассировки указанный файл с заданной политикой хранения и максимальным размером журнала, а также счетчиком файлов.
            </summary>
      <param name="fileName">
                Путь к файлу журнала.
              </param>
      <param name="name">
                Имя прослушивателя.
              </param>
      <param name="bufferSize">
                Размер выходного буфера в байтах.
              </param>
      <param name="logRetentionOption">
                Одно из значений <see cref="T:System.Diagnostics.TraceLogRetentionOption" />.
              </param>
      <param name="maximumFileSize">
                Максимальный размер файла в байтах.
              </param>
      <param name="maximumNumberOfFiles">
                Максимальное количество выходных файлов журнала.
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="maximumFileSize" /> меньше <paramref name="bufferSize" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="maximumFileSize" /> является отрицательным числом.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="maximumNumberOfFiles" /> меньше 1 и <paramref name="logRetentionOption" /> — <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="maximumNumberOfFiles" /> меньше 2 и <paramref name="logRetentionOption" /> — <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />.
                </exception>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Close">
      <summary>
              Закрывает файл журнала данного прослушивателя. Теперь этот журнал не будет получать выходные данные отладки или трассировки.
            </summary>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)">
      <summary>
              Записывает в файл журнала сведения об ошибках, в том числе базовое и подробное сообщение об ошибке.
            </summary>
      <param name="message">
                Записываемое базовое сообщение об ошибке.
              </param>
      <param name="detailMessage">
                Подробное сообщение об ошибке, дополняющее базовое сообщение об ошибке.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Flush">
      <summary>
              Вызывает запись буферизованных данных в журнал этого прослушивателя.
            </summary>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes">
      <summary>
              Возвращает настраиваемые атрибуты конфигурации XML, поддерживаемые прослушивателем трассировки.
            </summary>
      <returns>
              Массив типа <see cref="T:System.String" />, содержащий атрибуты конфигурации XML, распознаваемые данным прослушивателем.
            </returns>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>
              Записывает в файл журнала информацию трассировки, единичный объект данных и сведения о событии.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий идентификаторы текущего процесса и потока, а также информацию трассировки стека.
              </param>
      <param name="source">
                Имя источника.
              </param>
      <param name="eventType">
                Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
      <param name="data">
                Порождаемый объект данных.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>
              Записывает в файл журнала информацию трассировки, несколько объектов данных и сведения о событии.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий идентификаторы текущего процесса и потока, а также информацию трассировки стека.
              </param>
      <param name="source">
                Имя источника.
              </param>
      <param name="eventType">
                Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
      <param name="data">
                Порождаемый массив объектов данных.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>
              Записывает в файл журнала информацию трассировки, сообщение и сведения о событиях.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий идентификаторы текущего процесса и потока, а также информацию трассировки стека.
              </param>
      <param name="source">
                Имя источника.
              </param>
      <param name="eventType">
                Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
      <param name="message">
                Сообщение для записи.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>
              Записывает в файл журнала информацию трассировки, форматированное сообщение и сведения о событиях.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий идентификаторы текущего процесса и потока, а также информацию трассировки стека.
              </param>
      <param name="source">
                Имя источника.
              </param>
      <param name="eventType">
                Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
      <param name="format">
                Строка форматирования, содержащая 0 или больше элементов форматирования, соответствующих объектам в массиве <paramref name="args" />.
              </param>
      <param name="args">
                Массив объектов, содержащий нуль или более форматируемых объектов.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>
              Записывает в файл журнала информацию трассировки, включая удостоверение связанного действия, сообщение и сведения о событии.
            </summary>
      <param name="eventCache">
                Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий идентификаторы текущего процесса и потока, а также информацию трассировки стека.
              </param>
      <param name="source">
                Имя источника.
              </param>
      <param name="id">
                Числовой идентификатор события.
              </param>
      <param name="message">
                Сообщение трассировки для записи.
              </param>
      <param name="relatedActivityId">
                Структура <see cref="T:System.Guid" />, идентифицирующая связанное действие.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)">
      <summary>
              Записывает сообщение в файл журнала, не указывая какой-либо дополнительной контекстной информации.
            </summary>
      <param name="message">
                Сообщение для записи.
              </param>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)">
      <summary>
              Записывает в файл журнала сообщение, после которого следует текущий разделитель строк, без какой-либо дополнительной контекстной информации.
            </summary>
      <param name="message">
                Сообщение для записи.
              </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Decrement">
      <summary>
              Уменьшает значение счетчика на 1.
            </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Increment">
      <summary>
              Увеличивает значение счетчика на 1.
            </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)">
      <summary>
              Увеличивает значение счетчика на указанную величину.
            </summary>
      <param name="value">
                Величина, на которую увеличивается значение счетчика.
                 Значение шага может быть положительным или отрицательным.
              </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.PerformanceData.CounterSet" />.
            </summary>
      <param name="providerGuid">
                Идентификатор GUID, который уникально идентифицирует поставщика данных счетчика.
                 Используйте идентификатор Guid, указанный в манифесте.
              </param>
      <param name="counterSetGuid">
                Идентификатор GUID, однозначно определяющий поставщика набора счетчиков.
                 Используйте идентификатор Guid, указанный в манифесте.
              </param>
      <param name="instanceType">
                Идентифицирует тип набора счетчиков, например, ли набор счетчиков — это набор счетчиков одного или нескольких экземпляров.
              </param>
      <exception cref="T:System.InsufficientMemoryException">
                  Недостаточно памяти для завершения операции.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Не поддерживается до Windows Vista.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Один из параметров имеет значение NULL или не является допустимым.
                </exception>
      <exception cref="T:System.ComponentModel.Win32Exception">
                  Сбой вызова базовой функции Win32.
                </exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)">
      <summary>
              Добавляет в набор с помощью указанного идентификатора счетчика и тип счетчиков.
            </summary>
      <param name="counterId">
                Идентифицирует счетчик.
                 Используйте значение используется в манифесте для определения счетчика.
              </param>
      <param name="counterType">
                Идентифицирует тип счетчика.
                 Тип счетчика определяет, как вычисляется, в среднем и отображаются данные счетчика.
              </param>
      <exception cref="T:System.ArgumentException">
                  Идентификатор счетчика уже существует в наборе или является отрицательным, или тип счетчика имеет значение NULL или не является допустимым.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Невозможно добавить счетчики в набор после создания экземпляра счетчика набора счетчиков.
                </exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)">
      <summary>
              Добавляет в набор с помощью указанного идентификатора счетчика и тип и отображаемое имя для данного счетчика счетчиков.
            </summary>
      <param name="counterId">
                Идентифицирует счетчик.
                 Используйте значение используется в манифесте для определения счетчика.
              </param>
      <param name="counterType">
                Идентифицирует тип счетчика.
                 Тип счетчика определяет, как вычисляется, в среднем и отображаются данные счетчика.
              </param>
      <param name="counterName">
                Имя счетчика.
                 Это имя можно использовать для индексации счетчика в экземпляре набора счетчиков.
                 (См. раздел <see cref="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)" />).
              </param>
      <exception cref="T:System.ArgumentException">
                  Идентификатор счетчика уже существует в наборе или является отрицательным, или тип счетчика имеет значение NULL или не является допустимым.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Невозможно добавить счетчики в набор после создания экземпляра счетчика набора счетчиков.
                </exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)">
      <summary>
              Создает экземпляр набора счетчиков.
            </summary>
      <param name="instanceName">
                Имя экземпляра.
                 Имя должно быть уникальным.
              </param>
      <returns>
              Экземпляр набора счетчиков, в котором будут содержаться данные счетчиков.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Имя экземпляра имеет значение NULL.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Необходимо добавить счетчики в набор перед созданием экземпляра набора счетчиков счетчиков.
                </exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose">
      <summary>
              Освобождает все неуправляемые ресурсы, используемые этим объектом.
            </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)">
      <summary>
              Выпуски все неуправляемые ресурсы, используемые этим объектом и при необходимости освобождает также управляемые ресурсы.
            </summary>
      <param name="disposing">
                <see langword="True" /> Если был совершен из метода Dispose <see langword="False" /> при вызове из метода завершения.
              </param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Finalize">
      <summary>
              Освобождает ресурсы, прежде чем объект будет уничтожен во время сборки мусора.
            </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Dispose">
      <summary>
              Освобождает все неуправляемые ресурсы, используемые этим объектом.
            </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Finalize">
      <summary>
              Освобождает неуправляемые ресурсы и выполняет другие операции очистки.
            </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Dispose">
      <summary>
              Освобождает все неуправляемые ресурсы, используемые этим объектом.
            </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Finalize">
      <summary>
              Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора.
            </summary>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> используя указанную строку данных XML.
            </summary>
      <param name="xmlPayload">
                XML-данные записываются в <see langword="UserData" /> узел схемы событий.
              </param>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.ToString">
      <summary>
              Возвращает строковое представление <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> объекта.
            </summary>
      <returns>
              Строковое представление <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> объекта.
               Если объект является <see langword="null" />, этот метод возвращает пустую строку.
            </returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.BinaryOperationBinder" />.
            </summary>
      <param name="operation">
                Вид бинарной операции.
              </param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической бинарной операции.
            </summary>
      <param name="target">
                Целевой объект динамической операции.
              </param>
      <param name="args">
                Массив аргументов динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической бинарной операции, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической бинарной операции.
              </param>
      <param name="arg">
                Правый операнд динамической бинарной операции.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              При переопределении в производном классе выполняет привязку динамической бинарной операции, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической бинарной операции.
              </param>
      <param name="arg">
                Правый операнд динамической бинарной операции.
              </param>
      <param name="errorSuggestion">
                Результат привязки в случае привязки, или значение null.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>
              Объединяет ограничениями привязки из списка <see cref="T:System.Dynamic.DynamicMetaObject" /> экземпляры в один набор ограничений.
            </summary>
      <param name="contributingObjects">
                Список <see cref="T:System.Dynamic.DynamicMetaObject" /> экземпляров из какие ограничения.
              </param>
      <returns>
              Новый набор ограничений привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>
              Создает ограничение привязки, которое проверяет выражение на наличие неизменяемых свойств.
            </summary>
      <param name="expression">
                Выражение, представляющее ограничения.
              </param>
      <returns>
              Новые ограничения привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>
              Создает ограничение привязки, которое проверяет выражение для идентификации экземпляра объекта.
            </summary>
      <param name="expression">
                Выражение для проверки.
              </param>
      <param name="instance">
                Точный экземпляр объекта для проверки.
              </param>
      <returns>
              Новые ограничения привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает ограничение привязки, которое проверьте выражение удостоверение типа среды выполнения.
            </summary>
      <param name="expression">
                Выражение для проверки.
              </param>
      <param name="type">
                Точный тип для проверки.
              </param>
      <returns>
              Новые ограничения привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>
              Объединяет набор ограничений привязки с текущими ограничениями привязки.
            </summary>
      <param name="restrictions">
                Набор ограничений, объединяемый с текущими ограничениями привязки.
              </param>
      <returns>
              Новый набор ограничений привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.Expression" /> представляющее ограничения привязки.
            </summary>
      <returns>
              Дерево выражения, представляющее ограничения.
            </returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
              Создает новый объект CallInfo, представляющий аргументы в процессе динамической привязки.
            </summary>
      <param name="argCount">
                Число аргументов.
              </param>
      <param name="argNames">
                Имена аргументов.
              </param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>
              Создает новый экземпляр PositionalArgumentInfo.
            </summary>
      <param name="argCount">
                Число аргументов.
              </param>
      <param name="argNames">
                Имена аргументов.
              </param>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>
              Определяет, считается ли указанный экземпляр CallInfo текущему объекту.
            </summary>
      <param name="obj">
                Экземпляр <see cref="T:System.Dynamic.CallInfo" /> для сравнения с текущим экземпляром.
              </param>
      <returns>
              значение true, если указанный экземпляр равен имеющийся в противном случае — значение false.
            </returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>
              Служит хэш-функцией текущего <see cref="T:System.Dynamic.CallInfo" />.
            </summary>
      <returns>
              Хэш-код для текущего объекта <see cref="T:System.Dynamic.CallInfo" />.
            </returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.ConvertBinder" />.
            </summary>
      <param name="type">
                Целевой тип преобразования.
              </param>
      <param name="explicit">
                Значение true, если преобразование должно быть явным; в противном случае — значение false.
              </param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции преобразования.
            </summary>
      <param name="target">
                Целевой объект динамической операции преобразования.
              </param>
      <param name="args">
                Массив аргументов динамической операции преобразования.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической операции преобразования, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции преобразования.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              При переопределении в производном классе выполняет привязку динамической операции преобразования, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции преобразования.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
              Инициализирует новый intsance из <see cref="T:System.Dynamic.CreateInstanceBinder" />.
            </summary>
      <param name="callInfo">
                Сигнатура аргументов на сайте вызова.
              </param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции создания.
            </summary>
      <param name="target">
                Целевой объект динамической операции создания.
              </param>
      <param name="args">
                Массив аргументов динамической операции создания.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции создания, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции создания.
              </param>
      <param name="args">
                Аргументы динамической операции создания.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              При переопределении в производном классе выполняет привязку динамической операции создания, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции создания.
              </param>
      <param name="args">
                Аргументы динамической операции создания.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DeleteIndexBinder" />.
            </summary>
      <param name="callInfo">
                Сигнатура аргументов на сайте вызова.
              </param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции удаления индекса.
            </summary>
      <param name="target">
                Целевой объект динамической операции удаления индекса.
              </param>
      <param name="args">
                Массив аргументов динамической операции удаления индекса.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции удаления индекса, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции удаления индекса.
              </param>
      <param name="indexes">
                Аргументы динамической операции удаления индекса.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              При переопределении в производном классе выполняет привязку динамической операции удаления индекса, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции удаления индекса.
              </param>
      <param name="indexes">
                Аргументы динамической операции удаления индекса.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DeleteIndexBinder" />.
            </summary>
      <param name="name">
                Имя члена, который требуется удалить.
              </param>
      <param name="ignoreCase">
                Имеет значение true, если имя должно сравниваться без учета регистра; значение false в противном случае.
              </param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции удаления члена.
            </summary>
      <param name="target">
                Целевой объект динамической операции удаления члена.
              </param>
      <param name="args">
                Массив аргументов динамической операции удаления члена.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической операции удаления члена, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции удаления члена.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              При переопределении в производном классе выполняет привязку динамической операции удаления члена, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции удаления члена.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />.
            </summary>
      <param name="expression">
                Выражение, представляющее это <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.
              </param>
      <param name="restrictions">
                Набор ограничений, в которых привязка является допустимой привязки.
              </param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />.
            </summary>
      <param name="expression">
                Выражение, представляющее это <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.
              </param>
      <param name="restrictions">
                Набор ограничений, в которых привязка является допустимой привязки.
              </param>
      <param name="value">
                Значение выполнения, представленное <see cref="T:System.Dynamic.DynamicMetaObject" />.
              </param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической бинарной операции.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.BinaryOperationBinder" /> представляющий сведения о динамической операции.
              </param>
      <param name="arg">
                Экземпляр <see cref="T:System.Dynamic.DynamicMetaObject" /> представляющий с правой стороны бинарной операции.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>
              Выполняет привязку динамической операции преобразования.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.ConvertBinder" /> представляющий сведения о динамической операции.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции создания экземпляра.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.CreateInstanceBinder" /> представляющий сведения о динамической операции.
              </param>
      <param name="args">
                Массив <see cref="T:System.Dynamic.DynamicMetaObject" /> экземпляры - аргументы для операции создания экземпляра.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции удаления индекса.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.DeleteIndexBinder" /> представляющий сведения о динамической операции.
              </param>
      <param name="indexes">
                Массив <see cref="T:System.Dynamic.DynamicMetaObject" /> экземпляры - индексов для операции удаления индекса.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>
              Выполняет привязку динамической операции удаления члена.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.DeleteMemberBinder" /> представляющий сведения о динамической операции.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции получения индекса.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.GetIndexBinder" /> представляющий сведения о динамической операции.
              </param>
      <param name="indexes">
                Массив <see cref="T:System.Dynamic.DynamicMetaObject" /> экземпляры - индексов для операции получения индекса.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>
              Выполняет привязку динамической операции получения члена.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.GetMemberBinder" /> представляющий сведения о динамической операции.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции вызова.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.InvokeBinder" /> представляющий сведения о динамической операции.
              </param>
      <param name="args">
                Массив <see cref="T:System.Dynamic.DynamicMetaObject" /> экземпляры - аргументы операции вызова.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции вызова члена.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.InvokeMemberBinder" /> представляющий сведения о динамической операции.
              </param>
      <param name="args">
                Массив <see cref="T:System.Dynamic.DynamicMetaObject" /> экземпляры - аргументы операции вызова члена.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической операции задания индекса.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.SetIndexBinder" /> представляющий сведения о динамической операции.
              </param>
      <param name="indexes">
                Массив <see cref="T:System.Dynamic.DynamicMetaObject" /> экземпляры - индексов для операции задания индекса.
              </param>
      <param name="value">
                <see cref="T:System.Dynamic.DynamicMetaObject" /> Представляет значение для операции задания индекса.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической операции задания члена.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.SetMemberBinder" /> представляющий сведения о динамической операции.
              </param>
      <param name="value">
                <see cref="T:System.Dynamic.DynamicMetaObject" /> Представляет значение для операции задания члена.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>
              Выполняет привязку динамической унарной операции.
            </summary>
      <param name="binder">
                Экземпляр <see cref="T:System.Dynamic.UnaryOperationBinder" /> представляющий сведения о динамической операции.
              </param>
      <returns>
              Новый <see cref="T:System.Dynamic.DynamicMetaObject" /> представляют результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект метаданных для указанного объекта.
            </summary>
      <param name="value">
                Для получения объекта метаданных для объекта.
              </param>
      <param name="expression">
                Выражение, представляющее это <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.
              </param>
      <returns>
              Если данный объект реализует интерфейс <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> и не из удаленного объекта за пределами текущего домена приложения, возвращает объект определенного мета объект, возвращаемый <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />.
               В противном случае создается и возвращается обычный мета объекта без ограничений.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>
              Возвращает перечисление всех имен динамических членов.
            </summary>
      <returns>
              Список имен динамических членов.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObjectBinder" />.
            </summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              При переопределении в производном классе выполняет привязку динамической операции.
            </summary>
      <param name="target">
                Целевой объект динамической операции.
              </param>
      <param name="args">
                Массив аргументов динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>
              Выполняет привязку динамической операции на набор аргументов среды выполнения.
            </summary>
      <param name="args">
                Массив аргументов динамической операции.
              </param>
      <param name="parameters">
                Массив <see cref="T:System.Linq.Expressions.ParameterExpression" /> экземпляры, которые представляют параметры вызова в процессе привязки.
              </param>
      <param name="returnLabel">
                Элемент LabelTarget возвращают результат динамической привязки.
              </param>
      <returns>
              Выражение, проверяющее аргументы динамической операции и выполняющее эту операцию, если проверки пройдены успешно.
               Если тесты будут завершаться при последующих выполнениях динамической операции, привязка будет снова вызван для создания нового <see cref="T:System.Linq.Expressions.Expression" /> для новых типов аргументов.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Откладывает привязки операции до позднее время, когда после вычисления значений времени выполнения всех аргументов динамической операции.
            </summary>
      <param name="target">
                Целевой объект динамической операции.
              </param>
      <param name="args">
                Массив аргументов динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>
              Откладывает привязки операции до позднее время, когда после вычисления значений времени выполнения всех аргументов динамической операции.
            </summary>
      <param name="args">
                Массив аргументов динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>
              Возвращает выражение, которое вызовет обновление привязки.
               Указывает, что привязка выражения больше не действительна.
               Обычно это используется «версией» динамический объект был изменен.
            </summary>
      <param name="type">
                <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойства результирующего выражения; может быть любого типа.
              </param>
      <returns>
              Выражение обновления.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>
              Включает производные типы для инициализации нового экземпляра <see cref="T:System.Dynamic.DynamicObject" /> типа.
            </summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>
              Возвращает перечисление всех имен динамических членов.
            </summary>
      <returns>
              Последовательность, содержащая имена динамических членов.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
              Предоставляет <see cref="T:System.Dynamic.DynamicMetaObject" /> отправляет динамические виртуальные методы.
               Объект можно инкапсулировать внутри другого <see cref="T:System.Dynamic.DynamicMetaObject" /> Чтобы обеспечить пользовательское поведение для отдельных действий.
               Этот метод поддерживает инфраструктуру среды DLR для разработчиков языков и не предназначен для непосредственного использования в коде.
            </summary>
      <param name="parameter">
                Выражение, представляющее <see cref="T:System.Dynamic.DynamicMetaObject" /> для перенаправления динамические виртуальные методы.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" /> типа.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>
              Предоставляет реализацию для двоичных операций.
               Классы, производные от <see cref="T:System.Dynamic.DynamicObject" /> класс может переопределить этот метод, чтобы задать динамическое поведение для операций, таких как сложение и умножение.
            </summary>
      <param name="binder">
                Предоставляет сведения о двоичной операции.
                binder.Operation Возвращает свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> объекта.
                 Например, для sum = first + second инструкции, где first и second являются производными от <see langword="DynamicObject" /> класса binder.Operation возвращает ExpressionType.Add.
              </param>
      <param name="arg">
                Правый операнд для двоичной операции.
                 Например, для sum = first + second инструкции, где first и second являются производными от <see langword="DynamicObject" /> класса <paramref name="arg" /> равен second.
              </param>
      <param name="result">
                Результат бинарной операции.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев конкретного языка во время выполнения исключения.)
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>
              Предоставляет реализацию для типа операции преобразования.
               Классы, производные от <see cref="T:System.Dynamic.DynamicObject" /> класс может переопределить этот метод, чтобы задать динамическое поведение для операций, преобразующих объект из одного типа в другой.
            </summary>
      <param name="binder">
                Предоставляет сведения об операции преобразования.
                binder.Type Предоставляет тип, в который необходимо преобразовать объект.
                 Например, для инструкции (String)sampleObject в C# (CType(sampleObject, Type) в Visual Basic), где sampleObject является экземпляром класса, производного от <see cref="T:System.Dynamic.DynamicObject" /> класса binder.Type возвращает <see cref="T:System.String" /> типа.
                binder.Explicit Свойстве содержатся сведения о типе при преобразовании.
                 Он возвращает <see langword="true" /> для явного преобразования и <see langword="false" /> для неявного преобразования.
              </param>
      <param name="result">
                Результат операции преобразования типа.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев конкретного языка во время выполнения исключения.)
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>
              Предоставляет реализацию для операций, инициализирующих новый экземпляр динамического объекта.
               Этот метод не предназначен для использования в C# или Visual Basic.
            </summary>
      <param name="binder">
                Предоставляет сведения об операции инициализации.
              </param>
      <param name="args">
                Аргументы, переданные объекту во время инициализации.
                 Например, для new SampleType(100) операции, где SampleType тип является производным от <see cref="T:System.Dynamic.DynamicObject" /> класса <paramref name="args[0]" /> равно 100.
              </param>
      <param name="result">
                Результат инициализации.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев конкретного языка во время выполнения исключения.)
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>
              Предоставляет реализацию для операций, удаляющих объект по индексу.
               Этот метод не предназначен для использования в C# или Visual Basic.
            </summary>
      <param name="binder">
                Сведения об удалении.
              </param>
      <param name="indexes">
                Индексы, будут удалены.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев конкретного языка во время выполнения исключения.)
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>
              Предоставляет реализацию для операций, удаляющих элемент объекта.
               Этот метод не предназначен для использования в C# или Visual Basic.
            </summary>
      <param name="binder">
                Сведения об удалении.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев конкретного языка во время выполнения исключения.)
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>
              Предоставляет реализацию для операций, получающих значение по индексу.
               Классы, производные от <see cref="T:System.Dynamic.DynamicObject" /> класс может переопределить этот метод, чтобы задать динамическое поведение для операций индексации.
            </summary>
      <param name="binder">
                Предоставляет сведения об операции.
              </param>
      <param name="indexes">
                Индексы, которые используются в операции.
                 Например, для sampleObject[3] операции в C# (sampleObject(3) в Visual Basic), где sampleObject является производным от <see langword="DynamicObject" /> класса <paramref name="indexes[0]" /> равно 3.
              </param>
      <param name="result">
                Результат операции с индексами.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев во время выполнения исключения.)
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
              Предоставляет реализацию для операций, получающие значения членов.
               Классы, производные от <see cref="T:System.Dynamic.DynamicObject" /> класс может переопределить этот метод, чтобы задать динамическое поведение для операций, таких как получение значения свойства.
            </summary>
      <param name="binder">
                Сведения об объекте, который называется динамической операции.
                binder.Name Предоставляет имя члена, на котором выполняется динамическая операция.
                 Например, для Console.WriteLine(sampleObject.SampleProperty) инструкции, где sampleObject является экземпляром класса, производного от <see cref="T:System.Dynamic.DynamicObject" /> класса binder.Name возвращает «SampleProperty».
                binder.IgnoreCase Свойство указывает, учитывается ли регистр в имени члена.
              </param>
      <param name="result">
                Результат операции получения.
                 Например, если для свойства вызывается метод, можно назначить значение свойства <paramref name="result" />.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев во время выполнения исключения.)
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>
              Предоставляет реализацию для операций, вызывающих объект.
               Классы, производные от <see cref="T:System.Dynamic.DynamicObject" /> класс может переопределить этот метод, чтобы задать динамическое поведение для операций, таких как вызов объекта или делегата.
            </summary>
      <param name="binder">
                Сведения об операции вызова.
              </param>
      <param name="args">
                Аргументы, переданные объекту во время операции вызова.
                 Например, для sampleObject(100) операции, где sampleObject является производным от <see cref="T:System.Dynamic.DynamicObject" /> класса <paramref name="args[0]" /> равно 100.
              </param>
      <param name="result">
                Результат вызова объекта.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев возникает исключение времени выполнения конкретного языка.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>
              Предоставляет реализацию для операций, вызывающих член.
               Классы, производные от <see cref="T:System.Dynamic.DynamicObject" /> класс может переопределить этот метод, чтобы задать динамическое поведение для операций, таких как вызов метода.
            </summary>
      <param name="binder">
                Предоставляет сведения о динамической операции.
                binder.Name Предоставляет имя члена, на котором выполняется динамическая операция.
                 Например, для инструкции sampleObject.SampleMethod(100), где sampleObject является экземпляром класса, производного от <see cref="T:System.Dynamic.DynamicObject" /> класса binder.Name возвращает «SampleMethod».
                binder.IgnoreCase Свойство указывает, учитывается ли регистр в имени члена.
              </param>
      <param name="args">
                Аргументы, переданные члену объекта во время операции вызова.
                 Например, для инструкции sampleObject.SampleMethod(100), где sampleObject является производным от <see cref="T:System.Dynamic.DynamicObject" /> класса <paramref name="args[0]" /> равно 100.
              </param>
      <param name="result">
                Результат вызова члена.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев конкретного языка во время выполнения исключения.)
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>
              Предоставляет реализацию для операций, задающих значение по индексу.
               Классы, производные от <see cref="T:System.Dynamic.DynamicObject" /> класс может переопределить этот метод, чтобы задать динамическое поведение для операций, осуществляющих доступ к объектам по заданному индексу.
            </summary>
      <param name="binder">
                Предоставляет сведения об операции.
              </param>
      <param name="indexes">
                Индексы, которые используются в операции.
                 Например, для sampleObject[3] = 10 операции в C# (sampleObject(3) = 10 в Visual Basic), где sampleObject является производным от <see cref="T:System.Dynamic.DynamicObject" /> класса <paramref name="indexes[0]" /> равно 3.
              </param>
      <param name="value">
                Значение в объект, имеющий указанный индекс.
                 Например, для sampleObject[3] = 10 операции в C# (sampleObject(3) = 10 в Visual Basic), где sampleObject является производным от <see cref="T:System.Dynamic.DynamicObject" /> класса <paramref name="value" /> равно 10.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев возникает исключение времени выполнения конкретного языка.
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>
              Предоставляет реализацию для операций, задающих значения членов.
               Классы, производные от <see cref="T:System.Dynamic.DynamicObject" /> класс может переопределить этот метод, чтобы задать динамическое поведение для операций, таких как значение для свойства.
            </summary>
      <param name="binder">
                Сведения об объекте, который называется динамической операции.
                binder.Name Предоставляет имя члена, к которому присваивается значение.
                 Например, для инструкции sampleObject.SampleProperty = "Test", где sampleObject является экземпляром класса, производного от <see cref="T:System.Dynamic.DynamicObject" /> класса binder.Name возвращает «SampleProperty».
                binder.IgnoreCase Свойство указывает, учитывается ли регистр в имени члена.
              </param>
      <param name="value">
                Значение, задаваемое для члена.
                 Например, sampleObject.SampleProperty = "Test", где sampleObject является экземпляром класса, производного от <see cref="T:System.Dynamic.DynamicObject" /> класса <paramref name="value" /> — «Test».
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев конкретного языка во время выполнения исключения.)
            </returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>
              Предоставляет реализацию унарные операции.
               Классы, производные от <see cref="T:System.Dynamic.DynamicObject" /> класс может переопределить этот метод, чтобы задать динамическое поведение для операций, таких как вычитание, увеличение или уменьшение.
            </summary>
      <param name="binder">
                Предоставляет сведения об унарной операции.
                binder.Operation Возвращает свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> объекта.
                 Например, для negativeNumber = -number инструкции, где number является производным от <see langword="DynamicObject" /> класса binder.Operation возвращает «Negate».
              </param>
      <param name="result">
                Результат унарной операции.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
               Если этот метод возвращает <see langword="false" />, связыватель времени выполнения языка определяет поведение.
               (В большинстве случаев конкретного языка во время выполнения исключения.)
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>
              Инициализирует новый <see langword="ExpandoObject" /> нет членов.
            </summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
              Добавляет указанное значение в коллекцию <see cref="T:System.Collections.Generic.ICollection`1" /> с указанным ключом.
            </summary>
      <param name="item">
                Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, представляющая ключ и значение, которые требуется добавить в коллекцию.
              </param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Clear">
      <summary>
              Удаляет все элементы из коллекции.
            </summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
              Определяет, содержит ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> указанные ключ и значение.
            </summary>
      <param name="item">
                Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, которую необходимо найти в коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.
              </param>
      <returns>
              Значение <see langword="true" />, если коллекция содержит указанные ключ и значение; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>
              Копирует элементы коллекции <see cref="T:System.Collections.Generic.ICollection`1" /> в массив типа <see cref="T:System.Collections.Generic.KeyValuePair`2" />, начиная с указанного индекса массива.
            </summary>
      <param name="array">
                Одномерный массив типа <see cref="T:System.Collections.Generic.KeyValuePair`2" />, в который копируются элементы <see cref="T:System.Collections.Generic.KeyValuePair`2" /> из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.
                 Индекс в массиве должен начинаться с нуля.
              </param>
      <param name="arrayIndex">
                Отсчитываемый от нуля индекс в массиве <paramref name="array" />, с которого начинается копирование.
              </param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
              Удаляет ключ и значение из коллекции.
            </summary>
      <param name="item">
                Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, представляющая ключ и значение, которые требуется удалить из коллекции.
              </param>
      <returns>
              Значение <see langword="true" />, если ключ и значение успешно найдены и удалены; в противном случае — значение <see langword="false" />.
               Этот метод возвращает <see langword="false" />, если ключ и значение не найдены в <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Add(System.String,System.Object)">
      <summary>
              Добавляет указанные ключ и значение в словарь.
            </summary>
      <param name="key">
                Объект, который используется в качестве ключа.
              </param>
      <param name="value">
                Объект, который используется в качестве значения.
              </param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#ContainsKey(System.String)">
      <summary>
              Определяет, содержит ли словарь указанный ключ.
            </summary>
      <param name="key">
                Ключ, который нужно найти в словаре.
              </param>
      <returns>
              Значение <see langword="true" />, если словарь содержит элемент с указанным ключом; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Remove(System.String)">
      <summary>
              Удаляет элемент с указанным ключом из <see cref="T:System.Collections.IDictionary" />.
            </summary>
      <param name="key">
                Ключ элемента, который требуется удалить.
              </param>
      <returns>
              Значение <see langword="true" />, если элемент успешно удален; в противном случае — значение <see langword="false" />.
               Этот метод также возвращает <see langword="false" />, если объект <paramref name="key" /> не был найден в исходной коллекции <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#TryGetValue(System.String,System.Object@)">
      <summary>
              Возвращает значение, связанное с заданным ключом.
            </summary>
      <param name="key">
                Ключ значения, которое необходимо получить.
              </param>
      <param name="value">
                При возврате из метода содержит значение, связанное с указанным ключом, если он найден; в противном случае — значение по умолчанию для типа параметра <paramref name="value" />.
                 Этот параметр передается неинициализированным.
              </param>
      <returns>
              Значение <see langword="true" />, если объект, реализующий <see cref="T:System.Collections.Generic.IDictionary`2" />, содержит элемент с указанным ключом; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий перебор элементов в коллекции.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который используется для прохода по коллекции.
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий перебор элементов в коллекции.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.
            </returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
              Предоставленный метаобъект отправляет динамические виртуальные методы.
               Объект можно инкапсулировать внутри другого метаобъект, чтобы обеспечить пользовательское поведение для отдельных действий.
            </summary>
      <param name="parameter">
                Выражение, которое представляет метаобъект диспетчеризации динамические виртуальные методы.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" /> типа.
            </returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.GetIndexBinder" />.
            </summary>
      <param name="callInfo">
                Сигнатура аргументов на сайте вызова.
              </param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции получения индекса.
            </summary>
      <param name="target">
                Целевой объект динамической операции получения индекса.
              </param>
      <param name="args">
                Массив аргументов динамической операции получения индекса.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции получения индекса, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции получения индекса.
              </param>
      <param name="indexes">
                Аргументы динамической операции получения индекса.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              При переопределении в производном классе выполняет привязку динамической операции получения индекса, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции получения индекса.
              </param>
      <param name="indexes">
                Аргументы динамической операции получения индекса.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.GetMemberBinder" />.
            </summary>
      <param name="name">
                Имя члена, который требуется получить.
              </param>
      <param name="ignoreCase">
                Имеет значение true, если имя должно сравниваться без учета регистра; значение false в противном случае.
              </param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции получения члена.
            </summary>
      <param name="target">
                Целевой объект динамической операции получения члена.
              </param>
      <param name="args">
                Массив аргументов динамической операции получения члена.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической операции получения члена, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции получения члена.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              При переопределении в производном классе выполняет привязку динамической операции получения члена, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции получения члена.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
              Возвращает <see cref="T:System.Dynamic.DynamicMetaObject" /> отвечает привязки операций выполняется для этого объекта.
            </summary>
      <param name="parameter">
                Представление дерева выражений значения среды выполнения.
              </param>
      <returns>
              <see cref="T:System.Dynamic.DynamicMetaObject" /> Для привязки этого объекта.
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.InvokeBinder" />.
            </summary>
      <param name="callInfo">
                Сигнатура аргументов на сайте вызова.
              </param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции вызова.
            </summary>
      <param name="target">
                Целевой объект динамической операции вызова.
              </param>
      <param name="args">
                Массив аргументов динамической операции вызова.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции вызова.
              </param>
      <param name="args">
                Аргументы динамической операции вызова.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции вызова.
              </param>
      <param name="args">
                Аргументы динамической операции вызова.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.InvokeMemberBinder" />.
            </summary>
      <param name="name">
                Имя вызываемого члена.
              </param>
      <param name="ignoreCase">
                значение true, если имя должно сравниваться без учета регистра; значение false в противном случае.
              </param>
      <param name="callInfo">
                Сигнатура аргументов на сайте вызова.
              </param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции вызова члена.
            </summary>
      <param name="target">
                Целевой объект динамической операции вызова члена.
              </param>
      <param name="args">
                Массив аргументов динамической операции вызова члена.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              При переопределении в производном классе выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции вызова.
              </param>
      <param name="args">
                Аргументы динамической операции вызова.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции вызова члена, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции вызова члена.
              </param>
      <param name="args">
                Аргументы динамической операции вызова члена.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              При переопределении в производном классе выполняет привязку динамической операции вызова члена, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции вызова члена.
              </param>
      <param name="args">
                Аргументы динамической операции вызова члена.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.SetIndexBinder" />.
            </summary>
      <param name="callInfo">
                Сигнатура аргументов на сайте вызова.
              </param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции задания индекса.
            </summary>
      <param name="target">
                Целевой объект динамической операции задания индекса.
              </param>
      <param name="args">
                Массив аргументов динамической операции задания индекса.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической операции задания индекса, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции задания индекса.
              </param>
      <param name="indexes">
                Аргументы динамической операции задания индекса.
              </param>
      <param name="value">
                Значение, задаваемое для коллекции.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              При переопределении в производном классе выполняет привязку динамической операции задания индекса, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции задания индекса.
              </param>
      <param name="indexes">
                Аргументы динамической операции задания индекса.
              </param>
      <param name="value">
                Значение, задаваемое для коллекции.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.SetMemberBinder" />.
            </summary>
      <param name="name">
                Имя члена, который требуется получить.
              </param>
      <param name="ignoreCase">
                Имеет значение true, если имя должно сравниваться без учета регистра; значение false в противном случае.
              </param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической операции задания члена.
            </summary>
      <param name="target">
                Целевой объект динамической операции задания члена.
              </param>
      <param name="args">
                Массив аргументов динамической операции задания члена.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической операции задания члена, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции задания члена.
              </param>
      <param name="value">
                Значение, задаваемое для члена.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической операции задания члена, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической операции задания члена.
              </param>
      <param name="value">
                Значение, задаваемое для члена.
              </param>
      <param name="errorSuggestion">
                Результат привязки для использования при сбое привязки или значение NULL.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.BinaryOperationBinder" />.
            </summary>
      <param name="operation">
                Вид унарной операции.
              </param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>
              Выполняет привязку динамической унарной операции.
            </summary>
      <param name="target">
                Целевой объект динамической операции.
              </param>
      <param name="args">
                Массив аргументов динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической унарной операции, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической унарной операции.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>
              Выполняет привязку динамической унарной операции, если не удается привязать динамический целевой объект.
            </summary>
      <param name="target">
                Целевой объект динамической унарной операции.
              </param>
      <param name="errorSuggestion">
                Привязка привести в случае сбоя привязки или значение null.
              </param>
      <returns>
              Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.
            </returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)">
      <summary>
              Создает из существующего файла размещенный в памяти файл с заданными режимом доступа, именем, режимом наследования и емкостью.
            </summary>
      <param name="fileStream">
                Поток существующего файла.
              </param>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
                 Укажите 0, чтобы задать емкость, равную размер <paramref name="filestream" />.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
              
                Этот параметр не может быть присвоено <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.
                 Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.
              </param>
      <param name="leaveOpen">
                Значение, указывающее, следует ли закрывать исходного файла потока, когда <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> удаляется.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> имеет значение <see langword="null" /> или является пустой строкой.
                
                  -или-
                
                  <paramref name="capacity" /> и длину файла равны нулю.
                
                  -или-
                
                  <paramref name="access" /> имеет значение <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> или <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> значение перечисления, которое не допускается.
                
                  -или-
                
                  <paramref name="access" /> имеет значение <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> и <paramref name="capacity" /> больше, чем длина <see langword="filestream" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="fileStream" />  — <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="capacity" /> меньше нуля.
                
                  -или-
                
                  <paramref name="capacity" /> меньше, чем размер файла.
                
                  -или-
                
                  <paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым значением перечисления <see cref="T:System.IO.HandleInheritability" />.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)">
      <summary>
              Создает размещенный в памяти файл с указанным именем, емкостью, тип доступа, разрешения безопасности, режимом наследования и требованием к ликвидации из файла на диске.
            </summary>
      <param name="fileStream">
                <paramref name="fileStream" /> К файлу для сопоставления.
              </param>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
                 Чтобы задать емкость, равную размеру файла на диске, указывается значение 0.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
              
                Этот параметр не может быть присвоено <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.
              </param>
      <param name="memoryMappedFileSecurity">
                Разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами.
              
                Этот параметр может иметь значение <see langword="null" />.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.
                 Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.
              </param>
      <param name="leaveOpen">
                <see langword="true" /> Чтобы не удалять <paramref name="fileStream" /> после <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> закрытия; <see langword="false" /> метода Dispose <paramref name="fileStream" />.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                
                  -или-
                
                  <paramref name="capacity" /> и длину файла равны нулю.
                
                  -или-
                
                  <paramref name="access" /> имеет значение <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> или <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> значение перечисления, которое не допускается.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="fileStream" /> или <paramref name="mapname" />  — <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="capacity" /> меньше нуля.
                
                  -или-
                
                  <paramref name="capacity" /> меньше, чем размер файла.
                
                  -или-
                
                  <paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым <see cref="T:System.IO.HandleInheritability" /> значение перечисления.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <paramref name="fileStream" /> Закрыто.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  <paramref name="access" /> имеет значение <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" /> при <paramref name="fileStream" />в доступе <see cref="F:System.IO.FileAccess.Read" /> или <see cref="F:System.IO.FileAccess.Write" />.
                </exception>
      <exception cref="T:System.IO.IOException">
                  <paramref name="mapName" /> уже существует.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)">
      <summary>
              Создает размещенный в памяти файл из файла на диске.
            </summary>
      <param name="path">
                Путь к файлу для сопоставления.
              </param>
      <returns>
              Размещенный в памяти файл.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> является пустой строкой, содержит только пробелы или имеет один или несколько недопустимых символов, как определяется <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> метод.
                
                  -или-
                
                  <paramref name="path" /> ссылается на недопустимый устройства.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="path" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Ошибка ввода/вывода.
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  <paramref name="path" /> превышает максимальную длину, определенную операционной системой.
                   В Windows пути должны содержать менее 248 символов и имена файлов должны содержать не более 260 знаков.
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  Вызывающий объект не имеет необходимых разрешений для файла.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)">
      <summary>
              Создает размещенный в памяти файл с заданным режимом доступа из файла на диске.
            </summary>
      <param name="path">
                Путь к файлу для сопоставления.
              </param>
      <param name="mode">
                Режим доступа; должен быть <see cref="F:System.IO.FileMode.Open" />.
              </param>
      <returns>
              Размещенный в памяти файл с заданным режимом доступа.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> является пустой строкой, содержит только пробелы или имеет один или несколько недопустимых символов, как определяется <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> метод.
                
                  -или-
                
                  <paramref name="path" /> ссылается на недопустимый устройства.
                
                  -или-
                
                  Свойство <paramref name="mode" /> имеет значение <see cref="F:System.IO.FileMode.Append" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="path" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.IO.IOException">
                  <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" />, <see cref="F:System.IO.FileMode.CreateNew" />, or <see cref="F:System.IO.FileMode.Truncate" />.
                
                  -или-
                
                  <paramref name="mode" /> — <see cref="F:System.IO.FileMode.OpenOrCreate" /> и файл на диске не существует.
                
                  -или-
                
                  Ошибка ввода/вывода.
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  <paramref name="path" /> превышает максимальную длину, определенную операционной системой.
                   В Windows пути должны содержать менее 248 символов и имена файлов должны содержать не более 260 знаков.
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  Вызывающий объект не имеет необходимых разрешений для файла.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)">
      <summary>
              Создает из файла на диске размещенный в памяти файл с заданным режимом доступа и именем.
            </summary>
      <param name="path">
                Путь к файлу для сопоставления.
              </param>
      <param name="mode">
                Режим доступа; должен быть <see cref="F:System.IO.FileMode.Open" />.
              </param>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <returns>
              Размещенный в памяти файл с заданными именем и режимом доступа.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> является пустой строкой, содержит только пробелы или имеет один или несколько недопустимых символов, как определяется <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> метод.
                
                  -или-
                
                  <paramref name="path" /> ссылается на недопустимый устройства.
                
                  -или-
                
                  Параметр <paramref name="mapName" /> равен пустой строке.
                
                  -или-
                
                  Свойство <paramref name="mode" /> имеет значение <see cref="F:System.IO.FileMode.Append" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="path" /> или <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.IO.IOException">
                  <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" />, <see cref="F:System.IO.FileMode.CreateNew" />, or <see cref="F:System.IO.FileMode.Truncate" />.
                
                  -или-
                
                  <paramref name="mode" /> — <see cref="F:System.IO.FileMode.OpenOrCreate" /> и файл на диске не существует.
                
                  -или-
                
                  Ошибка ввода/вывода.
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  <paramref name="path" /> превышает максимальную длину, определенную операционной системой.
                   В Windows пути должны содержать менее 248 символов и имена файлов должны содержать не более 260 знаков.
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  Вызывающий объект не имеет необходимых разрешений для файла.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)">
      <summary>
              Создает из файла на диске размещенный в памяти файл с заданным режимом доступа, именем и емкостью.
            </summary>
      <param name="path">
                Путь к файлу для сопоставления.
              </param>
      <param name="mode">
                Режим доступа; может быть любой из <see cref="T:System.IO.FileMode" /> значений перечисления, за исключением <see cref="F:System.IO.FileMode.Append" />.
              </param>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
                 Чтобы задать емкость, равную размеру файла на диске, указывается значение 0.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="path" /> является пустой строкой, содержит только пробелы или имеет один или несколько недопустимых символов, как определяется <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> метод.
                
                  -или-
                
                  <paramref name="path" /> ссылается на недопустимый устройства.
                
                  -или-
                
                  Параметр <paramref name="mapName" /> равен пустой строке.
                
                  -или-
                
                  Свойство <paramref name="mode" /> имеет значение <see cref="F:System.IO.FileMode.Append" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="path" /> или <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="capacity" /> больше, чем размер логического адресного пространства.
                
                  -или-
                
                  Значение параметра <paramref name="capacity" /> меньше нуля.
                
                  -или-
                
                  <paramref name="capacity" /> меньше, чем размер файла (но не ноль).
                
                  -или-
                
                  <paramref name="capacity" /> равно нулю, а размер файла на диске также — ноль.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Ошибка ввода/вывода.
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  <paramref name="path" /> превышает максимальную длину, определенную операционной системой.
                   В Windows пути должны содержать менее 248 символов и имена файлов должны содержать не более 260 знаков.
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  Вызывающий объект не имеет необходимых разрешений для файла.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>
              Создает из файла на диске размещенный в памяти файл с указанными режимом доступа, именем, емкостью и типом доступа.
            </summary>
      <param name="path">
                Путь к файлу для сопоставления.
              </param>
      <param name="mode">
                Режим доступа; может быть любой из <see cref="T:System.IO.FileMode" /> значений перечисления, за исключением <see cref="F:System.IO.FileMode.Append" />.
              </param>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
                 Чтобы задать емкость, равную размеру файла на диске, указывается значение 0.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                
                  -или-
                
                  <paramref name="access" /> не является разрешенным значением.
                
                  -или-
                
                  <paramref name="path" /> Указывает пустой файл.
                
                  -или-
                
                  <paramref name="access" /> указывается как <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> и емкость превышает размер файла, заданного <paramref name="path" />.
                
                  -или-
                
                  Свойство <paramref name="mode" /> имеет значение <see cref="F:System.IO.FileMode.Append" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="path" /> или <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="capacity" /> больше, чем размер логического адресного пространства.
                
                  -или-
                
                  Значение параметра <paramref name="capacity" /> меньше нуля.
                
                  -или-
                
                  <paramref name="capacity" /> меньше, чем размер файла (но не ноль).
                
                  -или-
                
                  <paramref name="capacity" /> равно нулю, а размер файла на диске также — ноль.
                
                  -или-
                
                  <paramref name="access" /> не является определенным <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> значение.
                
                  -или-
                
                  Размер файла обозначаются <paramref name="path" /> больше, чем <paramref name="capacity" />.
                </exception>
      <exception cref="T:System.IO.IOException">
                  -или-
                
                  Ошибка ввода/вывода.
                </exception>
      <exception cref="T:System.IO.PathTooLongException">
                  <paramref name="path" /> превышает максимальную длину, определенную операционной системой.
                   В Windows пути должны содержать менее 248 символов и имена файлов должны содержать не более 260 знаков.
                </exception>
      <exception cref="T:System.Security.SecurityException">
                  Вызывающий объект не имеет необходимых разрешений для файла.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)">
      <summary>
              Создает размещенный в памяти файл с заданной емкостью в системной памяти.
            </summary>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
              </param>
      <returns>
              Размещенный в памяти файл с заданными именем и емкостью.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="capacity" /> не больше нуля.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>
              Создает размещенный в памяти файл с заданной емкостью и типом доступа в системной памяти.
            </summary>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
                 Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                
                  -или-
                
                  Параметр <paramref name="access" /> задан как доступный только для записи с помощью значения перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="capacity" /> не больше нуля.
                
                  -или-
                
                  <paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)">
      <summary>
              Создает размещенный в памяти файл с заданными именем, емкостью, типом доступа, параметрами выделения памяти и режимом наследования.
            </summary>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
                 Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.
              </param>
      <param name="options">
                Побитовое сочетание значений перечисления, которое задает параметры выделения памяти для размещенного в памяти файла.
              </param>
      <param name="inheritability">
                Значение, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.
                 Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                
                  -или-
                
                  Параметр <paramref name="access" /> задан как доступный только для записи с помощью значения перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="capacity" /> не больше нуля.
                
                  -или-
                
                  <paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым значением <see cref="T:System.IO.HandleInheritability" />.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>
              Создает размещенный в памяти файл с заданной емкостью, типом доступа, выделением памяти, настройками безопасности и режимом наследования в системной памяти.
            </summary>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
                 Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.
              </param>
      <param name="options">
                Побитовое сочетание значений перечисления, которое задает параметры выделения памяти для размещенного в памяти файла.
              </param>
      <param name="memoryMappedFileSecurity">
                Разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами.
              
                Этот параметр может иметь значение <see langword="null" />.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.
                 Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                
                  -или-
                
                  Параметр <paramref name="access" /> задан как доступный только для записи с помощью значения перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="capacity" /> не больше нуля.
                
                  -или-
                
                  <paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым значением перечисления <see cref="T:System.IO.HandleInheritability" />.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)">
      <summary>
              Создает или открывает размещенный в памяти файл с заданной емкостью в системной памяти.
            </summary>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
              </param>
      <returns>
              Размещенный в памяти файл с заданным именем и размером.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="capacity" /> больше, чем размер логического адресного пространства.
                
                  -или-
                
                  Значение <paramref name="capacity" /> не больше нуля.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>
              Создает или открывает размещенный в памяти файл с заданной емкостью и типом доступа в системной памяти.
            </summary>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
                 Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                
                  -или-
                
                  Параметр <paramref name="access" /> задан как доступный только для записи с помощью значения перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="capacity" /> больше, чем размер логического адресного пространства.
                
                  -или-
                
                  Значение <paramref name="capacity" /> не больше нуля.
                
                  -или-
                
                  <paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  В операционной системе запрещен указанный доступ к файлу; Например, значение доступа <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> или <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, но файл или каталог доступен только для чтения.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)">
      <summary>
              Создает пустой размещенный в памяти файл или открывает существующий, если файл с таким именем уже имеется.
               При открытии существующего файла емкость, параметры и аргументы памяти игнорируются.
            </summary>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
                 Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.
              </param>
      <param name="options">
                Побитовое сочетание значений, которое задает параметры выделения памяти для файла.
              </param>
      <param name="inheritability">
                Значение, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.
                 Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                
                  -или-
                
                  Параметр <paramref name="access" /> задан как доступный только для записи с помощью значения перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="capacity" /> больше, чем размер логического адресного пространства.
                
                  -или-
                
                  Значение <paramref name="capacity" /> не больше нуля.
                
                  -или-
                
                  <paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым <see cref="T:System.IO.HandleInheritability" /> значение перечисления.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  В операционной системе запрещен указанный доступ к файлу; Например, значение доступа <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> или <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, но файл или каталог доступен только для чтения.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>
              Создает или открывает размещенный в памяти файл с заданной емкостью, типом доступа, выделением памяти, разрешениями безопасности и режимом наследования в системной памяти.
            </summary>
      <param name="mapName">
                Имя, присваиваемое размещенному в памяти файлу.
              </param>
      <param name="capacity">
                Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
                 Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.
              </param>
      <param name="options">
                Побитовое сочетание значений перечисления, которое задает параметры выделения памяти для размещенного в памяти файла.
              </param>
      <param name="memoryMappedFileSecurity">
                Разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами.
              
                Этот параметр может иметь значение <see langword="null" />.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.
                 Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                
                  -или-
                
                  Параметр <paramref name="access" /> задан как доступный только для записи с помощью значения перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="capacity" /> больше, чем размер логического адресного пространства.
                
                  -или-
                
                  Значение <paramref name="capacity" /> не больше нуля.
                
                  -или-
                
                  <paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым <see cref="T:System.IO.HandleInheritability" /> значение перечисления.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  В операционной системе запрещен указанный <paramref name="access" /> файл; например, <paramref name="access" /> имеет значение <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> или <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, но файл или каталог доступен только для чтения.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor">
      <summary>
              Создает <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> сопоставляется с представлением размещенного в памяти файла.
            </summary>
      <returns>
              Блок оперативной памяти.
            </returns>
      <exception cref="T:System.UnauthorizedAccessException">
                  Доступ к файлу памяти не авторизован.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)">
      <summary>
              Создает <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> сопоставляется с представлением размещенного в памяти файла и имеет заданное смещение и размер.
            </summary>
      <param name="offset">
                Байт, с которого должно начинаться представление.
              </param>
      <param name="size">
                Размер представления.
                 Укажите 0 (ноль), чтобы создать представление, которое начинается с <paramref name="offset" /> и заканчивается приблизительно в конце файла размещенный в памяти.
              </param>
      <returns>
              Блок оперативной памяти.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="offset" /> или <paramref name="size" /> имеет отрицательное значение.
                
                  -или-
                
                  <paramref name="size" /> больше логического адресного пространства.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  Доступ к файлу памяти не авторизован.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Ошибка ввода/вывода.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>
              Создает <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> сопоставляется с представлением размещенного в памяти файла и который имеет заданное смещение, размер и ограничения доступа.
            </summary>
      <param name="offset">
                Байт, с которого должно начинаться представление.
              </param>
      <param name="size">
                Размер представления.
                 Укажите 0 (ноль), чтобы создать представление, которое начинается с <paramref name="offset" /> и заканчивается приблизительно в конце файла размещенный в памяти.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
                 Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.
              </param>
      <returns>
              Блок оперативной памяти.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="offset" /> или <paramref name="size" /> имеет отрицательное значение.
                
                  -или-
                
                  <paramref name="size" /> больше логического адресного пространства.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  <paramref name="access" /> Недопустимый файл отображения памяти.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Ошибка ввода/вывода.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream">
      <summary>
              Создает поток, который сопоставляется с представлением размещенного в памяти файла.
            </summary>
      <returns>
              Поток памяти.
            </returns>
      <exception cref="T:System.UnauthorizedAccessException">
                  Доступ к файлу памяти не авторизован.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)">
      <summary>
              Создает поток, который сопоставляется с представлением размещенного в памяти файла и имеет заданное смещение и размер.
            </summary>
      <param name="offset">
                Байт, с которого должно начинаться представление.
              </param>
      <param name="size">
                Размер представления.
                 Укажите 0 (ноль), чтобы создать представление, которое начинается с <paramref name="offset" /> и заканчивается приблизительно в конце файла размещенный в памяти.
              </param>
      <returns>
              Поток памяти с заданными смещением и размером.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="offset" /> или <paramref name="size" /> имеет отрицательное значение.
                
                  -или-
                
                  <paramref name="size" /> больше логического адресного пространства.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  Доступ к файлу памяти не авторизован.
                </exception>
      <exception cref="T:System.IO.IOException">
                  <paramref name="size" /> больше, чем общий объем виртуальной памяти.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>
              Создает поток, который сопоставляется с представлением размещенного в памяти файла и имеет заданное смещение, размер и тип доступа.
            </summary>
      <param name="offset">
                Байт, с которого должно начинаться представление.
              </param>
      <param name="size">
                Размер представления.
                 Укажите 0 (ноль), чтобы создать представление, которое начинается с <paramref name="offset" /> и заканчивается приблизительно в конце файла размещенный в памяти.
              </param>
      <param name="access">
                Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.
                 Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.
              </param>
      <returns>
              Поток памяти с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="offset" /> или <paramref name="size" /> имеет отрицательное значение.
                
                  -или-
                
                  <paramref name="size" /> больше логического адресного пространства.
                
                  -или-
                
                  <paramref name="access " />не является допустимым <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> значение перечисления.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  <paramref name="access" /> Недопустимый файл отображения памяти.
                </exception>
      <exception cref="T:System.IO.IOException">
                  <paramref name="size" /> больше, чем общий объем виртуальной памяти.
                
                  -или-
                
                  <paramref name="access" /> Недопустимый файл отображения памяти.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose">
      <summary>
              Освобождает все ресурсы, занятые модулем <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />.
            </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />, а при необходимости освобождает также управляемые ресурсы.
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl">
      <summary>
              Возвращает элемент управления доступом к ресурсу размещенного в памяти файла.
            </summary>
      <returns>
              Разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Внутренний вызов для установки информации о безопасности не удалось.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Внутренний вызов для установки информации о безопасности не удалось.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Размещенный в памяти файл не будет закрыт.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Является ли текущая платформа Windows 98 или более ранней версии.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  Внутренний вызов для установки информации о безопасности не удалось.
                
                  -или-
                
                  Размещенный в памяти файл был открыт как <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> только.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)">
      <summary>
              Открывает существующий размещенный в памяти файл с заданным именем в системной памяти.
            </summary>
      <param name="mapName">
                Имя размещенного в памяти файла, который необходимо открыть.
              </param>
      <returns>
              Размещенный в памяти файл с заданным именем.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  Файл, указанный для <paramref name="mapName" /> не существует.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)">
      <summary>
              Открывает существующий размещенный в памяти файл с заданными именем и правами доступа в системной памяти.
            </summary>
      <param name="mapName">
                Имя размещенного в памяти файла, который необходимо открыть.
              </param>
      <param name="desiredAccessRights">
                Одно из значений перечисления, определяющее права доступа, применяемые к размещенному в памяти файлу.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="desiredAccessRights" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" />.
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  Файл, указанный для <paramref name="mapName" /> не существует.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)">
      <summary>
              Открывает существующий размещенный в памяти файл с заданными именем, правами доступа и режимом наследования в системной памяти.
            </summary>
      <param name="mapName">
                Имя размещенного в памяти файла, который необходимо открыть.
              </param>
      <param name="desiredAccessRights">
                Одно из значений перечисления, определяющее права доступа, применяемые к размещенному в памяти файлу.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.
                 Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.
              </param>
      <returns>
              Размещенный в памяти файл с заданными характеристиками.
            </returns>
      <exception cref="T:System.ArgumentException">
                  Параметр <paramref name="mapName" /> равен пустой строке.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="mapName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="desiredAccessRights" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" />.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым значением перечисления <see cref="T:System.IO.HandleInheritability" />.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  Запрошенный доступ недопустим для файла размещенный в памяти.
                </exception>
      <exception cref="T:System.IO.FileNotFoundException">
                  Файл, указанный для <paramref name="mapName" /> не существует.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)">
      <summary>
              Задает элемент управления доступом к ресурсу размещенного в памяти файла.
            </summary>
      <param name="memoryMappedFileSecurity">
                Разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="memoryMappedFileSecurity" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Внутренний вызов для установки информации о безопасности не удалось.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Внутренний вызов для установки информации о безопасности не удалось.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  Внутренний вызов для установки информации о безопасности не удалось.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" />.
            </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush">
      <summary>
              Очищает все буферы для этого представления и вызывает запись всех буферизованных данных в базовый файл.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  Методы были вызваны после закрытия метода доступа.
                </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.Flush">
      <summary>
              Очищает все буферы для этого потока и вызывает запись всех буферизованных данных в базовый файл.
            </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SetLength(System.Int64)">
      <summary>
              Устанавливает длину текущего потока.
            </summary>
      <param name="value">
                Нужная длина текущего потока в байтах.
              </param>
      <exception cref="T:System.NotSupportedException">
                  Этот метод не поддерживается.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> класс из указанного дескриптора.
            </summary>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              
                Анонимные каналы можно только в одном направлении, поэтому <paramref name="direction" /> нельзя установить равным <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
              </param>
      <param name="safePipeHandle">
                Безопасный дескриптор для канала, который <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> инкапсулируется объектом.
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="safePipeHandle " />не является допустимым дескриптором.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="safePipeHandle" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Параметру <paramref name="direction" /> задается значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Произошла ошибка ввода-вывода, например ошибка диска.
                
                  -или-
                
                  Поток закрыт.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> с указанным направлением канала и строковое представление дескриптора канала.
            </summary>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              
                Анонимные каналы можно только в одном направлении, поэтому <paramref name="direction" /> нельзя установить равным <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
              </param>
      <param name="pipeHandleAsString">
                Строка, представляющая дескриптор канала.
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeHandleAsString" /> имеет недопустимый дескриптор.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeHandleAsString" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Параметру <paramref name="direction" /> задается значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> класса заданное строковое представление дескриптора канала.
            </summary>
      <param name="pipeHandleAsString">
                Строка, представляющая дескриптор канала.
              </param>
      <exception cref="T:System.IO.IOException">
                  <paramref name="pipeHandleAsString" /> не допустимого дескриптора канала.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.Finalize">
      <summary>
              Освобождает неуправляемые ресурсы и выполняет другие операции очистки перед <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> экземпляр будет утилизирован во время сборки мусора.
            </summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />.
            </summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> класса с указанным направлением канала.
            </summary>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              
                Анонимные каналы можно только в одном направлении, поэтому <paramref name="direction" /> нельзя установить равным <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
              </param>
      <exception cref="T:System.NotSupportedException">
                  Параметру <paramref name="direction" /> задается значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> класс из дескрипторов указанный канал.
            </summary>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              
                Анонимные каналы можно только в одном направлении, поэтому <paramref name="direction" /> нельзя установить равным <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
              </param>
      <param name="serverSafePipeHandle">
                Безопасный дескриптор для канала, который <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> инкапсулируется объектом.
              </param>
      <param name="clientSafePipeHandle">
                Безопасный дескриптор для <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> объекта.
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="serverSafePipeHandle" /> или <paramref name="clientSafePipeHandle" /> неправильный дескриптор.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="serverSafePipeHandle" /> или <paramref name="clientSafePipeHandle" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Параметру <paramref name="direction" /> задается значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Произошла ошибка ввода-вывода, например ошибка диска.
                
                  -или-
                
                  Поток закрыт.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> класса с режимом указанный канал направлением и режимом наследования.
            </summary>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              
                Анонимные каналы можно только в одном направлении, поэтому <paramref name="direction" /> нельзя установить равным <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, может ли базовый дескриптор наследоваться дочерними процессами.
                 Необходимо указать либо <see cref="F:System.IO.HandleInheritability.None" /> или <see cref="F:System.IO.HandleInheritability.Inheritable" />.
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="inheritability" /> не установлено значение <see cref="F:System.IO.HandleInheritability.None" /> или <see cref="F:System.IO.HandleInheritability.Inheritable" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Параметру <paramref name="direction" /> задается значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> класса с указанным направлением канала, режимом и размер буфера.
            </summary>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              
                Анонимные каналы можно только в одном направлении, поэтому <paramref name="direction" /> нельзя установить равным <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, может ли базовый дескриптор наследоваться дочерними процессами.
                 Необходимо указать либо <see cref="F:System.IO.HandleInheritability.None" /> или <see cref="F:System.IO.HandleInheritability.Inheritable" />.
              </param>
      <param name="bufferSize">
                Размер буфера.
                 Это значение должно быть больше или равно 0.
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="inheritability" /> не установлено значение <see cref="F:System.IO.HandleInheritability.None" /> или <see cref="F:System.IO.HandleInheritability.Inheritable" />.
                
                  -или-
                
                  Значение параметра <paramref name="bufferSize" /> меньше 0.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Параметру <paramref name="direction" /> задается значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> класса с указанным направлением канала, режимом, размером буфера и безопасности канала.
            </summary>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              
                Анонимные каналы можно только в одном направлении, поэтому <paramref name="direction" /> нельзя установить равным <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, может ли базовый дескриптор наследоваться дочерними процессами.
              </param>
      <param name="bufferSize">
                Размер буфера.
                 Это значение должно быть больше или равно 0.
              </param>
      <param name="pipeSecurity">
                Объект, определяющий правила управления доступом и аудита безопасности для канала.
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="inheritability" /> не установлено значение <see cref="F:System.IO.HandleInheritability.None" /> или <see cref="F:System.IO.HandleInheritability.Inheritable" />.
                
                  -или-
                
                  Значение параметра <paramref name="bufferSize" /> меньше 0.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Параметру <paramref name="direction" /> задается значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
      <summary>
              Закрывает локальную копию <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> дескриптором объекта.
            </summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.Finalize">
      <summary>
              Освобождает неуправляемые ресурсы и выполняет другие операции очистки перед <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> экземпляр будет утилизирован во время сборки мусора.
            </summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
      <summary>
              Получает подключенный <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> дескриптором объекта в виде строки.
            </summary>
      <returns>
              Строка, представляющая подключенные <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> дескриптором объекта.
            </returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> класс для указанного дескриптора канала с указанным направлением канала.
            </summary>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="isAsync">
                Значение <see langword="true" />, если дескриптор открыт асинхронно; в противном случае — значение <see langword="false" />.
              </param>
      <param name="isConnected">
                <see langword="true" /> Чтобы указать, что канал подключен; в противном случае — <see langword="false" />.
              </param>
      <param name="safePipeHandle">
                Безопасный дескриптор для канала, который <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> инкапсулируется объектом.
              </param>
      <exception cref="T:System.IO.IOException">
                  <paramref name="safePipeHandle" /> не является допустимым дескриптором.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="safePipeHandle" /> не является допустимым дескриптором.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="safePipeHandle" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Поток закрыт.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> класса с заданным именем канала.
            </summary>
      <param name="pipeName">
                Имя канала.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> представляет собой строку нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> класса с заданными именами канала и сервера.
            </summary>
      <param name="serverName">
                Имя удаленного компьютера, к которому нужно подключиться, или значение ".", чтобы указать локальный компьютер.
              </param>
      <param name="pipeName">
                Имя канала.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> или <paramref name="serverName" /> является строкой нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeAccessRights,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> класса с заданными именами канала и сервера и параметрами канала, уровнем олицетворения безопасности и режимом.
            </summary>
      <param name="serverName">
                Имя удаленного компьютера, к которому нужно подключиться, или значение ".", чтобы указать локальный компьютер.
              </param>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="desiredAccessRights">
                Одно из значений перечисления, задающее требуемые права доступа для канала.
              </param>
      <param name="options">
                Одно из значений перечисления, определяющее способ открытия или создания канала.
              </param>
      <param name="impersonationLevel">
                Одно из значений перечисления, определяющее уровень олицетворения безопасности.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, будет ли базовый дескриптор наследоваться дочерними процессами.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> или <paramref name="serverName" /> является строкой нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.
                
                  -или-
                
                  <paramref name="impersonationLevel" /> не является допустимым значением <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым значением <see cref="T:System.IO.HandleInheritability" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> класса с заданными именами канала и сервера и указанным направлением канала.
            </summary>
      <param name="serverName">
                Имя удаленного компьютера, к которому нужно подключиться, или значение ".", чтобы указать локальный компьютер.
              </param>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> или <paramref name="serverName" /> является строкой нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> класса с заданными именами канала и сервера, направлением канала и параметрами канала.
            </summary>
      <param name="serverName">
                Имя удаленного компьютера, к которому нужно подключиться, или значение ".", чтобы указать локальный компьютер.
              </param>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="options">
                Одно из значений перечисления, определяющее способ открытия или создания канала.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> или <paramref name="serverName" /> является строкой нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> класса с заданными именами канала и сервера и указанным направлением канала, параметрами канала и уровнем олицетворения безопасности.
            </summary>
      <param name="serverName">
                Имя удаленного компьютера, к которому нужно подключиться, или значение ".", чтобы указать локальный компьютер.
              </param>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="options">
                Одно из значений перечисления, определяющее способ открытия или создания канала.
              </param>
      <param name="impersonationLevel">
                Одно из значений перечисления, определяющее уровень олицетворения безопасности.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> или <paramref name="serverName" /> является строкой нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.
                
                  -или-
                
                  <paramref name="impersonationLevel" /> не является допустимым значением <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> класса с заданными именами канала и сервера и указанным направлением канала, параметрами канала, уровнем олицетворения безопасности и режимом.
            </summary>
      <param name="serverName">
                Имя удаленного компьютера, к которому нужно подключиться, или значение ".", чтобы указать локальный компьютер.
              </param>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="options">
                Одно из значений перечисления, определяющее способ открытия или создания канала.
              </param>
      <param name="impersonationLevel">
                Одно из значений перечисления, определяющее уровень олицетворения безопасности.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, будет ли базовый дескриптор наследоваться дочерними процессами.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> или <paramref name="serverName" /> является строкой нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.
                
                  -или-
                
                  <paramref name="impersonationLevel" /> не является допустимым значением <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым значением <see cref="T:System.IO.HandleInheritability" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect">
      <summary>
              Подключается к ожидающему серверу с бесконечным значением тайм-аута.
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  Клиент уже подключен.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)">
      <summary>
              Устанавливает подключение к ожидающему серверу в рамках заданного периода ожидания.
            </summary>
      <param name="timeout">
                Количество миллисекунд, определяющее время ожидания соединения с сервером.
              </param>
      <exception cref="T:System.TimeoutException">
                  Не удалось подключиться к серверу в указанном <paramref name="timeout" /> период.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="timeout" /> меньше 0 и не задано значение <see cref="F:System.Threading.Timeout.Infinite" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Клиент уже подключен.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Данный сервер подключен к другому клиенту и истечения времени ожидания.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync">
      <summary>
              Асинхронно подключается к ожидающему серверу с бесконечным периодом тайм-аута.
            </summary>
      <returns>
              Задача, представляющая асинхронную операцию подключения.
            </returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Int32)">
      <summary>
              Асинхронно подключается к ожидающему серверу с указанным периодом тайм-аута.
            </summary>
      <param name="timeout">
                Количество миллисекунд, определяющее время ожидания соединения с сервером.
              </param>
      <returns>
              Задача, представляющая асинхронную операцию подключения.
            </returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>
              Асинхронно подключается к ожидающему серверу с указанным периодом тайм-аута и отслеживает запросы отмены.
            </summary>
      <param name="timeout">
                Количество миллисекунд, определяющее время ожидания соединения с сервером.
              </param>
      <param name="cancellationToken">
                Токен для отслеживания запросов отмены.
                 Значение по умолчанию — <see cref="P:System.Threading.CancellationToken.None" />.
              </param>
      <returns>
              Задача, представляющая асинхронную операцию подключения.
            </returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.ConnectAsync(System.Threading.CancellationToken)">
      <summary>
              Асинхронно подключается к ожидающему серверу и отслеживает запросы отмены.
            </summary>
      <param name="cancellationToken">
                Токен для отслеживания запросов отмены.
                 Значение по умолчанию — <see cref="P:System.Threading.CancellationToken.None" />.
              </param>
      <returns>
              Задача, представляющая асинхронную операцию подключения.
            </returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Finalize">
      <summary>
              Освобождает неуправляемые ресурсы и выполняет другие операции очистки перед <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> экземпляр будет утилизирован во время сборки мусора.
            </summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> класс из указанного дескриптора канала.
            </summary>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="isAsync">
                Значение <see langword="true" />, если дескриптор открыт асинхронно; в противном случае — значение <see langword="false" />.
              </param>
      <param name="isConnected">
                <see langword="true" /> Чтобы указать, что канал подключен; в противном случае — <see langword="false" />.
              </param>
      <param name="safePipeHandle">
                Безопасный дескриптор для канала, который <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> инкапсулируется объектом.
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="safePipeHandle" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="safePipeHandle" /> имеет недопустимый дескриптор.
                </exception>
      <exception cref="T:System.IO.IOException">
                  <paramref name="safePipeHandle" /> не допустимого дескриптора канала.
                
                  -или-
                
                  Превышено максимальное число экземпляров сервера.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> класса с заданным именем канала.
            </summary>
      <param name="pipeName">
                Имя канала.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> представляет собой строку нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="pipeName" /> содержит двоеточие (»:»).
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95 не поддерживаются.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Превышено максимальное число экземпляров сервера.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> класса с заданным именем канала и направлением канала.
            </summary>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> представляет собой строку нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="pipeName" /> содержит двоеточие (»:»).
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95 не поддерживаются.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Превышено максимальное число экземпляров сервера.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> с заданными именем и направлением канала, а также максимальным количеством экземпляров сервера.
            </summary>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="maxNumberOfServerInstances">
                Максимальное число экземпляров сервера с одинаковыми именами.
                 Для этого значения можно передать <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> представляет собой строку нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Для <paramref name="pipeName" /> задано значение anonymous.
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  Требуется неотрицательное число.
                
                  -или-
                
                  Для параметра <paramref name="maxNumberofServerInstances" /> задано значение меньше -1 или больше 254 (значение -1 представляет собой <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />).
                
                  -или-
                
                  Требуется параметр <see cref="F:System.IO.HandleInheritability.None" /> или <see cref="F:System.IO.HandleInheritability.Inheritable" />.
                
                  -или-
                
                  Права доступа ограничены флагами <see cref="F:System.IO.Pipes.PipeAccessRights.ChangePermissions" />, <see cref="F:System.IO.Pipes.PipeAccessRights.TakeOwnership" /> и <see cref="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="pipeName" /> содержит двоеточие (":").
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Используется неподдерживаемая операционная система: Windows Millennium Edition, Windows 98 или Windows 95.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Превышено максимальное число экземпляров сервера.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> класса с заданным именем канала, направлением канала, максимальным количеством экземпляров сервера и режимом передачи.
            </summary>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="maxNumberOfServerInstances">
                Максимальное число экземпляров сервера с одинаковыми именами.
                 Можно передать <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> для этого значения.
              </param>
      <param name="transmissionMode">
                Одно из значений перечисления, определяющее режим передачи канала.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> представляет собой строку нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  <paramref name="maxNumberofServerInstances" /> меньше -1 или больше, чем 254 (-1 указывает <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="pipeName" /> содержит двоеточие (»:»).
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95 не поддерживаются.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Превышено максимальное число экземпляров сервера.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> класса с заданным именем канала, направлением канала, максимальное число экземпляров сервера, режимом передачи и параметрами канала.
            </summary>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="maxNumberOfServerInstances">
                Максимальное число экземпляров сервера с одинаковыми именами.
                 Можно передать <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> для этого значения.
              </param>
      <param name="transmissionMode">
                Одно из значений перечисления, определяющее режим передачи канала.
              </param>
      <param name="options">
                Одно из значений перечисления, определяющее способ открытия или создания канала.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> представляет собой строку нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  <paramref name="maxNumberofServerInstances" /> меньше -1 или больше, чем 254 (-1 указывает <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)
                
                  -или-
                
                  <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="pipeName" /> содержит двоеточие (»:»).
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95 не поддерживаются.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Превышено максимальное число экземпляров сервера.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> класса с заданным именем канала, направлением канала, максимальное число экземпляров сервера, режимом передачи, параметрами канала и рекомендуемыми, входного и выходного буферов.
            </summary>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="maxNumberOfServerInstances">
                Максимальное число экземпляров сервера с одинаковыми именами.
                 Можно передать <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> для этого значения.
              </param>
      <param name="transmissionMode">
                Одно из значений перечисления, определяющее режим передачи канала.
              </param>
      <param name="options">
                Одно из значений перечисления, определяющее способ открытия или создания канала.
              </param>
      <param name="inBufferSize">
                Положительное значение больше 0, указывающее размер входного буфера.
              </param>
      <param name="outBufferSize">
                Положительное значение больше 0, указывающее размер выходного буфера.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> представляет собой строку нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  <paramref name="maxNumberofServerInstances" /> меньше -1 или больше, чем 254 (-1 указывает <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)
                
                  -или-
                
                  <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.
                
                  -или-
                
                  <paramref name="inBufferSize" /> является отрицательным значением.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="pipeName" /> содержит двоеточие (»:»).
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95 не поддерживаются.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Превышено максимальное число экземпляров сервера.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> именем класса канала, направлением канала, максимальным количеством экземпляров сервера, режимом передачи, параметрами канала, рекомендуемыми входного и выходного буферов размеры и режимом безопасности канала.
            </summary>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="maxNumberOfServerInstances">
                Максимальное число экземпляров сервера с одинаковыми именами.
                 Можно передать <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> для этого значения.
              </param>
      <param name="transmissionMode">
                Одно из значений перечисления, определяющее режим передачи канала.
              </param>
      <param name="options">
                Одно из значений перечисления, определяющее способ открытия или создания канала.
              </param>
      <param name="inBufferSize">
                Положительное значение больше 0, указывающее размер входного буфера.
              </param>
      <param name="outBufferSize">
                Положительное значение больше 0, указывающее размер выходного буфера.
              </param>
      <param name="pipeSecurity">
                Объект, определяющий правила управления доступом и аудита безопасности для канала.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> представляет собой строку нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  <paramref name="maxNumberofServerInstances" />  меньше -1 или больше, чем 254 (-1 указывает <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)
                
                  -или-
                
                  <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.
                
                  -или-
                
                  <paramref name="inBufferSize" /> является отрицательным значением.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="pipeName" /> содержит двоеточие (»:»).
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95 не поддерживаются.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Превышено максимальное число экземпляров сервера.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> класса с заданным именем канала, направлением канала, максимальное число экземпляров сервера, режимом передачи, параметрами канала, рекомендуемыми входного и выходного буферов, безопасности канала и режимом.
            </summary>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="maxNumberOfServerInstances">
                Максимальное число экземпляров сервера с одинаковыми именами.
                 Можно передать <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> для этого значения.
              </param>
      <param name="transmissionMode">
                Одно из значений перечисления, определяющее режим передачи канала.
              </param>
      <param name="options">
                Одно из значений перечисления, определяющее способ открытия или создания канала.
              </param>
      <param name="inBufferSize">
                Положительное значение больше 0, указывающее размер входного буфера.
              </param>
      <param name="outBufferSize">
                Положительное значение больше 0, указывающее размер выходного буфера.
              </param>
      <param name="pipeSecurity">
                Объект, определяющий правила управления доступом и аудита безопасности для канала.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, может ли базовый дескриптор наследоваться дочерними процессами.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> представляет собой строку нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  <paramref name="maxNumberofServerInstances" /> меньше -1 или больше, чем 254 (-1 указывает <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)
                
                  -или-
                
                  <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.
                
                  -или-
                
                  <paramref name="inBufferSize" /> является отрицательным значением.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым значением <see cref="T:System.IO.HandleInheritability" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="pipeName" /> содержит двоеточие (»:»).
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95 не поддерживаются.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Превышено максимальное число экземпляров сервера.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability,System.IO.Pipes.PipeAccessRights)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> именем класса канала, направлением канала, максимальным количеством экземпляров сервера, режимом передачи, параметрами канала, рекомендуемыми входного и выходного буферов размеры, безопасности канала, режимом и правами доступа к каналу.
            </summary>
      <param name="pipeName">
                Имя канала.
              </param>
      <param name="direction">
                Одно из значений перечисления, определяющее направление канала.
              </param>
      <param name="maxNumberOfServerInstances">
                Максимальное число экземпляров сервера с одинаковыми именами.
                 Можно передать <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" /> для этого значения.
              </param>
      <param name="transmissionMode">
                Одно из значений перечисления, определяющее режим передачи канала.
              </param>
      <param name="options">
                Одно из значений перечисления, определяющее способ открытия или создания канала.
              </param>
      <param name="inBufferSize">
                Размер входного буфера.
              </param>
      <param name="outBufferSize">
                Размер выходного буфера.
              </param>
      <param name="pipeSecurity">
                Объект, определяющий правила управления доступом и аудита безопасности для канала.
              </param>
      <param name="inheritability">
                Одно из значений перечисления, определяющее, может ли базовый дескриптор наследоваться дочерними процессами.
              </param>
      <param name="additionalAccessRights">
                Одно из значений перечисления, задающее права доступа для канала.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="pipeName" /> представляет собой строку нулевой длины.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="pipeName" /> имеет значение «anonymous».
                
                  -или-
                
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  <paramref name="maxNumberofServerInstances" /> меньше -1 или больше, чем 254 (-1 указывает <see cref="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances" />)
                
                  -или-
                
                  <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.
                
                  -или-
                
                  <paramref name="inBufferSize" /> является отрицательным значением.
                
                  -или-
                
                  <paramref name="inheritability" /> не является допустимым значением <see cref="T:System.IO.HandleInheritability" />.
                
                  -или-
                
                  <paramref name="additionalAccessRights" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeAccessRights" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="pipeName" /> содержит двоеточие (»:»).
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95 не поддерживаются.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Превышено максимальное число экземпляров сервера.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.BeginWaitForConnection(System.AsyncCallback,System.Object)">
      <summary>
              Начинает асинхронную операцию ожидания подключения клиента.
            </summary>
      <param name="callback">
                Метод, вызываемый, когда клиент подключается к <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> объекта.
              </param>
      <param name="state">
                Предоставляемый пользователем объект, являющийся отличительным признаком данного конкретного асинхронного запроса от других запросов.
              </param>
      <returns>
              Объект, ссылающийся на асинхронный запрос.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Канал не был открыт асинхронно.
                
                  -или-
                
                  Подключение канала уже установлено.
                
                  -или-
                
                  Дескриптор канала не был задан.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Подключение канала разорвано.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.Disconnect">
      <summary>
              Отсоединяет текущее подключение.
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  Еще были сделаны подключений по каналу.
                
                  -или-
                
                  Подключенный канал уже был отключен.
                
                  -или-
                
                  Дескриптор канала не был задан.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.EndWaitForConnection(System.IAsyncResult)">
      <summary>
              Заканчивает асинхронную операцию, чтобы ждать подключения клиента.
            </summary>
      <param name="asyncResult">
                Отложенный асинхронный запрос.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="asyncResult" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Канал не был открыт асинхронно.
                
                  -или-
                
                  Дескриптор канала не был задан.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Подключение канала разорвано.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.Finalize">
      <summary>
              Освобождает неуправляемые ресурсы и выполняет другие операции очистки перед <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> экземпляр будет утилизирован во время сборки мусора.
            </summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.GetImpersonationUserName">
      <summary>
              Возвращает имя пользователя клиента на другом конце канала.
            </summary>
      <returns>
              Имя пользователя клиента на другом конце канала.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Еще были сделаны подключений по каналу.
                
                  -или-
                
                  Подключенный канал уже был отключен.
                
                  -или-
                
                  Дескриптор канала не был задан.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Подключение канала разорвано.
                
                  -или-
                
                  Имя пользователя клиента имеет длину более 19 знаков.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.RunAsClient(System.IO.Pipes.PipeStreamImpersonationWorker)">
      <summary>
              Вызывает делегата во время выполнения олицетворения клиента.
            </summary>
      <param name="impersonationWorker">
                Делегат, определяющий метод, который необходимо вызвать.
              </param>
      <exception cref="T:System.InvalidOperationException">
                  Еще были сделаны подключений по каналу.
                
                  -или-
                
                  Подключенный канал уже был отключен.
                
                  -или-
                
                  Дескриптор канала не был задан.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Подключение канала разорвано.
                
                  -или-
                
                  Ошибка ввода/вывода.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnection">
      <summary>
              Ожидает клиента для подключения к этому <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> объекта.
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  Подключение канала уже установлено.
                
                  -или-
                
                  Дескриптор канала не был задан.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Подключение канала разорвано.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnectionAsync">
      <summary>
              Асинхронно ожидает подключения к этому клиента <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> объекта.
            </summary>
      <returns>
              Задача, представляющая асинхронную операцию ожидания.
            </returns>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnectionAsync(System.Threading.CancellationToken)">
      <summary>
              Асинхронно ожидает подключения клиента к данному объекту <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> и отслеживает запросы отмены.
            </summary>
      <param name="cancellationToken">
                Токен для отслеживания запросов отмены.
              </param>
      <returns>
              Задача, представляющая асинхронную операцию ожидания.
            </returns>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.PipeAccessRule" /> класса с указанным удостоверением, правами доступа для канала и типом управления доступом.
            </summary>
      <param name="identity">
                <see cref="T:System.Security.Principal.IdentityReference" /> Объекта, инкапсулирующего ссылку на учетную запись пользователя.
              </param>
      <param name="rights">
                Один из <see cref="T:System.IO.Pipes.PipeAccessRights" /> значения, которое указывает тип операции, связанной с правилом доступа.
              </param>
      <param name="type">
                Один из <see cref="T:System.Security.AccessControl.AccessControlType" /> значений, указывающее, следует ли разрешить или запретить операцию.
              </param>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.PipeAccessRule" /> класса с указанным удостоверением, правами доступа для канала и типом управления доступом.
            </summary>
      <param name="identity">
                Имя учетной записи пользователя.
              </param>
      <param name="rights">
                Один из <see cref="T:System.IO.Pipes.PipeAccessRights" /> значения, которое указывает тип операции, связанной с правилом доступа.
              </param>
      <param name="type">
                Один из <see cref="T:System.Security.AccessControl.AccessControlType" /> значений, указывающее, следует ли разрешить или запретить операцию.
              </param>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.PipeAuditRule" /> класса для учетной записи пользователя, указанной в <see cref="T:System.Security.Principal.IdentityReference" /> объекта.
            </summary>
      <param name="identity">
                <see cref="T:System.Security.Principal.IdentityReference" /> Объекта, инкапсулирующего ссылку на учетную запись пользователя.
              </param>
      <param name="rights">
                Один из <see cref="T:System.IO.Pipes.PipeAccessRights" /> значения, которое указывает тип операции, связанной с правилом доступа.
              </param>
      <param name="flags">
                Один из <see cref="T:System.Security.AccessControl.AuditFlags" /> значений, определяющее, когда проведения аудита.
              </param>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.IO.Pipes.PipeAuditRule" /> класс для учетной записи пользователя с именем.
            </summary>
      <param name="identity">
                Имя учетной записи пользователя.
              </param>
      <param name="rights">
                Один из <see cref="T:System.IO.Pipes.PipeAccessRights" /> значения, которое указывает тип операции, связанной с правилом доступа.
              </param>
      <param name="flags">
                Один из <see cref="T:System.Security.AccessControl.AuditFlags" /> значений, определяющее, когда проведения аудита.
              </param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.PipeSecurity" />.
            </summary>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.AccessRule" /> с использованием указанных значений.
            </summary>
      <param name="identityReference">
                Удостоверение, к которому применяется правило доступа.
                 Это должен быть объект, который может быть приведено к <see cref="T:System.Security.Principal.SecurityIdentifier" /> объекта.
              </param>
      <param name="accessMask">
                Маска доступа этого правила.
                 Маска доступа является коллекцией 32-разрядных битов, значение каждого из которых определяется отдельными интеграторами
              </param>
      <param name="isInherited">
                <see langword="true" /> Если это правило наследуется от родительского контейнера; в противном случае — значение false.
              </param>
      <param name="inheritanceFlags">
                Один из <see cref="T:System.Security.AccessControl.InheritanceFlags" /> значения, которые определяет свойства наследования правила доступа.
              </param>
      <param name="propagationFlags">
                Один из <see cref="T:System.Security.AccessControl.PropagationFlags" /> значений, определяющих возможность автоматического распространения наследуемых правил доступа.
                 Флаги распространения не учитываются, если для <paramref name="inheritanceFlags" /> задано значение <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.
              </param>
      <param name="type">
                Указывает допустимый тип управления доступом.
              </param>
      <returns>
              Объект <see cref="T:System.Security.AccessControl.AccessRule" />, создаваемый с помощью данного метода.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, или <paramref name="type" /> задает недопустимое значение.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="identityReference" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  <paramref name="accessMask" /> равно нулю.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="identityReference" /> не является ни тип <see cref="T:System.Security.Principal.SecurityIdentifier" /> ни типа, таких как <see cref="T:System.Security.Principal.NTAccount" />, который можно преобразовать в тип <see cref="T:System.Security.Principal.SecurityIdentifier" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>
              Добавляет правило доступа в список управления доступом на уровне пользователей (DACL), связанного с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <param name="rule">
                Чтобы добавить правило доступа.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rule" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>
              Добавляет правило аудита для системы управления доступом список (SACL), связанного с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <param name="rule">
                Чтобы добавить правило аудита.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rule" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.AuditRule" /> с использованием указанных значений.
            </summary>
      <param name="identityReference">
                Удостоверение, к которому применяется правило доступа.
                 Это должен быть объект, который может быть приведено к <see cref="T:System.Security.Principal.SecurityIdentifier" /> объекта.
              </param>
      <param name="accessMask">
                Маска доступа этого правила.
                 Маска доступа является коллекцией 32-разрядных битов, значение каждого из которых определяется отдельными интеграторами
              </param>
      <param name="isInherited">
                <see langword="true" /> Если это правило наследуется от родительского контейнера; в противном случае — значение false.
              </param>
      <param name="inheritanceFlags">
                Один из <see cref="T:System.Security.AccessControl.InheritanceFlags" /> значения, которые определяет свойства наследования правила доступа.
              </param>
      <param name="propagationFlags">
                Один из <see cref="T:System.Security.AccessControl.PropagationFlags" /> значений, определяющих возможность автоматического распространения наследуемых правил доступа.
                 Флаги распространения не учитываются, если для <paramref name="inheritanceFlags" /> задано значение <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.
              </param>
      <param name="flags">
                Один из <see cref="T:System.Security.AccessControl.AuditFlags" /> типа элемента управления значения, которые определяет допустимые права доступа.
              </param>
      <returns>
              Объект <see cref="T:System.Security.AccessControl.AuditRule" />, создаваемый с помощью данного метода.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, Или <paramref name="flags" /> свойств указано недопустимое значение.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Значение свойства <paramref name="identityReference" /> — <see langword="null" />.
                
                  -или-
                
                  <paramref name="accessMask" /> Равно нулю.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="identityReference" /> Свойство не является ни типа <see cref="T:System.Security.Principal.SecurityIdentifier" /> ни типа, таких как <see cref="T:System.Security.Principal.NTAccount" />, может привести к типу <see cref="T:System.Security.Principal.SecurityIdentifier" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)">
      <summary>
              Сохраняет указанные разделы дескриптора безопасности, связанный с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объект в постоянное хранилище.
            </summary>
      <param name="handle">
                Дескриптор защищаемого объекта, объекта, текущий <see cref="T:System.IO.Pipes.PipeSecurity" /> объект, связанный с.
              </param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.String)">
      <summary>
              Сохраняет указанные разделы дескриптора безопасности, связанный с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объект в постоянное хранилище.
            </summary>
      <param name="name">
                Имя защищаемого объекта, текущий <see cref="T:System.IO.Pipes.PipeSecurity" /> объект, связанный с.
              </param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>
              Удаляет правило доступа из списка управления доступом на уровне пользователей (DACL), связанного с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <param name="rule">
                Удаляемое правило доступа.
              </param>
      <returns>
              Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rule" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)">
      <summary>
              Удаляет указанное правило доступа из списка управления доступом на уровне пользователей (DACL), связанного с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <param name="rule">
                Удаляемое правило доступа.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rule" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>
              Удаляет правила аудита из системного списка (Управления доступом), связанный с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <param name="rule">
                Удаляемое правило аудита.
              </param>
      <returns>
              <see langword="true" /> Если правило аудита удалено; в противном случае — <see langword="false" />
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rule" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)">
      <summary>
              Удаляет все правила аудита с тем же идентификатором безопасности, что указанного правила аудита из системного списка (Управления доступом), связанный с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <param name="rule">
                Удаляемое правило аудита.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rule" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)">
      <summary>
              Удаляет указанное правило аудита из системного списка (Управления доступом), связанный с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <param name="rule">
                Удаляемое правило аудита.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rule" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>
              Удаляет все правила доступа в списке управления доступом на уровне пользователей (DACL), связанного с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта, а затем добавляет указанное правило доступа.
            </summary>
      <param name="rule">
                Чтобы добавить правило доступа.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rule" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>
              Устанавливает правила доступа в списке управления доступом на уровне пользователей (DACL), связанного с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <param name="rule">
                Правило для установки.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rule" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>
              Задает правила аудита в системе управления списка управления ДОСТУПОМ, связанный с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <param name="rule">
                Правило для установки.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rule" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.PipeStream" /> с использованием указанного значения <see cref="T:System.IO.Pipes.PipeDirection" /> и размера буфера.
            </summary>
      <param name="direction">
                Одно из значений <see cref="T:System.IO.Pipes.PipeDirection" />, указывающих направление объекта канала.
              </param>
      <param name="bufferSize">
                Положительное значение типа <see cref="T:System.Int32" /> (большее или равное 0), соответствующее размеру буфера.
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  Значение параметра <paramref name="bufferSize" /> меньше 0.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.PipeStream" /> с использованием указанных значений <see cref="T:System.IO.Pipes.PipeDirection" />, <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> и размера буфера.
            </summary>
      <param name="direction">
                Одно из значений <see cref="T:System.IO.Pipes.PipeDirection" />, указывающих направление объекта канала.
              </param>
      <param name="transmissionMode">
                Одно из значений <see cref="T:System.IO.Pipes.PipeTransmissionMode" />, указывающих режим передачи для объекта канала.
              </param>
      <param name="outBufferSize">
                Положительное значение типа <see cref="T:System.Int32" /> (большее или равное 0), соответствующее размеру буфера.
              </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.
                
                  -или-
                
                  <paramref name="transmissionMode" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeTransmissionMode" />.
                
                  -или-
                
                  Значение параметра <paramref name="bufferSize" /> меньше 0.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
              Начинает операцию асинхронного чтения.
            </summary>
      <param name="buffer">
                Буфер, в который должны считываться данные.
              </param>
      <param name="offset">
                Смещение в <paramref name="buffer" /> (в байтах), с которого начинается чтение.
              </param>
      <param name="count">
                Максимальное число байтов, предназначенных для чтения.
              </param>
      <param name="callback">
                Метод, вызываемый после завершения операции асинхронного чтения.
              </param>
      <param name="state">
                Предоставляемый пользователем объект, являющийся отличительным признаком данного конкретного запроса на асинхронное чтение от других запросов.
              </param>
      <returns>
              Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронное чтение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="buffer" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="offset" /> меньше 0.
                
                  -или-
                
                  Значение параметра <paramref name="count" /> меньше 0.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="count" /> больше, чем число байтов, доступных в <paramref name="buffer" />.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Этот канал не поддерживает операции чтения.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Канал отключен, ожидает подключения, или дескриптор не был задан.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван, или возникла другая ошибка ввода-вывода.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>
              Начинает операцию асинхронной записи.
            </summary>
      <param name="buffer">
                Буфер, содержащий данные для записи в текущий поток.
              </param>
      <param name="offset">
                Отсчитываемое от нуля смещение байтов в буфере <paramref name="buffer" />, с которого начинается копирование байтов в текущий поток.
              </param>
      <param name="count">
                Максимальное число байтов для записи.
              </param>
      <param name="callback">
                Метод, вызываемый после завершения операции асинхронной записи.
              </param>
      <param name="state">
                Предоставляемый пользователем объект, являющийся отличительным признаком данного конкретного запроса на асинхронную запись от других запросов.
              </param>
      <returns>
              Объект <see cref="T:System.IAsyncResult" />, который ссылается на операцию асинхронной записи.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="buffer" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="offset" /> меньше 0.
                
                  -или-
                
                  Значение параметра <paramref name="count" /> меньше 0.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="count" /> больше, чем число байтов, доступных в <paramref name="buffer" />.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Канал не поддерживает операции записи.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Канал отключен, ожидает подключения, или дескриптор не был задан.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван, или возникла другая ошибка ввода-вывода.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckPipePropertyOperations">
      <summary>
              Проверяет, допускает ли состояние канала получение или установку свойств.
            </summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckReadOperations">
      <summary>
              Проверяет, находится ли канал в подключенном состоянии для выполнения операций чтения.
            </summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckWriteOperations">
      <summary>
              Проверяет, находится ли канал в подключенном состоянии для выполнения операций записи.
            </summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.IO.Pipes.PipeStream" /> (при необходимости освобождает и управляемые ресурсы).
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
      <summary>
              Завершает отложенный запрос асинхронного чтения.
            </summary>
      <param name="asyncResult">
                Ссылка на отложенный асинхронный запрос.
              </param>
      <returns>
              Количество прочитанных байтов.
               Возвращаемое значение, равное нулю, указывает конец потока (канал закрыт).
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="asyncResult" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="asyncResult" /> не происходит из метода <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> в текущем потоке.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Поток закрыт, или произошла внутренняя ошибка.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
      <summary>
              Завершает отложенный запрос асинхронной записи.
            </summary>
      <param name="asyncResult">
                Ссылка на отложенный асинхронный запрос.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="asyncResult" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="asyncResult" /> не происходит из метода <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> в текущем потоке.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Поток закрыт, или произошла внутренняя ошибка.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Flush">
      <summary>
              Очищает буфер для текущего потока и вызывает запись всех буферизованных данных в соответствующее устройство.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Канал не поддерживает операции записи.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван, или возникла другая ошибка ввода-вывода.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.GetAccessControl">
      <summary>
              Возвращает объект <see cref="T:System.IO.Pipes.PipeSecurity" />, который инкапсулирует записи списка управления доступом (ACL) для канала, описываемого текущим объектом <see cref="T:System.IO.Pipes.PipeStream" />.
            </summary>
      <returns>
              Объект <see cref="T:System.IO.Pipes.PipeSecurity" />, который инкапсулирует записи списка управления доступом (ACL) для канала, описываемого текущим объектом <see cref="T:System.IO.Pipes.PipeStream" />.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  Не удалось выполнить базовый вызов для установки сведений о безопасности.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Не удалось выполнить базовый вызов для установки сведений о безопасности.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Не удалось выполнить базовый вызов для установки сведений о безопасности.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
      <summary>
              Инициализирует объект <see cref="T:System.IO.Pipes.PipeStream" /> из указанного объекта <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />.
            </summary>
      <param name="handle">
                Объект <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> для инициализируемого канала.
              </param>
      <param name="isExposed">
                Значение <see langword="true" /> для предоставления дескриптора, в противном случае — значение <see langword="false" />.
              </param>
      <param name="isAsync">
                Значение <see langword="true" />, если дескриптор открыт асинхронно; в противном случае — значение <see langword="false" />.
              </param>
      <exception cref="T:System.IO.IOException">
                  Невозможно привязать дескриптор к каналу.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
              Считывает блок байтов из потока и записывает данные в заданный буфер.
            </summary>
      <param name="buffer">
                При возврате этот метод содержит указанный массив байтов, в котором значения в интервале от <paramref name="offset" /> до (<paramref name="offset" /> + <paramref name="count" /> - 1) заменены байтами, считанными из текущего источника.
              </param>
      <param name="offset">
                Смещение в массиве <paramref name="buffer" /> (в байтах), начиная с которого будут размещаться считанные байты.
              </param>
      <param name="count">
                Максимальное число байтов, предназначенных для чтения.
              </param>
      <returns>
              Общее число байтов, считанных в <paramref name="buffer" />.
               Это число может быть меньше количества запрошенных байтов, если это количество байтов в настоящее время недоступно, а также равняться нулю, если достигнут конец потока.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="buffer" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="offset" /> меньше 0.
                
                  -или-
                
                  Значение параметра <paramref name="count" /> меньше 0.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="count" /> больше, чем число байтов, доступных в <paramref name="buffer" />.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Этот канал не поддерживает операции чтения.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Канал отключен, ожидает подключения, или дескриптор не был задан.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Ошибка ввода/вывода.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.ReadByte">
      <summary>
              Считывает байт из канала.
            </summary>
      <returns>
              Байт, приведенный к типу <see cref="T:System.Int32" />, или -1, если достигнут конец потока (канал закрыт).
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Этот канал не поддерживает операции чтения.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Канал отключен, ожидает подключения, или дескриптор не был задан.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Ошибка ввода/вывода.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
              Устанавливает заданное значение в качестве текущей позиции в текущем потоке.
            </summary>
      <param name="offset">
                Указатель относительно начальной точки <paramref name="origin" />, от которого начинается поиск.
              </param>
      <param name="origin">
                Задает начальную, конечную или текущую позицию как опорную точку для <paramref name="offset" />, используя значение типа <see cref="T:System.IO.SeekOrigin" />.
              </param>
      <returns>
              Новая позиция в потоке.
            </returns>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
      <summary>
              Применяет записи списка управления доступом (ACL), заданные объектом <see cref="T:System.IO.Pipes.PipeSecurity" />, к каналу, заданному текущим объектом <see cref="T:System.IO.Pipes.PipeStream" />.
            </summary>
      <param name="pipeSecurity">
                Объект <see cref="T:System.IO.Pipes.PipeSecurity" />, задающий запись списка управления доступом (ACL), которую следует применить к текущему каналу.
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="pipeSecurity" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.UnauthorizedAccessException">
                  Не удалось выполнить базовый вызов для установки сведений о безопасности.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Не удалось выполнить базовый вызов для установки сведений о безопасности.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Не удалось выполнить базовый вызов для установки сведений о безопасности.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
      <summary>
              Задает указанное значение для длины текущего потока.
            </summary>
      <param name="value">
                Новая длина потока.
              </param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
      <summary>
              Ожидает завершения считывания всех отправленных байтов на противоположном конце канала.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Канал не поддерживает операции записи.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван, или возникла другая ошибка ввода-вывода.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
              Записывает в текущий поток блок байтов, используя данные из буфера.
            </summary>
      <param name="buffer">
                Буфер, содержащий данные для записи в канал.
              </param>
      <param name="offset">
                Отсчитываемое от нуля смещение байтов в буфере <paramref name="buffer" />, с которого начинается копирование байтов в текущий поток.
              </param>
      <param name="count">
                Максимальное число байтов для записи в текущий поток.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="buffer" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="offset" /> меньше 0.
                
                  -или-
                
                  Значение параметра <paramref name="count" /> меньше 0.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="count" /> больше, чем число байтов, доступных в <paramref name="buffer" />.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Канал не поддерживает операции записи.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван, или возникла другая ошибка ввода-вывода.
                </exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
      <summary>
              Выполняет запись байта в текущий поток.
            </summary>
      <param name="value">
                Байт, записываемый в поток.
              </param>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Канал не поддерживает операции записи.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Канал отключен, ожидает подключения, или дескриптор не был задан.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван, или возникла другая ошибка ввода-вывода.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>
              Применяет к последовательности агрегатную функцию.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для статистическая операция.
              </param>
      <param name="func">
                Агрегатная функция, вызываемая для каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Конечное агрегатное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="func" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
              Применяет к последовательности агрегатную функцию.
               Указанное начальное значение используется в качестве исходного значения агрегатной операции.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для статистическая операция.
              </param>
      <param name="seed">
                Начальное агрегатное значение.
              </param>
      <param name="func">
                Агрегатная функция, вызываемая для каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TAccumulate">
                Тип агрегатного значения.
              </typeparam>
      <returns>
              Конечное агрегатное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="func" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>
              Применяет к последовательности агрегатную функцию.
               Указанное начальное значение служит исходным значением для агрегатной операции, а указанная функция используется для выбора результирующего значения.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для статистическая операция.
              </param>
      <param name="seed">
                Начальное агрегатное значение.
              </param>
      <param name="func">
                Агрегатная функция, вызываемая для каждого элемента.
              </param>
      <param name="resultSelector">
                Функция, преобразующая конечное агрегатное значение в результирующее значение.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TAccumulate">
                Тип агрегатного значения.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения.
              </typeparam>
      <returns>
              Преобразованное конечное агрегатное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="func" /> или <paramref name="resultSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Определяет, является ли все элементы последовательности удовлетворяют условию.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы, к которым применяется предикат.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="true" /> Если каждый элемент исходной последовательности проходит проверку, определяемую указанным предикатом, или если последовательность пуста; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Определяет, содержит ли последовательность какие-либо элементы.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Проверяемая на наличие.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="true" /> Если исходная последовательность содержит элементы; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Определяет, удовлетворяет ли какой-либо элемент последовательности условие.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой применяется предикат.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="true" /> Если все элементы в исходной последовательности проходит проверку, определяемую указанным предикатом; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
              Добавляет значение в конец последовательности.
            </summary>
      <param name="source">
                Последовательность значений.
              </param>
      <param name="element">
                Значение, добавляемое к <paramref name="source" />.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Новая последовательность, которая заканчивается <paramref name="element" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает входные данные, типизированного как <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
      <param name="source">
                Последовательность, введите в качестве <see cref="T:System.Collections.Generic.IEnumerable`1" />.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Входной последовательности, типизированного как <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Decimal" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Double" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Int32" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int32" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int64" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Decimal" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только значения, которые являются <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Превышает сумму элементов в последовательности <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Double" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только значения, которые являются <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Int32" />, допускающей значение null.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int32" />, допускающая значение null, для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма элементов в последовательности превышает значение <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Int64" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только значения, которые являются <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Превышает сумму элементов в последовательности <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Single" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только значения, которые являются <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Single" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Decimal" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                  Превышает сумму элементов в последовательности <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Double" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Int32" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                  Превышает сумму элементов в последовательности <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Int64" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов исходной последовательности.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                  Превышает сумму элементов в последовательности <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Decimal" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только значения, которые являются <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Превышает сумму элементов в последовательности <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Double" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только значения, которые являются <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Int32" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только значения, которые являются <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Превышает сумму элементов в последовательности <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Int64" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только значения, которые являются <see langword="null" />.
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Single" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только значения, которые являются <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Single" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>
              Приводит элементы <see cref="T:System.Collections.IEnumerable" /> для указанного типа.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.IEnumerable" /> Содержащий элементы для приведения к типу <paramref name="TResult" />.
              </param>
      <typeparam name="TResult">
                Тип для приведения элементы <paramref name="source" /> для.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий каждый элемент исходной последовательности привести к указанному типу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidCastException">
                  Элемент в последовательности не может быть приведен к типу <paramref name="TResult" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Объединяет две последовательности.
            </summary>
      <param name="first">
                Первая из объединяемых последовательностей.
              </param>
      <param name="second">
                Последовательность, объединяемая с первой последовательностью.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащая сцепленные элементы двух входных последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
              Определяет, содержит ли последовательность указанный элемент, используя компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="source">
                Последовательность, в которой требуется найти данное значение.
              </param>
      <param name="value">
                Значение, которое требуется найти в последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="true" /> Если исходная последовательность содержит элемент с указанным значением; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Определяет, содержит ли последовательность указанный элемент, используя указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
      <param name="source">
                Последовательность, в которой требуется найти данное значение.
              </param>
      <param name="value">
                Значение, которое требуется найти в последовательности.
              </param>
      <param name="comparer">
                Компаратор проверки на равенство, используемый для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="true" /> Если исходная последовательность содержит элемент с указанным значением; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает количество элементов в последовательности.
            </summary>
      <param name="source">
                Последовательность, элементы которой требуется подсчитать.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число элементов во входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Число элементов в <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает число, представляющее количество элементов в указанной последовательности удовлетворяют условию.
            </summary>
      <param name="source">
                Последовательность, элементы которой требуется проверить и подсчитать.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Число элементов в <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает элементы указанной последовательности или значение по умолчанию параметра типа одноэлементную коллекцию, если последовательность пуста.
            </summary>
      <param name="source">
                Последовательность, для которой возвращается значение по умолчанию, если она пуста.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Объект, содержащий значение по умолчанию для <paramref name="TSource" /> Введите, если <paramref name="source" /> является пустой; в противном случае — <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
              Возвращает элементы указанной последовательности или значение заданного одноэлементную коллекцию, если последовательность пуста.
            </summary>
      <param name="source">
                Последовательность, для которой возвращается указанное значение, если она пуста.
              </param>
      <param name="defaultValue">
                Значение, возвращаемое в случае пустой последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий <paramref name="defaultValue" /> Если <paramref name="source" /> является пустой; в противном случае — <paramref name="source" />.
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="source">
                Последовательность, из которой требуется удалить дубликаты элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащая различающиеся элементы из исходной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Возвращает различающиеся элементы последовательности, используя указанную <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения значений.
            </summary>
      <param name="source">
                Последовательность, из которой требуется удалить дубликаты элементов.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащая различающиеся элементы из исходной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
              Возвращает элемент по указанному индексу в последовательности.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить элемент.
              </param>
      <param name="index">
                Отсчитываемый от нуля индекс извлекаемого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Элемент, находящийся в указанной позиции в исходной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="index" /> — меньше 0 или больше или равно количеству элементов в <paramref name="source" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
              Возвращает элемент последовательности по указанному индексу или значение по умолчанию, если индекс вне допустимого диапазона.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить элемент.
              </param>
      <param name="index">
                Отсчитываемый от нуля индекс извлекаемого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="default" />(<paramref name="TSource" />) Если индекс находится вне границ элемента исходной последовательности; в противном случае — элемент в указанной позиции в исходной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>
              Возвращает пустую коллекцию <see cref="T:System.Collections.Generic.IEnumerable`1" /> с указанным аргументом типа.
            </summary>
      <typeparam name="TResult">
                Тип, присваиваемый параметру типа универсального возвращаемого <see cref="T:System.Collections.Generic.IEnumerable`1" />.
              </typeparam>
      <returns>
              Пустой <see cref="T:System.Collections.Generic.IEnumerable`1" /> аргументом типа <paramref name="TResult" />.
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Находит разность двух последовательностей, используя для сравнения значений компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="first">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой, отсутствующие в <paramref name="second" /> будут возвращены.
              </param>
      <param name="second">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой, входящие также в первую последовательность вызовет должны исключены из возвращаемой последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность, представляющая собой разность двух последовательностей как множеств.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Находит разность двух последовательностей с помощью заданного <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения значений.
            </summary>
      <param name="first">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой, отсутствующие в <paramref name="second" /> будут возвращены.
              </param>
      <param name="second">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой, входящие также в первую последовательность вызовет должны исключены из возвращаемой последовательности.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность, представляющая собой разность двух последовательностей как множеств.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает первый элемент последовательности.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для возвращения первого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Первый элемент указанной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Исходная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает первый элемент последовательности, удовлетворяющий указанному условию.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Первый элемент последовательности, который прошел проверку, определенную указанной функцией предиката.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Элемент не удовлетворяет условию предиката <paramref name="predicate" />.
                
                  -или-
                
                  Исходная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для возвращения первого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="default" />(<paramref name="TSource" />) Если <paramref name="source" /> является пустой; в противном случае — первый элемент в <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает первый элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="default" />(<paramref name="TSource" />) Если <paramref name="source" /> пуст или если отсутствует элемент не прошел проверку, определенную предикатом <paramref name="predicate" />; в противном случае — первый элемент в <paramref name="source" /> прошедший проверку, определенную предикатом <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; В C# или IEnumerable(Of IGrouping(Of TKey, TSource)) в Visual Basic где каждый <see cref="T:System.Linq.IGrouping`2" /> объект содержит последовательность объектов и ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и сравнивает ключи с помощью указанного компаратора.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; В C# или IEnumerable(Of IGrouping(Of TKey, TSource)) в Visual Basic где каждый <see cref="T:System.Linq.IGrouping`2" /> объект содержит коллекцию объектов и ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и проецирует элементы каждой группы с помощью указанной функции.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в <see cref="T:System.Linq.IGrouping`2" />.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
      <returns>
              IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; В C# или IEnumerable(Of IGrouping(Of TKey, TElement)) в Visual Basic где каждый <see cref="T:System.Linq.IGrouping`2" /> объект содержит коллекцию объектов типа <paramref name="TElement" /> и ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы последовательности в соответствии с функцией селектора ключа.
               Ключи сравниваются с помощью компаратора, элементы каждой группы проецируются с помощью указанной функции.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в <see cref="T:System.Linq.IGrouping`2" />.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
      <returns>
              IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; В C# или IEnumerable(Of IGrouping(Of TKey, TElement)) в Visual Basic где каждый <see cref="T:System.Linq.IGrouping`2" /> объект содержит коллекцию объектов типа <paramref name="TElement" /> и ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              Коллекция элементов типа <paramref name="TResult" /> которой каждый элемент представляет проекцию группы и ее ключа.
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
               Ключи сравниваются с использованием заданного компаратора.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей с.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              Коллекция элементов типа <paramref name="TResult" /> которой каждый элемент представляет проекцию группы и ее ключа.
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
               Элементы каждой группы проецируются с помощью указанной функции.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в <see cref="T:System.Linq.IGrouping`2" />.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в каждом <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              Коллекция элементов типа <paramref name="TResult" /> которой каждый элемент представляет проекцию группы и ее ключа.
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
               Значения ключей сравниваются с помощью указанного компаратора, элементы каждой группы проецируются с помощью указанной функции.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в <see cref="T:System.Linq.IGrouping`2" />.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей с.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в каждом <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              Коллекция элементов типа <paramref name="TResult" /> которой каждый элемент представляет проекцию группы и ее ключа.
            </returns>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>
              Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.
               Для сравнения ключей используется компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.
              </param>
      <typeparam name="TOuter">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы типа <paramref name="TResult" /> полученные в результате выполнения группированное соединение двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
              Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключа и группирует результаты.
               Указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> используется для сравнения ключей.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для хэширования и сравнения ключей.
              </param>
      <typeparam name="TOuter">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы типа <paramref name="TResult" /> полученные в результате выполнения группированное соединение двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Находит пересечение двух последовательностей, используя для сравнения значений компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="first">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> , Различающиеся элементы, которые появляются в <paramref name="second" /> будут возвращены.
              </param>
      <param name="second">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Будут возвращены, различающиеся элементы, которые появляются в первую последовательность.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Находит пересечение двух последовательностей с помощью заданного <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения значений.
            </summary>
      <param name="first">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> , Различающиеся элементы, которые появляются в <paramref name="second" /> будут возвращены.
              </param>
      <param name="second">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Будут возвращены, различающиеся элементы, которые появляются в первую последовательность.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>
              Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.
               Для сравнения ключей используется компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего элемента для пары соответствующих элементов.
              </param>
      <typeparam name="TOuter">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержит элементы типа <paramref name="TResult" /> полученные в результате внутреннего соединения двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
              Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.
               Указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> используется для сравнения ключей.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего элемента для пары соответствующих элементов.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для хэширования и сравнения ключей.
              </param>
      <typeparam name="TOuter">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержит элементы типа <paramref name="TResult" /> полученные в результате внутреннего соединения двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает последний элемент последовательности.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить последний элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение, находящееся в последней позиции исходной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Исходная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает последний элемент последовательности, удовлетворяющий указанному условию.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Последний элемент последовательности, который прошел проверку, определенную указанной функцией предиката.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Элемент не удовлетворяет условию предиката <paramref name="predicate" />.
                
                  -или-
                
                  Исходная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить последний элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="default" />(<paramref name="TSource" />), если исходная последовательность является пустой; в противном случае — последний элемент в <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает последний элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="default" />(<paramref name="TSource" />), если последовательность пуста или если ни один элемент не прошел проверку функцией предиката; в противном случае — последний элемент, прошедший проверку функцией предиката.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает <see cref="T:System.Int64" /> , представляет собой общее число элементов в последовательности.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> , Содержащий подсчитываемые элементы.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Количество элементов в исходной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Число элементов превышает <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает <see cref="T:System.Int64" /> представляющий количество элементов в последовательности удовлетворяют условию.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы которой требуется подсчитать.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Количество соответствующих элементов превышает <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              Возвращает максимальное значение в последовательности <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Decimal" /> значения, чтобы определить максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              Возвращает максимальное значение в последовательности <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Double" /> значения, чтобы определить максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              Возвращает максимальное значение в последовательности <see cref="T:System.Int32" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int32" /> значения, чтобы определить максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              Возвращает максимальное значение в последовательности <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int64" /> значения, чтобы определить максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              Возвращает максимальное значение в последовательности nullable <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Decimal" /> значения, чтобы определить максимальное значение.
              </param>
      <returns>
              Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic и соответствующее максимальное значение в последовательности. </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              Возвращает максимальное значение в последовательности nullable <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Double" /> значения, чтобы определить максимальное значение.
              </param>
      <returns>
              Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic и соответствующее максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              Возвращает максимальное значение в последовательности nullable <see cref="T:System.Int32" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Int32" /> значения, чтобы определить максимальное значение.
              </param>
      <returns>
              Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic и соответствующее максимальное значение в последовательности. </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              Возвращает максимальное значение в последовательности nullable <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Int64" /> значения, чтобы определить максимальное значение.
              </param>
      <returns>
              Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic и соответствующее максимальное значение в последовательности. </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
              Возвращает максимальное значение в последовательности nullable <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Single" /> значения, чтобы определить максимальное значение.
              </param>
      <returns>
              Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic и соответствующее максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
              Возвращает максимальное значение в последовательности <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Single" /> значения, чтобы определить максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает максимальное значение, содержащееся в универсальной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное <see cref="T:System.Decimal" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное <see cref="T:System.Double" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное <see cref="T:System.Int32" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное <see cref="T:System.Int64" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение NULL <see cref="T:System.Decimal" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic и соответствующее максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение NULL <see cref="T:System.Double" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic и соответствующее максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение NULL <see cref="T:System.Int32" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic и соответствующее максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение NULL <see cref="T:System.Int64" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic и соответствующее максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение NULL <see cref="T:System.Single" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic и соответствующее максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное <see cref="T:System.Single" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              Вызывает функцию преобразования для каждого элемента универсальной последовательности и возвращает максимальное результирующее значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип значения, возвращаемый <paramref name="selector" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              Возвращает минимальное значение в последовательности <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Decimal" /> значения для определения минимального значения.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              Возвращает минимальное значение в последовательности <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Double" /> значения для определения минимального значения.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              Возвращает минимальное значение в последовательности <see cref="T:System.Int32" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int32" /> значения для определения минимального значения.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              Возвращает минимальное значение в последовательности <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int64" /> значения для определения минимального значения.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              Возвращает минимальное значение в последовательности nullable <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Decimal" /> значения для определения минимального значения.
              </param>
      <returns>
              Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic соответствующий минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              Возвращает минимальное значение в последовательности nullable <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Double" /> значения для определения минимального значения.
              </param>
      <returns>
              Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic соответствующий минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              Возвращает минимальное значение в последовательности nullable <see cref="T:System.Int32" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Int32" /> значения для определения минимального значения.
              </param>
      <returns>
              Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic соответствующий минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              Возвращает минимальное значение в последовательности nullable <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Int64" /> значения для определения минимального значения.
              </param>
      <returns>
              Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic соответствующий минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
              Возвращает минимальное значение в последовательности nullable <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Single" /> значения для определения минимального значения.
              </param>
      <returns>
              Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic соответствующий минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
              Возвращает минимальное значение в последовательности <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Single" /> значения для определения минимального значения.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает минимальное значение, содержащееся в универсальной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное <see cref="T:System.Decimal" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное <see cref="T:System.Double" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное <see cref="T:System.Int32" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное <see cref="T:System.Int64" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение NULL <see cref="T:System.Decimal" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic соответствующий минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение NULL <see cref="T:System.Double" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic соответствующий минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение NULL <see cref="T:System.Int32" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic соответствующий минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение NULL <see cref="T:System.Int64" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic соответствующий минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение NULL <see cref="T:System.Single" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic соответствующий минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
              Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное <see cref="T:System.Single" /> значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              Вызывает функцию преобразования для каждого элемента универсальной последовательности и возвращает минимальное результирующее значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип значения, возвращаемый <paramref name="selector" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>
              Фильтрует элементы <see cref="T:System.Collections.IEnumerable" /> на основе указанного типа.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.IEnumerable" /> Элементы которой следует фильтровать.
              </param>
      <typeparam name="TResult">
                Тип, по которому фильтруются элементы последовательности.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащая элементы входной последовательности типа <paramref name="TResult" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              Сортирует элементы последовательности в возрастающем порядке по ключу.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedEnumerable`1" /> Элементы которой сортируются по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              Сортирует элементы последовательности в порядке возрастания с использованием указанного компаратора.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedEnumerable`1" /> Элементы которой сортируются по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              Сортирует элементы последовательности в порядке убывания ключа.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedEnumerable`1" /> Элементы которой сортируются в порядке убывания ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              Сортирует элементы последовательности в порядке убывания с использованием указанного компаратора.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedEnumerable`1" /> Элементы которой сортируются в порядке убывания ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
              Добавляет значение в начало последовательности.
            </summary>
      <param name="source">
                Последовательность значений.
              </param>
      <param name="element">
                Значение, которое добавляется в начало <paramref name="source" />.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Новая последовательность, которая начиняется с <paramref name="element" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>
              Создает последовательность целых чисел в указанном диапазоне.
            </summary>
      <param name="start">
                Значение первого целого числа для последовательности.
              </param>
      <param name="count">
                Количество генерируемых последовательных целых чисел.
              </param>
      <returns>
              IEnumerable&lt;Int32&gt; В C# или IEnumerable(Of Int32) в Visual Basic содержащий диапазон последовательных целых чисел.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="count" /> меньше 0.
                
                  -или-
                
                  <paramref name="start" /> + <paramref name="count" /> -1 больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>
              Создает последовательность, содержащую одно повторяющееся значение.
            </summary>
      <param name="element">
                Повторяемое значение.
              </param>
      <param name="count">
                Требуемое число повторений данного значения в создаваемой последовательности.
              </param>
      <typeparam name="TResult">
                Тип значения, которое будет повторяться в результирующей последовательности.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащая повторяющееся значение.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="count" /> меньше 0.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Изменяет порядок элементов в последовательности.
            </summary>
      <param name="source">
                Последовательность значений, которые следует расставить в обратном порядке.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, элементы которой соответствуют элементам входной последовательности, но следуют в противоположном порядке.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              Проецирует каждый элемент последовательности в новую форму.
            </summary>
      <param name="source">
                Последовательность значений, для которых вызывается функция преобразования.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип значения, возвращаемый <paramref name="selector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой получены в результате вызова функции преобразования к каждому элементу <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>
              Проецирует каждый элемент последовательности в новую форму, добавляя индекс элемента.
            </summary>
      <param name="source">
                Последовательность значений, для которых вызывается функция преобразования.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип значения, возвращаемый <paramref name="selector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой получены в результате вызова функции преобразования к каждому элементу <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
              Проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов последовательности, возвращаемой <paramref name="selector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой получены в результате вызова функции преобразования один ко многим для каждого элемента входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
              Проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" />, и объединяет результирующие последовательности в одну последовательность.
               Индекс каждого элемента исходной последовательности используется в проецированной форме этого элемента.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов последовательности, возвращаемой <paramref name="selector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой получены в результате вызова функции преобразования один ко многим для каждого элемента входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>
              Проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="collectionSelector">
                Функция преобразования, применяемая к каждому элементу входной последовательности.
              </param>
      <param name="resultSelector">
                Функция преобразования, применяемая к каждому элементу промежуточной последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TCollection">
                Тип промежуточных элементов собранные <paramref name="collectionSelector" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов результирующей последовательности.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой получены в результате вызова функции преобразования один ко многим <paramref name="collectionSelector" /> для каждого элемента <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с полученным элементом.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>
              Проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.
               Индекс каждого элемента исходной последовательности используется в промежуточной проецированной форме этого элемента.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="collectionSelector">
                Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.
              </param>
      <param name="resultSelector">
                Функция преобразования, применяемая к каждому элементу промежуточной последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TCollection">
                Тип промежуточных элементов собранные <paramref name="collectionSelector" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов результирующей последовательности.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой получены в результате вызова функции преобразования один ко многим <paramref name="collectionSelector" /> для каждого элемента <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с полученным элементом.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Определяет, совпадают ли две последовательности для сравнения элементов компаратор проверки на равенство по умолчанию для их типа.
            </summary>
      <param name="first">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для сравнения с <paramref name="second" />.
              </param>
      <param name="second">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для сравнения с первой последовательностью.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see langword="true" /> Если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают по компаратор по умолчанию для этого типа; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Определяет, равны ли две последовательности, сравнивая их элементы с помощью указанного <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
      <param name="first">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для сравнения с <paramref name="second" />.
              </param>
      <param name="second">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для сравнения с первой последовательностью.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Можно использовать для сравнения элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see langword="true" /> Если у двух исходных последовательностей одинаковая длина и их соответствующие элементы совпадают согласно <paramref name="comparer" />; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает единственный элемент последовательности и вызывает исключение, если число элементов последовательности отлично от одного.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Чтобы вернуть единственный элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Входная последовательность содержит более одного элемента.
                
                  -или-
                
                  Входная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает единственный элемент последовательности, удовлетворяющий указанному условию, и вызывает исключение, если таких элементов больше одного.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для возврата из одного элемента.
              </param>
      <param name="predicate">
                Функция для проверки элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности, удовлетворяющий условию.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Элемент не удовлетворяет условию предиката <paramref name="predicate" />.
                
                  -или-
                
                  Удовлетворяет более одного элемента в <paramref name="predicate" />.
                
                  -или-
                
                  Исходная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Возвращает единственный элемент последовательности или значение по умолчанию, если последовательность пуста; Этот метод создает исключение, если в последовательности более одного элемента.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Чтобы вернуть единственный элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности или <see langword="default" />(<paramref name="TSource" />), если последовательность не содержит элементов.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Входная последовательность содержит более одного элемента.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает единственный элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, вызывается исключение.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для возврата из одного элемента.
              </param>
      <param name="predicate">
                Функция для проверки элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности, удовлетворяющий условию, или <see langword="default" />(<paramref name="TSource" />), если элемент не найден.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
              Пропускает заданное число элементов в последовательности и возвращает остальные элементы.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить элементы.
              </param>
      <param name="count">
                Число элементов, пропускаемых перед возвращением остальных элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы, начиная с указанного индекса во входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Пропускает элементы в последовательности, пока заданное условие истинно и затем возвращает оставшиеся элементы.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы из входной последовательности, начиная с первого элемента, в который не прошел проверку, определенную предикатом <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
              Пропускает элементы в последовательности, пока заданное условие истинно и затем возвращает оставшиеся элементы.
               Индекс элемента используется в логике функции предиката.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента исходной последовательности условие; Второй параметр функции представляет индекс исходного элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы из входной последовательности, начиная с первого элемента, в который не прошел проверку, определенную предикатом <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Decimal" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Double" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Int32" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int32" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int64" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Decimal" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Double" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Int32" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Int32" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Int64" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Single" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Single" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Decimal" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления суммы.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Double" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления суммы.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Int32" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления суммы.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Int64" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления суммы.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Decimal" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления суммы.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Double" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления суммы.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Int32" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления суммы.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Int64" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления суммы.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Single" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления суммы.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Single" /> значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления суммы.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
              Возвращает заданное число смежных элементов с начала последовательности.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="count">
                Число возвращаемых элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий указанное число элементов с начала входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает элементы из последовательности, пока указанное условие истинно.
            </summary>
      <param name="source">
                Последовательность требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащая элементы входной последовательности до первого элемента, который не прошел проверку.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
              Возвращает элементы из последовательности, пока указанное условие истинно.
               Индекс элемента используется в логике функции предиката.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента исходной последовательности условие; Второй параметр функции представляет индекс исходного элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащая элементы входной последовательности до первого элемента, который не прошел проверку.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>
              Выполняет дополнительное упорядочение элементов последовательности в порядке по возрастанию по ключу.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IOrderedEnumerable`1" /> Содержащий элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedEnumerable`1" /> Элементы которой сортируются по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания с использованием указанного компаратора.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IOrderedEnumerable`1" /> Содержащий элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedEnumerable`1" /> Элементы которой сортируются по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>
              Выполняет дополнительное упорядочение элементов последовательности в порядке убывания ключа.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IOrderedEnumerable`1" /> Содержащий элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedEnumerable`1" /> Элементы которой сортируются в порядке убывания ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              Выполняет дополнительное упорядочение элементов последовательности в порядке убывания с использованием указанного компаратора.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IOrderedEnumerable`1" /> Содержащий элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedEnumerable`1" /> Элементы которой сортируются в порядке убывания ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Создает массив из <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для создания массива из.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Массив, содержащий элементы из входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              Создает <see cref="T:System.Collections.Generic.Dictionary`2" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для создания <see cref="T:System.Collections.Generic.Dictionary`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Collections.Generic.Dictionary`2" /> содержащий ключи и значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  <paramref name="keySelector" /> создает ключ <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="keySelector" /> создает повторяющиеся ключи для двух элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Создает <see cref="T:System.Collections.Generic.Dictionary`2" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с указанной функцией выбора ключа функции и компаратором ключей.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для создания <see cref="T:System.Collections.Generic.Dictionary`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Collections.Generic.Dictionary`2" /> содержащий ключи и значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  <paramref name="keySelector" /> создает ключ <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="keySelector" /> создает повторяющиеся ключи для двух элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
              Создает <see cref="T:System.Collections.Generic.Dictionary`2" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с указанной функцией выбора ключа и функции селектора элемента.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для создания <see cref="T:System.Collections.Generic.Dictionary`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="elementSelector">
                Функция преобразования для получения результирующего значения каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип значения, возвращаемый <paramref name="elementSelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Collections.Generic.Dictionary`2" /> содержащий значения типа <paramref name="TElement" /> выбранные из входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  <paramref name="keySelector" /> создает ключ <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="keySelector" /> создает повторяющиеся ключи для двух элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Создает <see cref="T:System.Collections.Generic.Dictionary`2" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа, средства сравнения и функции выбора элементов.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для создания <see cref="T:System.Collections.Generic.Dictionary`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="elementSelector">
                Функция преобразования для получения результирующего значения каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип значения, возвращаемый <paramref name="elementSelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Collections.Generic.Dictionary`2" /> содержащий значения типа <paramref name="TElement" /> выбранные из входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  <paramref name="keySelector" /> создает ключ <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="keySelector" /> создает повторяющиеся ключи для двух элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Создает <see cref="T:System.Collections.Generic.List`1" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для создания <see cref="T:System.Collections.Generic.List`1" /> из.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Collections.Generic.List`1" /> содержащий элементы из входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
              Создает <see cref="T:System.Linq.Lookup`2" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для создания <see cref="T:System.Linq.Lookup`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Linq.Lookup`2" /> содержащий ключи и значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Создает <see cref="T:System.Linq.Lookup`2" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с указанной функцией выбора ключа функции и компаратором ключей.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для создания <see cref="T:System.Linq.Lookup`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Linq.Lookup`2" /> содержащий ключи и значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
              Создает <see cref="T:System.Linq.Lookup`2" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с указанной функцией выбора ключа и функции селектора элемента.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для создания <see cref="T:System.Linq.Lookup`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="elementSelector">
                Функция преобразования для получения результирующего значения каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип значения, возвращаемый <paramref name="elementSelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Linq.Lookup`2" /> содержащий значения типа <paramref name="TElement" /> выбранные из входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Создает <see cref="T:System.Linq.Lookup`2" /> из <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа и компаратором функции выбора элементов.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для создания <see cref="T:System.Linq.Lookup`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="elementSelector">
                Функция преобразования для получения результирующего значения каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип значения, возвращаемый <paramref name="elementSelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Linq.Lookup`2" /> содержащий значения типа <paramref name="TElement" /> выбранные из входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Находит объединения наборов двух последовательностей, используя компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="first">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Различающиеся элементы которой образуют первое множество для объединения.
              </param>
      <param name="second">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Различающиеся элементы которой образуют второе множество для объединения.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы из обеих входных последовательностях, кроме дубликатов.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Создает объединения наборов двух последовательностей с использованием указанного <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
      <param name="first">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Различающиеся элементы которой образуют первое множество для объединения.
              </param>
      <param name="second">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Различающиеся элементы которой образуют второе множество для объединения.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы из обеих входных последовательностях, кроме дубликатов.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
              Выполняет фильтрацию последовательности значений на основе заданного предиката.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для фильтрации.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы из входной последовательности, которые удовлетворяют условию.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
              Выполняет фильтрацию последовательности значений на основе заданного предиката.
               Индекс каждого элемента используется в логике функции предиката.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для фильтрации.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента исходной последовательности условие; Второй параметр функции представляет индекс исходного элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Содержащий элементы из входной последовательности, которые удовлетворяют условию.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
              Применяет указанную функцию соответствующие элементы двух последовательностей, создания последовательности результаты.
            </summary>
      <param name="first">
                Первая последовательность для объединения.
              </param>
      <param name="second">
                Вторая последовательность для объединения.
              </param>
      <param name="resultSelector">
                Функция, которая указывает, как объединить элементы двух последовательностей.
              </param>
      <typeparam name="TFirst">
                Тип элементов первой входной последовательностью.
              </typeparam>
      <typeparam name="TSecond">
                Тип элементов второй входной последовательности.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов полученной последовательности.
              </typeparam>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> , Содержащий объединенные элементы двух входных последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableExecutor" />.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableExecutor`1" />.
            </summary>
      <param name="expression">
                Дерево выражения, чтобы связать с новым экземпляром.
              </param>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableQuery" />.
            </summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Linq.EnumerableQuery`1" /> класса и связывает его с <see cref="T:System.Collections.Generic.IEnumerable`1" /> коллекции.
            </summary>
      <param name="enumerable">
                Коллекция для связи с новым экземпляром.
              </param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Linq.EnumerableQuery`1" /> класса и связывает экземпляр с помощью дерева выражений.
            </summary>
      <param name="expression">
                Дерево выражения, чтобы связать с новым экземпляром.
              </param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий итерацию связанного <see cref="T:System.Collections.Generic.IEnumerable`1" /> коллекции, или, если он имеет значение null, если в коллекции, полученный в результате перезаписи дерева связанное выражение как запрос на <see cref="T:System.Collections.Generic.IEnumerable`1" /> источника данных и его выполнением.
            </summary>
      <returns>
              Перечислитель, который может использоваться для итерации по связанного источника данных.
            </returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий итерацию связанного <see cref="T:System.Collections.Generic.IEnumerable`1" /> коллекции, или, если он имеет значение null, если в коллекции, полученный в результате перезаписи дерева связанное выражение как запрос на <see cref="T:System.Collections.Generic.IEnumerable`1" /> источника данных и его выполнением.
            </summary>
      <returns>
              Перечислитель, который может использоваться для итерации по связанного источника данных.
            </returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>
              Создает новый <see cref="T:System.Linq.EnumerableQuery`1" /> объекта и связывает его с указанным выражением дерево, представляющее <see cref="T:System.Linq.IQueryable" /> коллекции данных.
            </summary>
      <param name="expression">
                Дерево выражения, которое представляет <see cref="T:System.Linq.IQueryable" /> коллекцию данных.
              </param>
      <returns>
              <see cref="T:System.Linq.EnumerableQuery`1" /> Объект, связанный с <paramref name="expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
              Создает новый <see cref="T:System.Linq.EnumerableQuery`1" /> объекта и связывает его с указанным выражением дерево, представляющее <see cref="T:System.Linq.IQueryable`1" /> коллекции данных.
            </summary>
      <param name="expression">
                Дерево выражений для выполнения.
              </param>
      <typeparam name="S">
                Тип данных в коллекции, <paramref name="expression" /> представляет.
              </typeparam>
      <returns>
              Объект, связанный с EnumerableQuery <paramref name="expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>
              Выполняет выражение после его для вызова перезаписи <see cref="T:System.Linq.Enumerable" /> методов вместо <see cref="T:System.Linq.Queryable" /> методы все перечислимые источники данных, не сможет выполнять запросы <see cref="T:System.Linq.Queryable" /> методы.
            </summary>
      <param name="expression">
                Дерево выражений для выполнения.
              </param>
      <returns>
              Значение, получаемое в результате выполнения <paramref name="expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>
              Выполняет выражение после его для вызова перезаписи <see cref="T:System.Linq.Enumerable" /> методов вместо <see cref="T:System.Linq.Queryable" /> методы все перечислимые источники данных, не сможет выполнять запросы <see cref="T:System.Linq.Queryable" /> методы.
            </summary>
      <param name="expression">
                Дерево выражений для выполнения.
              </param>
      <typeparam name="S">
                Тип данных в коллекции, <paramref name="expression" /> представляет.
              </typeparam>
      <returns>
              Значение, получаемое в результате выполнения <paramref name="expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>
              Возвращает текстовое представление перечислимой коллекции или, если он имеет значение null, дерева выражения, связанного с данным экземпляром.
            </summary>
      <returns>
              Текстовое представление перечислимой коллекции или, если он имеет значение null, дерева выражения, связанного с данным экземпляром.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>
              Сокращает узел двоичных выражений до более простого выражения.
            </summary>
      <returns>
              Преобразованное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="left">
                <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> Свойства результата.
              </param>
      <param name="conversion">
                <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> Свойства результата.
              </param>
      <param name="right">
                <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="variables">
                <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> Свойства результата.
              </param>
      <param name="expressions">
                <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> Свойства результата.
              </param>
      <returns>
              Это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>
              Возвращает строку <see cref="T:System.String" />, которая представляет текущий объект <see cref="T:System.Object" />.
            </summary>
      <returns>
              Объект <see cref="T:System.String" />, представляющий текущий объект <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="variable">
                <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> Свойства результата.
              </param>
      <param name="filter">
                <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> Свойства результата.
              </param>
      <param name="body">
                <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, то возвращается это выражение
            </summary>
      <param name="test">
                <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> Свойства результата.
              </param>
      <param name="ifTrue">
                <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> Свойства результата.
              </param>
      <param name="ifFalse">
                <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> Свойства результата.
              </param>
      <returns>
              Это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arguments">
                Аргументы динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <param name="arg2">
                Третий аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <param name="arg2">
                Третий аргумент динамической операции.
              </param>
      <param name="arg3">
                Четвертый аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arguments">
                Аргументы динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arguments">
                Аргументы динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и одним аргументом.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arg0">
                Аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и двумя аргументами.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и тремя аргументами.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <param name="arg2">
                Третий аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и четырьмя аргументами.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <param name="arg2">
                Третий аргумент динамической операции.
              </param>
      <param name="arg3">
                Четвертый аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arguments">
                Аргументы динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <param name="index">
                Индекс аргумента.
              </param>
      <returns>
              Возвращает <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary>
              При необходимости создает CallSite и возвращает этот CallSite для полиморфного встроенного кэша DynamicExpression.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary>
              Переопределите этот узел, заменив аргументы динамического выражения предоставленными значениями.
                Количество args должно совпадать с количеством аргументов в текущем выражении.
                Не следует использовать этот тип.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
                Этот вспомогательный метод позволяет переопределять узлы независимо от конкретной реализации класса, производного от DynamicExpression, который используется на сайте вызова.
            </summary>
      <param name="args">
                Аргументы.
              </param>
      <returns>
              Возвращает переопределенное выражение <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Сравнивает значение, переданное в параметр arguments, со свойством <see langword="Arguments" /> текущего экземпляра <see langword="DynamicExpression" />.
               Если значения параметра и свойства равны, возвращается текущий экземпляр.
               Если они не равны, возвращается новый экземпляр, <see langword="DynamicExpression" /> идентичный текущему экземпляру, за исключением того, что свойство <see langword="Arguments" /> имеет значение параметра arguments.
            </summary>
      <param name="arguments">
                Свойство <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" />.
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.DynamicExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Возвращает <see cref="T:System.Linq.Expressions.Expression" />, измененные выражение, если изменяется или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <param name="index">
                Индекс аргумента.
              </param>
      <returns>
              Возвращает <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>
              Возвращает текстовое представление объекта <see cref="T:System.Linq.Expressions.ElementInit" />.
            </summary>
      <returns>
              Текстовое представление объекта <see cref="T:System.Linq.Expressions.ElementInit" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="arguments">
                Свойство <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>
              Создает новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <param name="nodeType">
                Значение <see cref="T:System.Linq.Expressions.ExpressionType" /> для установки в качестве типа узла.
              </param>
      <param name="type">
                <see cref="P:System.Linq.Expressions.Expression.Type" /> данного объекта <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор сложения не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения.
               Может быть указан метод реализации.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> и оператор сложения не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор сложения не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, содержащую проверку переполнения.
               Может быть указан метод реализации.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> имеет значение <see langword="null" />, и оператор сложения не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="AND" />.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.And" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Битовые <see langword="AND" /> оператор не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="AND" />.
               Может быть указан метод реализации.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.And" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> имеет значение <see langword="null" />, и оператор битовой операции <see langword="AND" /> не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="AND" />, вычисляющую второй операнд, только если первый операнд имеет значение <see langword="true" />.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Битовые <see langword="AND" /> оператор не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                
                  -или-
                
                  <paramref name="left" />. Тип и <paramref name="right" />. Тип не отличаются от логического типа.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="AND" />, вычисляющую второй операнд, только если первый операнд имеет значение true.
               Может быть указан метод реализации.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> и побитового <see langword="AND" /> оператор не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                
                  -или-
                
                  <paramref name="method" /> — <see langword="null" /> и <paramref name="left" />. Тип и <paramref name="right" />. Тип не отличаются от логического типа.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к многомерному массиву.
            </summary>
      <param name="array">
                Выражение, представляющее многомерный массив.
              </param>
      <param name="indexes">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий выражения для индексации массива.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к массиву.
            </summary>
      <param name="array">
                Выражение, представляющее индексируемый массив.
              </param>
      <param name="indexes">
                Массив, содержащий выражения для индексации массива.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее применение оператора индекса массива к массиву с рангом более одного.
            </summary>
      <param name="array">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />.
              </param>
      <param name="indexes">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="array" /> или <paramref name="indexes" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="array" />. Тип не представляет тип массива.
                
                  -или-
                
                  Ранг <paramref name="array" />. Тип не совпадает с числом элементов в <paramref name="indexes" />.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство один или несколько элементов <paramref name="indexes" /> не представляет <see cref="T:System.Int32" /> типа.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее применение оператора индекса массива к массиву ранга один.
            </summary>
      <param name="array">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="index">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="array" /> или <paramref name="index" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="array" />. Тип не представляет тип массива.
                
                  -или-
                
                  <paramref name="array" />. Тип представляет тип массива, ранг которого не равен 1.
                
                  -или-
                
                  <paramref name="index" />. Тип не представляет <see cref="T:System.Int32" /> типа.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее применение оператора индекса массива к многомерному массиву.
            </summary>
      <param name="array">
                Массив экземпляров <see cref="T:System.Linq.Expressions.Expression" />, которые являются индексами для операции индекса массива.
              </param>
      <param name="indexes">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="array" /> или <paramref name="indexes" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="array" />. Тип не представляет тип массива.
                
                  -или-
                
                  Ранг <paramref name="array" />. Тип не совпадает с числом элементов в <paramref name="indexes" />.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство один или несколько элементов <paramref name="indexes" /> не представляет <see cref="T:System.Int32" /> типа.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> для получения длины одномерного массива.
            </summary>
      <param name="array">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />, и свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, равное <paramref name="array" />..
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="array" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="array" />. Тип не представляет тип массива.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию поля или свойства.
            </summary>
      <param name="member">
                Объект <see cref="T:System.Reflection.MemberInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.
              </param>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberAssignment" />, у которого свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> равняется <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, а для свойств <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="member" /> или <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="member" /> Представляет поле или свойство.
                
                  -или-
                
                  Свойство, представленное <paramref name="member" /> не имеет <see langword="set" /> доступа.
                
                  -или-
                
                  <paramref name="expression" />. Тип не может быть назначен типу поля или свойства, <paramref name="member" /> представляет.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию члена с помощью метода доступа к свойству.
            </summary>
      <param name="propertyAccessor">
                <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.
              </param>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberAssignment" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> равное <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, к которому получается доступ в <paramref name="propertyAccessor" />, и свойство <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />, для которого задано значение <paramref name="expression" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="propertyAccessor" /> или <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="propertyAccessor" /> не представляет метод доступа к свойству.
                
                  -или-
                
                  В свойстве, доступ к которому осуществляется с помощью параметра <paramref name="propertyAccessor" />, отсутствует метод доступа <see langword="set" />.
                
                  -или-
                
                  <paramref name="expression" />.Type не может назначаться для типа поля или свойства, которое представляет <paramref name="member" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий заданные выражения и не содержащий переменных.
            </summary>
      <param name="expressions">
                Выражения в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.
            </summary>
      <param name="variables">
                Переменные в блоке.
              </param>
      <param name="expressions">
                Выражения в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.
            </summary>
      <param name="variables">
                Переменные в блоке.
              </param>
      <param name="expressions">
                Выражения в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее два выражения и не содержащее переменных.
            </summary>
      <param name="arg0">
                Первое выражение в блоке.
              </param>
      <param name="arg1">
                Второе выражение в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее три выражения и не содержащее переменных.
            </summary>
      <param name="arg0">
                Первое выражение в блоке.
              </param>
      <param name="arg1">
                Второе выражение в блоке.
              </param>
      <param name="arg2">
                Третье выражение в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее четыре выражения и не содержащее переменных.
            </summary>
      <param name="arg0">
                Первое выражение в блоке.
              </param>
      <param name="arg1">
                Второе выражение в блоке.
              </param>
      <param name="arg2">
                Третье выражение в блоке.
              </param>
      <param name="arg3">
                Четвертое выражение в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее пять выражений и не содержащее переменных.
            </summary>
      <param name="arg0">
                Первое выражение в блоке.
              </param>
      <param name="arg1">
                Второе выражение в блоке.
              </param>
      <param name="arg2">
                Третье выражение в блоке.
              </param>
      <param name="arg3">
                Четвертое выражение в блоке.
              </param>
      <param name="arg4">
                Пятое выражение в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий заданные выражения и не содержащий переменных.
            </summary>
      <param name="expressions">
                Выражения в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее данные выражения, не содержащее переменных и имеющее конкретный тип результатов.
            </summary>
      <param name="type">
                Тип результата блока.
              </param>
      <param name="expressions">
                Выражения в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.
            </summary>
      <param name="type">
                Тип результата блока.
              </param>
      <param name="variables">
                Переменные в блоке.
              </param>
      <param name="expressions">
                Выражения в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.
            </summary>
      <param name="type">
                Тип результата блока.
              </param>
      <param name="variables">
                Переменные в блоке.
              </param>
      <param name="expressions">
                Выражения в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее данные выражения, не содержащее переменных и имеющее конкретный тип результатов.
            </summary>
      <param name="type">
                Тип результата блока.
              </param>
      <param name="expressions">
                Выражения в блоке.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение <paramref name="target" />, а при переходе целевой метке передается значение NULL.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break.
               Можно указать значение, передаваемое метке при переходе.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="value">
                Значение, передаваемое связанной метке при переходе.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break с указанным типом.
               Можно указать значение, передаваемое метке при переходе.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="value">
                Значение, передаваемое связанной метке при переходе.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break с указанным типом.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, не принимающего аргументы.
            </summary>
      <param name="instance">
                Выражение <see cref="T:System.Linq.Expressions.Expression" />, задающее экземпляр для вызова метода экземпляра (для метода <see langword="null" /> (<see langword="static" /> в Visual Basic) передается <see langword="Shared" />).
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="method" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  <paramref name="instance" /> — <see langword="null" /> и <paramref name="method" /> представляет метод экземпляра.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="instance" />. Тип не может быть назначен объявляющий тип метода, представленного <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего аргументы.
            </summary>
      <param name="instance">
                <see cref="T:System.Linq.Expressions.Expression" />, чтобы задать свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> равным (передать <see langword="null" /> для метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic).
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.
              </param>
      <param name="arguments">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="method" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  <paramref name="instance" /> — <see langword="null" /> и <paramref name="method" /> представляет метод экземпляра.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="instance" />. Тип не может быть назначен объявляющий тип метода, представленного <paramref name="method" />.
                
                  -или-
                
                  Число элементов в <paramref name="arguments" /> не равно количеству параметров для метода, представленного <paramref name="method" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="arguments" /> не может быть назначен для соответствующего параметра для метода, представленного <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего два аргумента.
            </summary>
      <param name="instance">
                Выражение <see cref="T:System.Linq.Expressions.Expression" />, указывающее экземпляр для вызова экземпляра.
                 (Для статического метода (Shared в Visual Basic) передается NULL.)
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.
              </param>
      <param name="arg0">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.
              </param>
      <param name="arg1">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего три аргумента.
            </summary>
      <param name="instance">
                Выражение <see cref="T:System.Linq.Expressions.Expression" />, указывающее экземпляр для вызова экземпляра.
                 (Для статического метода (Shared в Visual Basic) передается NULL.)
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.
              </param>
      <param name="arg0">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.
              </param>
      <param name="arg1">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.
              </param>
      <param name="arg2">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего аргументы.
            </summary>
      <param name="instance">
                Выражение <see cref="T:System.Linq.Expressions.Expression" />, задающее экземпляр для вызова метода экземпляра (для метода <see langword="null" /> (<see langword="static" /> в Visual Basic) передается <see langword="Shared" />).
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.
              </param>
      <param name="arguments">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="method" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="instance" /> имеет значение <see langword="null" />, а свойство <paramref name="method" /> представляет метод экземпляра.
                
                  -или-
                
                  <paramref name="arguments" /> не является <see langword="null" /> и один или несколько его элементов является <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="instance" />.Type не может быть назначен объявляющему типу метода, представленного свойством <paramref name="method" />.
                
                  -или-
                
                  Число элементов в <paramref name="arguments" /> не соответствует числу параметров метода, представленного свойством <paramref name="method" />.
                
                  -или-
                
                  Один или несколько элементов в <paramref name="arguments" /> невозможно присвоить соответствующему параметру метода, представленного свойством <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов для метода, вызывая соответствующий метод фабрики.
            </summary>
      <param name="instance">
                <see cref="T:System.Linq.Expressions.Expression" />, для значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" /> которого будет выполнен поиск определенного метода.
              </param>
      <param name="methodName">
                Имя метода.
              </param>
      <param name="typeArguments">
                Массив объектов <see cref="T:System.Type" />, указывающий тип параметров универсального метода.
                 Если methodName задает неуниверсальный метод, данный аргумент должен иметь значение NULL.
              </param>
      <param name="arguments">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, который представляет аргументы для метода.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, равное <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которого задано значение <see cref="T:System.Reflection.MethodInfo" />, представляющее указанный метод экземпляра, а для указанных аргументов заданы значения <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="instance" /> или <paramref name="methodName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Отсутствует метод с именем <paramref name="methodName" />, тип, параметры которого соответствуют <paramref name="typeArguments" />, параметр которого типы соответствия и <paramref name="arguments" /> находится в <paramref name="instance" />. Тип или его базовых типов.
                
                  -или-
                
                  Более одного метода с именем <paramref name="methodName" />, тип, параметры которого соответствуют <paramref name="typeArguments" />, параметр которого типы соответствия и <paramref name="arguments" /> находится в <paramref name="instance" />. Тип или его базовых типов.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода (Shared в Visual Basic).
            </summary>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.
              </param>
      <param name="arguments">
                Коллекция выражений <see cref="T:System.Linq.Expressions.Expression" />, представляющая аргументы вызова.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic), принимающего один аргумент.
            </summary>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.
              </param>
      <param name="arg0">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="method" /> имеет значение null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего два аргумента.
            </summary>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.
              </param>
      <param name="arg0">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.
              </param>
      <param name="arg1">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="method" /> имеет значение null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего три аргумента.
            </summary>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.
              </param>
      <param name="arg0">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.
              </param>
      <param name="arg1">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.
              </param>
      <param name="arg2">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="method" /> имеет значение null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего четыре аргумента.
            </summary>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.
              </param>
      <param name="arg0">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.
              </param>
      <param name="arg1">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.
              </param>
      <param name="arg2">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.
              </param>
      <param name="arg3">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий четвертый аргумент.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="method" /> имеет значение null.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего пять аргументов.
            </summary>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.
              </param>
      <param name="arg0">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.
              </param>
      <param name="arg1">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.
              </param>
      <param name="arg2">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.
              </param>
      <param name="arg3">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий четвертый аргумент.
              </param>
      <param name="arg4">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий пятый аргумент.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="method" /> имеет значение NULL.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic), принимающего аргументы.
            </summary>
      <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />, представляющий метод <see langword="static" /> (<see langword="Shared" /> в Visual Basic), чтобы задать значение <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> для свойства.
              </param>
      <param name="arguments">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="method" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Число элементов в <paramref name="arguments" /> не равно количеству параметров для метода, представленного <paramref name="method" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="arguments" /> не может быть назначен для соответствующего параметра для метода, представленного <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic), вызывая соответствующий метод фабрики.
            </summary>
      <param name="type">
                Объект <see cref="T:System.Type" />, указывающий тип, который содержит указанный метод <see langword="static" /> (<see langword="Shared" /> в Visual Basic).
              </param>
      <param name="methodName">
                Имя метода.
              </param>
      <param name="typeArguments">
                Массив объектов <see cref="T:System.Type" />, указывающий тип параметров универсального метода.
                 Если methodName задает неуниверсальный метод, данный аргумент должен иметь значение NULL.
              </param>
      <param name="arguments">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, который представляет аргументы для метода.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которого задано значение <see cref="T:System.Reflection.MethodInfo" />, представляющее указанный метод <see langword="static" /> (<see langword="Shared" /> в Visual Basic), и свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которого заданы указанные аргументы.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="type" /> или <paramref name="methodName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Отсутствует метод с именем <paramref name="methodName" />, тип, параметры которого соответствуют <paramref name="typeArguments" />, параметр которого типы соответствия и <paramref name="arguments" /> находится в <paramref name="type" /> или его базовых типов.
                
                  -или-
                
                  Более одного метода с именем <paramref name="methodName" />, тип, параметры которого соответствуют <paramref name="typeArguments" />, параметр которого типы соответствия и <paramref name="arguments" /> находится в <paramref name="type" /> или его базовых типов.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch со ссылкой на перехваченный объект <see cref="T:System.Exception" />, который используется в теле обработчика.
            </summary>
      <param name="variable">
                Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный данным обработчиком.
              </param>
      <param name="body">
                Тело оператора catch.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с фильтром <see cref="T:System.Exception" /> и ссылкой на перехваченный объект <see cref="T:System.Exception" />.
            </summary>
      <param name="variable">
                Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный данным обработчиком.
              </param>
      <param name="body">
                Тело оператора catch.
              </param>
      <param name="filter">
                Тело фильтра <see cref="T:System.Exception" />.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch.
            </summary>
      <param name="type">
                Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатываться этим объектом <see cref="T:System.Linq.Expressions.CatchBlock" />.
              </param>
      <param name="body">
                Тело оператора catch.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с фильтром <see cref="T:System.Exception" /> без ссылки на перехваченный объект <see cref="T:System.Exception" />.
            </summary>
      <param name="type">
                Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатываться этим объектом <see cref="T:System.Linq.Expressions.CatchBlock" />.
              </param>
      <param name="body">
                Тело оператора catch.
              </param>
      <param name="filter">
                Тело фильтра <see cref="T:System.Exception" />.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки последовательности.
            </summary>
      <param name="document">
                Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.
              </param>
      <returns>
              Экземпляр объекта <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки следования.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство <paramref name="left" /> не представляет ссылочный тип или тип значения, допускающие значения NULL.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="left" />. Тип и <paramref name="right" />. Type не преобразовываются друг с другом.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию, заданную функции преобразования.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="left" />. Тип и <paramref name="right" />. Type не преобразовываются друг с другом.
                
                  -или-
                
                  <paramref name="conversion" /> не <see langword="null" /> и <paramref name="conversion" />. Тип является типом делегата, который не принимает только один аргумент.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство <paramref name="left" /> не представляет ссылочный тип или тип значения, допускающие значения NULL.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство <paramref name="left" /> представляет тип, который не может быть назначен тип параметра делегата типа <paramref name="conversion" />. Тип.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство <paramref name="right" /> не равен типу возвращаемого типа делегата <paramref name="conversion" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.
            </summary>
      <param name="test">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.
              </param>
      <param name="ifTrue">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.
              </param>
      <param name="ifFalse">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="test" />, <paramref name="ifTrue" /> или <paramref name="ifFalse" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="test" />. Тип не является <see cref="T:System.Boolean" />.
                
                  -или-
                
                  <paramref name="ifTrue" />. Тип не равен <paramref name="ifFalse" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.
            </summary>
      <param name="test">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.
              </param>
      <param name="ifTrue">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.
              </param>
      <param name="ifFalse">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.
              </param>
      <param name="type">
                Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.ConstantExpression" />, для свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> которого задано указанное значение.
            </summary>
      <param name="value">
                Объект <see cref="T:System.Object" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ConstantExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />, и свойством <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />, для которого задано указанное значение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.ConstantExpression" />, содержащее свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.
            </summary>
      <param name="value">
                Объект <see cref="T:System.Object" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ConstantExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />, и свойствами <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="type" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="value" /> не <see langword="null" /> и <paramref name="type" /> не может быть назначен из динамического типа <paramref name="value" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение <paramref name="target" />, а при переходе целевой метке передается значение NULL.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue с указанным типом.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение null.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования типа.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор преобразования не определен между <paramref name="expression" />. Тип и <paramref name="type" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования, для которой указан метод реализации.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает только один аргумент.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор преобразования не определен между <paramref name="expression" />. Тип и <paramref name="type" />.
                
                  -или-
                
                  <paramref name="expression" />. Тип не назначается типу аргумента метода, представленного <paramref name="method" />.
                
                  -или-
                
                  Типом возвращаемого значения метода, представленного <paramref name="method" /> не может быть назначен для <paramref name="type" />.
                
                  -или-
                
                  <paramref name="expression" />. Тип или <paramref name="type" /> является типом значения, допускающие значения NULL и соответствующий тип не допускающим значение не равно тип аргумента или возвращаемого типа, соответственно метода, представленного параметром <paramref name="method" />.
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                  Более одного метода, который соответствует <paramref name="method" /> Описание найдено.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования, создающую исключение, если целевой тип переполнен.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор преобразования не определен между <paramref name="expression" />. Тип и <paramref name="type" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования, создающую исключение, если целевой тип переполнен, и для которой указан метод реализации.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает только один аргумент.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор преобразования не определен между <paramref name="expression" />. Тип и <paramref name="type" />.
                
                  -или-
                
                  <paramref name="expression" />. Тип не назначается типу аргумента метода, представленного <paramref name="method" />.
                
                  -или-
                
                  Типом возвращаемого значения метода, представленного <paramref name="method" /> не может быть назначен для <paramref name="type" />.
                
                  -или-
                
                  <paramref name="expression" />. Тип или <paramref name="type" /> является типом значения, допускающие значения NULL и соответствующий тип не допускающим значение не равно тип аргумента или возвращаемого типа, соответственно метода, представленного параметром <paramref name="method" />.
                </exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
                  Более одного метода, который соответствует <paramref name="method" /> Описание найдено.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> с заданным диапазоном.
            </summary>
      <param name="document">
                Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.
              </param>
      <param name="startLine">
                Начальная строка данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
                 Должно быть больше 0.
              </param>
      <param name="startColumn">
                Начальный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
                 Должно быть больше 0.
              </param>
      <param name="endLine">
                Конечная строка данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
                 Значение должно быть больше или равно значению начальной строки.
              </param>
      <param name="endColumn">
                Конечный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
                 Если конечная строка совпадает с начальной строкой, это значение должно быть больше или равно значению начального столбца.
                 В любом случае оно должно быть больше 0.
              </param>
      <returns>
              Экземпляр <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.
            </summary>
      <param name="expression">
                Уменьшаемое выражение <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшенное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.
            </summary>
      <param name="expression">
                Уменьшаемое выражение <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшенное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.DefaultExpression" />, для свойства <see cref="P:System.Linq.Expressions.Expression.Type" /> которого задан указанный тип.
            </summary>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.DefaultExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Default" />, и свойством <see cref="P:System.Linq.Expressions.Expression.Type" />, для которого задан указанный тип.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического деления.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор деления не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического деления.
               Может быть указан метод реализации.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> имеет значение <see langword="null" />, и оператор деления не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arguments">
                Аргументы динамической операции.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <param name="arg2">
                Третий аргумент динамической операции.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <param name="arg2">
                Третий аргумент динамической операции.
              </param>
      <param name="arg3">
                Четвертый аргумент динамической операции.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="returnType">
                Тип результата динамического выражения.
              </param>
      <param name="arguments">
                Аргументы динамической операции.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.ElementInit" />, присвоенный <see cref="T:System.Collections.Generic.IEnumerable`1" /> в качестве второго аргумента.
            </summary>
      <param name="addMethod">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.
              </param>
      <param name="arguments">
                Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, которые следует задать для свойства <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ElementInit" />, содержащее свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> и <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="addMethod" /> или <paramref name="arguments" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Методу, представленному параметром <paramref name="addMethod" />, не присвоено имя "Добавить" (без учета регистра).
                
                  -или-
                
                  Метод, представленный параметром <paramref name="addMethod" />, не является методом экземпляра.
                
                  -или-
                
                  Число элементов в <paramref name="arguments" /> не соответствует числу параметров метода, представленного параметром <paramref name="addMethod" />.
                
                  -или-
                
                  Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="arguments" /> невозможно присвоить типу соответствующего параметра метода, представленного <paramref name="addMethod" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.ElementInit" />, присвоенный массиву значений в качестве второго аргумента.
            </summary>
      <param name="addMethod">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.
              </param>
      <param name="arguments">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, которые следует задать для свойства <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ElementInit" />, содержащее свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> и <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="addMethod" /> или <paramref name="arguments" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Метод, который addMethod, не является с именем «Add» (без учета регистра).
                
                  -или-
                
                  Метод представляет addMethod не является методом экземпляра.
                
                  -или-
                
                  аргументы не содержит количество элементов, равное количеству параметров для метода, addMethod представляет.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство один или несколько элементов <paramref name="arguments" /> не может быть назначен тип параметра метода, <paramref name="addMethod" /> представляет.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>
              Создает пустое выражение типа <see cref="T:System.Void" />..
            </summary>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.DefaultExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Default" />, и свойство <see cref="P:System.Linq.Expressions.Expression.Type" />, равное <see cref="T:System.Void" />..
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение равенства.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор равенства не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение равенства.
               Может быть указан метод реализации.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="liftToNull">
                <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> и оператор равенства не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="XOR" /> с использованием op_ExclusiveOr для пользовательских типов.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see langword="XOR" /> Оператор не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="XOR" /> с использованием op_ExclusiveOr для пользовательских типов.
               Может быть указан метод реализации.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> имеет значение <see langword="null" />, и оператор <see langword="XOR" /> не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием op_ExclusiveOr для пользовательских типов.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием op_ExclusiveOr для пользовательских типов.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием op_ExclusiveOr для пользовательских типов.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.
                 Для <see langword="static" /> (<see langword="Shared" /> в Visual Basic) параметр <paramref name="expression" /> должен иметь значение <see langword="null" />.
              </param>
      <param name="field">
                Объект <see cref="T:System.Reflection.FieldInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, и свойствами <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> и <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="field" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Поля, представленного <paramref name="field" /> не <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и <paramref name="expression" /> — <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="expression" />. Тип не может быть назначен объявляющий тип поля, представленного <paramref name="field" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к полю, которому предоставлено имя поля.
            </summary>
      <param name="expression">
                <see cref="T:System.Linq.Expressions.Expression" />, где <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит поле с именем <paramref name="fieldName" />.
                 Для статических полей допускается значение NULL.
              </param>
      <param name="fieldName">
                Имя поля для доступа.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, имеющее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />, для которого задано значение <paramref name="expression" />, и свойство <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которого задано значение <see cref="T:System.Reflection.FieldInfo" />, представляющее поле, обозначенное с помощью параметра <paramref name="fieldName" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="expression" /> или <paramref name="fieldName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Отсутствует поле с именем <paramref name="fieldName" /> определяется в <paramref name="expression" />. Тип или его базовых типов.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.
            </summary>
      <param name="expression">
                Объект, содержащий поле.
                 Для статических полей допускается значение NULL.
              </param>
      <param name="type">
                Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, содержащий поле.
              </param>
      <param name="fieldName">
                Поле для доступа.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.MemberExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>
              Создает объект <see cref="T:System.Type" />, представляющий универсальный тип делегата System.Action с заданными аргументами типа.
            </summary>
      <param name="typeArgs">
                Массив до шестнадцати объектов <see cref="T:System.Type" />, указывающих аргументы типа для типа делегата <see langword="System.Action" />.
              </param>
      <returns>
              Тип делегата System.Action с определенными аргументами типа.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="typeArgs" /> содержит более шестнадцати элементов.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="typeArgs" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>
              Получает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func или System.Action с заданными аргументами типа.
            </summary>
      <param name="typeArgs">
                Тип аргументов делегата.
              </param>
      <returns>
              Тип делегата.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>
              Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func с заданными аргументами типа.
               Аргумент последнего типа задает тип возврата созданного делегата.
            </summary>
      <param name="typeArgs">
                Массив до семнадцати объектов <see cref="T:System.Type" />, указывающих аргументы типа для типа делегата <see langword="System.Func" />.
              </param>
      <returns>
              Тип делегата System.Func с определенными аргументами типа.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="typeArgs" /> содержит не более одного или более семнадцатью элементов.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="typeArgs" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — указанное значение, а при переходе целевой метке передается значение NULL.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto.
               Можно указать значение, передаваемое метке при переходе.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="value">
                Значение, передаваемое связанной метке при переходе.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор goto с указанным типом.
               Можно указать значение, передаваемое метке при переходе.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="value">
                Значение, передаваемое связанной метке при переходе.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор goto с указанным типом.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — указанное значение, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее числовое сравнение объектов "больше, чем".
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор «больше чем» не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее числовое сравнение объектов "больше, чем".
               Может быть указан метод реализации.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="liftToNull">
                <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> и оператор «больше чем» не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор «больше или равно» не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="liftToNull">
                <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> имеет значение <see langword="null" />, и оператор "больше или равно" не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный блок с оператором <see langword="if" />.
            </summary>
      <param name="test">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.
              </param>
      <param name="ifTrue">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, для которых заданы указанные значения.
               Свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> присваивается значение выражения по умолчанию, тип получаемого выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />, возвращаемого этим методом, — <see cref="T:System.Void" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный блок с операторами <see langword="if" /> и <see langword="else" />.
            </summary>
      <param name="test">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.
              </param>
      <param name="ifTrue">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.
              </param>
      <param name="ifFalse">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.
               Тип выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />, возвращаемого этим методом, — <see cref="T:System.Void" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличение значения выражения на 1.
            </summary>
      <param name="expression">
                Увеличиваемое выражение <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличенное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий приращение выражения на 1.
            </summary>
      <param name="expression">
                Увеличиваемое выражение <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличенное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, применяющее делегат или лямбда-выражение к списку выражений аргумента.
            </summary>
      <param name="expression">
                Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат или лямбда-выражение для применения.
              </param>
      <param name="arguments">
                Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, представляющие аргументы, к которым применяется делегат или лямбда-выражение.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, которое применяет заданный делегат или лямбда-выражение к предоставленным аргументам.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="expression" />. Тип не представляет тип делегата или <see cref="T:System.Linq.Expressions.Expression`1" />.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="arguments" /> не допускает присваивание типу соответствующего параметра делегата, представленного <paramref name="expression" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="arguments" /> не содержит количество элементов, как список параметров для делегата, представленного <paramref name="expression" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, применяющее делегат или лямбда-выражение к списку выражений аргумента.
            </summary>
      <param name="expression">
                Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат или лямбда-выражение для применения.
              </param>
      <param name="arguments">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы, к которым применяется делегат или лямбда-выражение.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, которое применяет заданный делегат или лямбда-выражение к предоставленным аргументам.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="expression" />. Тип не представляет тип делегата или <see cref="T:System.Linq.Expressions.Expression`1" />.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="arguments" /> не допускает присваивание типу соответствующего параметра делегата, представленного <paramref name="expression" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="arguments" /> не содержит количество элементов, как список параметров для делегата, представленного <paramref name="expression" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>
              Возвращает значение, показывающее, имеет ли выражение значение false.
            </summary>
      <param name="expression">
                Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <returns>
              Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Возвращает значение, показывающее, имеет ли выражение значение false.
            </summary>
      <param name="expression">
                Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
              </param>
      <returns>
              Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>
              Возвращает значение, показывающее, имеет ли выражение значение true.
            </summary>
      <param name="expression">
                Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <returns>
              Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Возвращает значение, показывающее, имеет ли выражение значение true.
            </summary>
      <param name="expression">
                Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
              </param>
      <returns>
              Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void, не имеющую имени.
            </summary>
      <returns>
              Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.LabelExpression" />, представляющий метку без значения по умолчанию.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым будет связано данное выражение <see cref="T:System.Linq.Expressions.LabelExpression" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.LabelExpression" /> без значения по умолчанию.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.LabelExpression" />, представляющее метку с заданным значением по умолчанию.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым будет связано данное выражение <see cref="T:System.Linq.Expressions.LabelExpression" />.
              </param>
      <param name="defaultValue">
                Значение данного выражения <see cref="T:System.Linq.Expressions.LabelExpression" /> после достижения метки через стандартный поток управления.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.LabelExpression" /> с заданным значением по умолчанию.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>
              Создает объект<see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void и заданным именем.
            </summary>
      <param name="name">
                Имя метки.
              </param>
      <returns>
              Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с заданным типом.
            </summary>
      <param name="type">
                Тип значения, которое передается при переходе к метке.
              </param>
      <returns>
              Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с заданными типом и именем.
            </summary>
      <param name="type">
                Тип значения, которое передается при переходе к метке.
              </param>
      <param name="name">
                Имя метки.
              </param>
      <returns>
              Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает лямбда-выражение, сначала создавая тип делегата.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="tailCall">
                Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              Создает лямбда-выражение, сначала создавая тип делегата.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="tailCall">
                Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.
              </param>
      <param name="parameters">
                Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает лямбда-выражение, сначала создавая тип делегата.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="parameters">
                Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, и свойствами <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="body" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="parameters" /> являются <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="parameters" /> содержит более шестнадцати элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает лямбда-выражение, сначала создавая тип делегата.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="name">
                Имя для лямбда-функции.
                 Используется для выпуска сведений об отладке.
              </param>
      <param name="tailCall">
                Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает лямбда-выражение, сначала создавая тип делегата.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="name">
                Имя для лямбда-функции.
                 Используется для выпуска сведений об отладке.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает лямбда-выражение, сначала создавая тип делегата.
            </summary>
      <param name="delegateType">
                Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.
              </param>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="tailCall">
                Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              Создает лямбда-выражение, сначала создавая тип делегата.
            </summary>
      <param name="delegateType">
                Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.
              </param>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="tailCall">
                Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.
              </param>
      <param name="parameters">
                Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.
               Он может использоваться, если тип делегата неизвестен в момент компиляции.
            </summary>
      <param name="delegateType">
                Тип <see cref="T:System.Type" />, представляющий сигнатуру делегата для лямбда-выражения.
              </param>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Объект, представляющий лямбда-выражение со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="delegateType" /> или <paramref name="body" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов в <paramref name="parameters" /> имеют значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="delegateType" /> Представляет тип делегата.
                
                  -или-
                
                  <paramref name="body" />. Тип — тип, который не допускает присваивание к типу возвращаемого типа делегата, представленного <paramref name="delegateType" />.
                
                  -или-
                
                  <paramref name="parameters" /> не содержит количество элементов, как список параметров для типа делегата, представленного <paramref name="delegateType" />.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="parameters" /> не может быть назначен из типа соответствующего типа параметра типа делегата, представленного <paramref name="delegateType" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.
               Он может использоваться, если тип делегата неизвестен в момент компиляции.
            </summary>
      <param name="delegateType">
                Тип <see cref="T:System.Type" />, представляющий сигнатуру делегата для лямбда-выражения.
              </param>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="parameters">
                Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Объект, представляющий лямбда-выражение со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="delegateType" /> или <paramref name="body" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов в <paramref name="parameters" /> имеют значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="delegateType" />Представляет тип делегата.
                
                  -или-
                
                  <paramref name="body" />. Тип — тип, который не может быть назначен в тип возвращаемого типа делегата, представленный <paramref name="delegateType" />.
                
                  -или-
                
                  <paramref name="parameters" />не содержит одинаковое количество элементов в списке параметров для типа делегата, представленный <paramref name="delegateType" />.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="parameters" /> не может быть назначен из типа с соответствующим типом параметра типа делегата, представленный <paramref name="delegateType" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает лямбда-выражение, сначала создавая тип делегата.
            </summary>
      <param name="delegateType">
                Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.
              </param>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="name">
                Имя для лямбда-функции.
                 Используется для выпуска сведений об отладке.
              </param>
      <param name="tailCall">
                Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает лямбда-выражение, сначала создавая тип делегата.
            </summary>
      <param name="delegateType">
                Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.
              </param>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="name">
                Имя для лямбда-функции.
                 Используется для выпуска сведений об отладке.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="tailCall">
                Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <typeparam name="TDelegate">
                Тип делегата.
              </typeparam>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="tailCall">
                Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.
              </param>
      <param name="parameters">
                Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <typeparam name="TDelegate">
                Тип делегата.
              </typeparam>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <typeparam name="TDelegate">
                Тип делегата.
              </typeparam>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="body" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов в <paramref name="parameters" /> имеют значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="TDelegate" /> не является типом делегата.
                
                  -или-
                
                  <paramref name="body" />. Тип представляет тип, который не может быть назначен тип возвращаемого значения <paramref name="TDelegate" />.
                
                  -или-
                
                  <paramref name="parameters" /> не содержит количество элементов, как список параметров для <paramref name="TDelegate" />.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="parameters" /> не может быть назначен из типа соответствующего типа параметра <paramref name="TDelegate" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="parameters">
                Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <typeparam name="TDelegate">
                Тип делегата.
              </typeparam>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="body" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов в <paramref name="parameters" /> имеют значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="TDelegate" />не является типом делегата.
                
                  -или-
                
                  <paramref name="body" />. Тип представляет тип, который не может быть назначен тип возвращаемого значения <paramref name="TDelegate" />.
                
                  -или-
                
                  <paramref name="parameters" />не содержит одинаковое количество элементов в списке параметров для <paramref name="TDelegate" />.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="parameters" /> не может быть назначен из типа соответствующего параметра типа <paramref name="TDelegate" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="name">
                Имя лямбда-выражения.
                 Используется для создания сведений об отладке.
              </param>
      <param name="tailCall">
                Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <typeparam name="TDelegate">
                Тип делегата.
              </typeparam>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.
            </summary>
      <param name="body">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.
              </param>
      <param name="name">
                Имя лямбда-выражения.
                 Используется для создания сведений об отладке.
              </param>
      <param name="parameters">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.
              </param>
      <typeparam name="TDelegate">
                Тип делегата.
              </typeparam>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию со сдвигом влево.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор сдвига влево не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию со сдвигом влево.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> а оператор сдвига влево не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор «меньше чем» не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="liftToNull">
                <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> имеет значение <see langword="null" />, и оператор "меньше, чем" не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше или равно".
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор «меньше или равно» не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше или равно".
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="liftToNull">
                <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> и оператор «меньше или равно» не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberListBinding" />, где элемент является полем или свойством.
            </summary>
      <param name="member">
                <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство, чтобы задать для свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.
              </param>
      <param name="initializers">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="member" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="initializers" /> являются <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="member" /> Представляет поле или свойство.
                
                  -или-
                
                  <see cref="P:System.Reflection.FieldInfo.FieldType" /> Или <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> поля или свойства, <paramref name="member" /> представляет не реализует <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberListBinding" />, где элемент является полем или свойством.
            </summary>
      <param name="member">
                <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство, чтобы задать для свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.
              </param>
      <param name="initializers">
                Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="member" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="initializers" /> являются <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="member" /> Представляет поле или свойство.
                
                  -или-
                
                  <see cref="P:System.Reflection.FieldInfo.FieldType" /> Или <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> поля или свойства, <paramref name="member" /> представляет не реализует <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" /> на основе указанного метода доступа к свойству.
            </summary>
      <param name="propertyAccessor">
                <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.
              </param>
      <param name="initializers">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, равное <see cref="T:System.Reflection.MemberInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, заполненные элементами <paramref name="initializers" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="propertyAccessor" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="initializers" /> являются <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="propertyAccessor" /> Представляет метод доступа к свойству.
                
                  -или-
                
                  <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> Свойства, метод, представленный <paramref name="propertyAccessor" /> доступ не реализует <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" /> на основе указанного метода доступа к свойству.
            </summary>
      <param name="propertyAccessor">
                <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.
              </param>
      <param name="initializers">
                Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, равное <see cref="T:System.Reflection.MemberInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, заполненные элементами <paramref name="initializers" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="propertyAccessor" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="initializers" /> являются <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="propertyAccessor" /> Представляет метод доступа к свойству.
                
                  -или-
                
                  <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> Свойства, метод, представленный <paramref name="propertyAccessor" /> доступ не реализует <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанные объекты <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации коллекции.
            </summary>
      <param name="newExpression">
                Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.
              </param>
      <param name="initializers">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойствами <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="initializers" /> являются <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="newExpression" />. Тип не реализует <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий метод с именем "Добавить" для добавления элементов в коллекцию.
            </summary>
      <param name="newExpression">
                Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.
              </param>
      <param name="initializers">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  В <paramref name="newExpression" /> или его базовом типе не объявлен метод экземпляра с именем "Добавить" (без учета регистра).
                
                  -или-
                
                  Метод "Добавить" в <paramref name="newExpression" />.Type или его базовом типе не принимает ровно один аргумент.
                
                  -или-
                
                  Тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> первого элемента <paramref name="initializers" />, невозможно назначить типу аргумента метода "Добавить" в <paramref name="newExpression" />.Type или его базовом типе.
                
                  -или-
                
                  В <paramref name="newExpression" />.Type или его базовом типе есть несколько методов с именем "Добавить" (без учета регистра), совместимых с аргументом.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанные объекты <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации коллекции.
            </summary>
      <param name="newExpression">
                Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.
              </param>
      <param name="initializers">
                Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойствами <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий метод с именем "Добавить" для добавления элементов в коллекцию.
            </summary>
      <param name="newExpression">
                Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.
              </param>
      <param name="initializers">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="initializers" /> являются <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="newExpression" />. Тип не реализует <see cref="T:System.Collections.IEnumerable" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Отсутствует метод экземпляра с именем "Add" (без учета регистра) объявляются в <paramref name="newExpression" />. Тип или его базовый тип.
                
                  -или-
                
                  Метод add <paramref name="newExpression" />. Type или его базового типа не принимает только один аргумент.
                
                  -или-
                
                  Тип, представленный <see cref="P:System.Linq.Expressions.Expression.Type" /> свойство первый элемент <paramref name="initializers" /> не назначается типу аргумента метода add на <paramref name="newExpression" />. Тип или его базовый тип.
                
                  -или-
                
                  Существует более одного метода аргумент совместимой с именем "Add" (без учета регистра) на <paramref name="newExpression" />. Тип или его базовый тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанный метод, чтобы добавить элементы к коллекции.
            </summary>
      <param name="newExpression">
                Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.
              </param>
      <param name="addMethod">
                <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра с именем "Add" (без учета регистра), добавляющий элемент к коллекции.
              </param>
      <param name="initializers">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="initializers" /> являются <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="newExpression" />. Тип не реализует <see cref="T:System.Collections.IEnumerable" />.
                
                  -или-
                
                  <paramref name="addMethod" /> не <see langword="null" /> и не представляет метод экземпляра с именем «Add» (без учета регистра), принимающий точно один аргумент.
                
                  -или-
                
                  <paramref name="addMethod" /> не <see langword="null" /> и типа, представленного <see cref="P:System.Linq.Expressions.Expression.Type" /> свойство один или несколько элементов <paramref name="initializers" /> не назначается типу аргумента метода, <paramref name="addMethod" /> представляет.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="addMethod" /> — <see langword="null" /> и отсутствует метод экземпляра с именем «Добавить», которая принимает один аргумент, совместимый с типом существует на <paramref name="newExpression" />. Тип или его базовый тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанный метод, чтобы добавить элементы к коллекции.
            </summary>
      <param name="newExpression">
                Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.
              </param>
      <param name="addMethod">
                <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра с одним аргументом, добавляющий элемент к коллекции.
              </param>
      <param name="initializers">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Один или несколько элементов <paramref name="initializers" /> являются <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="newExpression" />. Тип не реализует <see cref="T:System.Collections.IEnumerable" />.
                
                  -или-
                
                  <paramref name="addMethod" /> не <see langword="null" /> и не представляет метод экземпляра с именем «Add» (без учета регистра), принимающий точно один аргумент.
                
                  -или-
                
                  <paramref name="addMethod" /> не <see langword="null" /> и типа, представленного <see cref="P:System.Linq.Expressions.Expression.Type" /> свойство один или несколько элементов <paramref name="initializers" /> не назначается типу аргумента метода, <paramref name="addMethod" /> представляет.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="addMethod" /> — <see langword="null" /> и отсутствует метод экземпляра с именем «Добавить», которая принимает один аргумент, совместимый с типом существует на <paramref name="newExpression" />. Тип или его базовый тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом.
            </summary>
      <param name="body">
                Тело цикла.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.LoopExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом и целью оператора break.
            </summary>
      <param name="body">
                Тело цикла.
              </param>
      <param name="break">
                Цель оператора break, используемая телом цикла.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.LoopExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом.
            </summary>
      <param name="body">
                Тело цикла.
              </param>
      <param name="break">
                Цель оператора break, используемая телом цикла.
              </param>
      <param name="continue">
                Цель оператора continue, используемая телом цикла.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.LoopExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенные левый и правый операнды с помощью вызова соответствующего метода фабрики.
            </summary>
      <param name="binaryType">
                <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.
              </param>
      <param name="left">
                <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.
              </param>
      <param name="right">
                <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="binaryType" /> не соответствует двоичному узлу выражения.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенный левый операнд, правый операнд и метод реализации с помощью вызова соответствующего метода фабрики.
            </summary>
      <param name="binaryType">
                <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.
              </param>
      <param name="left">
                <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.
              </param>
      <param name="right">
                <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.
              </param>
      <param name="liftToNull">
                <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.
              </param>
      <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />, указывающий метод реализации.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="binaryType" /> не соответствует двоичному узлу выражения.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенный левый операнд, правый операнд, метод реализации и функция преобразования метода с помощью вызова соответствующего метода фабрики.
            </summary>
      <param name="binaryType">
                <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.
              </param>
      <param name="left">
                <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.
              </param>
      <param name="right">
                <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.
              </param>
      <param name="liftToNull">
                <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.
              </param>
      <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />, указывающий метод реализации.
              </param>
      <param name="conversion">
                <see cref="T:System.Linq.Expressions.LambdaExpression" />, представляющий тип функции преобразования.
                 Этот параметр используется лишь в том случае, если <paramref name="binaryType" /> имеет значение <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> или составного присваивания.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="binaryType" /> не соответствует двоичному узлу выражения.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с указанными элементами.
            </summary>
      <param name="type">
                Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатываться этим объектом <see cref="T:System.Linq.Expressions.CatchBlock" />.
              </param>
      <param name="variable">
                Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный данным обработчиком.
              </param>
      <param name="body">
                Тело оператора catch.
              </param>
      <param name="filter">
                Тело фильтра <see cref="T:System.Exception" />.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arguments">
                Аргументы динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и одним аргументом.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arg0">
                Аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и двумя аргументами.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и тремя аргументами.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <param name="arg2">
                Третий аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и четырьмя аргументами.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arg0">
                Первый аргумент динамической операции.
              </param>
      <param name="arg1">
                Второй аргумент динамической операции.
              </param>
      <param name="arg2">
                Третий аргумент динамической операции.
              </param>
      <param name="arg3">
                Четвертый аргумент динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
      <param name="delegateType">
                Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </param>
      <param name="binder">
                Связыватель времени выполнения для динамической операции.
              </param>
      <param name="arguments">
                Аргументы динамической операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее переход указанного типа <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.
               Также можно указать значение, передаваемое метке при переходе.
            </summary>
      <param name="kind">
                <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> выражения <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="value">
                Значение, передаваемое связанной метке при переходе.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение <paramref name="kind" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющий доступ к индексированному свойству объекта.
            </summary>
      <param name="instance">
                Объект, которому принадлежит это свойство.
                 Должно равняться NULL, если свойство имеет значение <see langword="static" /> (<see langword="shared" /> в Visual Basic).
              </param>
      <param name="indexer">
                Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее индексируемое свойство.
              </param>
      <param name="arguments">
                IEnumerable&lt;Expression&gt; (IEnumerable (Of Expression) в Visual Basic), содержащая аргументы, которые будут использоваться для индексации свойства.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к полю или свойству.
            </summary>
      <param name="expression">
                <see cref="T:System.Linq.Expressions.Expression" /> представляет объект, к которому принадлежит элемент.
                 Для статических членов допускается значение NULL.
              </param>
      <param name="member">
                <see cref="T:System.Reflection.MemberInfo" />, описывающий поле или свойство, к которому следует осуществить доступ.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.MemberExpression" />, полученный в результате вызова соответствующего заводского метода.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="member" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="member" /> Представляет поле или свойство.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.TryExpression" />, представляющее блок try с указанными элементами.
            </summary>
      <param name="type">
                Тип результата выражения try.
                 Если он имеет значение NULL, bodh и все обработчики должны иметь одинаковый тип.
              </param>
      <param name="body">
                Тело блока try.
              </param>
      <param name="finally">
                Тело блока finally.
                 Если с блоком try не связан ни один блок finally, передается NULL.
              </param>
      <param name="fault">
                Тело блока fault.
                 Если с блоком try не связан ни один блок fault, передается NULL.
              </param>
      <param name="handlers">
                Коллекция объектов <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, присвоенный операнду с помощью вызова соответствующего метода фабрики.
            </summary>
      <param name="unaryType">
                <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип унарной операции.
              </param>
      <param name="operand">
                <see cref="T:System.Linq.Expressions.Expression" /> представляет операнд.
              </param>
      <param name="type">
                Тип <see cref="T:System.Type" />, указывающий тип для преобразования в (передать <see langword="null" />, если не применяется).
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, полученный в результате вызова соответствующего заводского метода.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="operand" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="unaryType" /> не соответствует узлу унарные выражения.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, присвоенный операнд и метод реализации с помощью вызова соответствующего метода фабрики.
            </summary>
      <param name="unaryType">
                <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип унарной операции.
              </param>
      <param name="operand">
                <see cref="T:System.Linq.Expressions.Expression" /> представляет операнд.
              </param>
      <param name="type">
                Тип <see cref="T:System.Type" />, указывающий тип для преобразования в (передать <see langword="null" />, если не применяется).
              </param>
      <param name="method">
                <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, полученный в результате вызова соответствующего заводского метода.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="operand" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="unaryType" /> не соответствует узлу унарные выражения.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов поля или свойства.
            </summary>
      <param name="member">
                Объект <see cref="T:System.Reflection.MemberInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.
              </param>
      <param name="bindings">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="member" /> или <paramref name="bindings" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="member" /> Представляет поле или свойство.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> Свойство элемента <paramref name="bindings" /> не представляет члена типа поля или свойства, <paramref name="member" /> представляет.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов поля или свойства.
            </summary>
      <param name="member">
                Объект <see cref="T:System.Reflection.MemberInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.
              </param>
      <param name="bindings">
                Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="member" /> или <paramref name="bindings" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="member" /> Представляет поле или свойство.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> Свойство элемента <paramref name="bindings" /> не представляет члена типа поля или свойства, <paramref name="member" /> представляет.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента, доступ к которому осуществляется с помощью метода доступа свойства.
            </summary>
      <param name="propertyAccessor">
                <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.
              </param>
      <param name="bindings">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и свойства <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="propertyAccessor" /> или <paramref name="bindings" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="propertyAccessor" /> Представляет метод доступа к свойству.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> Свойство элемента <paramref name="bindings" /> не представляет члена типа свойства, доступ к методу, <paramref name="propertyAccessor" /> представляет.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента, доступ к которому осуществляется с помощью метода доступа свойства.
            </summary>
      <param name="propertyAccessor">
                <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.
              </param>
      <param name="bindings">
                Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и свойства <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="propertyAccessor" /> или <paramref name="bindings" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="propertyAccessor" /> Представляет метод доступа к свойству.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> Свойство элемента <paramref name="bindings" /> не представляет члена типа свойства, доступ к методу, <paramref name="propertyAccessor" /> представляет.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
              Представляет выражение, создающее новый объект и инициализирующее свойство объекта.
            </summary>
      <param name="newExpression">
                Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.
              </param>
      <param name="bindings">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />, и свойствами <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="newExpression" /> или <paramref name="bindings" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> Свойство элемента <paramref name="bindings" /> не представляет член типа, <paramref name="newExpression" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>
              Создает буфер <see cref="T:System.Linq.Expressions.MemberInitExpression" />.
            </summary>
      <param name="newExpression">
                Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.
              </param>
      <param name="bindings">
                Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />, и свойствами <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="newExpression" /> или <paramref name="bindings" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> Свойство элемента <paramref name="bindings" /> не представляет член типа, <paramref name="newExpression" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического остатка.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор модуля не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического остатка.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> имеет значение <see langword="null" />, и оператор остатка от деления не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор умножения не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> а оператор умножения не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор умножения не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> а оператор умножения не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Унарный минус-оператор не определен для <paramref name="expression" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает только один аргумент.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> является <see langword="null" /> и не определен для оператора унарного минуса <paramref name="expression" />. Тип.
                
                  -или-
                
                  <paramref name="expression" />. Тип (или соответствующий тип не допускает значения NULL, если он является типом значения, допускающие NULL) не назначается типу аргумента метода, представленного <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания, содержащую проверку переполнения.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Унарный минус-оператор не определен для <paramref name="expression" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания, содержащую проверку переполнения.
               Может быть указан метод реализации.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает только один аргумент.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> является <see langword="null" /> и не определен для оператора унарного минуса <paramref name="expression" />. Тип.
                
                  -или-
                
                  <paramref name="expression" />. Тип (или соответствующий тип не допускает значения NULL, если он является типом значения, допускающие NULL) не назначается типу аргумента метода, представленного <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора без аргументов.
            </summary>
      <param name="constructor">
                Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойством <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="constructor" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Конструктор, <paramref name="constructor" /> представляет имеет по крайней мере один параметр.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.
            </summary>
      <param name="constructor">
                Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.
              </param>
      <param name="arguments">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> и <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="constructor" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Элемент <paramref name="arguments" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="arguments" /> Параметр не содержит количество элементов, равное количеству параметров для конструктора, <paramref name="constructor" /> представляет.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="arguments" /> не допускает присваивание типу соответствующего параметра конструктора, <paramref name="constructor" /> представляет.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.
               Указаны элементы с доступом к полям, инициализированным конструктором.
            </summary>
      <param name="constructor">
                Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.
              </param>
      <param name="arguments">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.
              </param>
      <param name="members">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Reflection.MemberInfo" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Members" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> и <see cref="P:System.Linq.Expressions.NewExpression.Members" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="constructor" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Элемент <paramref name="arguments" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Элемент <paramref name="members" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="arguments" /> Параметр не содержит количество элементов, равное количеству параметров для конструктора, <paramref name="constructor" /> представляет.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="arguments" /> не допускает присваивание типу соответствующего параметра конструктора, <paramref name="constructor" /> представляет.
                
                  -или-
                
                  <paramref name="members" /> Параметр не имеет одинаковое количество элементов как <paramref name="arguments" />.
                
                  -или-
                
                  Элемент перечисления <paramref name="arguments" /> имеет <see cref="P:System.Linq.Expressions.Expression.Type" /> свойство, которое представляет тип, который не может быть назначен тип члена, представленного с соответствующим элементом <paramref name="members" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.
               Указаны элементы с доступом к полям, инициализированным в качестве массива.
            </summary>
      <param name="constructor">
                Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.
              </param>
      <param name="arguments">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.
              </param>
      <param name="members">
                Массив объектов <see cref="T:System.Reflection.MemberInfo" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Members" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> и <see cref="P:System.Linq.Expressions.NewExpression.Members" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="constructor" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Элемент <paramref name="arguments" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Элемент <paramref name="members" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="arguments" /> Параметр не содержит количество элементов, равное количеству параметров для конструктора, <paramref name="constructor" /> представляет.
                
                  -или-
                
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="arguments" /> не допускает присваивание типу соответствующего параметра конструктора, <paramref name="constructor" /> представляет.
                
                  -или-
                
                  <paramref name="members" /> Параметр не имеет одинаковое количество элементов как <paramref name="arguments" />.
                
                  -или-
                
                  Элемент перечисления <paramref name="arguments" /> имеет <see cref="P:System.Linq.Expressions.Expression.Type" /> свойство, которое представляет тип, который не может быть назначен тип члена, представленного с соответствующим элементом <paramref name="members" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.
            </summary>
      <param name="constructor">
                Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.
              </param>
      <param name="arguments">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> и <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="constructor" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Элемент <paramref name="arguments" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Длина <paramref name="arguments" /> соответствует числу параметров конструктора, представляемого <paramref name="constructor" />.
                
                  -или-
                
                  Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> невозможно присвоить типу соответствующего конструктора, представляемого <paramref name="constructor" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов конструктора указанного типа без параметров.
            </summary>
      <param name="type">
                <see cref="T:System.Type" /> содержит конструктор без аргументов.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойство <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, для которого задано значение <see cref="T:System.Reflection.ConstructorInfo" />, представляющее конструктор указанного типа без параметров.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="type" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Тип, <paramref name="type" /> представляет не имеет конструктора без параметров.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющее создание массива с указанным рангом.
            </summary>
      <param name="type">
                Тип <see cref="T:System.Type" />, представляющий тип элемента массива.
              </param>
      <param name="bounds">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="type" /> или <paramref name="bounds" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Элемент <paramref name="bounds" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="bounds" /> не представляет целочисленный тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющее создание массива с указанным рангом.
            </summary>
      <param name="type">
                Тип <see cref="T:System.Type" />, представляющий тип элемента массива.
              </param>
      <param name="bounds">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="type" /> или <paramref name="bounds" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Элемент <paramref name="bounds" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="bounds" /> не представляет целочисленный тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.
            </summary>
      <param name="type">
                Тип <see cref="T:System.Type" />, представляющий тип элемента массива.
              </param>
      <param name="initializers">
                <see cref="T:System.Collections.Generic.IEnumerable`1" />,содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="type" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Элемент <paramref name="initializers" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="initializers" /> представляет тип, который не допускает присваивание типу, <paramref name="type" /> представляет.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.
            </summary>
      <param name="type">
                Тип <see cref="T:System.Type" />, представляющий тип элемента массива.
              </param>
      <param name="initializers">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="type" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Элемент <paramref name="initializers" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <see cref="P:System.Linq.Expressions.Expression.Type" /> Свойство элемента <paramref name="initializers" /> представляет тип, который не допускает присваивание типу <paramref name="type" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий побитовую операцию дополнения.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Not" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Унарный оператор not не определен для <paramref name="expression" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий побитовую операцию дополнения.
               Может быть указан метод реализации.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Not" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает только один аргумент.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> и унарный оператор not не определен для <paramref name="expression" />. Тип.
                
                  -или-
                
                  <paramref name="expression" />. Тип (или соответствующий тип не допускает значения NULL, если он является типом значения, допускающие NULL) не назначается типу аргумента метода, представленного <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение неравенства.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор неравенства не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение неравенства.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="liftToNull">
                <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> и оператор неравенства не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>
              Возвращает выражение, представляющее поразрядное дополнение до единицы.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <returns>
              Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Возвращает выражение, представляющее поразрядное дополнение до единицы.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
              </param>
      <returns>
              Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="OR" />.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Битовые <see langword="OR" /> оператор не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="OR" />.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> и побитового <see langword="OR" /> оператор не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="OR" />, вычисляющую второй операнд, только если первый операнд имеет значение <see langword="false" />.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Битовые <see langword="OR" /> оператор не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                
                  -или-
                
                  <paramref name="left" />. Тип и <paramref name="right" />. Тип не отличаются от логического типа.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="OR" />, вычисляющую второй операнд, только если первый операнд имеет значение <see langword="false" />.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> и побитового <see langword="OR" /> оператор не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                
                  -или-
                
                  <paramref name="method" /> — <see langword="null" /> и <paramref name="left" />. Тип и <paramref name="right" />. Тип не отличаются от логического типа.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>
              Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.
            </summary>
      <param name="type">
                Тип параметра или переменной.
              </param>
      <returns>
              Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>
              Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.
            </summary>
      <param name="type">
                Тип параметра или переменной.
              </param>
      <param name="name">
                Имя параметра или переменной только для целей отладки и печати.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.ParameterExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />, и свойствами <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="type" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор возведения в степень не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                
                  -или-
                
                  <paramref name="left" />. Тип и/или <paramref name="right" />. Тип не <see cref="T:System.Double" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" />, и оператор возведения в степень не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.
                
                  -или-
                
                  <paramref name="method" /> имеет значение <see langword="null" />, и <paramref name="left" />.Type и (или) <paramref name="right" />.Type не имеют значение <see cref="T:System.Double" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к свойству с помощью метода доступа свойства.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.
                 Для статических свойств допускается значение NULL.
              </param>
      <param name="propertyAccessor">
                <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />, для которого задано значение <paramref name="expression" />, и свойство <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, к которому предоставляется доступ в <paramref name="propertyAccessor" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="propertyAccessor" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Метод, <paramref name="propertyAccessor" /> представляет не <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и <paramref name="expression" /> — <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="expression" />. Тип не может быть назначен объявляющий тип метода, представленного <paramref name="propertyAccessor" />.
                
                  -или-
                
                  Метод, <paramref name="propertyAccessor" /> не представляет метод доступа к свойству.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.
                 Для статических свойств допускается значение NULL.
              </param>
      <param name="property">
                Объект <see cref="T:System.Reflection.PropertyInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, и свойствами <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> и <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="property" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство, <paramref name="property" /> представляет не <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и <paramref name="expression" /> — <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="expression" />. Тип не может быть назначен объявляющий тип свойства, <paramref name="property" /> представляет.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.
            </summary>
      <param name="instance">
                Объект, которому принадлежит это свойство.
                 Если свойство статическое или общее, оно должно иметь значение NULL.
              </param>
      <param name="indexer">
                Объект <see cref="T:System.Reflection.PropertyInfo" />, представляющий индексируемое свойство.
              </param>
      <param name="arguments">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для индексации свойства.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.
            </summary>
      <param name="instance">
                Объект, которому принадлежит это свойство.
                 Если свойство статическое или общее, оно должно иметь значение NULL.
              </param>
      <param name="indexer">
                Объект <see cref="T:System.Reflection.PropertyInfo" />, представляющий индексируемое свойство.
              </param>
      <param name="arguments">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для индексации свойства.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.
            </summary>
      <param name="expression">
                <see cref="T:System.Linq.Expressions.Expression" />, где <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит свойство с именем <paramref name="propertyName" />.
                 Может принимать значение <see langword="null" /> для статических свойств.
              </param>
      <param name="propertyName">
                Имя свойства для доступа.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, имеющее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />, для которого задано значение <paramref name="expression" />, и свойство <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, обозначенное с помощью параметра <paramref name="propertyName" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="expression" /> или <paramref name="propertyName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Отсутствует свойство с именем <paramref name="propertyName" /> определяется в <paramref name="expression" />. Тип или его базовых типов.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.
            </summary>
      <param name="instance">
                Объект, которому принадлежит это свойство.
                 Если свойство статическое или общее, оно должно иметь значение NULL.
              </param>
      <param name="propertyName">
                Имя индексатора.
              </param>
      <param name="arguments">
                Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для индексации свойства.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющее доступ к свойству.
            </summary>
      <param name="expression">
                Объект, в котором содержится свойство.
                 Для статических свойств допускается значение NULL.
              </param>
      <param name="type">
                <see cref="P:System.Linq.Expressions.Expression.Type" />, содержащий свойство.
              </param>
      <param name="propertyName">
                Свойство для доступа.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.MemberExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству или полю.
            </summary>
      <param name="expression">
                <see cref="T:System.Linq.Expressions.Expression" />, в свойстве <see cref="P:System.Linq.Expressions.Expression.Type" /> которого содержится свойство или поле с именем, заданным параметром <paramref name="propertyOrFieldName" />.
                 Для статических членов допускается значение NULL.
              </param>
      <param name="propertyOrFieldName">
                Имя свойства или поля для доступа.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, имеющее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />, для которого задано значение <paramref name="expression" />, и свойство <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" /> или <see cref="T:System.Reflection.FieldInfo" />, представляющее свойство или поле, обозначенное с помощью параметра <paramref name="propertyOrFieldName" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="expression" /> или <paramref name="propertyOrFieldName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Отсутствует свойство или поле с именем <paramref name="propertyOrFieldName" /> определяется в <paramref name="expression" />. Тип или его базовых типов.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий выражение, которое содержит постоянное значение типа <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>
              Преобразует данный узел в более простое выражение.
               Если CanReduce возвращает значение true, данный метод должен вернуть допустимое выражение.
               Данный метод может вернуть другой узел, который нужно будет преобразовать еще раз.
            </summary>
      <returns>
              Преобразованное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>
              Преобразует данный узел в более простое выражение.
               Если CanReduce возвращает значение true, данный метод должен вернуть допустимое выражение.
               Данный метод может вернуть другой узел, который нужно будет преобразовать еще раз.
            </summary>
      <returns>
              Преобразованное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>
              Упрощает выражение до известного типа узла (не являющегося узлом Extension) или возвращает выражение, если оно имеет известный тип.
            </summary>
      <returns>
              Преобразованное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее проверку равенства ссылок.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее проверку неравенства ссылок.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее повторное создание исключения с заданным типом.
            </summary>
      <param name="type">
                Новый тип <see cref="T:System.Type" /> выражения.
              </param>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Return, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение <paramref name="target" />, а при переходе целевой метке передается значение NULL.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return.
               Можно указать значение, передаваемое метке при переходе.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="value">
                Значение, передаваемое связанной метке при переходе.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return с указанным типом.
               Можно указать значение, передаваемое метке при переходе.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="value">
                Значение, передаваемое связанной метке при переходе.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return с указанным типом.
            </summary>
      <param name="target">
                Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Return, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение null.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию сдвига вправо.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор сдвига вправо не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию сдвига вправо.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> а оператор сдвига вправо не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает экземпляр <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
      <param name="variables">
                Коллекция объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.
              </param>
      <returns>
              Экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />, и свойством <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />, для которого задано указанное значение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>
              Создает экземпляр <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
      <param name="variables">
                Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.
              </param>
      <returns>
              Экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />, и свойством <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />, для которого задано указанное значение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор вычитания не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> имеет значение <see langword="null" />, и оператор вычитания не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <param name="conversion">
                Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор вычитания не определен для <paramref name="left" />. Тип и <paramref name="right" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, содержащую проверку переполнения.
            </summary>
      <param name="left">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.
              </param>
      <param name="right">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> имеет значение <see langword="null" />, и оператор вычитания не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.
            </summary>
      <param name="switchValue">
                Значение, проверяемое для каждого варианта case.
              </param>
      <param name="defaultBody">
                Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.
              </param>
      <param name="cases">
                Набор вариантов case для данного выражения switch.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.
            </summary>
      <param name="switchValue">
                Значение, проверяемое для каждого варианта case.
              </param>
      <param name="defaultBody">
                Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.
              </param>
      <param name="comparison">
                Используемый метод проверки равенства.
              </param>
      <param name="cases">
                Набор вариантов case для данного выражения switch.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.
            </summary>
      <param name="switchValue">
                Значение, проверяемое для каждого варианта case.
              </param>
      <param name="defaultBody">
                Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.
              </param>
      <param name="comparison">
                Используемый метод проверки равенства.
              </param>
      <param name="cases">
                Набор вариантов case для данного выражения switch.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий <see langword="switch" /> без варианта по умолчанию.
            </summary>
      <param name="switchValue">
                Значение, проверяемое для каждого варианта case.
              </param>
      <param name="cases">
                Набор вариантов case для данного выражения switch.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.
            </summary>
      <param name="type">
                Тип результата оператора switch.
              </param>
      <param name="switchValue">
                Значение, проверяемое для каждого варианта case.
              </param>
      <param name="defaultBody">
                Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.
              </param>
      <param name="comparison">
                Используемый метод проверки равенства.
              </param>
      <param name="cases">
                Набор вариантов case для данного выражения switch.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.
            </summary>
      <param name="type">
                Тип результата оператора switch.
              </param>
      <param name="switchValue">
                Значение, проверяемое для каждого варианта case.
              </param>
      <param name="defaultBody">
                Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.
              </param>
      <param name="comparison">
                Используемый метод проверки равенства.
              </param>
      <param name="cases">
                Набор вариантов case для данного выражения switch.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в объекте <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
      <param name="body">
                Тело варианта case.
              </param>
      <param name="testValues">
                Тестовые значения варианта case.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.SwitchCase" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в выражении <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
      <param name="body">
                Тело варианта case.
              </param>
      <param name="testValues">
                Тестовые значения варианта case.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.SwitchCase" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>
              Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.
            </summary>
      <param name="fileName">
                Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.
              </param>
      <returns>
              <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, для свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> которого задано указанное значение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>
              Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.
            </summary>
      <param name="fileName">
                Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.
              </param>
      <param name="language">
                Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, содержащее свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />, для которых задано указанное значение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>
              Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.
            </summary>
      <param name="fileName">
                Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.
              </param>
      <param name="language">
                Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.
              </param>
      <param name="languageVendor">
                Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, содержащее свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />, для которых задано указанное значение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>
              Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.
            </summary>
      <param name="fileName">
                Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.
              </param>
      <param name="language">
                Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.
              </param>
      <param name="languageVendor">
                Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.
              </param>
      <param name="documentType">
                Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, содержащее свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />,<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />, для которых задано указанное значение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий создание исключения.
            </summary>
      <param name="value">
                Объект <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее исключение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее создание исключения с заданным типом.
            </summary>
      <param name="value">
                Объект <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <param name="type">
                Новый тип <see cref="T:System.Type" /> выражения.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее исключение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>
              Возвращает текстовое представление текущего объекта <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Текстовое представление выражения <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.TryExpression" />, представляющее блок try с произвольным числом операторов catch и без блоков fault и finally.
            </summary>
      <param name="body">
                Тело блока try.
              </param>
      <param name="handlers">
                Массив из нуля или более выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с произвольным числом операторов catch и блоком finally.
            </summary>
      <param name="body">
                Тело блока try.
              </param>
      <param name="finally">
                Тело блока finally.
              </param>
      <param name="handlers">
                Массив из нуля или более выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с блоком fault и без операторов catch.
            </summary>
      <param name="body">
                Тело блока try.
              </param>
      <param name="fault">
                Тело блока fault.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с блоком finally и без операторов catch.
            </summary>
      <param name="body">
                Тело блока try.
              </param>
      <param name="finally">
                Тело блока finally.
              </param>
      <returns>
              Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>
              Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Action с заданными аргументами типа.
            </summary>
      <param name="typeArgs">
                Массив от объектов Type, указывающих аргументы типа для типа делегата System.Action.
              </param>
      <param name="actionType">
                После выполнения возврата этим методом содержит универсальный тип делегата System.Action с определенным типом аргументов.
                 Содержит NULL, если ни один универсальный делегат System.Action не соответствует <paramref name="typeArgs" />. Этот параметр передается неинициализированным.
              </param>
      <returns>
              Значение true, если тип делегата System.Action создан для определенного <paramref name="typeArgs" />; в противном случае — значение false.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>
              Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func с заданными аргументами типа.
               Аргумент последнего типа задает тип возврата созданного делегата.
            </summary>
      <param name="typeArgs">
                Массив объектов Type, указывающих аргументы типа для типа делегата System.Func.
              </param>
      <param name="funcType">
                После выполнения возврата этим методом содержит универсальный тип делегата System.Func с определенным типом аргументов.
                 Содержит NULL, если ни один универсальный делегат System.Func не соответствует <paramref name="typeArgs" />. Этот параметр передается неинициализированным.
              </param>
      <returns>
              Значение true, если тип делегата System.Func создан для определенного <paramref name="typeArgs" />; в противном случае — значение false.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий преобразование явной ссылки или упаковки, где <see langword="null" /> поддерживается в случае неудачного преобразования.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <param name="type">
                Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, сравнивающее идентификацию типов времени выполнения.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="T:System.Linq.Expressions.Expression" />.
              </param>
      <param name="type">
                Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />, и свойствами <see cref="T:System.Linq.Expressions.Expression" /> и <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />, для которых заданы указанные значения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает буфер <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.
              </param>
      <param name="type">
                Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" />, и свойствами <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> и <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию "унарный плюс".
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Оператор унарного сложения не определен для <paramref name="expression" />. Тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>
              Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию "унарный плюс".
            </summary>
      <param name="expression">
                Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.
              </param>
      <param name="method">
                Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.
              </param>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="expression" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="method" /> не <see langword="null" /> и метод, который он представляет возвращает <see langword="void" />, не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает только один аргумент.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="method" /> — <see langword="null" /> и оператор унарного сложения не определен для <paramref name="expression" />. Тип.
                
                  -или-
                
                  <paramref name="expression" />. Тип (или соответствующий тип не допускает значения NULL, если он является типом значения, допускающие NULL) не назначается типу аргумента метода, представленного <paramref name="method" />.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>
              Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее явную распаковку-преобразование.
            </summary>
      <param name="expression">
                <see cref="T:System.Linq.Expressions.Expression" /> для распаковки-преобразования.
              </param>
      <param name="type">
                Новый тип <see cref="T:System.Type" /> выражения.
              </param>
      <returns>
              Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>
              Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.
            </summary>
      <param name="type">
                Тип параметра или переменной.
              </param>
      <returns>
              Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>
              Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.
            </summary>
      <param name="type">
                Тип параметра или переменной.
              </param>
      <param name="name">
                Имя параметра или переменной.
                 Это имя используется только для целей отладки и печати.
              </param>
      <returns>
              Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Упрощает узел и вызывает делегат-посетитель для преобразованного выражения.
               Данный метод создает исключение, если узел невозможно упростить.
            </summary>
      <param name="visitor">
                Экземпляр <see cref="T:System.Func`2" />.
              </param>
      <returns>
              Просмотренное выражение или выражение, которое должно заменить его в дереве.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>
              Компилирует лямбда-выражение, описанное с помощью дерева выражений в исполняемый код и создает делегат, представляющий лямбда-выражение.
            </summary>
      <returns>
              Делегат типа <paramref name="TDelegate" /> представляющий скомпилированный лямбда-выражение, описываемых <see cref="T:System.Linq.Expressions.Expression`1" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <summary>
              Компилирует лямбда-выражение, описанное с помощью дерева выражений, в интерпретированный или скомпилированный код и создает делегат, представляющий лямбда-выражение.
            </summary>
      <param name="preferInterpretation">
                <see langword="true" />, чтобы указать, что выражение должно быть скомпилировано в интерпретированную форму, если она доступна; в противном случае — <see langword="false" />.
              </param>
      <returns>
              Делегат, представляющий скомпилированное лямбда-выражение, описанное <see cref="T:System.Linq.Expressions.Expression`1" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>
              Создает делегат, представляющий лямбда-выражение.
            </summary>
      <param name="debugInfoGenerator">
                Генератор отладочной информации, используемый компилятором для пометки точек следования и аннотировать локальных переменных.
              </param>
      <returns>
              Делегат, содержащий скомпилированную версию лямбда-выражения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="body">
                <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> Свойства результата.
              </param>
      <param name="parameters">
                <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.
            </summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>
              Отправляет список выражений для одного или более узких методов просмотра в данном классе.
            </summary>
      <param name="nodes">
                Выражения для посещения.
              </param>
      <returns>
              Измененный список выражений в случае изменения одного из элементов; в противном случае возвращается исходный список выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>
              Отправляет выражение с одним или более узких методов просмотра в данном классе.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>
              Посещает все узлы в коллекции с помощью посетителя указанного элемента.
            </summary>
      <param name="nodes">
                Узлы посетить.
              </param>
      <param name="elementVisitor">
                Делегат, который просматривает отдельный элемент, при необходимости заменяя его новым элементом.
              </param>
      <typeparam name="T">
                Типы узлов.
              </typeparam>
      <returns>
              Измененный список узлов, если были изменены какие-либо элементы; в противном случае — возвращает исходный список узлов.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>
              Просматривает выражение, приводя результат к типу исходного выражения.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <param name="callerName">
                Имя вызывающего метода. используется для отчетов и отчетов сообщение об ошибке.
              </param>
      <typeparam name="T">
                Тип выражения.
              </typeparam>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Метод visit для данного узла вернул другой тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>
              Просматривает выражение, приводя результат к типу исходного выражения.
            </summary>
      <param name="nodes">
                Выражение для посещения.
              </param>
      <param name="callerName">
                Имя вызывающего метода. используется для отчетов и отчетов сообщение об ошибке.
              </param>
      <typeparam name="T">
                Тип выражения.
              </typeparam>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Метод visit для данного узла вернул другой тип.
                </exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.BinaryExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.CatchBlock" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.ConditionalExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>
              Посещает <see cref="T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>
              Посещает <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>
              Посещает <see cref="T:System.Linq.Expressions.DefaultExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.DynamicExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.ElementInit" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>
              Просматривает дочерний элемент выражения расширения.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.GotoExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.IndexExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.InvocationExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.LabelExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>
              Посещает <see cref="T:System.Linq.Expressions.LabelTarget" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.Expression`1" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <typeparam name="T">
                Тип делегата.
              </typeparam>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.ListInitExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.LoopExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.MemberExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.MemberAssignment" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.MemberBinding" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.MemberInitExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.MemberListBinding" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.NewExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>
              Посещает <see cref="T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.SwitchCase" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.TryExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>
              Просматривает дочерний <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </summary>
      <param name="node">
                Выражение для посещения.
              </param>
      <returns>
              Измененное выражение, если был изменен или любого его подвыражения; в противном случае — возвращает исходное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="target">
                <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> Свойства результата.
              </param>
      <param name="value">
                <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary>
              Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.
                Не следует использовать этот тип.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <param name="index">
                Индекс аргумента.
              </param>
      <returns>
              Аргумент в индексе, вызываемый, если индекс вне допустимых границ, как <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary>
              При необходимости создает CallSite и возвращает этот CallSite для полиморфного встроенного кэша DynamicExpression.
                Не следует использовать этот тип.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <returns>
              CallSite для полиморфного встроенного кэша DynamicExpression.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary>
              Переопределяет этот узел, заменяя аргументы динамического выражения предоставленными значениями.
                Количество args должно совпадать с количеством аргументов в текущем выражении.
                Не следует использовать этот тип.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
                Этот вспомогательный метод позволяет переопределять узлы независимо от конкретной реализации класса, производного от DynamicExpression, который используется на сайте вызова.
            </summary>
      <param name="args">
                Аргументы, используемые для замены этого узла.
              </param>
      <returns>
              Переопределенный узел, но если никакие изменения не вносились, то возвращается тот же узел.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <param name="index">
                Индекс аргумента.
              </param>
      <returns>
              Возвращает <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="object">
                Свойство <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> результата.
              </param>
      <param name="arguments">
                Свойство <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <param name="index">
                Индекс аргумента.
              </param>
      <returns>
              Аргумент в индексе, вызываемый, если индекс вне допустимых границ, как <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="expression">
                Свойство <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> результата.
              </param>
      <param name="arguments">
                Свойство <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="target">
                <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> Свойства результата.
              </param>
      <param name="defaultValue">
                <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> Свойства результата
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>
              Возвращает строку <see cref="T:System.String" />, которая представляет текущий объект <see cref="T:System.Object" />.
            </summary>
      <returns>
              Объект <see cref="T:System.String" />, представляющий текущий объект <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>
              Создает делегат, представляющий лямбда-выражение.
            </summary>
      <returns>
              Объект <see cref="T:System.Delegate" /> содержащий скомпилированную версию лямбда-выражения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <summary>
              Создает интерпретированный или скомпилированный делегат, который представляет лямбда-выражение.
            </summary>
      <param name="preferInterpretation">
                <see langword="true" />, чтобы указать, что выражение должно быть скомпилировано в интерпретируемой форме, если она доступна; в противном случае — <see langword="false" />.
              </param>
      <returns>
              Делегат, представляющий скомпилированное лямбда-выражение, описанное объектом <see cref="T:System.Linq.Expressions.LambdaExpression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>
              Создает делегат, представляющий лямбда-выражение.
            </summary>
      <param name="debugInfoGenerator">
                Генератор отладочной информации, используемый компилятором для пометки точек следования и аннотировать локальных переменных.
              </param>
      <returns>
              Делегат, содержащий скомпилированную версию лямбда-выражения.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>
              Компилирует лямбда-выражение в определение метода.
            </summary>
      <param name="method">
                A <see cref="T:System.Reflection.Emit.MethodBuilder" /> которого будет использоваться для хранения IL лямбда-выражения.
              </param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>
              Компилирует лямбда-выражение в определение метода и пользовательскую отладочную информацию.
            </summary>
      <param name="method">
                A <see cref="T:System.Reflection.Emit.MethodBuilder" /> которого будет использоваться для хранения IL лямбда-выражения.
              </param>
      <param name="debugInfoGenerator">
                Генератор отладочной информации, используемый компилятором для пометки точек следования и аннотировать локальных переменных.
              </param>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>
              Сокращает узел двоичных выражений до более простого выражения.
            </summary>
      <returns>
              Преобразованное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="newExpression">
                <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> Свойства результата.
              </param>
      <param name="initializers">
                <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="breakLabel">
                <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> Свойства результата.
              </param>
      <param name="continueLabel">
                <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> Свойства результата.
              </param>
      <param name="body">
                <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="expression">
                <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.MemberBinding" />.
            </summary>
      <param name="type">
                <see cref="T:System.Linq.Expressions.MemberBindingType" /> Исключает тип привязки, который представлен.
              </param>
      <param name="member">
                <see cref="T:System.Reflection.MemberInfo" /> Представляющий поле или свойство для инициализации.
              </param>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>
              Возвращает текстовое представление текущего объекта <see cref="T:System.Linq.Expressions.MemberBinding" />.
            </summary>
      <returns>
              Текстовое представление выражения <see cref="T:System.Linq.Expressions.MemberBinding" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="expression">
                <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>
              Уменьшает <see cref="T:System.Linq.Expressions.MemberInitExpression" /> до более простого выражения.
            </summary>
      <returns>
              Преобразованное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="newExpression">
                <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> Свойства результата.
              </param>
      <param name="bindings">
                <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="initializers">
                <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="bindings">
                <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <param name="index">
                Индекс аргумента.
              </param>
      <returns>
              Возвращает <see cref="T:System.Linq.Expressions.Expression" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="object">
                Свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> результата.
              </param>
      <param name="arguments">
                Свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="expressions">
                <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>
              Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.
            </summary>
      <param name="index">
                Индекс аргумента.
              </param>
      <returns>
              Аргумент в индексе, вызываемый, если индекс вне допустимых границ.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="arguments">
                Свойство <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>
              Отправляет в конкретный метод Visit для данного типа узла.
               Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.
            </summary>
      <param name="visitor">
                Посетитель, с помощью которого выполняется посещение этого узла.
              </param>
      <returns>
              Результат посещения этого узла.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="variables">
                <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>
              Возвращает строку <see cref="T:System.String" />, которая представляет текущий объект <see cref="T:System.Object" />.
            </summary>
      <returns>
              Объект <see cref="T:System.String" />, представляющий текущий объект <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="testValues">
                <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> Свойства результата.
              </param>
      <param name="body">
                <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="switchValue">
                <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> Свойства результата.
              </param>
      <param name="cases">
                <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> Свойства результата.
              </param>
      <param name="defaultBody">
                <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="body">
                <see cref="P:System.Linq.Expressions.TryExpression.Body" /> Свойства результата.
              </param>
      <param name="handlers">
                <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> Свойства результата.
              </param>
      <param name="finally">
                <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> Свойства результата.
              </param>
      <param name="fault">
                <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="expression">
                <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>
              Сокращает узел выражений до более простого выражения.
            </summary>
      <returns>
              Преобразованное выражение.
            </returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>
              Создает новое выражение, аналогичное данному, но с использованием предоставленного дочернего элемента.
               Если все дочерние элементы совпадают, возвращается данное выражение.
            </summary>
      <param name="operand">
                <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> Свойства результата.
              </param>
      <returns>
              Данное выражение, если никакие дочерние элементы не изменялись, или выражение с обновленными дочерними элементами.
            </returns>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>
              Определяет, существует ли указанный ключ в <see cref="T:System.Linq.ILookup`2" />.
            </summary>
      <param name="key">
                Ключ для поиска в <see cref="T:System.Linq.ILookup`2" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="key" /> в <see cref="T:System.Linq.ILookup`2" />; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>
              Выполняет дополнительное упорядочение элементов из <see cref="T:System.Linq.IOrderedEnumerable`1" /> ключа.
            </summary>
      <param name="keySelector">
                <see cref="T:System.Func`2" /> Используется для извлечения ключа для каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> Используется для сравнения ключей для размещения в возвращаемой последовательности.
              </param>
      <param name="descending">
                <see langword="true" /> Чтобы отсортировать элементы в порядке убывания; <see langword="false" /> для сортировки элементов в порядке возрастания.
              </param>
      <typeparam name="TKey">
                Тип ключа, полученных при <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedEnumerable`1" /> Элементы которой сортируются по ключу.
            </returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.IQueryable" /> объекта, который позволяет вычислить запрос, представленный заданным деревом выражения.
            </summary>
      <param name="expression">
                Дерево выражения, которое представляет LINQ запроса.
              </param>
      <returns>
              <see cref="T:System.Linq.IQueryable" /> Можно вычислить запрос, представленный заданным деревом выражения.
            </returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.IQueryable`1" /> объекта, который позволяет вычислить запрос, представленный заданным деревом выражения.
            </summary>
      <param name="expression">
                Дерево выражения, которое представляет LINQ запроса.
              </param>
      <typeparam name="TElement">
                Тип элементов <see cref="T:System.Linq.IQueryable`1" /> который возвращается.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Можно вычислить запрос, представленный заданным деревом выражения.
            </returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>
              Выполняет запрос, представленный заданным деревом выражения.
            </summary>
      <param name="expression">
                Дерево выражения, которое представляет LINQ запроса.
              </param>
      <returns>
              Значение, получаемое в результате выполнения указанного запроса.
            </returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>
              Выполняет строго типизированный запрос, представленный заданным деревом выражения.
            </summary>
      <param name="expression">
                Дерево выражения, которое представляет LINQ запроса.
              </param>
      <typeparam name="TResult">
                Тип значения, полученного в результате выполнения запроса.
              </typeparam>
      <returns>
              Значение, получаемое в результате выполнения указанного запроса.
            </returns>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>
              Применяет функцию преобразования к каждому ключу и связанным с ним значениям и возвращает результаты.
            </summary>
      <param name="resultSelector">
                Функция результирующее значение из каждого ключа и связанные с ним параметры проекта.
              </param>
      <typeparam name="TResult">
                Тип результирующих значений, полученных при <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              Коллекция, содержащая одно значение для каждой пары ключ значение коллекции в <see cref="T:System.Linq.Lookup`2" />.
            </returns>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>
              Определяет, является ли указанный ключ в <see cref="T:System.Linq.Lookup`2" />.
            </summary>
      <param name="key">
                Ключ для поиска в <see cref="T:System.Linq.Lookup`2" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="key" /> в <see cref="T:System.Linq.Lookup`2" />; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>
              Возвращает универсальный перечислитель, выполняющий перебор элементов <see cref="T:System.Linq.Lookup`2" />.
            </summary>
      <returns>
              Перечислитель для коллекции <see cref="T:System.Linq.Lookup`2" />.
            </returns>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              Возвращает перечислитель, осуществляющий перебор элементов списка <see cref="T:System.Linq.Lookup`2" />.
               Этот класс не наследуется.
            </summary>
      <returns>
              Перечислитель для коллекции <see cref="T:System.Linq.Lookup`2" />.
            </returns>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий перебор элементов последовательности.
            </summary>
      <returns>
              Перечислитель, выполняющий перебор элементов последовательности.
            </returns>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>
              Параллельно применяет к последовательности агрегатную функцию.
            </summary>
      <param name="source">
                Последовательность, для которой выполняется статистическая операция.
              </param>
      <param name="func">
                Агрегатная функция, вызываемая для каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Конечное агрегатное значение.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="func" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>
              Параллельно применяет к последовательности агрегатную функцию.
               Указанное начальное значение используется в качестве исходного значения агрегатной операции.
            </summary>
      <param name="source">
                Последовательность, для которой выполняется статистическая операция.
              </param>
      <param name="seed">
                Начальное агрегатное значение.
              </param>
      <param name="func">
                Агрегатная функция, вызываемая для каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TAccumulate">
                Тип агрегатного значения.
              </typeparam>
      <returns>
              Конечное агрегатное значение.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="func" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>
              Параллельно применяет к последовательности агрегатную функцию.
               Эта перегрузка недоступна в последовательной реализации.
            </summary>
      <param name="source">
                Последовательность, для которой выполняется статистическая операция.
              </param>
      <param name="seed">
                Начальное агрегатное значение.
              </param>
      <param name="updateAccumulatorFunc">
                Агрегатная функция, вызываемая для каждого элемента в секции.
              </param>
      <param name="combineAccumulatorsFunc">
                Агрегатная функция, вызываемая для суммарного результата, полученного из каждой секции.
              </param>
      <param name="resultSelector">
                Функция, преобразующая конечное агрегатное значение в результирующее значение.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TAccumulate">
                Тип агрегатного значения.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения.
              </typeparam>
      <returns>
              Преобразованное конечное агрегатное значение.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="updateAccumulatorFunc" /> или <paramref name="combineAccumulatorsFunc" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>
              Параллельно применяет к последовательности агрегатную функцию.
               Указанное начальное значение служит исходным значением для агрегатной операции, а указанная функция используется для выбора результирующего значения.
            </summary>
      <param name="source">
                Последовательность, для которой выполняется статистическая операция.
              </param>
      <param name="seed">
                Начальное агрегатное значение.
              </param>
      <param name="func">
                Агрегатная функция, вызываемая для каждого элемента.
              </param>
      <param name="resultSelector">
                Функция, преобразующая конечное агрегатное значение в результирующее значение.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TAccumulate">
                Тип агрегатного значения.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения.
              </typeparam>
      <returns>
              Преобразованное конечное агрегатное значение.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="func" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>
              Параллельно применяет к последовательности агрегатную функцию.
               Эта перегрузка недоступна в последовательной реализации.
            </summary>
      <param name="source">
                Последовательность, для которой выполняется статистическая операция.
              </param>
      <param name="seedFactory">
                Функция, возвращающая начальное агрегатное значение.
              </param>
      <param name="updateAccumulatorFunc">
                Агрегатная функция, вызываемая для каждого элемента в секции.
              </param>
      <param name="combineAccumulatorsFunc">
                Агрегатная функция, вызываемая для суммарного результата, полученного из каждой секции.
              </param>
      <param name="resultSelector">
                Функция, преобразующая конечное агрегатное значение в результирующее значение.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TAccumulate">
                Тип агрегатного значения.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения.
              </typeparam>
      <returns>
              Преобразованное конечное агрегатное значение.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="seedFactory" /> или <paramref name="updateAccumulatorFunc" /> или <paramref name="combineAccumulatorsFunc" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Параллельно проверяет, все ли элементы последовательности удовлетворяют условию.
            </summary>
      <param name="source">
                Последовательность, к элементам которой применяется предикат.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Значение true, если каждый элемент исходной последовательности проходит проверку, определяемую указанным предикатом, или если последовательность пуста; в противном случае — значение false.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Проверяет, содержит ли параллельная последовательность какие-либо элементы.
            </summary>
      <param name="source">
                Последовательность, проверяемая на наличие элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Значение true, если исходная последовательность содержит какие-либо элементы; в противном случае — значение false.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Параллельно проверяет, удовлетворяет ли условию хотя бы один элемент в последовательности.
            </summary>
      <param name="source">
                Последовательность, к элементам которой применяется предикат.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Значение true, если хотя бы один элемент исходной последовательности проходит проверку, определяемую указанным предикатом; в противном случае — значение false.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Преобразует <see cref="T:System.Linq.ParallelQuery`1" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> для принудительного последовательного вычисления запроса.
            </summary>
      <param name="source">
                Последовательность, приводится к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Входной последовательности, типизированного как <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>
              Позволяет обрабатывать источник данных как упорядоченный независимо от отсутствия упорядоченности по умолчанию.
               Метод AsOrdered можно вызывать только для неуниверсальных последовательностей, возвращаемых методами AsParallel, ParallelEnumerable.Range и ParallelEnumerable.Repeat.
            </summary>
      <param name="source">
                Входная последовательность.
              </param>
      <returns>
              Исходная последовательность, поддерживающая первоначальный порядок в последовательных операторах запроса.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  генерируется, если <paramref name="source" /> не содержит элементов
                
                  -или-
                
                   При AsOrdered вызывается наполовину с помощью запроса.
                   Может вызываться сразу после <see cref="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)" />, <see cref="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)" /> или <see cref="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)" />.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Позволяет обрабатывать источник данных как упорядоченный независимо от отсутствия упорядоченности по умолчанию.
               Метод AsOrdered можно вызывать только для универсальных последовательностей, возвращаемых методами AsParallel, ParallelEnumerable.Range и ParallelEnumerable.Repeat.
            </summary>
      <param name="source">
                Входная последовательность.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Исходная последовательность, поддерживающая первоначальный порядок в последовательных операторах запроса.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Генерируется, если <paramref name="source" /> не содержит элементов
                
                  -или-
                
                  Если <paramref name="source" /> не является одним из AsParallel, ParallelEnumerable.Range и ParallelEnumerable.Repeat.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>
              Позволяет осуществлять параллельный запрос.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для преобразования <see cref="T:System.Linq.ParallelQuery" />.
              </param>
      <returns>
              Значение источника source в форме ParallelQuery для привязки к методам расширения ParallelEnumerable.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>
              Позволяет осуществлять параллельный запрос, производимый модулем секционирования, предназначенным для разделения входной последовательности на секции.
            </summary>
      <param name="source">
                Разделитель входной последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              <paramref name="source" /> В форме ParallelQuery для привязки к методам расширения ParallelEnumerable.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Позволяет осуществлять параллельный запрос.
            </summary>
      <param name="source">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Для преобразования <see cref="T:System.Linq.ParallelQuery`1" />.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Источник как <see cref="T:System.Linq.ParallelQuery`1" /> для привязки к методам расширения ParallelEnumerable.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Преобразует <see cref="T:System.Linq.ParallelQuery`1" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> для принудительного последовательного вычисления запроса.
            </summary>
      <param name="source">
                Объект <see cref="T:System.Linq.ParallelQuery`1" /> для преобразования <see cref="T:System.Collections.Generic.IEnumerable`1" />.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Источник как <see cref="T:System.Collections.Generic.IEnumerable`1" /> для привязки к последовательным методам расширения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Позволяет обрабатывать промежуточный запрос как содержащий неупорядоченные элементы.
            </summary>
      <param name="source">
                Входная последовательность.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Исходная последовательность со случайным порядком.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма или количество элементов в последовательности больше, чем <see cref="F:System.Int32.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма или количество элементов в последовательности больше, чем <see cref="F:System.Int32.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений.
            </summary>
      <param name="source">
                Исходная последовательность.
              </param>
      <returns>
              Возвращает среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Последовательность значений, используемых для вычисления среднего. Среднее для последовательности значений.<paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма или количество элементов в последовательности больше, чем <see cref="F:System.Int32.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма или количество элементов в последовательности больше, чем <see cref="F:System.Int32.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                  (Исключение как внутреннее исключение в <see cref="T:System.AggregateException" />).
                  <paramref name="selector" /> Функция возвращает значение больше, чем MaxValue для типа элемента.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                   (Исключение как внутреннее исключение в <see cref="T:System.AggregateException" />).
                  <paramref name="selector" /> Функция возвращает значение больше, чем MaxValue для типа элемента.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма или количество элементов в последовательности больше, чем <see cref="F:System.Int32.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                   (Исключение как внутреннее исключение в <see cref="T:System.AggregateException" />).
                  <paramref name="selector" /> Функция возвращает значение больше, чем MaxValue для типа элемента.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма или количество элементов в последовательности больше, чем <see cref="F:System.Int32.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                   (Исключение как внутреннее исключение в <see cref="T:System.AggregateException" />).
                  <paramref name="selector" /> Функция возвращает значение больше, чем MaxValue для типа элемента.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                   (Исключение как внутреннее исключение в <see cref="T:System.AggregateException" />).
                  <paramref name="selector" /> Функция возвращает значение больше, чем MaxValue для типа элемента.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                   (Исключение как внутреннее исключение в <see cref="T:System.AggregateException" />).
                  <paramref name="selector" /> Функция возвращает значение больше, чем MaxValue для типа элемента.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма или количество элементов в последовательности больше, чем <see cref="F:System.Int32.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                   (Исключение как внутреннее исключение в <see cref="T:System.AggregateException" />).
                  <paramref name="selector" /> Функция возвращает значение больше, чем MaxValue для типа элемента.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма или количество элементов в последовательности больше, чем <see cref="F:System.Int64.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                   (Исключение как внутреннее исключение в <see cref="T:System.AggregateException" />).
                  <paramref name="selector" /> Функция возвращает значение больше, чем MaxValue для типа элемента.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                   (Исключение как внутреннее исключение в <see cref="T:System.AggregateException" />).
                  <paramref name="selector" /> Функция возвращает значение больше, чем MaxValue для типа элемента.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>
              Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
      <exception cref="T:System.OverflowException">
                   (Исключение как внутреннее исключение в <see cref="T:System.AggregateException" />).
                  <paramref name="selector" /> Функция возвращает значение больше, чем MaxValue для типа элемента.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>
              Преобразует элементы запроса ParallelQuery в заданный тип.
            </summary>
      <param name="source">
                Последовательность, содержащая преобразуемые элементы.
              </param>
      <typeparam name="TResult">
                Тип, который требуется преобразовать элементы <paramref name="source" /> для.
              </typeparam>
      <returns>
              Последовательность, которая содержит все элементы исходной последовательности, преобразованные в заданный тип.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.InvalidCastException">
                  Не удалось преобразовать тип исходной последовательности для <paramref name="TResult" />.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Эту перегрузку Concat вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="first">
                Этот параметр не используется.
              </param>
      <param name="second">
                Этот параметр не используется.
              </param>
      <typeparam name="TSource">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Исключение, которое возникает при вызове этого метода.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>
              Сцепляет две параллельные последовательности.
            </summary>
      <param name="first">
                Первая из объединяемых последовательностей.
              </param>
      <param name="second">
                Последовательность, объединяемая с первой последовательностью.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность, содержащая сцепленные элементы двух входных последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>
              Параллельно определяет, содержится ли указанный элемент в последовательности, используя компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="source">
                Последовательность, в которой требуется найти данное значение.
              </param>
      <param name="value">
                Значение, которое требуется найти в последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Значение true, если исходная последовательность содержит элемент с указанным значением; в противном случае — значение false.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Параллельно определяет, содержит ли последовательность указанный элемент, используя указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
      <param name="source">
                Последовательность, в которой требуется найти данное значение.
              </param>
      <param name="value">
                Значение, которое требуется найти в последовательности.
              </param>
      <param name="comparer">
                Компаратор проверки на равенство, используемый для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Значение true, если исходная последовательность содержит элемент с указанным значением; в противном случае — значение false.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает количество элементов в параллельной последовательности.
            </summary>
      <param name="source">
                Последовательность, элементы которой требуется подсчитать.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число элементов во входной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Количество элементов в исходном больше, чем <see cref="F:System.Int32.MaxValue" />.
                   (В данном случае является InnerException <see cref="T:System.OverflowException" />) - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает число, представляющее количество элементов параллельной последовательности, удовлетворяющих заданному условию.
            </summary>
      <param name="source">
                Последовательность, элементы которой требуется подсчитать.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Количество элементов в исходном больше, чем <see cref="F:System.Int32.MaxValue" />.
                   (В данном случае является InnerException <see cref="T:System.OverflowException" />) - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает элементы указанной параллельной последовательности или одноэлементную коллекцию, содержащую значение параметра типа по умолчанию, если последовательность пуста.
            </summary>
      <param name="source">
                Последовательность, для которой возвращается значение по умолчанию, если она пуста.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, содержащая default(TSource), если <paramref name="source" /> является пустой; в противном случае — <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>
              Возвращает элементы указанной параллельной последовательности или одноэлементную коллекцию, содержащую указанное значение, если последовательность пуста.
            </summary>
      <param name="source">
                Последовательность, для которой возвращается указанное значение, если она пуста.
              </param>
      <param name="defaultValue">
                Значение, возвращаемое в случае пустой последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, содержащая defaultValue, если <paramref name="source" /> является пустой; в противном случае — <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает различающиеся элементы параллельной последовательности, используя для сравнения значений компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="source">
                Последовательность, из которой требуется удалить дубликаты элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, содержащая различающиеся элементы из исходной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Возвращает различающиеся элементы параллельной последовательности, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
      <param name="source">
                Последовательность, из которой требуется удалить дубликаты элементов.
              </param>
      <param name="comparer">
                Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, содержащая различающиеся элементы из исходной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  При оценке запроса получено одно или несколько исключений.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>
              Возвращает элемент по указанному индексу в параллельной последовательности.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элемент.
              </param>
      <param name="index">
                Отсчитываемый от нуля индекс извлекаемого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Элемент, находящийся в указанной позиции в исходной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="index" /> — меньше 0 или больше или равно количеству элементов в <paramref name="source" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>
              Возвращает элемент по указанному индексу в параллельной последовательности или значение по умолчанию, если индекс вне допустимого диапазона.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элемент.
              </param>
      <param name="index">
                Отсчитываемый от нуля индекс извлекаемого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              default(TSource), если индекс указывает позицию вне исходной последовательности; в противном случае — элемент, находящийся в указанной позиции в исходной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>
              Возвращает пустой набор ParallelQuery{TResult} с указанным аргументом типа.
            </summary>
      <typeparam name="TResult">
                Тип, присваиваемый параметру типа возвращаемой универсальной последовательности.
              </typeparam>
      <returns>
              Пустой последовательностью является аргументом типа <paramref name="TResult" />.
            </returns>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Эту перегрузку Except вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="first">
                Этот параметр не используется.
              </param>
      <param name="second">
                Этот параметр не используется.
              </param>
      <typeparam name="TSource">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Исключение, которое возникает при вызове этого метода.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Эту перегрузку Except вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="first">
                Этот параметр не используется.
              </param>
      <param name="second">
                Этот параметр не используется.
              </param>
      <param name="comparer">
                Этот параметр не используется.
              </param>
      <typeparam name="TSource">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Исключение, которое возникает при вызове этого метода.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>
              Находит разность множеств, представленных двумя параллельными последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="first">
                Последовательность, элементы которой, отсутствующие в <paramref name="second" /> будут возвращены.
              </param>
      <param name="second">
                Последовательность, элементы которой, входящие также в первую последовательность, должны быть исключены из возвращаемой последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность, представляющая собой разность двух последовательностей как множеств.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Находит разность множеств, представленных двумя параллельными последовательностями, используя указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения значений.
            </summary>
      <param name="first">
                Последовательность, элементы которой, отсутствующие в <paramref name="second" /> будут возвращены.
              </param>
      <param name="second">
                Последовательность, элементы которой, входящие также в первую последовательность, должны быть исключены из возвращаемой последовательности.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность, представляющая собой разность двух последовательностей как множеств.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает первый элемент параллельной последовательности.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить первый элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Первый элемент указанной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает первый элемент параллельной последовательности, удовлетворяющий указанному условию.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Первый элемент последовательности, который прошел проверку, определенную указанной функцией предиката.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Ни один элемент в <paramref name="source" /> удовлетворяет условию предиката <paramref name="predicate" />.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает первый элемент параллельной последовательности или значение по умолчанию, если последовательность не содержит элементов.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить первый элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Default(TSource) Если <paramref name="source" /> является пустой; в противном случае — первый элемент в <paramref name="source" />.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает первый удовлетворяющий условию элемент параллельной последовательности или значение по умолчанию, если таких элементов не найдено.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Default(TSource) Если <paramref name="source" /> пуст или если элемент не прошел проверку, определенную предикатом; в противном случае — первый элемент в <paramref name="source" /> прошедший проверку, заданную предикатом.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>
              Параллельно вызывает указанное действие для каждого элемента в <paramref name="source" />.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.ParallelQuery`1" /> Элементы которого будут обрабатываться <paramref name="action" />.
              </param>
      <param name="action">
                Действие, вызываемое для каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>
              Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа.
            </summary>
      <param name="source">
                Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Последовательность групп, которые сортируются в порядке убывания по параметру <paramref name="TKey" />.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Параллельно группирует элементы последовательности в соответствии с заданной функцией селектора ключа и сравнивает ключи с помощью указанного <see cref="T:System.Collections.Generic.IComparer`1" />.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.OrderedParallelQuery`1" /> Содержащий элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />&gt;.
              </typeparam>
      <returns>
              Последовательность групп, которые сортируются в порядке убывания по параметру <paramref name="TKey" />.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
              Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа и проецирует элементы каждой группы с помощью указанной функции.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.OrderedParallelQuery`1" /> Содержащий элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в <see cref="T:System.Linq.IGrouping`2" />.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
      <returns>
              Последовательность групп, которые сортируются в порядке убывания по параметру <paramref name="TKey" />.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы параллельной последовательности в соответствии с функцией селектора ключа.
               Ключи сравниваются с помощью компаратора, элементы каждой группы проецируются с помощью указанной функции.
            </summary>
      <param name="source">
                Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в IGrouping.
              </param>
      <param name="comparer">
                Компаратор IComparer{TSource}, используемый для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в IGrouping.
              </typeparam>
      <returns>
              Последовательность групп, которые сортируются в порядке убывания по параметру <paramref name="TKey" />.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>
              Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
            </summary>
      <param name="source">
                Последовательность, элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              Последовательность элементов типа <paramref name="TResult" /> которой каждый элемент представляет проекцию группы и ее ключа.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
               Ключи сравниваются с использованием заданного компаратора.
            </summary>
      <param name="source">
                Последовательность, элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              Последовательность групп.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>
              Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
               Элементы каждой группы проецируются с помощью указанной функции.
            </summary>
      <param name="source">
                Последовательность, элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в IGrouping&lt;TKey, TElement&gt;.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в каждом IGrouping{TKey, TElement}.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              Последовательность элементов типа <paramref name="TResult" /> которой каждый элемент представляет проекцию группы и ее ключа.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
               Значения ключей сравниваются с помощью указанного компаратора, элементы каждой группы проецируются с помощью указанной функции.
            </summary>
      <param name="source">
                Последовательность, элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в IGrouping{Key, TElement}.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в каждом IGrouping{TKey, TElement}.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              Последовательность элементов типа <paramref name="TResult" /> которой каждый элемент представляет проекцию группы и ее ключа.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>
              Эту перегрузку GroupJoin вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="outer">
                Этот параметр не используется.
              </param>
      <param name="inner">
                Этот параметр не используется.
              </param>
      <param name="outerKeySelector">
                Этот параметр не используется.
              </param>
      <param name="innerKeySelector">
                Этот параметр не используется.
              </param>
      <param name="resultSelector">
                Этот параметр не используется.
              </param>
      <typeparam name="TOuter">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TInner">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TKey">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TResult">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
              Эту перегрузку GroupJoin вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="outer">
                Этот параметр не используется.
              </param>
      <param name="inner">
                Этот параметр не используется.
              </param>
      <param name="outerKeySelector">
                Этот параметр не используется.
              </param>
      <param name="innerKeySelector">
                Этот параметр не используется.
              </param>
      <param name="resultSelector">
                Этот параметр не используется.
              </param>
      <param name="comparer">
                Этот параметр не используется.
              </param>
      <typeparam name="TOuter">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TInner">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TKey">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TResult">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Исключение, которое возникает при вызове этого метода.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>
              Устанавливает параллельную корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.
               Для сравнения ключей используется компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.
              </param>
      <typeparam name="TOuter">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              Последовательность, которая содержит элементы типа <paramref name="TResult" /> полученные в результате выполнения группированное соединение двух последовательностей.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
              Устанавливает параллельную корреляцию между элементами двух последовательностей на основе равенства ключа и группирует результаты.
               Указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> используется для сравнения ключей.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для хэширования и сравнения ключей.
              </param>
      <typeparam name="TOuter">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              Последовательность, которая содержит элементы типа <paramref name="TResult" /> полученные в результате выполнения группированное соединение двух последовательностей.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Эту перегрузку Intersect вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="first">
                Этот параметр не используется.
              </param>
      <param name="second">
                Этот параметр не используется.
              </param>
      <typeparam name="TSource">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Исключение, которое возникает при вызове этого метода.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Эту перегрузку Intersect вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="first">
                Этот параметр не используется.
              </param>
      <param name="second">
                Этот параметр не используется.
              </param>
      <param name="comparer">
                Этот параметр не используется.
              </param>
      <typeparam name="TSource">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Исключение, которое возникает при вызове этого метода.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>
              Находит пересечение множеств, представленных двумя параллельными последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="first">
                Последовательность, различающиеся элементы которой, входящие также в <paramref name="second" /> будут возвращены.
              </param>
      <param name="second">
                Последовательность, из которой возвращаются различающиеся элементы, входящие также в первую последовательность.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Находит пересечение множеств, представленных двумя параллельными последовательностями, используя для сравнения значений указанный компаратор IEqualityComparer{T}.
            </summary>
      <param name="first">
                Последовательность, различающиеся элементы которой, входящие также в <paramref name="second" /> будут возвращены.
              </param>
      <param name="second">
                Последовательность, из которой возвращаются различающиеся элементы, входящие также в первую последовательность.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>
              Эту перегрузку Join вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="outer">
                Этот параметр не используется.
              </param>
      <param name="inner">
                Этот параметр не используется.
              </param>
      <param name="outerKeySelector">
                Этот параметр не используется.
              </param>
      <param name="innerKeySelector">
                Этот параметр не используется.
              </param>
      <param name="resultSelector">
                Этот параметр не используется.
              </param>
      <typeparam name="TOuter">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TInner">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TKey">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TResult">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
              Эту перегрузку Join вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="outer">
                Этот параметр не используется.
              </param>
      <param name="inner">
                Этот параметр не используется.
              </param>
      <param name="outerKeySelector">
                Этот параметр не используется.
              </param>
      <param name="innerKeySelector">
                Этот параметр не используется.
              </param>
      <param name="resultSelector">
                Этот параметр не используется.
              </param>
      <param name="comparer">
                Этот параметр не используется.
              </param>
      <typeparam name="TOuter">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TInner">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TKey">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TResult">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Исключение, которое возникает при вызове этого метода.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>
              Устанавливает параллельную корреляцию между элементами двух последовательностей на основе сопоставления ключей.
               Для сравнения ключей используется компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего элемента для пары соответствующих элементов.
              </param>
      <typeparam name="TOuter">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              Последовательность, которая содержит элементы типа <paramref name="TResult" /> полученные в результате внутреннего соединения двух последовательностей.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
              Устанавливает параллельную корреляцию между элементами двух последовательностей на основе сопоставления ключей.
               Указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> используется для сравнения ключей.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего элемента для пары соответствующих элементов.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для хэширования и сравнения ключей.
              </param>
      <typeparam name="TOuter">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              Последовательность, которая содержит элементы типа <paramref name="TResult" /> полученные в результате внутреннего соединения двух последовательностей.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает последний элемент параллельной последовательности.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить последний элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение, находящееся в последней позиции исходной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает последний элемент параллельной последовательности, удовлетворяющий указанному условию.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Последний элемент последовательности, который прошел проверку, определенную указанной функцией предиката.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Ни один элемент в <paramref name="source" /> удовлетворяет условию предиката <paramref name="predicate" />.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает последний элемент параллельной последовательности или значение по умолчанию, если последовательность не содержит элементов.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              default(), если исходная последовательность пуста; в противном случае — последний элемент последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает последний элемент параллельной последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              default(), если последовательность пуста или ни один ее элемент не прошел проверку функцией предиката; в противном случае — последний элемент, прошедший проверку функцией предиката.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает значение типа Int64, представляющее общее число элементов в параллельной последовательности.
            </summary>
      <param name="source">
                Последовательность, элементы которой требуется подсчитать.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число элементов во входной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Количество элементов в исходном больше, чем <see cref="F:System.Int64.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.OverflowException">
                  Вычисленный результат больше, чем <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает значение типа Int64, представляющее число элементов параллельной последовательности, удовлетворяющих заданному условию.
            </summary>
      <param name="source">
                Последовательность, элементы которой требуется подсчитать.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Количество элементов в исходном больше, чем <see cref="F:System.Int64.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.OverflowException">
                  Вычисленный результат больше, чем <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <typeparam name="TSource">
                Тип элементов исходной последовательности.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется максимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип значения, возвращаемый <paramref name="selector" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает минимальное значение, которое содержится в параллельной последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>
              Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.
            </summary>
      <param name="source">
                Последовательность значений, для которой определяется минимальное значение.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип значения, возвращаемый <paramref name="selector" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов и <paramref name="TSource" /> является типом значения, не допускающие значения NULL.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>
              Выполняет фильтрацию элементов ParallelQuery по заданному типу.
            </summary>
      <param name="source">
                Последовательность, элементы которой следует фильтровать.
              </param>
      <typeparam name="TResult">
                Тип, по которому фильтруются элементы последовательности.
              </typeparam>
      <returns>
              Последовательность, содержащая элементы входной последовательности типа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>
              Параллельно сортирует элементы последовательности в порядке возрастания ключа.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              Параллельно сортирует элементы последовательности в порядке возрастания с использованием указанного компаратора.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="comparer">
                Компаратор IComparer{TKey}, используемый для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>
              Параллельно сортирует элементы последовательности в порядке убывания ключа.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу в порядке убывания.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              Сортирует элементы последовательности в порядке убывания с использованием указанного компаратора.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="comparer">
                Компаратор IComparer{TKey}, используемый для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу в порядке убывания.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="KeySelector" /> является пустой ссылкой (Nothing в Visual Basic)...
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>
              Генерирует параллельную последовательность целых чисел в заданном диапазоне.
            </summary>
      <param name="start">
                Значение первого целого числа для последовательности.
              </param>
      <param name="count">
                Количество генерируемых последовательных целых чисел.
              </param>
      <returns>
              Интерфейс IEnumerable&lt;Int32&gt; в C# или IEnumerable(Of Int32) в Visual Basic, содержащий диапазон последовательных целых чисел.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="count" /> меньше 0 - или - <paramref name="start" /> + <paramref name="count" /> -1 больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>
              Создает параллельную последовательность, содержащую одно повторяющееся значение.
            </summary>
      <param name="element">
                Повторяемое значение.
              </param>
      <param name="count">
                Требуемое число повторений данного значения в создаваемой последовательности.
              </param>
      <typeparam name="TResult">
                Тип значения, которое будет повторяться в результирующей последовательности.
              </typeparam>
      <returns>
              Последовательность, содержащая повторяющееся значение.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="count" /> меньше 0.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Изменяет порядок элементов параллельной последовательности на противоположный.
            </summary>
      <param name="source">
                Последовательность значений, которые следует расставить в обратном порядке.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, элементы которой соответствуют элементам входной последовательности, но следуют в противоположном порядке.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>
              Параллельно проецирует каждый элемент последовательности в новую форму.
            </summary>
      <param name="source">
                Последовательность значений, для которых вызывается функция преобразования.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов, возвращаемых селектором.
              </typeparam>
      <returns>
              Последовательность, элементы которого являются результатом преобразования вызова функции для каждого элемента <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>
              Параллельно проецирует каждый элемент последовательности в новую форму, добавляя индекс элемента.
            </summary>
      <param name="source">
                Последовательность значений, для которых вызывается функция преобразования.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов, возвращаемых селектором.
              </typeparam>
      <returns>
              Последовательность, элементы которой получены в результате вызова функции преобразования для каждого элемента <paramref name="source" /> на основе индекса, предоставленного в <paramref name="selector" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> — это пустая ссылка (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с использованием маркера, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  При оценке запроса получено одно или несколько исключений.
                </exception>
      <exception cref="T:System.OverflowException">
                  В запросе перечислено элементов больше, чем определено в <see cref="F:System.Int32.MaxValue" />.
                   Такая ситуация может возникнуть в сценариях потоковой передачи.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
              Параллельно проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов последовательности, возвращаемой селектором.
              </typeparam>
      <returns>
              Последовательность, элементы которой получены в результате вызова функции преобразования "один ко многим" для каждого элемента входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
              Параллельно проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.
               Индекс каждого элемента исходной последовательности используется в проецированной форме этого элемента.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов последовательности, возвращаемой селектором.
              </typeparam>
      <returns>
              Последовательность, элементы которой получены в результате вызова функции преобразования "один ко многим" для каждого элемента входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> — это пустая ссылка (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с использованием маркера, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  В запросе перечислено элементов больше, чем определено в <see cref="F:System.Int32.MaxValue" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  При оценке запроса получено одно или несколько исключений.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>
              Проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="collectionSelector">
                Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.
              </param>
      <param name="resultSelector">
                Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.
              </param>
      <typeparam name="TSource">
                Тип промежуточных элементов собранные <paramref name="collectionSelector" />.
              </typeparam>
      <typeparam name="TCollection">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов полученной последовательности.
              </typeparam>
      <returns>
              Последовательность, элементы которой получены в результате вызова функции преобразования один ко многим <paramref name="collectionSelector" /> для каждого элемента <paramref name="source" /> на основе индекса, предоставленного для <paramref name="collectionSelector" />, и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с полученным элементом.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Более чем <see cref="F:System.Int32.MaxValue" /> выполняется перечисление элементов в запросе.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>
              Проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.
               Индекс каждого элемента исходной последовательности используется в промежуточной проецированной форме этого элемента.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="collectionSelector">
                Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.
              </param>
      <param name="resultSelector">
                Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.
              </param>
      <typeparam name="TSource">
                Тип промежуточных элементов собранные <paramref name="collectionSelector" />.
              </typeparam>
      <typeparam name="TCollection">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип возвращаемых элементов.
              </typeparam>
      <returns>
              Последовательность, элементы которой получены в результате вызова функции преобразования один ко многим <paramref name="collectionSelector" /> для каждого элемента <paramref name="source" /> на основе индекса, предоставленного для <paramref name="collectionSelector" />, и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с полученным элементом.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Более чем <see cref="F:System.Int32.MaxValue" /> выполняется перечисление элементов в запросе.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Эту перегрузку SequenceEqual вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="first">
                Этот параметр не используется.
              </param>
      <param name="second">
                Этот параметр не используется.
              </param>
      <typeparam name="TSource">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Возникает каждый раз при вызове этого метода.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Эту перегрузку SequenceEqual вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="first">
                Этот параметр не используется.
              </param>
      <param name="second">
                Этот параметр не используется.
              </param>
      <param name="comparer">
                Этот параметр не используется.
              </param>
      <typeparam name="TSource">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Возникает каждый раз при вызове этого метода.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>
              Определяет, совпадают ли две параллельные последовательности, используя для сравнения элементов компаратор проверки на равенство по умолчанию, предназначенный для их типа.
            </summary>
      <param name="first">
                Последовательность для сравнения со второй последовательностью.
              </param>
      <param name="second">
                Последовательность, сравниваемая с первой входной последовательностью.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Значение true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают согласно компаратору проверки на равенство по умолчанию для этого типа элементов; в противном случае — значение false.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Определяет, совпадают ли две параллельные последовательности, используя для сравнения элементов указанный компаратор проверки на равенство IEqualityComparer{T}.
            </summary>
      <param name="first">
                Последовательность для сравнения с <paramref name="second" />.
              </param>
      <param name="second">
                Последовательность, сравниваемая с первой входной последовательностью.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Можно использовать для сравнения элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Значение true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают согласно компаратору проверки на равенство по умолчанию для этого типа элементов; в противном случае — значение false.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает единственный элемент параллельной последовательности и генерирует исключение, если число элементов последовательности отлично от 1.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить единственный элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Входная последовательность содержит более одного элемента.
                   - или - входная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает единственный элемент параллельной последовательности, удовлетворяющий заданному условию, и генерирует исключение, если таких элементов больше одного.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить единственный элемент.
              </param>
      <param name="predicate">
                Функция для проверки элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности, удовлетворяющий условию.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с использованием маркера, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> — это пустая ссылка (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  При оценке запроса получено одно или несколько исключений.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Не найдены элементы, отвечающие условию параметра <paramref name="predicate" />.
                   -или- Несколько элементов отвечают условию параметра <paramref name="predicate" />.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Возвращает единственный элемент параллельной последовательности или значение по умолчанию, если последовательность пуста; если в последовательности более одного элемента, создается исключение.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить единственный элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности или default(), если в последовательности нет элементов.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает единственный элемент параллельной последовательности, удовлетворяющий заданному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, создается исключение.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить единственный элемент.
              </param>
      <param name="predicate">
                Функция для проверки элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности, удовлетворяющий условию, или default(), если такой элемент не найден.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> пуст или возвращается несколько элементов.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>
              Пропускает заданное число элементов в параллельной последовательности и возвращает остальные элементы.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="count">
                Число элементов, пропускаемых перед возвращением остальных элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, содержащая элементы из входной последовательности, начиная с указанного индекса.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Количество больше чем <see cref="F:System.Int32.MaxValue" />
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Пропускает элементы в параллельной последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, содержащая цепочку элементов входной последовательности, начиная с первого элемента, который не прошел проверку, заданную предикатом.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
              Пропускает элементы в параллельной последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.
               Индекс элемента используется в логике функции предиката.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, содержащая цепочку элементов входной последовательности, начиная с первого элемента, который не прошел проверку, заданную предикатом.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> — это пустая ссылка (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с использованием маркера, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  В запросе перечислено элементов больше, чем определено в <see cref="F:System.Int32.MaxValue" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  При оценке запроса получено одно или несколько исключений.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Double.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Double.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Single.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Single.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Double.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов исходной последовательности.
              </typeparam>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с использованием маркера, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> — это пустая ссылка (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                   -или- При оценке запроса получено одно или несколько исключений.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Double.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Single.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>
              Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, сумму которых требуется вычислить.
              </param>
      <param name="selector">
                Функция преобразования, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Сумма больше, чем <see cref="F:System.Single.MaxValue" />.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>
              Возвращает указанное число идущих подряд элементов с начала параллельной последовательности.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="count">
                Число возвращаемых элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, содержащая заданное число элементов с начала входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Возвращает цепочку элементов параллельной последовательности, удовлетворяющих указанному условию.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, содержащая элементы входной последовательности до первого элемента, который не прошел проверку.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
              Возвращает цепочку элементов параллельной последовательности, удовлетворяющих указанному условию.
               Индекс элемента используется в логике функции предиката.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента исходной последовательности условие; Второй параметр функции представляет индекс исходного элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Последовательность, содержащая элементы входной последовательности до первого элемента, который не прошел проверку.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Более чем <see cref="F:System.Int32.MaxValue" /> элементы перечисляются этим запросом.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>
              Параллельно выполняет дополнительное упорядочение элементов последовательности в порядке возрастания ключа.
            </summary>
      <param name="source">
                Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              Параллельно выполняет дополнительное упорядочение элементов последовательности в порядке возрастания с использованием указанного компаратора.
            </summary>
      <param name="source">
                Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="comparer">
                Компаратор IComparer{TKey}, используемый для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>
              Параллельно выполняет дополнительное упорядочение элементов последовательности в порядке убывания ключа.
            </summary>
      <param name="source">
                Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Последовательность, элементы которой сортируются по ключу в порядке убывания.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
              Параллельно выполняет дополнительное упорядочение элементов последовательности в порядке убывания с использованием указанного компаратора.
            </summary>
      <param name="source">
                Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="comparer">
                Компаратор IComparer{TKey}, используемый для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Последовательность, элементы которой сортируются по ключу в порядке убывания.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Создает массив из <see cref="T:System.Linq.ParallelQuery`1" />.
            </summary>
      <param name="source">
                Последовательность, из которой создается массив.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Массив, содержащий элементы из входной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>
              Создает <see cref="T:System.Collections.Generic.Dictionary`2" /> из <see cref="T:System.Linq.ParallelQuery`1" /> в соответствии с заданной функцией селектора ключа.
            </summary>
      <param name="source">
                Последовательность для создания <see cref="T:System.Collections.Generic.Dictionary`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Collections.Generic.Dictionary`2" /> содержащий ключи и значения.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  <paramref name="keySelector" /> создает ключ, который является пустой ссылкой (Nothing в Visual Basic).
                   - или - <paramref name="keySelector" /> создает повторяющиеся ключи для двух элементов.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Создает <see cref="T:System.Collections.Generic.Dictionary`2" />  из <see cref="T:System.Linq.ParallelQuery`1" /> в соответствии с указанной функцией выбора ключа функции и компаратором ключей.
            </summary>
      <param name="source">
                Последовательность для создания <see cref="T:System.Collections.Generic.Dictionary`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Collections.Generic.Dictionary`2" /> содержащий ключи и значения.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  <paramref name="keySelector" /> создает ключ, который является пустой ссылкой (Nothing в Visual Basic).
                   - или - <paramref name="keySelector" /> создает повторяющиеся ключи для двух элементов.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
              Создает <see cref="T:System.Collections.Generic.Dictionary`2" /> из <see cref="T:System.Linq.ParallelQuery`1" /> в соответствии с указанной функцией выбора ключа и функции селектора элемента.
            </summary>
      <param name="source">
                Последовательность для создания <see cref="T:System.Collections.Generic.Dictionary`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="elementSelector">
                Функция преобразования для получения результирующего значения каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип значения, возвращаемый <paramref name="elementSelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Collections.Generic.Dictionary`2" /> содержащий значения типа <paramref name="TElement" /> выбранные из входной последовательности
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  <paramref name="keySelector" /> создает ключ, который является пустой ссылкой (Nothing в Visual Basic).
                   - или - <paramref name="keySelector" /> создает повторяющиеся ключи для двух элементов.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Создает <see cref="T:System.Collections.Generic.Dictionary`2" /> из <see cref="T:System.Linq.ParallelQuery`1" /> в соответствии с заданной функцией селектора ключа, средства сравнения и функции выбора элементов.
            </summary>
      <param name="source">
                Последовательность для создания <see cref="T:System.Collections.Generic.Dictionary`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="elementSelector">
                Функция преобразования для получения результирующего значения каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип значения, возвращаемый <paramref name="elementSelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Collections.Generic.Dictionary`2" /> содержащий значения типа <paramref name="TElement" /> выбранные из входной последовательности
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  <paramref name="keySelector" /> создает ключ, который является пустой ссылкой (Nothing в Visual Basic).
                   - или - <paramref name="keySelector" /> создает повторяющиеся ключи для двух элементов.
                   - или - один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>
              Создает <see cref="T:System.Collections.Generic.List`1" /> из <see cref="T:System.Linq.ParallelQuery`1" />.
            </summary>
      <param name="source">
                Последовательность для создания <see cref="T:System.Collections.Generic.List`1" /> из.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Collections.Generic.List`1" />  содержащий элементы из входной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>
              Создает <see cref="T:System.Linq.ILookup`2" /> из <see cref="T:System.Linq.ParallelQuery`1" /> в соответствии с заданной функцией селектора ключа.
            </summary>
      <param name="source">
                Последовательность для создания <see cref="T:System.Linq.ILookup`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Linq.ILookup`2" /> содержащий ключи и значения.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Создает <see cref="T:System.Linq.ILookup`2" /> из <see cref="T:System.Linq.ParallelQuery`1" /> в соответствии с указанной функцией выбора ключа функции и компаратором ключей.
            </summary>
      <param name="source">
                Последовательность для создания <see cref="T:System.Linq.ILookup`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Linq.ILookup`2" /> содержащий ключи и значения.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> или является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
              Создает <see cref="T:System.Linq.ILookup`2" /> из <see cref="T:System.Linq.ParallelQuery`1" /> в соответствии с указанной функцией выбора ключа и функции селектора элемента.
            </summary>
      <param name="source">
                Последовательность для создания <see cref="T:System.Linq.ILookup`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="elementSelector">
                Функция преобразования для получения результирующего значения каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип значения, возвращаемый <paramref name="elementSelector" />.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Linq.ILookup`2" /> содержащий значения типа <paramref name="TElement" /> выбранные из входной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Создает <see cref="T:System.Linq.ILookup`2" /> из <see cref="T:System.Linq.ParallelQuery`1" /> в соответствии с заданной функцией селектора ключа и компаратором функции выбора элементов.
            </summary>
      <param name="source">
                Последовательность для создания <see cref="T:System.Linq.ILookup`2" /> из.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="elementSelector">
                Функция преобразования для получения результирующего значения каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип значения, возвращаемый <paramref name="elementSelector" />.
              </typeparam>
      <returns>
              Словарь поиска Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;), содержащий значения типа TElement, выбранные из входной последовательности.
            </returns>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Эту перегрузку Union вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="first">
                Этот параметр не используется.
              </param>
      <param name="second">
                Этот параметр не используется.
              </param>
      <typeparam name="TSource">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Исключение, которое возникает при вызове этого метода.
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Эту перегрузку Union вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="first">
                Этот параметр не используется.
              </param>
      <param name="second">
                Этот параметр не используется.
              </param>
      <param name="comparer">
                Этот параметр не используется.
              </param>
      <typeparam name="TSource">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Исключение, которое возникает при вызове этого метода.
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>
              Находит объединение множеств, представленных двумя параллельными последовательностями, используя компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="first">
                Последовательность, различающиеся элементы которой образуют первое множество для объединения.
              </param>
      <param name="second">
                Последовательность, различающиеся элементы которой образуют второе множество для объединения.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность, которая содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Находит объединение множеств, представленных двумя параллельными последовательностями, используя указанный компаратор IEqualityComparer{T}.
            </summary>
      <param name="first">
                Последовательность, различающиеся элементы которой образуют первое множество для объединения.
              </param>
      <param name="second">
                Последовательность, различающиеся элементы которой образуют второе множество для объединения.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность, которая содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>
              Выполняет параллельную фильтрацию последовательности значений на основе предиката.
            </summary>
      <param name="source">
                Последовательность для фильтрации.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов исходной последовательности.
              </typeparam>
      <returns>
              Последовательность, содержащая элементы входной последовательности, которые удовлетворяют условию.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
              Выполняет параллельную фильтрацию последовательности значений на основе предиката.
               Индекс каждого элемента используется в логике функции предиката.
            </summary>
      <param name="source">
                Последовательность для фильтрации.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов исходной последовательности.
              </typeparam>
      <returns>
              Последовательность, содержащая элементы входной последовательности, которые удовлетворяют условию.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Более чем <see cref="F:System.Int32.MaxValue" /> выполняется перечисление элементов в запросе.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>
              Наборы <see cref="T:System.Threading.CancellationToken" /> для связи с запросом.
            </summary>
      <param name="source">
                Объект ParallelQuery, свойство которого нужно установить.
              </param>
      <param name="cancellationToken">
                Токен отмены.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Объект ParallelQuery, представляющий такой же запрос, как исходный, но с зарегистрированным токеном отмены.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.Threading.CancellationTokenSource" /> Связанных с <paramref name="cancellationToken" /> был удален.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="WithCancellation" /> несколько раз используется в запросе.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>
              Задает степень параллельности для использования в запросе.
               Степень параллельности — это максимальное число задач, выполняемых одновременно для обработки запроса.
            </summary>
      <param name="source">
                Объект ParallelQuery, для которого нужно установить предел степени параллельности.
              </param>
      <param name="degreeOfParallelism">
                Степень параллельности для запроса.
                 Значение по умолчанию — Math.Min (<see cref="P:System.Environment.ProcessorCount" />, <see langword="MAX_SUPPORTED_DOP" />) где <see langword="MAX_SUPPORTED_DOP" /> — 512.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Объект ParallelQuery, представляющий такой же запрос, как исходный, с установленным пределом степени параллельности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="degreeOfParallelism" /> значение меньше 1 или больше 511.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  В запросе WithDegreeOfParallelism используется несколько раз.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>
              Задает режим выполнения запроса.
            </summary>
      <param name="source">
                Объект ParallelQuery, свойство которого нужно установить.
              </param>
      <param name="executionMode">
                Режим, в котором следует выполнять запрос.
              </param>
      <typeparam name="TSource">
                Тип элементов последовательности <paramref name="source" />.
              </typeparam>
      <returns>
              Объект ParallelQuery, представляющий такой же запрос, как исходный, но с зарегистрированным режимом выполнения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="executionMode" /> не является допустимым значением <see cref="T:System.Linq.ParallelExecutionMode" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  В запросе WithExecutionMode используется несколько раз.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>
              Задает параметры слияния для запроса, определяющие способ буферизации выходных данных запросом.
            </summary>
      <param name="source">
                Объект ParallelQuery, свойство которого нужно установить.
              </param>
      <param name="mergeOptions">
                Параметры слияния, устанавливаемые для данного запроса.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Объект ParallelQuery, представляющий такой же запрос, как исходный, но с зарегистрированными параметрами слияния.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> является ссылкой на null (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="mergeOptions" /> не является допустимым значением <see cref="T:System.Linq.ParallelMergeOptions" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="WithMergeOptions" />используется несколько раз в запросе.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
              Эту перегрузку Zip вызывать не следует.
               Этот метод помечен как устаревший и всегда вызывает исключение <see cref="T:System.NotSupportedException" /> при вызове.
            </summary>
      <param name="first">
                Этот параметр не используется.
              </param>
      <param name="second">
                Этот параметр не используется.
              </param>
      <param name="resultSelector">
                Этот параметр не используется.
              </param>
      <typeparam name="TFirst">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TSecond">
                Этот параметр типа не используется.
              </typeparam>
      <typeparam name="TResult">
                Этот параметр типа не используется.
              </typeparam>
      <returns>
              Эта перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Исключение, которое возникает при вызове этого метода.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>
              Параллельно объединяет две последовательности, используя указанную функцию предиката.
            </summary>
      <param name="first">
                Первая последовательность для сворачивания.
              </param>
      <param name="second">
                Вторая последовательность для сворачивания.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего элемента для пары соответствующих элементов.
              </param>
      <typeparam name="TFirst">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TSecond">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TResult">
                Тип возвращаемых элементов.
              </typeparam>
      <returns>
              Последовательность, которая содержит элементы типа <paramref name="TResult" /> полученные в результате выполнения <paramref name="resultSelector" /> парного двух последовательностей.
               Если длины последовательностей различаются, длина ограничивается более короткой последовательностью.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="first" /> или <paramref name="second" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).
                </exception>
      <exception cref="T:System.OperationCanceledException">
                  Запрос отменен с маркером, переданного через <paramref name="WithCancellation" />.
                </exception>
      <exception cref="T:System.AggregateException">
                  Один или несколько исключений возникло во время оценки запроса.
                </exception>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий перебор элементов последовательности.
            </summary>
      <returns>
              Перечислитель, выполняющий перебор элементов последовательности.
            </returns>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий перебор элементов последовательности.
            </summary>
      <returns>
              Перечислитель, выполняющий перебор элементов последовательности.
            </returns>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>
              Применяет к последовательности агрегатную функцию.
            </summary>
      <param name="source">
                Последовательность, для которой выполняется статистическая операция.
              </param>
      <param name="func">
                Агрегатная функция, чтобы применить к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Конечное агрегатное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="func" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>
              Применяет к последовательности агрегатную функцию.
               Указанное начальное значение используется в качестве исходного значения агрегатной операции.
            </summary>
      <param name="source">
                Последовательность, для которой выполняется статистическая операция.
              </param>
      <param name="seed">
                Начальное агрегатное значение.
              </param>
      <param name="func">
                Агрегатная функция, вызываемое для каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TAccumulate">
                Тип агрегатного значения.
              </typeparam>
      <returns>
              Конечное агрегатное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="func" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>
              Применяет к последовательности агрегатную функцию.
               Указанное начальное значение служит исходным значением для агрегатной операции, а указанная функция используется для выбора результирующего значения.
            </summary>
      <param name="source">
                Последовательность, для которой выполняется статистическая операция.
              </param>
      <param name="seed">
                Начальное агрегатное значение.
              </param>
      <param name="func">
                Агрегатная функция, вызываемое для каждого элемента.
              </param>
      <param name="selector">
                Функция, преобразующая конечное агрегатное значение в результирующее значение.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TAccumulate">
                Тип агрегатного значения.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения.
              </typeparam>
      <returns>
              Преобразованное конечное агрегатное значение.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="func" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Определяет, является ли элементы последовательности удовлетворяют условию.
            </summary>
      <param name="source">
                Последовательность, элементы которой проверяемое условие.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="true" /> Если каждый элемент исходной последовательности проходит проверку, определяемую указанным предикатом, или если последовательность пуста; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>
              Определяет, содержит ли последовательность какие-либо элементы.
            </summary>
      <param name="source">
                Для проверки, пустая последовательность.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="true" /> Если исходная последовательность содержит элементы; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Определяет, удовлетворяет ли какой-либо элемент последовательности условие.
            </summary>
      <param name="source">
                Последовательность, элементы которой проверяемое условие.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="true" /> Если все элементы в исходной последовательности проходит проверку, определяемую указанным предикатом; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>
              Преобразует <see cref="T:System.Collections.IEnumerable" /> для <see cref="T:System.Linq.IQueryable" />.
            </summary>
      <param name="source">
                Последовательность, подлежащая преобразованию.
              </param>
      <returns>
              <see cref="T:System.Linq.IQueryable" /> Представляющий входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="source" /> не реализует <see cref="T:System.Collections.Generic.IEnumerable`1" /> для некоторых <paramref name="T" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Преобразует универсальный <see cref="T:System.Collections.Generic.IEnumerable`1" /> к универсальному <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
      <param name="source">
                Последовательность, подлежащая преобразованию.
              </param>
      <typeparam name="TElement">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Представляющий входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Decimal" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Double" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Int32" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int32" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int64" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Decimal" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только <see langword="null" /> значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Double" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только <see langword="null" /> значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Int32" />, допускающей значение null.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int32" />, допускающая значение null, для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений или <see langword="null" />, если исходная последовательность пуста или содержит только значения <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Int64" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только <see langword="null" /> значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Single" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> Если исходная последовательность пуста или содержит только <see langword="null" /> значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Single" /> значения для вычисления среднего.
              </param>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Decimal" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, используемых для вычисления среднего.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Double" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Int32" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Int64" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Decimal" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> при <paramref name="source" /> последовательность пуста или содержит только <see langword="null" /> значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Double" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> при <paramref name="source" /> последовательность пуста или содержит только <see langword="null" /> значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Int32" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> при <paramref name="source" /> последовательность пуста или содержит только <see langword="null" /> значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Int64" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> при <paramref name="source" /> последовательность пуста или содержит только <see langword="null" /> значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>
              Вычисляет среднее для последовательности nullable <see cref="T:System.Single" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений, или <see langword="null" /> при <paramref name="source" /> последовательность пуста или содержит только <see langword="null" /> значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>
              Вычисляет среднее для последовательности <see cref="T:System.Single" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений, для вычисления среднего.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Среднее для последовательности значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> не содержит элементов.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>
              Преобразует элементы <see cref="T:System.Linq.IQueryable" /> для указанного типа.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable" /> Содержащая преобразуемые элементы.
              </param>
      <typeparam name="TResult">
                Тип, который требуется преобразовать элементы <paramref name="source" /> для.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержит все элементы исходной последовательности, преобразованные заданный тип.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidCastException">
                  Элемент в последовательности не может быть приведен к типу <paramref name="TResult" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Объединяет две последовательности.
            </summary>
      <param name="source1">
                Первая из объединяемых последовательностей.
              </param>
      <param name="source2">
                Последовательность, объединяемая с первой последовательностью.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащая сцепленные элементы двух входных последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>
              Определяет, содержит ли последовательность указанный элемент, используя компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> В которой требуется найти <paramref name="item" />.
              </param>
      <param name="item">
                Объект, который требуется найти в последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="true" /> Если входная последовательность содержит элемент с указанным значением; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Определяет, содержит ли последовательность указанный элемент, используя указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> В которой требуется найти <paramref name="item" />.
              </param>
      <param name="item">
                Объект, который требуется найти в последовательности.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see langword="true" /> Если входная последовательность содержит элемент с указанным значением; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает количество элементов в последовательности.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы которой требуется подсчитать.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число элементов во входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Число элементов в <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Возвращает количество элементов в указанной последовательности, удовлетворяющий условию.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы которой требуется подсчитать.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число элементов в последовательности, удовлетворяющий условию функции предиката.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Число элементов в <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает элементы указанной последовательности или значение по умолчанию параметра типа одноэлементную коллекцию, если последовательность пуста.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Для возврата значение по умолчанию, если не указано.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий <see langword="default" />(<paramref name="TSource" />) Если <paramref name="source" /> является пустой; в противном случае — <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>
              Возвращает элементы указанной последовательности или значение заданного одноэлементную коллекцию, если последовательность пуста.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Для возврата указанное значение, если не указано.
              </param>
      <param name="defaultValue">
                Значение, возвращаемое в случае пустой последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий <paramref name="defaultValue" /> Если <paramref name="source" /> является пустой; в противном случае — <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Для удаления дубликатов.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащая различающиеся элементы из <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Возвращает различающиеся элементы последовательности, используя указанную <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения значений.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Для удаления дубликатов.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащая различающиеся элементы из <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="comparer" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>
              Возвращает элемент по указанному индексу в последовательности.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить элемент.
              </param>
      <param name="index">
                Отсчитываемый от нуля индекс извлекаемого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Элемент в указанной позиции в <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="index" /> меньше нуля.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>
              Возвращает элемент последовательности по указанному индексу или значение по умолчанию, если индекс вне допустимого диапазона.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить элемент.
              </param>
      <param name="index">
                Отсчитываемый от нуля индекс извлекаемого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              default(<paramref name="TSource" />) Если <paramref name="index" /> выходит за границы <paramref name="source" />; в противном случае — элемент в указанной позиции в <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Находит разность двух последовательностей, используя для сравнения значений компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="source1">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой, отсутствующие в <paramref name="source2" /> будут возвращены.
              </param>
      <param name="source2">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой, входящие также в первую последовательность не будет отображаться в возвращаемой последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий разность двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Находит разность двух последовательностей с помощью заданного <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения значений.
            </summary>
      <param name="source1">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой, отсутствующие в <paramref name="source2" /> будут возвращены.
              </param>
      <param name="source2">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой, входящие также в первую последовательность не будет отображаться в возвращаемой последовательности.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий разность двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает первый элемент последовательности.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Для возвращения первого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Первый элемент в <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Исходная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Возвращает первый элемент последовательности, удовлетворяющий указанному условию.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Первый элемент в <paramref name="source" /> прошедший проверку в <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Элемент не удовлетворяет условию предиката <paramref name="predicate" />.
                
                  -или-
                
                  Исходная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Для возвращения первого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              default(<paramref name="TSource" />) Если <paramref name="source" /> является пустой; в противном случае — первый элемент в <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Возвращает первый элемент последовательности, удовлетворяющий заданному условию, или значение по умолчанию, если элемент не найден.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              default(<paramref name="TSource" />) Если <paramref name="source" /> пуст или если отсутствует элемент не прошел проверку, определенную предикатом <paramref name="predicate" />; в противном случае — первый элемент в <paramref name="source" /> прошедший проверку, определенную предикатом <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, заданной в <paramref name="keySelector" />.
              </typeparam>
      <returns>
              IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; В C# или IQueryable(Of IGrouping(Of TKey, TSource)) в Visual Basic где каждый <see cref="T:System.Linq.IGrouping`2" /> объект содержит последовательность объектов и ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и сравнивает ключи с помощью указанного компаратора.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, заданной в <paramref name="keySelector" />.
              </typeparam>
      <returns>
              IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; В C# или IQueryable(Of IGrouping(Of TKey, TSource)) в Visual Basic где каждый <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов и ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и проецирует элементы каждой группы с помощью указанной функции.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в <see cref="T:System.Linq.IGrouping`2" />.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, заданной в <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в каждом <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
      <returns>
              IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; В C# или IQueryable(Of IGrouping(Of TKey, TElement)) в Visual Basic где каждый <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов типа <paramref name="TElement" /> и ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы последовательности и проецирует элементы каждой группы с помощью указанной функции.
               Значения ключей сравниваются с помощью указанного компаратора.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в <see cref="T:System.Linq.IGrouping`2" />.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, заданной в <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в каждом <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
      <returns>
              IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; В C# или IQueryable(Of IGrouping(Of TKey, TElement)) в Visual Basic где каждый <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов типа <paramref name="TElement" /> и ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Значение параметра <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> или <paramref name="comparer" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, заданной в <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              T:System.Linq.IQueryable`1 С аргументом типа <paramref name="TResult" /> и где каждый элемент представляет проекцию группы и ее ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="resultSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
               Ключи сравниваются с помощью указанного компаратора.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, заданной в <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              T:System.Linq.IQueryable`1 С аргументом типа <paramref name="TResult" /> и где каждый элемент представляет проекцию группы и ее ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Значение параметра <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="resultSelector" /> или <paramref name="comparer" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
               Элементы каждой группы проецируются с помощью указанной функции.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в <see cref="T:System.Linq.IGrouping`2" />.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, заданной в <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в каждом <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              T:System.Linq.IQueryable`1 С аргументом типа <paramref name="TResult" /> и где каждый элемент представляет проекцию группы и ее ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Значение параметра <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
              Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.
               Ключи сравниваются с помощью указанного компаратора, элементы каждой группы проецируются с помощью указанной функции.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой требуется сгруппировать.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ для каждого элемента.
              </param>
      <param name="elementSelector">
                Функция, сопоставляющая каждый исходный элемент с элементом в <see cref="T:System.Linq.IGrouping`2" />.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего значения для каждой группы.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, заданной в <paramref name="keySelector" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в каждом <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующего значения, возвращаемые <paramref name="resultSelector" />.
              </typeparam>
      <returns>
              T:System.Linq.IQueryable`1 С аргументом типа <paramref name="TResult" /> и где каждый элемент представляет проекцию группы и ее ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> или <paramref name="resultSelector" /> или <paramref name="comparer" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>
              Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключа и группирует результаты.
               Для сравнения ключей используется компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.
              </param>
      <typeparam name="TOuter">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы типа <paramref name="TResult" /> полученные в результате группированное соединение двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
              Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключа и группирует результаты.
               Указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> используется для сравнения ключей.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.
              </param>
      <param name="comparer">
                Компаратор для хеширования и сравнения ключей.
              </param>
      <typeparam name="TOuter">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы типа <paramref name="TResult" /> полученные в результате группированное соединение двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Находит пересечение двух последовательностей, используя для сравнения значений компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="source1">
                Последовательность, различающиеся элементы которой, входящие также в <paramref name="source2" /> возвращаются.
              </param>
      <param name="source2">
                Последовательность, различающиеся элементы которой, входящие также в первую последовательность, возвращаются.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              Последовательность, содержащая пересечения наборов двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Находит пересечение двух последовательностей, используя указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения значений.
            </summary>
      <param name="source1">
                <see cref="T:System.Linq.IQueryable`1" /> Различающиеся элементы которой, входящие также в <paramref name="source2" /> возвращаются.
              </param>
      <param name="source2">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Возвращаются, различающиеся элементы которой, входящие также в первую последовательность.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий пересечения наборов двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>
              Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.
               Для сравнения ключей используется компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего элемента для пары соответствующих элементов.
              </param>
      <typeparam name="TOuter">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержит элементы типа <paramref name="TResult" /> полученные в результате внутреннего соединения двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>
              Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.
               Указанный <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> используется для сравнения ключей.
            </summary>
      <param name="outer">
                Первая последовательность для соединения.
              </param>
      <param name="inner">
                Последовательность, соединяемая с первой последовательностью.
              </param>
      <param name="outerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента первой последовательности.
              </param>
      <param name="innerKeySelector">
                Функция, извлекающая ключ соединения из каждого элемента второй последовательности.
              </param>
      <param name="resultSelector">
                Функция для создания результирующего элемента для пары соответствующих элементов.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для хэширования и сравнения ключей.
              </param>
      <typeparam name="TOuter">
                Тип элементов первой последовательности.
              </typeparam>
      <typeparam name="TInner">
                Тип элементов второй последовательности.
              </typeparam>
      <typeparam name="TKey">
                Тип ключей, возвращаемых функциями селектора ключа.
              </typeparam>
      <typeparam name="TResult">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержит элементы типа <paramref name="TResult" /> полученные в результате внутреннего соединения двух последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> — <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает последний элемент последовательности.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить последний элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Значение, находящееся в последней позиции в <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Исходная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Возвращает последний элемент последовательности, удовлетворяющий указанному условию.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Последний элемент в <paramref name="source" /> прошедший проверку, определенную предикатом <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Элемент не удовлетворяет условию предиката <paramref name="predicate" />.
                
                  -или-
                
                  Исходная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить последний элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              default(<paramref name="TSource" />) Если <paramref name="source" /> является пустой; в противном случае — последний элемент в <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Возвращает последний элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить элемент.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              default(<paramref name="TSource" />) Если <paramref name="source" /> пуста или если ни один элемент не прошел проверку функцией предиката; в противном случае — последний элемент <paramref name="source" /> прошедший проверку функцией предиката.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает <see cref="T:System.Int64" /> представляющее общее число элементов в последовательности.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы которой требуется подсчитать.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число элементов в <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Число элементов превышает <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Возвращает <see cref="T:System.Int64" /> представляющий количество элементов последовательности, удовлетворяющих заданному условию.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы которой требуется подсчитать.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Число элементов в <paramref name="source" /> удовлетворяющих условию функции предиката.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Количество соответствующих элементов превышает <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает максимальное значение в универсальной коллекции <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
      <param name="source">
                Последовательность значений, чтобы определить максимальное значение.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              Вызывает функцию проекции для каждого элемента универсального <see cref="T:System.Linq.IQueryable`1" /> и возвращает максимальное результирующее значение.
            </summary>
      <param name="source">
                Последовательность значений, чтобы определить максимальное значение.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип значения, возвращаемого функцией, представленный <paramref name="selector" />.
              </typeparam>
      <returns>
              Максимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает минимальное значение универсального <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
      <param name="source">
                Последовательность значений, чтобы определить минимальное.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              Вызывает функцию проекции для каждого элемента универсального <see cref="T:System.Linq.IQueryable`1" /> и возвращает минимальное результирующее значение.
            </summary>
      <param name="source">
                Последовательность значений, чтобы определить минимальное.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип значения, возвращаемого функцией, представленный <paramref name="selector" />.
              </typeparam>
      <returns>
              Минимальное значение в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>
              Фильтрует элементы <see cref="T:System.Linq.IQueryable" /> на основе указанного типа.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable" /> Элементы которой следует фильтровать.
              </param>
      <typeparam name="TResult">
                Тип, по которому фильтруются элементы последовательности.
              </typeparam>
      <returns>
              Коллекция, содержащая элементы из <paramref name="source" /> имеющие тип <paramref name="TResult" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              Сортирует элементы последовательности в возрастающем порядке по ключу.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, представленного <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedQueryable`1" /> Элементы которой сортируются по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>
              Сортирует элементы последовательности в порядке возрастания с использованием указанного компаратора.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, представленного <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedQueryable`1" /> Элементы которой сортируются по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              Сортирует элементы последовательности в порядке убывания ключа.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, представленного <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedQueryable`1" /> Элементы которой сортируются в порядке убывания ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>
              Сортирует элементы последовательности в порядке убывания с использованием указанного компаратора.
            </summary>
      <param name="source">
                Последовательность значений, которые следует упорядочить.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, представленного <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedQueryable`1" /> Элементы которой сортируются в порядке убывания ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>
              Изменяет порядок элементов в последовательности.
            </summary>
      <param name="source">
                Последовательность значений, которые следует расставить в обратном порядке.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Элементы которой соответствуют элементам входной последовательности в обратном порядке.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              Проецирует каждый элемент последовательности в новую форму.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип значения, возвращаемого функцией, представленный <paramref name="selector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Элементы которого получены в результате вызова функции проекции для каждого элемента <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>
              Проецирует каждый элемент последовательности в новую форму, добавляя индекс элемента.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип значения, возвращаемого функцией, представленный <paramref name="selector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Элементы которого получены в результате вызова функции проекции для каждого элемента <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>
              Проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов последовательности, возвращаемой функцией, представленный <paramref name="selector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Элементы которого получены в результате вызова функции один ко многим проекции для каждого элемента входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>
              Проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.
               Индекс каждого элемента исходной последовательности используется в проецированной форме этого элемента.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу; Второй параметр этой функции представляет индекс исходного элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов последовательности, возвращаемой функцией, представленный <paramref name="selector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Элементы которого получены в результате вызова функции один ко многим проекции для каждого элемента входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>
              Проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" /> и вызывает функцию селектора результата для каждого элемента этой последовательности.
               Результирующие значения из всех промежуточных последовательностей объединяются в одну одномерную последовательность и возвращается.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="collectionSelector">
                Функция проекции, применяемая к каждому элементу входной последовательности.
              </param>
      <param name="resultSelector">
                Функция проекции, применяемая к каждому элементу каждой промежуточной последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TCollection">
                Тип промежуточных элементов, собираемые функцией, заданной параметром <paramref name="collectionSelector" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов результирующей последовательности.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Элементы которого получены в результате вызова функции проекции один ко многим <paramref name="collectionSelector" /> для каждого элемента <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующие им <paramref name="source" /> элемента с полученным элементом.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>
              Проецирует каждый элемент последовательности в <see cref="T:System.Collections.Generic.IEnumerable`1" /> включает индекс исходного элемента, который его создал.
               Для каждого элемента каждой промежуточной последовательности вызывается функция селектора результата, и результирующие значения объединяются в одну одномерную последовательность и возвращается.
            </summary>
      <param name="source">
                Последовательность значений, которые следует проецировать.
              </param>
      <param name="collectionSelector">
                Функция проекции, применяемая к каждому элементу входной последовательности; Второй параметр этой функции представляет индекс исходного элемента.
              </param>
      <param name="resultSelector">
                Функция проекции, применяемая к каждому элементу каждой промежуточной последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TCollection">
                Тип промежуточных элементов, собираемые функцией, заданной параметром <paramref name="collectionSelector" />.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов результирующей последовательности.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Элементы которого получены в результате вызова функции проекции один ко многим <paramref name="collectionSelector" /> для каждого элемента <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующие им <paramref name="source" /> элемента с полученным элементом.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Определяет, совпадают ли две последовательности, используя для сравнения элементов компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="source1">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой требуется сравнить данные для <paramref name="source2" />.
              </param>
      <param name="source2">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой требуется сравнить их первой последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see langword="true" /> Если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Определяет, равны ли две последовательности, используя указанную <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения элементов.
            </summary>
      <param name="source1">
                <see cref="T:System.Linq.IQueryable`1" /> Элементы которой требуется сравнить данные для <paramref name="source2" />.
              </param>
      <param name="source2">
                <see cref="T:System.Collections.Generic.IEnumerable`1" /> Элементы которой требуется сравнить их первой последовательности.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Можно использовать для сравнения элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see langword="true" /> Если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает единственный элемент последовательности и вызывает исключение, если число элементов последовательности отлично от одного.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Чтобы вернуть единственный элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> имеет более одного элемента.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Возвращает единственный элемент последовательности, удовлетворяющий указанному условию, и вызывает исключение, если таких элементов больше одного.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Для возврата из одного элемента.
              </param>
      <param name="predicate">
                Функция для проверки элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности, удовлетворяющий условию предиката <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Элемент не удовлетворяет условию предиката <paramref name="predicate" />.
                
                  -или-
                
                  Удовлетворяет более одного элемента в <paramref name="predicate" />.
                
                  -или-
                
                  Исходная последовательность пуста.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>
              Возвращает единственный элемент последовательности или значение по умолчанию, если последовательность пуста; Этот метод создает исключение, если в последовательности более одного элемента.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Чтобы вернуть единственный элемент.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности или default(<paramref name="TSource" />), если последовательность не содержит элементов.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  <paramref name="source" /> имеет более одного элемента.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Возвращает единственный элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, вызывается исключение.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Для возврата из одного элемента.
              </param>
      <param name="predicate">
                Функция для проверки элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Единственный элемент входной последовательности, удовлетворяющий условию предиката <paramref name="predicate" />, или default(<paramref name="TSource" />), если элемент не найден.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Удовлетворяет более одного элемента в <paramref name="predicate" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>
              Пропускает заданное число элементов в последовательности и возвращает остальные элементы.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить элементы.
              </param>
      <param name="count">
                Число элементов, пропускаемых перед возвращением остальных элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы, начиная с указанного индекса в входной последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Пропускает элементы в последовательности, пока заданное условие истинно и затем возвращает оставшиеся элементы.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы из <paramref name="source" /> начиная с первого элемента, в который не прошел проверку, определенную предикатом <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>
              Пропускает элементы в последовательности, пока заданное условие истинно и затем возвращает оставшиеся элементы.
               Индекс элемента используется в логике функции предиката.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию; Второй параметр этой функции представляет индекс исходного элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы из <paramref name="source" /> начиная с первого элемента, в который не прошел проверку, определенную предикатом <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Decimal" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Double" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Int32" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int32" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Int64" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Decimal" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Decimal" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Double" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Double" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Int32" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Int32" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Int64" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Int64" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность nullable <see cref="T:System.Single" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Single" /> значения.
            </summary>
      <param name="source">
                Последовательность <see cref="T:System.Single" /> значения для вычисления суммы.
              </param>
      <returns>
              Сумма значений в последовательности.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Decimal" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений типа <paramref name="TSource" />.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Double" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений типа <paramref name="TSource" />.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Int32" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений типа <paramref name="TSource" />.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Int64" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений типа <paramref name="TSource" />.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Decimal" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений типа <paramref name="TSource" />.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Double" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений типа <paramref name="TSource" />.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Int32" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений типа <paramref name="TSource" />.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Int64" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений типа <paramref name="TSource" />.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.OverflowException">
                  Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>
              Вычисляет сумму последовательности nullable <see cref="T:System.Single" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений типа <paramref name="TSource" />.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>
              Вычисляет сумму последовательности <see cref="T:System.Single" /> значений, получаемой в результате применения функции проекции к каждому элементу входной последовательности.
            </summary>
      <param name="source">
                Последовательность значений типа <paramref name="TSource" />.
              </param>
      <param name="selector">
                Функция проекции, применяемая к каждому элементу.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              Сумма проецированных значений.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>
              Возвращает заданное число смежных элементов с начала последовательности.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="count">
                Число возвращаемых элементов.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий указанное число элементов с начала <paramref name="source" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="source" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Возвращает элементы из последовательности, пока указанное условие истинно.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащая элементы входной последовательности до первого элемента, указанные теста по <paramref name="predicate" /> не прошел.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>
              Возвращает элементы из последовательности, пока указанное условие истинно.
               Индекс элемента используется в логике функции предиката.
            </summary>
      <param name="source">
                Последовательность, из которой требуется возвратить элементы.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию; Второй параметр функции представляет индекс элемента в исходной последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащая элементы входной последовательности до первого элемента, указанные теста по <paramref name="predicate" /> не прошел.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              Выполняет дополнительное упорядочение элементов последовательности в порядке по возрастанию по ключу.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IOrderedQueryable`1" /> Содержащий элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, представленный <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedQueryable`1" /> Элементы которой сортируются по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>
              Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания с использованием указанного компаратора.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IOrderedQueryable`1" /> Содержащий элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, представленный <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedQueryable`1" /> Элементы которой сортируются по ключу.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              Выполняет дополнительное упорядочение элементов последовательности в порядке убывания ключа.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IOrderedQueryable`1" /> Содержащий элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, возвращаемого функцией, представленный <paramref name="keySelector" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IOrderedQueryable`1" /> Элементы которой сортируются в порядке убывания ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>
              Выполняет дополнительное упорядочение элементов последовательности в порядке убывания с использованием указанного компаратора.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IOrderedQueryable`1" /> Содержащий элементы для сортировки.
              </param>
      <param name="keySelector">
                Функция, извлекающая ключ из каждого элемента.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IComparer`1" /> Для сравнения ключей.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <typeparam name="TKey">
                Тип ключа, который возвращается <paramref name="keySelector" /> функции.
              </typeparam>
      <returns>
              Коллекция, элементы которой сортируются в порядке убывания ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Находит объединения наборов двух последовательностей, используя компаратор проверки на равенство по умолчанию.
            </summary>
      <param name="source1">
                Последовательность, различающиеся элементы которой образуют первое множество для операции объединения.
              </param>
      <param name="source2">
                Последовательность, различающиеся элементы которой образуют второе множество для операции объединения.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы из обеих входных последовательностях, кроме дубликатов.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
              Создает объединения наборов двух последовательностей с использованием указанного <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
      <param name="source1">
                Последовательность, различающиеся элементы которой образуют первое множество для операции объединения.
              </param>
      <param name="source2">
                Последовательность, различающиеся элементы которой образуют второе множество для операции объединения.
              </param>
      <param name="comparer">
                <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Для сравнения значений.
              </param>
      <typeparam name="TSource">
                Тип элементов входных последовательностей.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы из обеих входных последовательностях, кроме дубликатов.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
              Выполняет фильтрацию последовательности значений на основе заданного предиката.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Для фильтрации.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы из входной последовательности, которые удовлетворяют условию, указанному в <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>
              Выполняет фильтрацию последовательности значений на основе заданного предиката.
               Индекс каждого элемента используется в логике функции предиката.
            </summary>
      <param name="source">
                <see cref="T:System.Linq.IQueryable`1" /> Для фильтрации.
              </param>
      <param name="predicate">
                Функция для проверки каждого элемента на соответствие условию; Второй параметр функции представляет индекс элемента в исходной последовательности.
              </param>
      <typeparam name="TSource">
                Тип элементов <paramref name="source" />.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Содержащий элементы из входной последовательности, которые удовлетворяют условию, указанному в <paramref name="predicate" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>
              Объединяет две последовательности, используя указанную функцию предиката.
            </summary>
      <param name="source1">
                Первая последовательность для объединения.
              </param>
      <param name="source2">
                Вторая последовательность для объединения.
              </param>
      <param name="resultSelector">
                Функция, которая указывает, как объединить элементы двух последовательностей.
              </param>
      <typeparam name="TFirst">
                Тип элементов первой входной последовательностью.
              </typeparam>
      <typeparam name="TSecond">
                Тип элементов второй входной последовательности.
              </typeparam>
      <typeparam name="TResult">
                Тип элементов полученной последовательности.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> , Содержащий объединенные элементы двух входных последовательностей.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="source1" /> или <paramref name="source2 " /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor">
      <summary>
              Инициализирует новый экземпляр класса InstanceNotFoundException.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Инициализирует новый экземпляр класса InstanceNotFoundException с указанными сведениями о сериализации и контекстом потоковой передачи.
            </summary>
      <param name="info">
                SerializationInfo, содержащий все данные, необходимые для сериализации исключения.
              </param>
      <param name="context">
                StreamingContext, указывающий источник и назначение потока.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр класса InstanceNotFoundException со строкой сообщения, заданным для сообщения.
            </summary>
      <param name="message">
                Строка, содержащая сообщение об ошибке с объяснением причин исключения.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
              Инициализирует новый экземпляр класса InstanceNotFoundException с указанным сообщением об ошибке и внутренним исключением.
            </summary>
      <param name="message">
                Строка, содержащая сообщение об ошибке с объяснением причин исключения.
              </param>
      <param name="innerException">
                Исключение, вызвавшее текущее исключение.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" />.
               .
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> класс со сведениями о сериализации.
            </summary>
      <param name="info">
                Данные, необходимые для сериализации или десериализации объекта.
              </param>
      <param name="context">
                Описание источника и назначения заданного сериализованного потока.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> класса сообщение, описывающее исключение.
            </summary>
      <param name="message">
                Сообщение с описанием исключения.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String,System.Exception)">
      <summary>
              Инициализирует новый <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> класса с заданной строкой и исключением.
            </summary>
      <param name="message">
                Сообщение с описанием исключения.
              </param>
      <param name="innerException">
                Экземпляр исключения, вызвавший текущее исключение.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.Instrumentation.InstrumentationException" />.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Exception)">
      <summary>
              Инициализирует новый <see cref="T:System.Management.Instrumentation.InstrumentationException" /> класса System.Exception, который вызвал текущее исключение.
            </summary>
      <param name="innerException">
                Экземпляр исключения, вызвавший текущее исключение.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Management.Instrumentation.InstrumentationException" /> класс со сведениями о сериализации.
            </summary>
      <param name="info">
                Данные, необходимые для сериализации или десериализации объекта.
              </param>
      <param name="context">
                Описание источника и назначения заданного сериализованного потока.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Management.Instrumentation.InstrumentationException" /> класса сообщение, описывающее исключение.
            </summary>
      <param name="message">
                Сообщение с описанием исключения.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String,System.Exception)">
      <summary>
              Инициализирует новый <see cref="T:System.Management.Instrumentation.InstrumentationException" /> класса с заданной строкой и исключением.
            </summary>
      <param name="message">
                Сообщение с описанием исключения.
              </param>
      <param name="innerException">
                Экземпляр исключения, вызвавший текущее исключение.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementBindAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementBindAttribute" />.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCommitAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementCommitAttribute" />.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementConfigurationAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementConfigurationAttribute" />.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCreateAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementCreateAttribute" />.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementEntityAttribute" />.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementEnumeratorAttribute" />.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementKeyAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Management.ManagementKeyAttribute" />  класса.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementMemberAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Management.ManagementMemberAttribute" /> класса.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNameAttribute.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Management.ManagementNameAttribute" /> класс, который содержит значение <see cref="P:System.Management.ManagementNameAttribute.Name" /> Свойства класса.
            </summary>
      <param name="name">
                Понятное имя для объекта.
              </param>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNewInstanceAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementNewInstanceAttribute" />.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementProbeAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementProbeAttribute" />.
               Это конструктор по умолчанию для класса.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementReferenceAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementReferenceAttribute" />.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementRemoveAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementRemoveAttribute" />.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementTaskAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementTaskAttribute" />.
               Это конструктор по умолчанию.
            </summary>
    </member>
    <member name="M:System.Management.Instrumentation.WmiConfigurationAttribute.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Management.WmiConfigurationAttribute" /> класс, который определяет пространство имен WMI, в котором поставщик WMI будет предоставлять классы.
            </summary>
      <param name="scope">
                Пространство имен WMI, в котором поставщик будет предоставлять классы.
                 Например, «root\MyProviderNamespace».
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>
              Создает источник вызова с делегат заданного типа и привязки.
            </summary>
      <param name="delegateType">
                Тип делегата источника вызова.
              </param>
      <param name="binder">
                Привязки узла вызова.
              </param>
      <returns>
              Новый источник вызова.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>
              Создает экземпляр динамического источника вызова, инициализированный связыватель, предназначенный для привязки среды выполнения динамических операций этого вызова.
            </summary>
      <param name="binder">
                Связыватель, предназначенный для привязки среды выполнения динамических операций этого вызова.
              </param>
      <returns>
              Новый экземпляр динамического источника вызова.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>
              Выполняет привязку динамической операции на набор аргументов среды выполнения.
            </summary>
      <param name="args">
                Массив аргументов динамической операции.
              </param>
      <param name="parameters">
                Массив <see cref="T:System.Linq.Expressions.ParameterExpression" /> экземпляры, которые представляют параметры вызова в процессе привязки.
              </param>
      <param name="returnLabel">
                Элемент LabelTarget возвращают результат динамической привязки.
              </param>
      <returns>
              Выражение, проверяющее аргументы динамической операции и выполняющее эту операцию, если проверки пройдены успешно.
               Если тесты будут завершаться при последующих выполнениях динамической операции, привязка будет снова вызван для создания нового <see cref="T:System.Linq.Expressions.Expression" /> для новых типов аргументов.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>
              Обеспечивает поддержку привязки низкого уровня среды выполнения.
               Классы могут переопределить это и обеспечивая прямой делегат для реализации правила.
               Это позволяет сохранять правила на диск, обеспечивать специализированные правила во время выполнения или предоставление альтернативную политику кэширования.
            </summary>
      <param name="site">
                Для которого выполняется привязка источника вызова.
              </param>
      <param name="args">
                Аргументы для привязки.
              </param>
      <typeparam name="T">
                Тип целевого элемента источника вызова.
              </typeparam>
      <returns>
              Новый делегат, заменяющий целевой.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>
              Добавляет целевой элемент в кэш известных целевых элементов.
               Кэшированные целевые объекты будут проверяться перед вызовом метода BindDelegate для получения нового правила.
            </summary>
      <param name="target">
                Целевой делегат, который добавляется в кэш.
              </param>
      <typeparam name="T">
                Тип добавляемого целевого элемента.
              </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>
              Проверяет, может ли <see cref="T:System.Reflection.MethodBase" /> используется внутри среды DLR и не должен отображаться в стеке кода языка.
            </summary>
      <param name="mb">
                Входные данные <see cref="T:System.Reflection.MethodBase" />
              </param>
      <returns>
              Значение true, если входные данные <see cref="T:System.Reflection.MethodBase" /> используется внутри среды DLR и не должен отображаться в стеке кода языка.
               В противном случае — значение false.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.AddRule``1(System.Runtime.CompilerServices.CallSite{``0},``0)">
      <summary>
              Добавляет правило в кэш, поддерживаемый на динамическом источнике вызова.
            </summary>
      <param name="site">
                Экземпляр динамического источника вызова.
              </param>
      <param name="rule">
                Экземпляр узла правила вызова.
              </param>
      <typeparam name="T">
                Тип делегата из <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.Bind``1(System.Runtime.CompilerServices.CallSiteBinder,System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>
              Обновляет цель сайта вызова новым правилом на основании аргументов.
            </summary>
      <param name="binder">
                Привязки узла вызова.
              </param>
      <param name="site">
                Экземпляр динамического источника вызова.
              </param>
      <param name="args">
                Аргументы для вызова.
              </param>
      <typeparam name="T">
                Тип делегата из <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </typeparam>
      <returns>
              Новая цель сайта вызова.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.ClearMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>
              Снимает флажок соответствия на вызова, проверяющем.
            </summary>
      <param name="site">
                Экземпляр динамического источника вызова.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>
              Создает экземпляр динамического вызова, используемый для поиска в кэше.
            </summary>
      <param name="site">
                Экземпляр динамического источника вызова.
              </param>
      <typeparam name="T">
                Тип делегата из <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </typeparam>
      <returns>
              Новый источник вызова.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetCachedRules``1(System.Runtime.CompilerServices.RuleCache{``0})">
      <summary>
              Выполняет поиск в кэше динамических правил для правил, применимых к динамической операции.
            </summary>
      <param name="cache">
                Кэш.
              </param>
      <typeparam name="T">
                Тип делегата из <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </typeparam>
      <returns>
              Коллекция правил.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>
              Проверяет соответствие выполненного правила
            </summary>
      <param name="site">
                Экземпляр динамического источника вызова.
              </param>
      <returns>
              значение true, если правило соответствия, значение false в противном случае.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRuleCache``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>
              Извлекает кэш правил привязки.
            </summary>
      <param name="site">
                Экземпляр динамического источника вызова.
              </param>
      <typeparam name="T">
                Тип делегата из <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </typeparam>
      <returns>
              Кэш.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRules``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>
              Получает динамические правила привязки от источника вызова.
            </summary>
      <param name="site">
                Экземпляр динамического источника вызова.
              </param>
      <typeparam name="T">
                Тип делегата из <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </typeparam>
      <returns>
              Массив динамических правил привязки.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.MoveRule``1(System.Runtime.CompilerServices.RuleCache{``0},``0,System.Int32)">
      <summary>
              Перемещает правило привязки в пределах кэша.
            </summary>
      <param name="cache">
                Кэш правил вызов узла.
              </param>
      <param name="rule">
                Экземпляр узла правила вызова.
              </param>
      <param name="i">
                Индекс правила сайта вызова.
              </param>
      <typeparam name="T">
                Тип делегата из <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.SetNotMatched(System.Runtime.CompilerServices.CallSite)">
      <summary>
              Проверка необходимости обновления динамического узла.
            </summary>
      <param name="site">
                Экземпляр динамического источника вызова.
              </param>
      <returns>
              Если правило не обновляется, значение false в противном случае — значение true.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.UpdateRules``1(System.Runtime.CompilerServices.CallSite{``0},System.Int32)">
      <summary>
              Обновляет правила в кэше.
            </summary>
      <param name="this">
                Экземпляр динамического источника вызова.
              </param>
      <param name="matched">
                Индекс правила соответствия.
              </param>
      <typeparam name="T">
                Тип делегата из <see cref="T:System.Runtime.CompilerServices.CallSite" />.
              </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Closure.#ctor(System.Object[],System.Object[])">
      <summary>
              Создает объект, содержащий состояние динамически создаваемого метода.
            </summary>
      <param name="constants">
                Константы, используемые методом.
              </param>
      <param name="locals">
                Поднятые локальные переменные из родительского контекста.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" />.
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>
              Создает генератор символов базы данных (PDB) программы.
            </summary>
      <returns>
              Генератор символов PDB.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>
              Задает точку следования в код на промежуточном языке (MSIL).
            </summary>
      <param name="method">
                Лямбда-выражение, которое создается.
              </param>
      <param name="ilOffset">
                Смещение внутри кода MSIL, на котором для обозначения точки последовательности.
              </param>
      <param name="sequencePoint">
                Отладочную информацию, который соответствует точке последовательности.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />.
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />.
            </summary>
      <param name="transformFlags">
                Указывает в префикса обхода конструкции типа, который <see cref="T:System.Object" /> вхождений предназначены следует рассматривать как динамически выполняемый тип.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>
              Создает делегат, который может использоваться для выполнения динамически создаваемого метода.
            </summary>
      <param name="indexLambda">
                Индекс объекта, который хранит сведения о связанном лямбда-выражении динамического метода.
              </param>
      <param name="locals">
                Массив, содержащий поднятые локальные переменные из родительского контекста.
              </param>
      <returns>
              Объект <see cref="T:System.Delegate" /> можно выполнить динамически создаваемый метод.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>
              Создает массив для хранения поднятые локальные переменные.
            </summary>
      <returns>
              Массив для хранения поднятые локальные переменные.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>
              Освобождает указанное дерево выражений от ссылок на внешние параметры, заменяя параметр его текущим значением.
            </summary>
      <param name="expression">
                Дерево выражения, которое требуется освободить от ссылок на внешние параметры.
              </param>
      <param name="locals">
                Массив, содержащий поднятые локальные переменные.
              </param>
      <returns>
              Дерево выражения, которое не содержит ссылок на внешние параметры.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>
              Создает документ ReadOnlyCollectionBuilder.
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Создает ReadOnlyCollectionBuilder, копирование содержимого данной коллекции.
            </summary>
      <param name="collection">
                Скопируйте элементы из коллекции.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>
              Создает ReadOnlyCollectionBuilder с заданной начальной емкостью.
               Содержимого нет, но построитель резервирует пространство для заданного числа элементов перед любой более не требуются.
            </summary>
      <param name="capacity">
                Исходная емкость.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>
              Добавляет элемент в коллекцию <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.
            </summary>
      <param name="item">
                Объект, добавляемый в коллекцию <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>
              Удаляет все элементы из коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>
              Определяет, является ли <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> содержит определенное значение
            </summary>
      <param name="item">
                объект для поиска в <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.
              </param>
      <returns>
              значение true, если элемент найден в <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; в противном случае — значение false.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>
              Копирует элементы коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> для <see cref="T:System.Array" />, начиная с указанного <see cref="T:System.Array" /> индекса.
            </summary>
      <param name="array">
                Одномерный массив <see cref="T:System.Array" />, в который копируются элементы из интерфейса <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.
              </param>
      <param name="arrayIndex">
                Отсчитываемый от нуля индекс в массиве, с которого начинается копирование.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий перебор элементов в коллекции.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который может использоваться для выполнения итерации по коллекции.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>
              Возвращает индекс первого вхождения заданного значения в построитель.
            </summary>
      <param name="item">
                Искомый элемент.
              </param>
      <returns>
              Индекс первого вхождения элемента.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>
              Вставляет элемент в список <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> по указанному индексу.
            </summary>
      <param name="index">
                Отсчитываемый от нуля индекс, по которому следует вставить элемент.
              </param>
      <param name="item">
                Объект, вставляемый в коллекцию <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>
              Удаляет первое вхождение указанного объекта из коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.
            </summary>
      <param name="item">
                Объект, который необходимо удалить из коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.
              </param>
      <returns>
              значение true, если элемент был успешно удален из <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; в противном случае — значение false.
               Этот метод также возвращает значение false, если элемент не найден в исходной коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>
              Удаляет элемент <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, расположенный по указанному индексу.
            </summary>
      <param name="index">
                Отсчитываемый от нуля индекс удаляемого элемента.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>
              Изменяет порядок элементов во всем списке <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> на обратный.
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>
              Изменяет порядок элементов в указанном диапазоне.
            </summary>
      <param name="index">
                Отсчитываемый от нуля индекс начала диапазона, порядок элементов которого требуется изменить.
              </param>
      <param name="count">
                Число элементов в диапазоне, порядок сортировки в котором требуется изменить.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              Копирует элементы коллекции <see cref="T:System.Collections.Generic.ICollection`1" /> в массив, начиная с указанного индекса массива.
            </summary>
      <param name="array">
                Одномерный массив, в который копируются элементы из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.
                 Индекс в массиве должен начинаться с нуля.
              </param>
      <param name="index">
                Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий перебор элементов в коллекции.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>
              Добавляет элемент в коллекцию <see cref="T:System.Collections.IList" />.
            </summary>
      <param name="value">
                Объект <see cref="T:System.Object" />, добавляемый в список <see cref="T:System.Collections.IList" />.
              </param>
      <returns>
              Позиция, на которую вставлен новый элемент.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>
              Определяет, содержит ли коллекция <see cref="T:System.Collections.IList" /> указанное значение.
            </summary>
      <param name="value">
                Объект <see cref="T:System.Object" />, который требуется найти в коллекции <see cref="T:System.Collections.IList" />.
              </param>
      <returns>
              Значение <see langword="true" />, если параметр <paramref name="item" /> найден в коллекции <see cref="T:System.Collections.IList" />; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              Определяет индекс заданного элемента в списке <see cref="T:System.Collections.IList" />.
            </summary>
      <param name="value">
                Объект для поиска в <see cref="T:System.Collections.IList" />.
              </param>
      <returns>
              Индекс значения <paramref name="item" />, если оно найдено в списке; в противном случае — значение -1.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              Вставляет элемент в список <see cref="T:System.Collections.IList" /> по указанному индексу.
            </summary>
      <param name="index">
                Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="item" />.
              </param>
      <param name="value">
                Объект, вставляемый в коллекцию <see cref="T:System.Collections.IList" />.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>
              Удаляет первое вхождение указанного объекта из коллекции <see cref="T:System.Collections.IList" />.
            </summary>
      <param name="value">
                Объект, который необходимо удалить из коллекции <see cref="T:System.Collections.IList" />.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>
              Копирует элементы списка <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> в новый массив.
            </summary>
      <returns>
              Массив, содержащий копии элементов списка <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>
              Создает <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> содержит все элементы <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, и избегайте использования копирования элементов в новый массив, если это возможно.
               Сбрасывает <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> после <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> будет создан.
            </summary>
      <returns>
              Новый экземпляр класса <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables">
      <summary>
              Создает интерфейс, который можно использовать для изменения закрытые переменные во время выполнения.
            </summary>
      <returns>
              Интерфейс для доступа к переменным.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables(System.Object[],System.Int64[])">
      <summary>
              Создает интерфейс, который можно использовать для изменения закрытые переменные во время выполнения.
            </summary>
      <param name="data">
                Массив закрытия.
              </param>
      <param name="indexes">
                Массив индексов массива закрытия, где найти переменные.
              </param>
      <returns>
              Интерфейс для доступа к переменным.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoCheckVersion(System.Dynamic.ExpandoObject,System.Object)">
      <summary>
              Проверяет версию объекта Expando.
            </summary>
      <param name="expando">
                Объект Expando.
              </param>
      <param name="version">
                Проверяемая версия.
              </param>
      <returns>
              Возвращает значение true, если версия совпадает; в противном случае — значение false.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoPromoteClass(System.Dynamic.ExpandoObject,System.Object,System.Object)">
      <summary>
              Переводит объект Expando из одного класса в новый класс.
            </summary>
      <param name="expando">
                Объект Expando.
              </param>
      <param name="oldClass">
                Старый класс Expando-объект.
              </param>
      <param name="newClass">
                Новый класс Expando-объект.
              </param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryDeleteValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean)">
      <summary>
              Удаляет значение элемента в объекте expando.
            </summary>
      <param name="expando">
                Объект expando.
              </param>
      <param name="indexClass">
                Класс объекта expando.
              </param>
      <param name="index">
                Индекс элемента.
              </param>
      <param name="name">
                Имя элемента.
              </param>
      <param name="ignoreCase">
                значение true, если имя должно сравниваться без учета регистра; значение false в противном случае.
              </param>
      <returns>
              значение true, если элемент был успешно удален; в противном случае — значение false.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryGetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean,System.Object@)">
      <summary>
              Возвращает значение элемента в объекте expando.
            </summary>
      <param name="expando">
                Объект expando.
              </param>
      <param name="indexClass">
                Класс объекта expando.
              </param>
      <param name="index">
                Индекс элемента.
              </param>
      <param name="name">
                Имя элемента.
              </param>
      <param name="ignoreCase">
                значение true, если имя должно сравниваться без учета регистра; значение false в противном случае.
              </param>
      <param name="value">
                Выходной параметр, содержащий значение члена.
              </param>
      <returns>
              Значение true, если элемент существует в объекте expando, в противном случае — значение false.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTrySetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.Object,System.String,System.Boolean)">
      <summary>
              Задает значение элемента в объекте expando.
            </summary>
      <param name="expando">
                Объект expando.
              </param>
      <param name="indexClass">
                Класс объекта expando.
              </param>
      <param name="index">
                Индекс элемента.
              </param>
      <param name="value">
                Значение элемента.
              </param>
      <param name="name">
                Имя элемента.
              </param>
      <param name="ignoreCase">
                значение true, если имя должно сравниваться без учета регистра; значение false в противном случае.
              </param>
      <returns>
              Возвращает индекс для элемента набора.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.MergeRuntimeVariables(System.Runtime.CompilerServices.IRuntimeVariables,System.Runtime.CompilerServices.IRuntimeVariables,System.Int32[])">
      <summary>
              Объединяет два списка переменных среды выполнения и возвращает новый список.
            </summary>
      <param name="first">
                Первый список.
              </param>
      <param name="second">
                Второй список.
              </param>
      <param name="indexes">
                Индекс массива, указывающее, какой список для получения переменных из.
              </param>
      <returns>
              Объединенные переменные среды выполнения.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.Quote(System.Linq.Expressions.Expression,System.Object,System.Object[])">
      <summary>
              Кавычки предоставленное дерево выражения.
            </summary>
      <param name="expression">
                Выражение.
              </param>
      <param name="hoistedLocals">
                Поднятые локальное состояние, предоставленное компилятором.
              </param>
      <param name="locals">
                Фактические местные поднятые значения.
              </param>
      <returns>
              Указываемое выражение.
            </returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>
              Инициализирует новый StrongBox которой могут получать значение при ссылочном вызове.
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> используя указанное значение.
            </summary>
      <param name="value">
                Значение, которое <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> будет ссылаться.
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> используя указанный тип и имя события типа.
            </summary>
      <param name="type">
                Тип объекта.
              </param>
      <param name="eventName">
                Имя события на <paramref name="type" />.
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>
              Присоединяет обработчик событий COM-объект.
            </summary>
      <param name="target">
                Целевой объект, которому должен привязываться делегат события.
              </param>
      <param name="handler">
                Делегат события.
              </param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>
              Возвращает метод, использованный для добавления делегата обработчика событий для источника событий.
            </summary>
      <param name="nonPublic">
                <see langword="true" /> для возврата закрытые методы; в противном случае — <see langword="false" />.
              </param>
      <returns>
              Делегировать метод, который был использован для добавления обработчика событий для источника событий.
            </returns>
      <exception cref="T:System.MethodAccessException">
                  <paramref name="nonPublic" /> — <see langword="true" /> метод, используемый для добавления делегата обработчика событий не является открытым, а вызывающий оператор не обладает разрешением на отражение на закрытые методы.
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>
              При переопределении в производном классе получает массив, содержащий настраиваемые атрибуты, применяемые к этому члену.
            </summary>
      <param name="inherit">
                <see langword="true" /> для поиска цепочки наследования этого элемента для поиска атрибутов; в противном случае — <see langword="false" />.
              </param>
      <returns>
              Массив, содержащий настраиваемые атрибуты, или массив, не содержащий элементов, если атрибуты не определены.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Этот член принадлежит к типу, который загружается в контекст, предназначенный только для отражения.
                   См. раздел How to: Load Assemblies into the Reflection-Only Context.
                </exception>
      <exception cref="T:System.TypeLoadException">
                  Не удалось загрузить тип настраиваемого атрибута.
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>
              При переопределении в производном классе, возвращает массив, содержащий все настраиваемые атрибуты указанного типа, применяемых к этому члену.
            </summary>
      <param name="attributeType">
                Тип атрибута для поиска.
                 Только те атрибуты, которые можно назначить для этого типа могут быть возвращены.
              </param>
      <param name="inherit">
                <see langword="true" /> для поиска цепочки наследования этого элемента для поиска атрибутов; в противном случае — <see langword="false" />.
              </param>
      <returns>
              Массив, содержащий все настраиваемые атрибуты заданного типа, или массив, не содержащий элементов, если атрибуты не определены.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="attributeType" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Этот член принадлежит к типу, который загружается в контекст, предназначенный только для отражения.
                   См. раздел How to: Load Assemblies into the Reflection-Only Context.
                </exception>
      <exception cref="T:System.TypeLoadException">
                  Не удалось загрузить тип настраиваемого атрибута.
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>
              При переопределении в производном классе, возвращает метод, вызываемый при возникновении события.
            </summary>
      <param name="nonPublic">
                <see langword="true" /> для возврата закрытые методы; в противном случае — <see langword="false" />.
              </param>
      <returns>
              Объект, вызванный при возникновении события.
            </returns>
      <exception cref="T:System.MethodAccessException">
                  <paramref name="nonPublic" /> — <see langword="true" /> метод, используемый для добавления делегата обработчика событий не является открытым, а вызывающий оператор не обладает разрешением на отражение на закрытые методы.
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>
              При переопределении в производном классе получает <see cref="T:System.Reflection.MethodInfo" /> объект для удаления метода события.
            </summary>
      <param name="nonPublic">
                <see langword="true" /> для возврата закрытые методы; в противном случае — <see langword="false" />.
              </param>
      <returns>
              Делегат метода, который использовался для удаления обработчика событий из источника событий.
            </returns>
      <exception cref="T:System.MethodAccessException">
                  <paramref name="nonPublic" /> — <see langword="true" /> метод, используемый для добавления делегата обработчика событий не является открытым, а вызывающий оператор не обладает разрешением на отражение на закрытые методы.
                </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>
              Указывает, применяются ли для этого члена один или несколько экземпляров указанного атрибута.
            </summary>
      <param name="attributeType">
                Тип атрибута для поиска.
              </param>
      <param name="inherit">
                <see langword="true" /> для поиска цепочки наследования этого элемента для поиска атрибутов; в противном случае — <see langword="false" />.
              </param>
      <returns>
              <see langword="true" /> Если указанный атрибут применен к этому члену; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>
              Отсоединяет обработчик событий от COM-объекта.
            </summary>
      <param name="target">
                Целевой объект, к которому привязан делегат события.
              </param>
      <param name="handler">
                Делегат события.
              </param>
      <exception cref="T:System.InvalidOperationException">
                  Это событие не поддерживает открытый метод доступа <see langword="remove" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Переданный обработчик нельзя использовать.
                </exception>
      <exception cref="T:System.Reflection.TargetException">
                    Вместо этого в .NET для приложений Магазина Windows или в переносимой библиотеке классов перехватите исключение <see cref="T:System.Exception" />.
                  
                  Параметр <paramref name="target" /> имеет значение <see langword="null" />, и событие не является статическим.
                
                  -или- 
                
                  Класс <see cref="T:System.Reflection.EventInfo" /> не объявлен для целевого объекта.
                </exception>
      <exception cref="T:System.MethodAccessException">
                    Вместо этого в .NET для приложений Магазина Windows или в переносимой библиотеке классов перехватите исключение базового класса <see cref="T:System.MemberAccessException" />.
                  
                  Вызывающий объект не имеет разрешения на доступ к этому элементу.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesCng" /> с использованием временного ключа.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesCng" /> с указанным именем ключа, который представляет существующий сохраненный ключ AES.
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="keyName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  
              Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesCng" /> с указанным именем ключа (представляет существующий сохраненный ключ AES) и указанным поставщиком хранилища ключей (KSP).
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <param name="provider">
                Поставщик KSP, который содержит ключ.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="keyName" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="provider" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  
              Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesCng" /> с указанным именем ключа, который представляет существующий сохраненный ключ AES, указанного поставщика хранилища ключей (KSP) и параметры открытия ключа.
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <param name="provider">
                Поставщик KSP, который содержит ключ.
              </param>
      <param name="openOptions">
                Побитовое сочетание значений перечисления, которые определяют параметры открытия ключа, например, расположение, из которого открывается ключ (компьютер или пользовательское хранилище), или отключение запросов пользовательского интерфейса.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="keyName" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="provider" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  
              Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateDecryptor">
      <summary>
              Создает симметричный объект-дешифратор АES с текущим ключом и вектором инициализации (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).
            </summary>
      <returns>
              Симметричный объект-дешифратор AES.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              Создает симметричный объект-дешифратор AES с указанным ключом и вектором инициализации (IV).
            </summary>
      <param name="rgbKey">
                Секретный ключ, который нужно использовать для алгоритма AES.
                 Размер ключа должен составлять 128, 192 или 256 битов.
              </param>
      <param name="rgbIV">
                Вектор инициализации, который нужно использовать для алгоритма AES.
              </param>
      <returns>
              Симметричный объект-дешифратор AES.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Элемент <paramref name="rgbKey" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Размер элемента <paramref name="rgbKey" /> недопустимый для этого алгоритма.
                
                  -или-
                
                  Размер элемента <paramref name="rgbIV" /> не соответствует размеру блоков для этого алгоритма.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Элемент <paramref name="rgbKey" /> — это слабый ключ для этого алгоритма, поэтому он не может использоваться.
                
                  -или-
                
                  Элемент <paramref name="rgbIV" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateEncryptor">
      <summary>
              Создает симметричный объект-шифратор AES с помощью текущего ключа и вектора инициализации (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).
            </summary>
      <returns>
              Симметричный объект-шифратор AES.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              Создает симметричный объект-шифратор AES с помощью указанного ключа и вектора инициализации (IV).
            </summary>
      <param name="rgbKey">
                Секретный ключ, который нужно использовать для алгоритма AES.
                 Размер ключа должен составлять 128, 192 или 256 битов.
              </param>
      <param name="rgbIV">
                Вектор инициализации, который нужно использовать для алгоритма AES.
              </param>
      <returns>
              Симметричный объект-шифратор AES.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Элемент <paramref name="rgbKey" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Размер элемента <paramref name="rgbKey" /> недопустимый для этого алгоритма.
                
                  -или-
                
                  Размер элемента <paramref name="rgbIV" /> не соответствует размеру блоков для этого алгоритма.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Элемент <paramref name="rgbKey" /> — это слабый ключ для этого алгоритма, поэтому он не может использоваться.
                
                  -или-
                
                  Элемент <paramref name="rgbIV" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.GenerateIV">
      <summary>
              Создает случайный вектор инициализации (IV), который нужно использовать для алгоритма AES.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.GenerateKey">
      <summary>
              Создает случайный ключ для использования алгоритма AES.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider" />.
            </summary>
      <exception cref="T:System.PlatformNotSupportedException">
                  Нет поддерживаемого размера ключа для текущей платформы.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor">
      <summary>
              Создает симметричный объект-дешифратор AES, используя текущий ключ и вектор инициализации (IV).
            </summary>
      <returns>
              Симметричный объект-дешифратор AES.
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Текущий ключ является недопустимым или отсутствует.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              Создает симметричный объект-дешифратор AES, используя заданный ключ и вектор инициализации (IV).
            </summary>
      <param name="key">
                Секретный ключ, который должен использоваться для симметричного алгоритма.
              </param>
      <param name="iv">
                Вектор инициализации, который должен использоваться для симметричного алгоритма.
              </param>
      <returns>
              Симметричный объект-дешифратор AES.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="key" /> или <paramref name="iv" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> недопустим.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor">
      <summary>
              Создает объект шифратора симметричного шифрования AES, используя текущий ключ и вектор инициализации (IV).
            </summary>
      <returns>
              Объект шифратора симметричного шифрования AES.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              Создает симметричный объект-шифратор с использованием указанного ключа и вектора инициализации (IV).
            </summary>
      <param name="key">
                Секретный ключ, который должен использоваться для симметричного алгоритма.
              </param>
      <param name="iv">
                Вектор инициализации, который должен использоваться для симметричного алгоритма.
              </param>
      <returns>
              Объект шифратора симметричного шифрования AES.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Значение параметра <paramref name="key" /> или параметра <paramref name="iv" /> — <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> недопустим.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateIV">
      <summary>
              Создает случайный вектор инициализации (IV), используемый для алгоритма.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Не удалось создать вектор инициализации (IV).
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateKey">
      <summary>
              Создает случайный ключ, используемый для алгоритма.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Не удалось создать ключ.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesManaged" />.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Параметр политики безопасности Windows для FIPS включен.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Эта реализация не является частью криптографических алгоритмов, утвержденных FIPS для платформы Windows.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>
              Создает симметричный объект-дешифратор с помощью текущий ключ и вектор инициализации (IV).
            </summary>
      <returns>
              Симметричный объект-дешифратор.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              Создает симметричный объект-дешифратор с использованием указанного ключа и вектора инициализации (IV).
            </summary>
      <param name="key">
                Секретный ключ, который должен использоваться для симметричного алгоритма.
              </param>
      <param name="iv">
                Вектор инициализации, который должен использоваться для симметричного алгоритма.
              </param>
      <returns>
              Симметричный объект-дешифратор.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="key" /> или <paramref name="iv" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> недопустим.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>
              Создает симметричный объект-шифратор с помощью текущий ключ и вектор инициализации (IV).
            </summary>
      <returns>
              Симметричный объект-шифратор.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              Создает симметричный объект-шифратор с использованием указанного ключа и вектора инициализации (IV).
            </summary>
      <param name="key">
                Секретный ключ, который должен использоваться для симметричного алгоритма.
              </param>
      <param name="iv">
                Вектор инициализации, который должен использоваться для симметричного алгоритма.
              </param>
      <returns>
              Симметричный объект-шифратор.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="key" /> или <paramref name="iv" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> недопустим.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>
              Создает случайный вектор инициализации (IV) для симметричного алгоритма.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>
              Создает случайный ключ для симметричного алгоритма.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngAlgorithm" />.
            </summary>
      <param name="algorithm">
                Имя алгоритма для инициализации.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="algorithm" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="algorithm" /> Длина параметра равно 0 (нулю).
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)">
      <summary>
              Сравнивает заданный объект с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.
            </summary>
      <param name="obj">
                Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.
              </param>
      <returns>
              Значение <see langword="true" />, если параметр <paramref name="obj" /> является объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающим тот же самый алгоритм, что и текущий объект; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)">
      <summary>
              Сравнивает заданный объект <see cref="T:System.Security.Cryptography.CngAlgorithm" /> с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.
            </summary>
      <param name="other">
                Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.
              </param>
      <returns>
              Значение <see langword="true" />, если параметр <paramref name="other" /> задает тот же самый алгоритм, что и текущий объект; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.GetHashCode">
      <summary>
              Формирует хэш-значение имени алгоритма, которое внедрено в текущий объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />.
            </summary>
      <returns>
              Хэш-значение внедренного имени алгоритма.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>
              Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngAlgorithm" /> одно и то же имя алгоритма.
            </summary>
      <param name="left">
                Объект, задающий имя алгоритма.
              </param>
      <param name="right">
                Второй объект, который требуется сравнить с объектом, идентифицируемым параметром <paramref name="left" />.
              </param>
      <returns>
              Значение <see langword="true" />, если два объекта задают один и тот же алгоритм, в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>
              Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngAlgorithm" /> разные алгоритмы.
            </summary>
      <param name="left">
                Объект, задающий имя алгоритма.
              </param>
      <param name="right">
                Второй объект, который требуется сравнить с объектом, идентифицируемым параметром <paramref name="left" />.
              </param>
      <returns>
              Значение <see langword="true" />, если два объекта задают разные алгоритмы, в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.ToString">
      <summary>
              Возвращает имя алгоритма, заданного текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.
            </summary>
      <returns>
              Внедренное имя алгоритма.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />.
            </summary>
      <param name="algorithmGroup">
                Имя группы алгоритмов для инициализации.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="algorithmGroup" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="algorithmGroup" /> Длина параметра равно 0 (нулю).
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)">
      <summary>
              Сравнивает заданный объект с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />.
            </summary>
      <param name="obj">
                Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="obj" /> параметр <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> задающим тот же алгоритм группы, что и текущий объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>
              Сравнивает заданный объект <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />.
            </summary>
      <param name="other">
                Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="other" /> параметр задает тот же самый алгоритм группы, что и текущий объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode">
      <summary>
              Создает хэш-значение для имени группы алгоритма, которое внедрено в текущий <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> объекта.
            </summary>
      <returns>
              Хэш-значение внедренного имени группы алгоритмов.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>
              Определяет неравенство двух <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> объекта задают разные группы алгоритмов.
            </summary>
      <param name="left">
                Объект, задающий группу алгоритмов.
              </param>
      <param name="right">
                Второй объект, который требуется сравнить с объектом, идентифицируемым параметром <paramref name="left" />.
              </param>
      <returns>
              <see langword="true" /> Если два объекта задают разные группы алгоритмов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>
              Определяет неравенство двух <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> объекта задают разные группы алгоритмов.
            </summary>
      <param name="left">
                Объект, задающий группу алгоритмов.
              </param>
      <param name="right">
                Второй объект, который требуется сравнить с объектом, идентифицируемым параметром <paramref name="left" />.
              </param>
      <returns>
              <see langword="true" /> Если два объекта задают разные группы алгоритмов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.ToString">
      <summary>
              Возвращает имя группы алгоритмов, текущий <see cref="T:System.Security.Cryptography.CngAlgorithm" /> указывает объект.
            </summary>
      <returns>
              Имя группы embedded алгоритма.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)">
      <summary>
              Создает <see cref="T:System.Security.Cryptography.CngKey" /> объект, который можно использовать с помощью указанного алгоритма.
            </summary>
      <param name="algorithm">
                Алгоритм, который будет использоваться ключ.
              </param>
      <returns>
              Эфемерный ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="algorithm" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)">
      <summary>
              Создает именованный <see cref="T:System.Security.Cryptography.CngKey" /> объект, предоставляющий указанный алгоритм.
            </summary>
      <param name="algorithm">
                Алгоритм, который будет использоваться ключ.
              </param>
      <param name="keyName">
                Имя ключа.
                 Если имя не указано, то ключ, не будут сохранены.
              </param>
      <returns>
              Постоянный или эфемерный ключ, обеспечивающий работу заданного алгоритма.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="algorithm" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)">
      <summary>
              Создает именованный <see cref="T:System.Security.Cryptography.CngKey" /> объект, предоставляющий указанный алгоритм, с помощью параметров создания указанного ключа.
            </summary>
      <param name="algorithm">
                Алгоритм, который будет использоваться ключ.
              </param>
      <param name="keyName">
                Имя ключа.
                 Если имя не указано, то ключ, не будут сохранены.
              </param>
      <param name="creationParameters">
                Объект, который указывает дополнительные параметры для метода, включая <see cref="T:System.Security.Cryptography.CngProvider" />.
              </param>
      <returns>
              Постоянный или эфемерный ключ, обеспечивающий работу заданного алгоритма.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="algorithm" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Delete">
      <summary>
              Удаляет ключ, связанный с объектом.
            </summary>
      <exception cref="T:System.ObjectDisposedException">
                  Предпринята попытка получить доступ к удаленный ключ.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Dispose">
      <summary>
              Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Security.Cryptography.CngKey" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String)">
      <summary>
              Проверяет, существует ли именованный ключ в поставщик хранилища ключей (KSP) по умолчанию.
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <returns>
              <see langword="true" /> Если именованный ключ существует в KSP по умолчанию; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="keyName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)">
      <summary>
              Проверяет наличие именованного ключа в заданном поставщике хранилища ключей (KSP).
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <param name="provider">
                KSP, проверяемый на ключ.
              </param>
      <returns>
              <see langword="true" /> Если именованный ключ существует в заданном поставщике; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="keyName" /> или <paramref name="provider" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>
              Проверяет наличие именованного ключа в заданном поставщике хранилища ключей (KSP) в соответствии с заданными параметрами.
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <param name="provider">
                KSP, для поиска ключа.
              </param>
      <param name="options">
                Побитовое сочетание значений перечисления, определяющих параметры открытия ключа.
              </param>
      <returns>
              <see langword="true" /> Если именованный ключ существует в заданном поставщике; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="keyName" /> или <paramref name="provider" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>
              Экспортирует ключевой материал в большой двоичный объект в указанном формате.
            </summary>
      <param name="format">
                Объект, задающий формат большого двоичного ОБЪЕКТА ключа.
              </param>
      <returns>
              Большой двоичный объект, содержащий ключевой материал в заданном формате.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="format" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                   Как правило <see cref="P:System.Security.Cryptography.CngKey.ExportPolicy" /> запретить экспорт ключа.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>
              Получает свойство по заданному имени и набору параметров.
            </summary>
      <param name="name">
                Имя нужного свойства.
              </param>
      <param name="options">
                Побитовое сочетание значений перечисления, определяющих параметры именованного свойства.
              </param>
      <returns>
              Объект, содержащий необработанное значение заданного свойства.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="name" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>
              Проверяет, существует ли указанное свойство ключа.
            </summary>
      <param name="name">
                Имя свойства для проверки.
              </param>
      <param name="options">
                Побитовое сочетание значений перечисления, определяющих параметры именованного свойства.
              </param>
      <returns>
              <see langword="true" /> Если указанное свойство найдено; в противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="name" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>
              Создает новый ключ путем импорта заданного ключевого материала в поставщик хранилища ключей (KSP) по умолчанию и с использованием указанного формата.
            </summary>
      <param name="keyBlob">
                Массив, содержащий сведения о ключе.
              </param>
      <param name="format">
                Объект, который указывает формат массива <paramref name="keyBlob" />.
              </param>
      <returns>
              Новый ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="keyBlob" /> или <paramref name="format" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)">
      <summary>
              Создает ключ путем импорта заданных сведений о ключе в указанный поставщик хранилища ключей (KSP), используя указанный формат.
            </summary>
      <param name="keyBlob">
                Массив, содержащий сведения о ключе.
              </param>
      <param name="format">
                Объект, который указывает формат массива <paramref name="keyBlob" />.
              </param>
      <param name="provider">
                KSP.
              </param>
      <returns>
              Новый ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="keyBlob" />, <paramref name="format" /> или <paramref name="provider" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)">
      <summary>
              Создает экземпляр <see cref="T:System.Security.Cryptography.CngKey" /> используя дескриптор существующего ключа.
            </summary>
      <param name="keyHandle">
                Дескриптор существующего ключа.
              </param>
      <param name="keyHandleOpenOptions">
                Одно из значений перечисления, указывающее, является ли <paramref name="keyHandle" /> представляет эфемерный ключ или именованный ключ.
              </param>
      <returns>
              Существующий ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="keyHandle" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="keyHandle" /> является недопустимым или имеет неправильный формат, или он уже закрыт.
                   Это исключение также возникает, если ключ является эфемерным, создаваемый общеязыковой среды выполнения (CLR), но <see cref="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey" /> значение не указано.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String)">
      <summary>
              Создает экземпляр <see cref="T:System.Security.Cryptography.CngKey" /> объект, который представляет существующий именованный ключ.
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <returns>
              Существующий ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="keyName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)">
      <summary>
              Создает экземпляр <see cref="T:System.Security.Cryptography.CngKey" /> объект, который представляет существующий именованный ключ, используя заданном поставщике хранилища ключей (KSP).
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <param name="provider">
                KSP, в котором содержится ключ.
              </param>
      <returns>
              Существующий ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="keyName" /> или <paramref name="provider" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>
              Создает экземпляр <see cref="T:System.Security.Cryptography.CngKey" /> объект, который представляет существующий именованный ключ, используя в заданном поставщике хранилища ключей (KSP) и параметры открытия ключа.
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <param name="provider">
                KSP, в котором содержится ключ.
              </param>
      <param name="openOptions">
                Побитовое сочетание значений перечисления, определяющих параметры открытия ключа, например когда открытия ключа (компьютер или хранилище пользователя) и необходимость подавления запросов пользовательского интерфейса.
              </param>
      <returns>
              Существующий ключ.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="keyName" /> или <paramref name="provider" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)">
      <summary>
              Задает именованное свойство ключа.
            </summary>
      <param name="property">
                Свойство ключа.
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> используя указанный формат.
            </summary>
      <param name="format">
                Формат большого двоичного ОБЪЕКТА ключа для инициализации.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="format" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="format" /> Длина параметра равно 0 (нулю).
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)">
      <summary>
              Сравнивает заданный объект с текущим объектом <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />.
            </summary>
      <param name="obj">
                Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="obj" /> параметр <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> объект, который указывает тот же формат большого двоичного ОБЪЕКТА ключа, что и текущий объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>
              Сравнивает заданный объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> с текущим объектом <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />.
            </summary>
      <param name="other">
                Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="other" /> параметр задает тот же формат большого двоичного ОБЪЕКТА ключа, что и текущий объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode">
      <summary>
              Создает хэш-значение внедренного формат большого двоичного ОБЪЕКТА ключа в текущем <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> объекта.
            </summary>
      <returns>
              Хэш-значение внедренного формат большого двоичного ОБЪЕКТА ключа.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>
              Определяет неравенство двух <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> объектов укажите тот же формат большого двоичного ОБЪЕКТА ключа.
            </summary>
      <param name="left">
                Объект, задающий формат большого двоичного ОБЪЕКТА ключа.
              </param>
      <param name="right">
                Второй объект, сравниваемый с объектом, идентифицируемым по <paramref name="left" /> параметр.
              </param>
      <returns>
              <see langword="true" /> Если два объекта задают одинаковый формат большого двоичного ОБЪЕКТА ключа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>
              Определяет неравенство двух <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> объектов не указан тот же формат большого двоичного ОБЪЕКТА ключа.
            </summary>
      <param name="left">
                Объект, задающий формат большого двоичного ОБЪЕКТА ключа.
              </param>
      <param name="right">
                Второй объект, сравниваемый с объектом, идентифицируемым по <paramref name="left" /> параметр.
              </param>
      <returns>
              <see langword="true" /> Если два объекта задают одинаковый формат большого двоичного ОБЪЕКТА ключа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.ToString">
      <summary>
              Возвращает имя формата большого двоичного ОБЪЕКТА ключа, текущий <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> указывает объект.
            </summary>
      <returns>
              Внедренные BLOB формат имя ключа.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyCreationParameters.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngKeyCreationParameters" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngProperty" />.
            </summary>
      <param name="name">
                Имя свойства для инициализации.
              </param>
      <param name="value">
                Значение свойства для инициализации.
              </param>
      <param name="options">
                Побитовое сочетание значений перечисления, которые указывают, как это свойство хранится.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="name" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Object)">
      <summary>
              Сравнивает заданный объект с текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.
            </summary>
      <param name="obj">
                Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="obj" /> параметр <see cref="T:System.Security.Cryptography.CngProperty" /> объект, который указывает то же свойство, что и текущий объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)">
      <summary>
              Сравнивает заданный объект <see cref="T:System.Security.Cryptography.CngProperty" /> с текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.
            </summary>
      <param name="other">
                Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="other" /> параметр представляет то же свойство, что и текущий объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetHashCode">
      <summary>
              Создает хэш-значение для текущего <see cref="T:System.Security.Cryptography.CngProperty" /> объекта.
            </summary>
      <returns>
              Значение хэша текущего <see cref="T:System.Security.Cryptography.CngProperty" /> объекта.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetValue">
      <summary>
              Возвращает значение свойства, текущий <see cref="T:System.Security.Cryptography.CngProperty" /> указывает объект.
            </summary>
      <returns>
              Массив, представляющий значение, хранящееся в свойстве.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>
              Определяет неравенство двух <see cref="T:System.Security.Cryptography.CngProperty" /> объекта задают же имя свойства, значение и параметры.
            </summary>
      <param name="left">
                Объект, задающий свойство ключа криптографии следующего поколения (CNG) или поставщика.
              </param>
      <param name="right">
                Второй объект, который требуется сравнить с объектом, идентифицируемым параметром <paramref name="left" />.
              </param>
      <returns>
              <see langword="true" /> Если два объекта задают разные свойства; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>
              Определяет неравенство двух <see cref="T:System.Security.Cryptography.CngProperty" /> объекта задают же имя свойства, значение и параметры.
            </summary>
      <param name="left">
                Объект, задающий свойство ключа криптографии следующего поколения (CNG) или поставщика.
              </param>
      <param name="right">
                Второй объект, который требуется сравнить с объектом, идентифицируемым параметром <paramref name="left" />.
              </param>
      <returns>
              <see langword="true" /> Если два объекта задают разные свойства; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngPropertyCollection.#ctor">
      <summary>
              Инициализирует новый объект <see cref="T:System.Security.Cryptography.CngPropertyCollection" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngProvider" />.
            </summary>
      <param name="provider">
                Имя поставщика хранилища ключей (KSP) для инициализации.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="provider" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="provider" /> Длина параметра равно 0 (нулю).
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Object)">
      <summary>
              Сравнивает заданный объект с текущим объектом <see cref="T:System.Security.Cryptography.CngProvider" />.
            </summary>
      <param name="obj">
                Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngProvider" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="obj" /> параметр <see cref="T:System.Security.Cryptography.CngProvider" /> задающим же provider(KSP) хранилища ключей, что и текущий объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)">
      <summary>
              Сравнивает заданный объект <see cref="T:System.Security.Cryptography.CngProvider" /> с текущим объектом <see cref="T:System.Security.Cryptography.CngProvider" />.
            </summary>
      <param name="other">
                Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngProvider" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="other" /> параметр задает того же поставщика хранилища ключей (KSP), что и текущий объект; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.GetHashCode">
      <summary>
              Создает хэш-значение для имени поставщика хранилища ключей (KSP), внедренный в текущем <see cref="T:System.Security.Cryptography.CngProvider" /> объекта.
            </summary>
      <returns>
              Хэш-значение внедренного имени поставщика хранилища КЛЮЧЕЙ.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>
              Определяет неравенство двух <see cref="T:System.Security.Cryptography.CngProvider" /> объекта задают того же поставщика хранилища ключей (KSP).
            </summary>
      <param name="left">
                Объект, задающий поставщика хранилищ КЛЮЧЕЙ.
              </param>
      <param name="right">
                Второй объект, который требуется сравнить с объектом, идентифицируемым параметром <paramref name="left" />.
              </param>
      <returns>
              <see langword="true" /> Если два объекта представляют различных поставщиков хранилищ КЛЮЧЕЙ; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>
              Определяет неравенство двух <see cref="T:System.Security.Cryptography.CngProvider" /> объекты не отражают того же поставщика хранилища ключей (KSP).
            </summary>
      <param name="left">
                Объект, задающий поставщика хранилищ КЛЮЧЕЙ.
              </param>
      <param name="right">
                Второй объект, который требуется сравнить с объектом, идентифицируемым параметром <paramref name="left" />.
              </param>
      <returns>
              <see langword="true" /> Если два объекта представляют различных поставщиков хранилищ КЛЮЧЕЙ; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.ToString">
      <summary>
              Возвращает имя поставщика хранилища ключей (KSP), текущий <see cref="T:System.Security.Cryptography.CngProvider" /> указывает объект.
            </summary>
      <returns>
              Внедренное имя.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.CngUIPolicy" /> класса с помощью указанным уровнем защиты.
            </summary>
      <param name="protectionLevel">
                Побитовое сочетание значений перечисления, задающих уровень защиты.
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.CngUIPolicy" /> класса с помощью указанным уровнем защиты и понятное имя.
            </summary>
      <param name="protectionLevel">
                Побитовое сочетание значений перечисления, задающих уровень защиты.
              </param>
      <param name="friendlyName">
                Понятное имя для ключа, который используется в запросе пользовательского интерфейса.
                 Укажите строку null, чтобы использовать имя по умолчанию.
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.CngUIPolicy" /> класса с помощью указанным уровнем защиты, понятное имя и описание.
            </summary>
      <param name="protectionLevel">
                Побитовое сочетание значений перечисления, задающих уровень защиты.
              </param>
      <param name="friendlyName">
                Понятное имя для ключа, который используется в запросе пользовательского интерфейса.
                 Укажите строку null, чтобы использовать имя по умолчанию.
              </param>
      <param name="description">
                Описание полнотекстового ключа.
                 Укажите строку null, чтобы использовать описание по умолчанию.
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.CngUIPolicy" /> класса с помощью указанным уровнем защиты, понятное имя, строку описания и контекст.
            </summary>
      <param name="protectionLevel">
                Побитовое сочетание значений перечисления, задающих уровень защиты.
              </param>
      <param name="friendlyName">
                Понятное имя для ключа, который используется в запросе пользовательского интерфейса.
                 Укажите строку null, чтобы использовать имя по умолчанию.
              </param>
      <param name="description">
                Описание полнотекстового ключа.
                 Укажите строку null, чтобы использовать описание по умолчанию.
              </param>
      <param name="useContext">
                Описание использования ключа.
                 Укажите строку null, чтобы использовать описание по умолчанию.
              </param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.CngUIPolicy" /> класса с помощью указанным уровнем защиты, понятное имя, строку описания, используйте контекста и title.
            </summary>
      <param name="protectionLevel">
                Побитовое сочетание значений перечисления, задающих уровень защиты.
              </param>
      <param name="friendlyName">
                Понятное имя для ключа, который используется в запросе пользовательского интерфейса.
                 Укажите строку null, чтобы использовать имя по умолчанию.
              </param>
      <param name="description">
                Описание полнотекстового ключа.
                 Укажите строку null, чтобы использовать описание по умолчанию.
              </param>
      <param name="useContext">
                Описание использования ключа.
                 Укажите строку null, чтобы использовать описание по умолчанию.
              </param>
      <param name="creationTitle">
                Название диалоговом окне отображается запрос пользовательского интерфейса.
                 Укажите строку null, чтобы использовать заголовок по умолчанию.
              </param>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.DSACng" /> с парой случайных 2048-битных ключей.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor(System.Int32)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.DSACng" /> с созданным случайным образом ключом указанного размера.
            </summary>
      <param name="keySize">
                Размер создаваемого ключа в битах.
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Недопустимый параметр <paramref name="keySize" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.DSACng" /> с заданным ключом.
            </summary>
      <param name="key">
                Ключ, используемый для операций DSA.
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> не является допустимым ключом DSA.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="key" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])">
      <summary>
              Создает цифровую подпись для указанных данных.
            </summary>
      <param name="rgbHash">
                Данные, которые должны быть подписаны.
              </param>
      <returns>
              Цифровая подпись для указанных данных.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="rgbHash" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Значение <paramref name="rgbHash" /> короче значения Q ключа DSA.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)">
      <summary>
              Экспортирует параметры алгоритма DSA.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Параметры алгоритма DSA.
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Ключ DSA не является допустимым открытым или закрытым ключом.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>
              Заменяет существующий ключ, с которым работает текущий экземпляр, создавая новый объект <see cref="T:System.Security.Cryptography.CngKey" /> для структуры параметров.
            </summary>
      <param name="parameters">
                Параметры DSA.
              </param>
      <exception cref="T:System.ArgumentException">
                  Указаны недопустимые параметры DSA.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])">
      <summary>
              Проверяет, совпадает ли указанная цифровая подпись с указанными данными.
            </summary>
      <param name="rgbHash">
                Подписанные данные.
              </param>
      <param name="rgbSignature">
                Проверяемая цифровая подпись.
              </param>
      <returns>
              Значение <see langword="true" />, если <paramref name="rgbSignature" /> совпадает с подписью, вычисленной с помощью указанных данных. В противном случае — значение <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="rgbHash" /> имеет значение <see langword="null" />.
                
                  -или- 
                
                  Параметр <paramref name="rgbSignature" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Значение <paramref name="rgbHash" /> короче значения Q ключа DSA.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
      <summary>
              Создает именованную кривую, используя указанное понятное имя идентификатора.
            </summary>
      <param name="oidFriendlyName">
                Понятное имя идентификатора.
              </param>
      <returns>
              Объект, представляющий именованную кривую.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="oidFriendlyName" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
      <summary>
              Создает именованную кривую с помощью указанного объекта <see cref="T:System.Security.Cryptography.Oid" />.
            </summary>
      <param name="curveOid">
                Используемый идентификатор объекта.
              </param>
      <returns>
              Объект, представляющий именованную кривую.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
      <summary>
              Создает именованную кривую, используя указанное десятичное представление идентификатора с точками.
            </summary>
      <param name="oidValue">
                Значение идентификатора с точками.
              </param>
      <returns>
              Объект, представляющий именованную кривую.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="oidValue" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.Validate">
      <summary>
              Проверяет целостность текущей кривой.
               Создает исключение <see cref="T:System.Security.Cryptography.CryptographicException" />, если структура не является допустимой.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Параметры кривой недопустимы для текущего типа кривой.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>
              Создает новый экземпляр реализации по умолчанию алгоритма алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).
            </summary>
      <returns>
              Новый экземпляр реализации по умолчанию этого класса.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)">
      <summary>
              Создает новый экземпляр реализации по умолчанию алгоритма эллиптической кривой Диффи-Хелмана (ECDH) с новой парой открытого и закрытого ключей, созданных на основе указанной кривой.
            </summary>
      <param name="curve">
                Кривая, используемая для создания новой пары открытого и закрытого ключей.
              </param>
      <returns>
              Новый экземпляр реализации по умолчанию алгоритма эллиптической кривой Диффи-Хелмана (ECDH).
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="curve" /> не выполняет проверку.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)">
      <summary>
              Создает новый экземпляр реализации по умолчанию алгоритма эллиптической кривой Диффи-Хелмана (ECDH) с ключом, описываемым указанным объектом <see cref="T:System.Security.Cryptography.ECParameters" />.
            </summary>
      <param name="parameters">
                Параметры для алгоритма шифрования на основе эллиптических кривых (ECC).
              </param>
      <returns>
              Новый экземпляр реализации по умолчанию алгоритма эллиптической кривой Диффи-Хелмана (ECDH).
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="parameters" /> не выполняет проверку.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>
              Создает экземпляр указанной реализации алгоритма Диффи — Хеллмана на эллиптических кривых (ECDH).
            </summary>
      <param name="algorithm">
                Название реализации алгоритма ECDH.
              </param>
      <returns>
              Новый экземпляр указанной реализации этого класса.
               Если указанное название алгоритма не соответствует реализации ECDH, этот метод возвращает значение <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="algorithm" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              Извлекает с помощью хэш-функции байты, которые можно использовать в качестве ключа, учитывая открытый ключ другой стороны и имя хэш-алгоритма.
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ другой стороны.
              </param>
      <param name="hashAlgorithm">
                Хэш-алгоритм, используемый для формирования материала ключа.
              </param>
      <returns>
              Материал ключа, полученный при обмене ключами с открытым ключом другой стороны.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>
              Если реализуется в производном классе, то извлекает с помощью хэш-функции байты, которые можно использовать в качестве ключа, учитывая открытый ключ другой стороны, имя хэш-алгоритма и добавленное значение (в начало и конец).
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ другой стороны.
              </param>
      <param name="hashAlgorithm">
                Хэш-алгоритм, используемый для формирования материала ключа.
              </param>
      <param name="secretPrepend">
                Значение, добавляемое к производному секрету (в начало) перед хэшированием.
              </param>
      <param name="secretAppend">
                Значение, добавляемое к производному секрету перед хэшированием.
              </param>
      <returns>
              Материал ключа, полученный при обмене ключами с открытым ключом другой стороны.
            </returns>
      <exception cref="T:System.NotImplementedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>
              Получает последовательность байтов, которые можно использовать в качестве ключа, использующего код проверки подлинности хэш-сообщения (HMAC).
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ другой стороны.
              </param>
      <param name="hashAlgorithm">
                Хэш-алгоритм, используемый для получения материала ключа.
              </param>
      <param name="hmacKey">
                Ключ HMAC.
              </param>
      <returns>
              Материал ключа, полученный при обмене ключами с открытым ключом другой стороны.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>
              При применении в производном классе получает последовательность байтов, которые можно использовать в качестве ключа, использующего код проверки подлинности хэш-сообщения (HMAC).
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ другой стороны.
              </param>
      <param name="hashAlgorithm">
                Хэш-алгоритм, используемый для получения материала ключа.
              </param>
      <param name="hmacKey">
                Ключ HMAC.
              </param>
      <param name="secretPrepend">
                Значение, добавляемое к производному секрету (в начало) перед хэшированием.
              </param>
      <param name="secretAppend">
                Значение, добавляемое к производному секрету перед хэшированием.
              </param>
      <returns>
              Материал ключа, полученный при обмене ключами с открытым ключом другой стороны.
            </returns>
      <exception cref="T:System.NotImplementedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>
              Является производным байтов, которые можно использовать в качестве ключа, открытый ключ другой стороны.
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ другой стороны.
              </param>
      <returns>
              Материал ключа из обмена ключами, с другой стороны открытого ключа.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>
              При применении в производном классе извлекает байты, которые могут использоваться как ключ с применением алгоритма получения псевдослучайной функции (PRF) протокола TLS.
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ другой стороны.
              </param>
      <param name="prfLabel">
                Метка PRF с использованием кодировки ASCII.
              </param>
      <param name="prfSeed">
                Начальное значение PRF (64-байтовое).
              </param>
      <returns>
              Материал ключа, полученный при обмене ключами с открытым ключом другой стороны.
            </returns>
      <exception cref="T:System.NotImplementedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)">
      <summary>
              При переопределении в производном классе экспортирует сведения об открытом или открытом и закрытом ключе, используя формат явной кривой в работающем разделе <see cref="T:System.Security.Cryptography.ECDiffieHellman" />, в структуру <see cref="T:System.Security.Cryptography.ECParameters" /> таким образом, чтобы их можно было передать в метод <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Объект, представляющий точку на кривой для этого ключа, в формате явной кривой.
            </returns>
      <exception cref="T:System.NotImplementedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)">
      <summary>
              При переопределении в производном классе экспортирует сведения об открытом или открытом и закрытом ключе из рабочего раздела <see cref="T:System.Security.Cryptography.ECDiffieHellman" />, в структуру <see cref="T:System.Security.Cryptography.ECParameters" /> таким образом, чтобы их можно было передать в метод <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.
            </summary>
      <param name="includePrivateParameters">
                <see langword="true" /> для включения закрытых параметров; в противном случае — <see langword="false" /> для включения только открытых параметров.
              </param>
      <returns>
              Объект, представляющий точку на кривой для этого ключа.
               Может передаваться в метод <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.
            </returns>
      <exception cref="T:System.NotImplementedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>
              При переопределении в производном классе создает новую пару открытого и закрытого эфемерных ключей для указанной кривой.
            </summary>
      <param name="curve">
                Кривая, используемая для создания пары открытого и закрытого эфемерных ключей.
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="curve" /> не выполняет проверку.
                </exception>
      <exception cref="T:System.NotImplementedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>
              При переопределении в производном классе импортирует заданные параметры для <see cref="T:System.Security.Cryptography.ECCurve" /> как эфемерный ключ в текущий объект <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.
            </summary>
      <param name="parameters">
                Параметры кривой для импорта.
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="parameters" /> не выполняет проверку.
                </exception>
      <exception cref="T:System.NotImplementedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> с парой случайных пар ключей.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> с созданной случайным образом парой ключей указанного размера.
            </summary>
      <param name="keySize">
                Размер ключа.
                 Допустимые размеры ключей: 256, 384 и 521 бит.
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="keySize" /> задает недопустимую длину.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Классы криптографии следующего поколения (CNG) не поддерживаются в этой системе.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />, используя указанный объект <see cref="T:System.Security.Cryptography.CngKey" />.
            </summary>
      <param name="key">
                Ключ, который будет использоваться в качестве входных данных для криптографических операций, выполняемых текущим объектом.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="key" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> не указывайте группу алгоритмов алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Классы криптографии следующего поколения (CNG) не поддерживаются в этой системе.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)">
      <summary>
              Создает новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />, пара открытого и закрытого ключей которого создается на основе указанной кривой.
            </summary>
      <param name="curve">
                Кривая, используемая для создания пары открытого и закрытого ключей.
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="curve" /> не выполняет проверку.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>
              Извлекает с помощью хэш-функции байты, которые можно использовать в качестве ключа, учитывая открытый ключ другой стороны, имя хэш-алгоритма и добавленное значение (в начало и конец).
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ другой стороны.
              </param>
      <param name="hashAlgorithm">
                Хэш-алгоритм, используемый для формирования материала ключа.
              </param>
      <param name="secretPrepend">
                Значение, добавляемое к производному секрету (в начало) перед хэшированием.
              </param>
      <param name="secretAppend">
                Значение, добавляемое к производному секрету перед хэшированием.
              </param>
      <returns>
              Материал ключа, полученный при обмене ключами с открытым ключом другой стороны.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="otherPartyPublicKey" /> — не является ключом ECDH или имеет недопустимый размер.
                
                  -или-
                
                  <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>
              Получает последовательность байтов, которые можно использовать в качестве ключа, использующего код проверки подлинности хэш-сообщения (HMAC).
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ другой стороны.
              </param>
      <param name="hashAlgorithm">
                Хэш-алгоритм, используемый для получения материала ключа.
              </param>
      <param name="hmacKey">
                Ключ HMAC.
              </param>
      <param name="secretPrepend">
                Значение, добавляемое к производному секрету (в начало) перед хэшированием.
              </param>
      <param name="secretAppend">
                Значение, добавляемое к производному секрету перед хэшированием.
              </param>
      <returns>
              Материал ключа, полученный при обмене ключами с открытым ключом другой стороны.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="otherPartyPublicKey" /> — не является ключом ECDH или имеет недопустимый размер.
                
                  -или-
                
                  <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)">
      <summary>
              Получение материала ключа, созданный из секретного соглашения между двумя сторонами, используя заданный <see cref="T:System.Security.Cryptography.CngKey" /> объект, содержащий открытый ключ второй стороны.
            </summary>
      <param name="otherPartyPublicKey">
                Объект, содержащий открытая часть ключа алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH) от другой стороны, при обмене ключами.
              </param>
      <returns>
              Массив байтов, содержащий ключевой материал.
               Эта информация формируется из секретного соглашения, которое вычисляется на основе закрытого ключа текущего объекта и указанного открытого ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="otherPartyPublicKey" /> недопустим.
                   Либо его <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> не содержит свойство <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> или его размер ключа не соответствует размер ключа данного экземпляра.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Этот объект <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> указывает свойство <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> функцию формирования ключа, но либо <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> или <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> — <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>
              Получение материала ключа, созданный из секретного соглашения между двумя сторонами, используя заданный <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> объект, содержащий открытый ключ второй стороны.
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ из другой стороне обмена ключами.
              </param>
      <returns>
              Массив байтов, содержащий ключевой материал.
               Эта информация формируется из секретного соглашения, которое вычисляется на основе закрытого ключа текущего объекта и указанного открытого ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="otherPartyPublicKey" /> не <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> ключа.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>
              Извлекает байты, которые могут использоваться как ключ с использованием алгоритма получения псевдослучайной функции (PRF) протокола TLS.
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ другой стороны.
              </param>
      <param name="prfLabel">
                Метка PRF с использованием кодировки ASCII.
              </param>
      <param name="prfSeed">
                Начальное значение PRF (64-байтовое).
              </param>
      <returns>
              Материал ключа, полученный при обмене ключами с открытым ключом другой стороны.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="prfLabel" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="prfSeed" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="otherPartyPublicKey" /> — не является ключом ECDH или имеет недопустимый размер.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="prfSeed" /> — длина не соответствует 64 байтам.
                
                  -или-
                
                  Все остальные ошибки шифрования.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)">
      <summary>
              Получает дескриптор секретного соглашения, заключенного между двумя сторонами, используя заданный <see cref="T:System.Security.Cryptography.CngKey" /> объект, содержащий открытый ключ второй стороны.
            </summary>
      <param name="otherPartyPublicKey">
                Объект, содержащий открытая часть ключа алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH) от другой стороны, при обмене ключами.
              </param>
      <returns>
              Дескриптор секретного соглашения.
               Эта информация вычисляется на основе закрытого ключа текущего объекта и указанного открытого ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="otherPartyPublicKey" /> не является ключом ECDH или не является правильным размером.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>
              Получает дескриптор секретного соглашения, заключенного между двумя сторонами, используя заданный <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> объект, содержащий открытый ключ второй стороны.
            </summary>
      <param name="otherPartyPublicKey">
                Открытый ключ из другой стороне обмена ключами.
              </param>
      <returns>
              Дескриптор секретного соглашения.
               Эта информация вычисляется на основе закрытого ключа текущего объекта и указанного открытого ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="otherPartyPublicKey" /> не <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> ключа.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)">
      <summary>
              Экспортирует ключ и параметры явной кривой, используемые объектом <see cref="T:System.Security.Cryptography.ECCurve" />, в объект <see cref="T:System.Security.Cryptography.ECParameters" />.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Ключ и параметры явной кривой, используемые объектом <see cref="T:System.Security.Cryptography.ECCurve" />.
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Метод не может получить значения кривой.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Явный экспорт не поддерживается этой платформой.
                   Требуется Windows 10 или более поздней версии.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)">
      <summary>
              Экспортирует ключ, используемый объектом <see cref="T:System.Security.Cryptography.ECCurve" />, в объект <see cref="T:System.Security.Cryptography.ECParameters" />.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Ключ и параметры именованной кривой, используемые объектом <see cref="T:System.Security.Cryptography.ECCurve" />.
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Метод не может получить значения кривой.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)">
      <summary>
              Этот метод не реализован.
            </summary>
      <param name="xmlString">
                Основанный на XML данные ключа для десериализации.
              </param>
      <exception cref="T:System.NotImplementedException">
                  Этот метод не был переопределен для данного экземпляра.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>
              Выполняет десериализацию данных ключа из XML-строки, используя указанный формат.
            </summary>
      <param name="xml">
                Основанный на XML данные ключа для десериализации.
              </param>
      <param name="format">
                Одно из значений перечисления, задающее формат XML-строки.
                 Единственный момент принятый формат <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="xml" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="xml" /> Неправильный формат.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="format" /> указывает недопустимый формат.
                   Единственным допустимым значением является <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>
              Создает новую пару открытого и закрытого эфемерных ключей для указанной кривой.
            </summary>
      <param name="curve">
                Кривая, используемая для создания пары открытого и закрытого эфемерных ключей.
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="curve" /> не выполняет проверку.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>
              Импортирует заданные параметры для объекта <see cref="T:System.Security.Cryptography.ECCurve" /> как ключ в текущий экземпляр.
            </summary>
      <param name="parameters">
                Параметры кривой для импорта.
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="parameters" /> не выполняет проверку.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="parameters" /> ссылается на кривую, которую нельзя импортировать.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  <paramref name="parameters" /> ссылается на кривую, которая не поддерживается этой платформой.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)">
      <summary>
              Этот метод не реализован.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Неприменимо.
            </returns>
      <exception cref="T:System.NotImplementedException">
                  Этот метод не был переопределен для данного экземпляра.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>
              Сериализует данные ключа в XML-строку, используя указанный формат.
            </summary>
      <param name="format">
                Одно из значений перечисления, задающее формат XML-строки.
                 Единственный момент принятый формат <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.
              </param>
      <returns>
              Строковый объект, содержащий данные ключа, сериализованные в XML-строку, в соответствии с требуемый формат.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="format" /> указывает недопустимый формат.
                   Единственным допустимым значением является <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ExportExplicitParameters">
      <summary>
              Экспортирует ключ и параметры явной кривой, используемые объектом <see cref="T:System.Security.Cryptography.ECCurve" />, в объект <see cref="T:System.Security.Cryptography.ECParameters" />.
            </summary>
      <returns>
              Ключ и параметры явной кривой, используемые объектом <see cref="T:System.Security.Cryptography.ECCurve" />.
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Метод не может получить значения кривой.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Явный экспорт не поддерживается этой платформой.
                   Требуется Windows 10 или более поздней версии.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ExportParameters">
      <summary>
              Экспортирует ключ, используемый объектом <see cref="T:System.Security.Cryptography.ECCurve" />, в объект <see cref="T:System.Security.Cryptography.ECParameters" />.
            </summary>
      <returns>
              Ключ и параметры именованной кривой, используемые объектом <see cref="T:System.Security.Cryptography.ECCurve" />.
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Метод не может получить значения кривой.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromByteArray(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>
              Преобразует массив байтов, содержащий открытый ключ для <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> объекта согласно указанному формату.
            </summary>
      <param name="publicKeyBlob">
                Массив байтов, содержащий открытый ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).
              </param>
      <param name="format">
                Объект, задающий формат большого двоичного ОБЪЕКТА ключа.
              </param>
      <returns>
              Объект, содержащий открытый ключ ECDH, сериализованный в массив байтов.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Значение параметра <paramref name="publicKeyBlob" /> или параметра <paramref name="format" /> — <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="publicKeyBlob" /> Параметр не содержит <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> ключа.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromXmlString(System.String)">
      <summary>
              Преобразует XML-строка <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> объекта.
            </summary>
      <param name="xml">
                XML-строка, которая содержит ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).
              </param>
      <returns>
              Объект, содержащий открытый ключ ECDH, заданный указанной XML.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="xml" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="xml" /> Не указан параметр <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> ключа.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.Import">
      <summary>
              Преобразует <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> объект <see cref="T:System.Security.Cryptography.CngKey" /> объект.
            </summary>
      <returns>
              Объект, содержащий ключ, представленный <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> объекта.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ToXmlString">
      <summary>
              Сериализует <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> открытый ключ в XML-строку в формате RFC 4050.
            </summary>
      <returns>
              XML-строка, содержащая сериализованный <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> открытый ключ.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.
            </summary>
      <param name="keyBlob">
                Массив байтов, представляющий объект <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="keyBlob" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>
              Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> (при необходимости освобождает и управляемые ресурсы).
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportExplicitParameters">
      <summary>
              Если переопределено в производном классе, экспортирует явный объект <see cref="T:System.Security.Cryptography.ECParameters" /> для объекта <see cref="T:System.Security.Cryptography.ECCurve" />.
            </summary>
      <returns>
              Объект, представляющий точку на кривой для этого ключа, в формате явной кривой.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportParameters">
      <summary>
              Если переопределено в производном классе, экспортирует именованный или явный объект <see cref="T:System.Security.Cryptography.ECParameters" /> для объекта <see cref="T:System.Security.Cryptography.ECCurve" />.
            </summary>
      <returns>
              Объект, представляющий точку на кривой для этого ключа.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>
              Выполняет сериализацию BLOB-объекта ключа <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> в массив байтов.
            </summary>
      <returns>
              Массив байтов, в котором содержится сериализованный открытый ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>
              Выполняет сериализацию открытого ключа <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> в XML-строку.
            </summary>
      <returns>
              XML-строка, в которой содержится сериализованный открытый ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDsa" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>
              Создает новый экземпляр реализации по умолчанию из эллиптических кривых цифровой подписи алгоритма (ECDSA).
            </summary>
      <returns>
              Новый экземпляр реализации по умолчанию (<see cref="T:System.Security.Cryptography.ECDsaCng" />) этого класса.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
      <summary>
              Создает новый экземпляр реализации по умолчанию на основе алгоритма цифровых подписей на основе эллиптических кривых (ECDSA), используя новый созданный ключ на основе указанной кривой.
            </summary>
      <param name="curve">
                Кривая, используемая для создания ключа.
              </param>
      <returns>
              Новый экземпляр реализации по умолчанию (<see cref="T:System.Security.Cryptography.ECDsaCng" />) этого класса.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
      <summary>
              Создает новый экземпляр реализации по умолчанию на основе алгоритма цифровых подписей на основе эллиптических кривых (ECDSA), используя указанные параметры в качестве ключа.
            </summary>
      <param name="parameters">
                Параметры, представляющие используемый ключ.
              </param>
      <returns>
              Новый экземпляр реализации по умолчанию (<see cref="T:System.Security.Cryptography.ECDsaCng" />) этого класса.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>
              Создает новый экземпляр заданной реализации из эллиптических кривых цифровой подписи алгоритма (ECDSA).
            </summary>
      <param name="algorithm">
                Имя реализации ECDSA.
                 Следующие строки относятся же реализация, которая в настоящее время является только реализация поддерживается в .NET Framework:
              
                -«ECDsa»
              
                -«ECDsaCng»
              
                -«System.Security.Cryptography.ECDsaCng»
              
                Можно также указать имя пользовательской реализации ECDSA.
              </param>
      <returns>
              Новый экземпляр заданной реализации этого класса.
               Если заданное имя алгоритма не соответствует реализации ECDSA, этот метод возвращает <see langword="null" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="algorithm" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
      <summary>
              Если переопределено в производном классе, экспортирует явные параметры для эллиптической кривой.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Параметры, представляющие точку на кривой для этого ключа, в формате явной кривой.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
      <summary>
              Если переопределено в производном классе, экспортирует именованные или явные параметры для эллиптической кривой.
               Если кривая имеет имя, поле <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> содержит параметры именованной кривой; в противном случае оно содержит параметры явной кривой.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Параметры, представляющие точку на кривой для этого ключа.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>
              При переопределении в производном классе создает новую пару открытого и закрытого ключей для указанной кривой.
            </summary>
      <param name="curve">
                Кривая для использования.
              </param>
      <exception cref="T:System.NotSupportedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              При переопределении в производном классе вычисляет хэш-значение указанного фрагмента массива байтов с помощью заданного алгоритма хэширования.
            </summary>
      <param name="data">
                Данные, предназначенные для хэширования.
              </param>
      <param name="offset">
                Индекс первого байта в <paramref name="data" />, хэширование которого требуется выполнить.
              </param>
      <param name="count">
                Количество байтов, хэширование которых необходимо выполнить.
              </param>
      <param name="hashAlgorithm">
                Алгоритм, который будет использоваться для хэширования данных.
              </param>
      <returns>
              Хэшированные данные.
            </returns>
      <exception cref="T:System.NotImplementedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              При переопределении в производном классе вычисляет хэш-значение указанного двоичного потока с помощью заданного алгоритма хэширования.
            </summary>
      <param name="data">
                Двоичный поток, хэширование которого требуется выполнить.
              </param>
      <param name="hashAlgorithm">
                Алгоритм, который будет использоваться для хэширования данных.
              </param>
      <returns>
              Хэшированные данные.
            </returns>
      <exception cref="T:System.NotImplementedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>
              Если переопределено в производном классе, импортирует указанные объекты.
            </summary>
      <param name="parameters">
                Параметры кривой.
              </param>
      <exception cref="T:System.NotSupportedException">
                  Производный класс должен переопределять этот метод.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              Вычисляет хэш-значение фрагмента заданного массива байтов с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение.
            </summary>
      <param name="data">
                Входные данные, для которых нужно вычислить хэш.
              </param>
      <param name="offset">
                Смещение в массиве, начиная с которого следует использовать данные.
              </param>
      <param name="count">
                Число байтов в массиве для использования в качестве данных.
              </param>
      <param name="hashAlgorithm">
                Алгоритм хэширования, используемый для создания хэш-значения.
              </param>
      <returns>
              Подпись ECDSA для указанных данных.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="offset" /> меньше нуля.
                
                  -или-
                
                  Значение параметра <paramref name="count" /> меньше нуля.
                
                  -или-
                
                  <paramref name="offset" /> + <paramref name="count" /> – 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              Вычисляет хэш-значение заданного массива байтов с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение.
            </summary>
      <param name="data">
                Входные данные, для которых нужно вычислить хэш.
              </param>
      <param name="hashAlgorithm">
                Алгоритм хэширования, используемый для создания хэш-значения.
              </param>
      <returns>
              Подпись ECDSA для указанных данных.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              Вычисляет хэш-значение заданного потока с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение.
            </summary>
      <param name="data">
                Входной поток, для которого нужно вычислить хэш.
              </param>
      <param name="hashAlgorithm">
                Алгоритм хэширования, используемый для создания хэш-значения.
              </param>
      <returns>
              Подпись ECDSA для указанных данных.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>
              Создает цифровую подпись для указанного хэш-значения.
            </summary>
      <param name="hash">
                Хэш-значение подписываемых данных.
              </param>
      <returns>
              Цифровая подпись, состоящая из указанного хэш-значения, зашифрованного с помощью закрытого ключа.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="hash" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              Проверяет допустимость цифровой подписи путем вычисления хэш-значения заданных данных с помощью указанного алгоритма хэширования и его сравнения с предоставленной подписью.
            </summary>
      <param name="data">
                Подписанные данные.
              </param>
      <param name="signature">
                Данные подписи, которые требуется поверить.
              </param>
      <param name="hashAlgorithm">
                Алгоритм хэширования, используемый для создания хэш-значения данных.
              </param>
      <returns>
              <see langword="true" />, если подпись является допустимой. В противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="signature" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              Проверяет допустимость цифровой подписи путем вычисления хэш-значения данных во фрагменте массива байтов с помощью указанного алгоритма хэширования и его сравнения с предоставленной подписью.
            </summary>
      <param name="data">
                Подписанные данные.
              </param>
      <param name="offset">
                Индекс, начиная с которого нужно вычислять хэш.
              </param>
      <param name="count">
                Количество байтов для хэширования.
              </param>
      <param name="signature">
                Данные подписи, которые требуется поверить.
              </param>
      <param name="hashAlgorithm">
                Алгоритм хэширования, используемый для создания хэш-значения данных.
              </param>
      <returns>
              <see langword="true" />, если подпись является допустимой. В противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="signature" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение параметра <paramref name="offset" /> меньше нуля.
                
                  -или-
                
                  Значение параметра <paramref name="count" /> меньше нуля.
                
                  -или-
                
                  <paramref name="offset" /> + <paramref name="count" /> – 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              Проверяет допустимость цифровой подписи путем вычисления хэш-значения заданного потока с помощью указанного алгоритма хэширования и его сравнения с предоставленной подписью.
            </summary>
      <param name="data">
                Подписанные данные.
              </param>
      <param name="signature">
                Данные подписи, которые требуется поверить.
              </param>
      <param name="hashAlgorithm">
                Алгоритм хэширования, используемый для создания хэш-значения данных.
              </param>
      <returns>
              <see langword="true" />, если подпись является допустимой. В противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="signature" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /><paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>
              Проверяет цифровую подпись на соответствие указанному хэш-значению.
            </summary>
      <param name="hash">
                Хэш-значение блока данных.
              </param>
      <param name="signature">
                Проверяемая цифровая подпись.
              </param>
      <returns>
              Значение <see langword="true" />, если хэш-значение соответствует расшифрованной подписи; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDsaCng" /> с парой случайных пар ключей.
            </summary>
      <exception cref="T:System.PlatformNotSupportedException">
                  Классы криптографии следующего поколения (CNG) не поддерживаются в этой системе.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDsaCng" /> с созданной случайным образом парой ключей указанного размера.
            </summary>
      <param name="keySize">
                Размер ключа.
                 Допустимые размеры ключей: 256, 384 и 521 бит.
              </param>
      <exception cref="T:System.PlatformNotSupportedException">
                  Классы криптографии следующего поколения (CNG) не поддерживаются в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="keySize" /> задает недопустимую длину.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDsaCng" />, используя указанный объект <see cref="T:System.Security.Cryptography.CngKey" />.
            </summary>
      <param name="key">
                Ключ, который будет использоваться в качестве входных данных для криптографических операций, выполняемых текущим объектом.
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> не указывает группу алгоритмов цифровых подписей на основе эллиптических кривых (ECDSA).
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="key" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Классы криптографии следующего поколения (CNG) не поддерживаются в этой системе.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDsaCng" />, пара открытого и закрытого ключей которого создается на основе указанной кривой.
            </summary>
      <param name="curve">
                Кривая, используемая для создания пары открытого и закрытого ключей.
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="curve" /> не выполняет проверку.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)">
      <summary>
              Экспортирует ключ и параметры явной кривой, используемые объектом шифрования на основе эллиптических кривых (ECC), в объект <see cref="T:System.Security.Cryptography.ECParameters" />.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Ключ и параметры явной кривой, используемые объектом ECC.
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  При получении значений кривой произошла ошибка.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  Явный экспорт не поддерживается этой платформой.
                   Требуется Windows 10 или более поздней версии.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)">
      <summary>
              Экспортирует ключ, используемый объектом шифрования на основе эллиптических кривых (ECC), в объект <see cref="T:System.Security.Cryptography.ECParameters" />.
               Если ключ был создан как именованная кривая, поле <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> содержит параметры именованной кривой; в противном случае оно содержит параметры явной кривой.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Ключ и параметры именованной кривой, используемые объектом ECC.
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  При получении значений кривой произошла ошибка.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)">
      <summary>
              Этот метод не реализован.
            </summary>
      <param name="xmlString">
                Основанный на XML данные ключа для десериализации.
              </param>
      <exception cref="T:System.NotImplementedException">
                  Этот метод не был переопределен для данного экземпляра.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>
              Выполняет десериализацию данных ключа из XML-строки, используя указанный формат.
            </summary>
      <param name="xml">
                Основанный на XML данные ключа для десериализации.
              </param>
      <param name="format">
                Одно из значений перечисления, задающее формат XML-строки.
                 Единственный момент принятый формат <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="xml" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="format" /> указывает недопустимый формат.
                   Единственным допустимым значением является <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>
              Создает ключ для использования алгоритмом ECDsaCng.
            </summary>
      <param name="curve">
                Кривая, используемая для создания ключа.
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="curve" /> не выполняет проверку.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>
              Заменяет существующий ключ, с которым работает текущий экземпляр, создавая новый объект <see cref="T:System.Security.Cryptography.CngKey" /> для структуры параметров.
            </summary>
      <param name="parameters">
                Параметры кривой.
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="parameters" /> не содержит допустимых значений.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  <paramref name="parameters" /> ссылается на кривую, которую нельзя импортировать.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  <paramref name="parameters" /> ссылается на кривую, которая не поддерживается этой платформой.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])">
      <summary>
              Создает подпись для указанных данных.
            </summary>
      <param name="data">
                Данные сообщения должны быть подписаны.
              </param>
      <returns>
              Цифровая подпись для указанных данных.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Информация ключа, связанного с экземпляром, который не имеет закрытого ключа.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)">
      <summary>
              Создает цифровую подпись для указанного фрагмента данных, начиная с указанной позиции.
            </summary>
      <param name="data">
                Данные сообщения должны быть подписаны.
              </param>
      <param name="offset">
                Место в строке, с которой следует начать подписывание.
              </param>
      <param name="count">
                Длина строки в знаках, <paramref name="offset" /> будет выполнен вход.
              </param>
      <returns>
              Цифровая подпись для указанного фрагмента данных.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="count" /> или <paramref name="offset" /> вызвала чтения за пределами строки данных.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Информация ключа, связанного с экземпляром, который не имеет закрытого ключа.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)">
      <summary>
              Создает подпись для указанного потока данных, чтения в конец потока.
            </summary>
      <param name="data">
                Поток данных, должны быть подписаны.
              </param>
      <returns>
              Цифровая подпись для указанного потока данных.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Информация ключа, связанного с экземпляром, который не имеет закрытого ключа.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])">
      <summary>
              Создает подпись для указанного хэш-значения.
            </summary>
      <param name="hash">
                Хэш-значение подписываемых данных.
              </param>
      <returns>
              Цифровая подпись для указанного хэш-значения.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="hash" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Информация ключа, связанного с экземпляром, который не имеет закрытого ключа.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)">
      <summary>
              Этот метод не реализован.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Неприменимо.
            </returns>
      <exception cref="T:System.NotImplementedException">
                  Этот метод не реализован.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>
              Сериализует данные ключа в XML-строку, используя указанный формат.
            </summary>
      <param name="format">
                Одно из значений перечисления, задающее формат XML-строки.
                 Единственный момент принятый формат <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.
              </param>
      <returns>
              Строковый объект, содержащий данные ключа, сериализованные в XML-строку в соответствии с требуемый формат.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="format" /> указывает недопустимый формат.
                   Единственным допустимым значением является <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])">
      <summary>
              Проверяет цифровую подпись указанных данных.
            </summary>
      <param name="data">
                подписанные данные;
              </param>
      <param name="signature">
                Подпись для проверки.
              </param>
      <returns>
              <see langword="true" />, если подпись является допустимой. В противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
      <summary>
              Проверяет подпись для указанного фрагмента данных, начиная с указанной позиции.
            </summary>
      <param name="data">
                подписанные данные;
              </param>
      <param name="offset">
                Расположение в данных, с которого начинается подписанные данные.
              </param>
      <param name="count">
                Длина данных в следующих символов <paramref name="offset" /> будет выполнен вход.
              </param>
      <param name="signature">
                Подпись для проверки.
              </param>
      <returns>
              <see langword="true" />, если подпись является допустимой. В противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="offset" /> или <paramref name="count" /> — меньше нуля.
                
                  -или-
                
                  <paramref name="offset" /> или <paramref name="count" /> больше, чем длина массива байтов, передаваемый в <paramref name="data" /> параметр.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])">
      <summary>
              Проверяет цифровую подпись для указанного потока данных, чтения в конец потока.
            </summary>
      <param name="data">
                Поток данных, который был подписан.
              </param>
      <param name="signature">
                Подпись для проверки.
              </param>
      <returns>
              <see langword="true" />, если подпись является допустимой. В противном случае — <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])">
      <summary>
              Проверяет указанную цифровую подпись для заданного хэш-значения.
            </summary>
      <param name="hash">
                Хэш-значение проверяемых данных.
              </param>
      <param name="signature">
                Цифровая подпись данных, которую требуется проверить с использованием хэш-значения.
              </param>
      <returns>
              Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="hash" /> или <paramref name="signature" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECParameters.Validate">
      <summary>
              Проверяет текущий объект.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Параметры кривой или ключа недопустимы для текущего типа кривой.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])">
      <summary>
              Добавляет указанные данные к данным, уже обработанным в хэше или HMAC.
            </summary>
      <param name="data">
                Данные для обработки.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Объект <see cref="T:System.Security.Cryptography.IncrementalHash" /> уже удален.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)">
      <summary>
              Добавляет указанное число байтов из указанных данных, начиная с заданного смещения, к данным, уже обработанным в хэше или HMAC.
            </summary>
      <param name="data">
                Данные для обработки.
              </param>
      <param name="offset">
                Смещение в массиве байтов, начиная с которого следует использовать данные.
              </param>
      <param name="count">
                Число байтов, которое нужно использовать из <paramref name="data" />.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  <paramref name="count" /> или <paramref name="offset" /> является отрицательным значением.
                
                  -или-
                
                  <paramref name="count" /> больше, чем длина <paramref name="data" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Сумма <paramref name="offset" /> и <paramref name="count" /> больше, чем длина данных.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Объект <see cref="T:System.Security.Cryptography.IncrementalHash" /> уже удален.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)">
      <summary>
              Создает <see cref="T:System.Security.Cryptography.IncrementalHash" /> для указанного алгоритма.
            </summary>
      <param name="hashAlgorithm">
                Имя алгоритма хэширования для выполнения.
              </param>
      <returns>
              Экземпляр <see cref="T:System.Security.Cryptography.IncrementalHash" /> готов для вычисления алгоритма хэширования, указанного <paramref name="hashAlgorithm" />.
            </returns>
      <exception cref="T:System.ArgumentException">
                  <paramref name="hashAlgorithm" />.Параметр <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или является пустой строкой.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="hashAlgorithm" /> — неизвестный алгоритм хэширования.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>
              Создает <see cref="T:System.Security.Cryptography.IncrementalHash" /> для алгоритма HMAC с помощью указанного алгоритма хэширования и ключа.
            </summary>
      <param name="hashAlgorithm">
                Имя алгоритма хэширования для выполнения в HMAC.
              </param>
      <param name="key">
                     Секретный ключ для HMAC.
                 Ключ может иметь любую длину, но ключ, длина которого превышает выходной размер указанного алгоритма хэширования, будет хэшироваться для получения правильного размера.
                 Таким образом, рекомендуемым размером секретного ключа является выходной размер указанного алгоритма хэширования.
              </param>
      <returns>
              Экземпляр класса <see cref="T:System.Security.Cryptography.IncrementalHash" /> готов для вычисления указанного алгоритма хэширования.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="key" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  <paramref name="hashAlgorithm" />.Параметр <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или является пустой строкой.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="hashAlgorithm" /> — неизвестный алгоритм хэширования.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.Dispose">
      <summary>
              Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Security.Cryptography.IncrementalHash" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset">
      <summary>
              Извлекает хэш или HMAC для данных, собранных из предыдущих вызовов метода <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])" />, и сбрасывает объект к исходному состоянию.
            </summary>
      <returns>
              Вычисляемый хэш или HMAC.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  Объект <see cref="T:System.Security.Cryptography.IncrementalHash" /> уже удален.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)">
      <summary>
              Собирает и проверяет сведения о подписях манифестов, относящихся к заданному контексту активации.
            </summary>
      <param name="application">
                Контекст активации манифеста.
                 Контексты активации относятся к приложению и содержат несколько манифестов.
              </param>
      <returns>
              Коллекция, содержащая <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> каждый манифест, проверяемый объект.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="application" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)">
      <summary>
              Собирает и проверяет сведения о подписях манифестов, принадлежащих к заданному контексту активации и типу манифеста.
            </summary>
      <param name="application">
                Контекст активации манифеста.
                 Контексты активации относятся к приложению и содержат несколько манифестов.
              </param>
      <param name="manifests">
                Тип манифеста.
                 Этот параметр определяет, какие манифесты в контексте активации необходимо проверить.
              </param>
      <returns>
              Коллекция, содержащая <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> каждый манифест, проверяемый объект.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="application" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)">
      <summary>
              Собирает и проверяет сведения о подписях манифестов, относящихся к заданному контексту активации и типу манифеста и разрешает выбор отзыва сертификатов.
            </summary>
      <param name="application">
                Контекст приложения манифестов.
                 Контексты активации относятся к приложению и содержат несколько манифестов.
              </param>
      <param name="manifests">
                Тип манифеста.
                 Этот параметр определяет, какие манифесты в контексте активации необходимо проверить.
              </param>
      <param name="revocationFlag">
                Одно из значений перечисления, которое указывает, какие сертификаты в цепочке проверки отзыва.
                 Значение по умолчанию — <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.ExcludeRoot" />.
              </param>
      <param name="revocationMode">
                Определяет ли X.509 при проверке интерактивным спискам отзыва сертификатов.
              </param>
      <returns>
              Коллекция, содержащая <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> каждый манифест, проверяемый объект.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Параметр <paramref name="application" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение, указанное для <paramref name="revocationFlag" /> или <paramref name="revocationMode" /> указан недопустимый параметр.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.MD5Cng" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
                  Эта реализация не является частью криптографических алгоритмов, утвержденных FIPS для платформы Windows.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.Initialize">
      <summary>
              Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSACng" /> с парой случайных 2048-битных ключей.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor(System.Int32)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSACng" /> с созданным случайным образом ключом указанного размера.
            </summary>
      <param name="keySize">
                Размер создаваемого ключа в битах.
              </param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Недопустимый параметр <paramref name="keySize" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSACng" /> с заданным ключом.
            </summary>
      <param name="key">
                Ключ, используемый для операций RSA.
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="key" /> не является допустимым ключом RSA.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="key" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>
              Расшифровывает входные данные с использованием указанного режима заполнения.
            </summary>
      <param name="data">
                Расшифровываемые данные.
              </param>
      <param name="padding">
                Режим заполнения.
              </param>
      <returns>
              Расшифрованные данные.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="padding" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Значение <paramref name="padding" /> не равно <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1" />, или же <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> в параметре <paramref name="padding" /> не равен <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.DecryptValue(System.Byte[])">
      <summary>
              Расшифровывает входные данные с помощью закрытого ключа.
            </summary>
      <param name="rgb">
                Зашифрованный текст, который необходимо расшифровать.
              </param>
      <returns>
              Результат расшифровки значения параметра <paramref name="rgb" /> в форме обычного текста.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Этот вызов метода не поддерживается.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>
              Шифрует входные данные с использованием указанного заполнения.
            </summary>
      <param name="data">
                Данные, которые необходимо зашифровать.
              </param>
      <param name="padding">
                Режим заполнения.
              </param>
      <returns>
              Возвращает <see cref="T:System.Byte" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="data" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="padding" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Значение <paramref name="padding" /> не равно <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> или <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.EncryptValue(System.Byte[])">
      <summary>
              Шифрует входные данные с помощью открытого ключа.
            </summary>
      <param name="rgb">
                Обычный текст, который требуется зашифровать.
              </param>
      <returns>
              Результат шифрования значения параметра <paramref name="rgb" /> в форме зашифрованного текста.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Этот вызов метода не поддерживается.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.ExportParameters(System.Boolean)">
      <summary>
              Экспортирует ключ, используемый объектом RSA, в объект <see cref="T:System.Security.Cryptography.RSAParameters" />.
            </summary>
      <param name="includePrivateParameters">
                Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.
              </param>
      <returns>
              Ключ, используемый объектом RSA.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>
              Заменяет существующий ключ, с которым работает текущий экземпляр, создавая новый объект <see cref="T:System.Security.Cryptography.CngKey" /> для структуры параметров.
            </summary>
      <param name="parameters">
                Параметры RSA.
              </param>
      <exception cref="T:System.ArgumentException">
                  <paramref name="parameters" /> не содержит ни модуль, ни показатель степени.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <paramref name="parameters" /> не является допустимым ключом RSA.
                
                  -или-
                
                  <paramref name="parameters" /> — это полная пара ключей, и используется KSP по умолчанию.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              Подписывает данные, хэшированные с помощью указанного алгоритма хэширования и заполнения.
            </summary>
      <param name="hash">
                Подписываемый хэш.
              </param>
      <param name="hashAlgorithm">
                Имя хэш-алгоритма.
              </param>
      <param name="padding">
                Режим заполнения.
              </param>
      <returns>
              Подписанные данные.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="hash" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="padding" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Свойство <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> алгоритма <paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Значение <paramref name="padding" /> не равно <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> или <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>
              Проверяет данные, подписанные и уже хэшированные с помощью указанного алгоритма и режима заполнения.
            </summary>
      <param name="hash">
                Проверяемый хэш.
              </param>
      <param name="signature">
                Подпись данных.
              </param>
      <param name="hashAlgorithm">
                Имя хэш-алгоритма.
              </param>
      <param name="padding">
                Режим заполнения.
              </param>
      <returns>
              Значение <see langword="true" />, если подпись хэша верна; в противном случае — значение <see langword="false" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="hash" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="signature" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="padding" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Свойство <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> алгоритма <paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Значение <paramref name="padding" /> не равно <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> или <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />.
                
                  -или-
                
                  Подпись имеет недопустимый формат.
                   (Только в .NET Framework 4.6 и 4.6.1. Начиная с .NET Framework 4.6.2 метод возвращает значение <see langword="false" />, если подпись имеет неправильный формат.)
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA1Cng" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.Initialize">
      <summary>
              Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA256Cng" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.Initialize">
      <summary>
              Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA256CryptoServiceProvider" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.Initialize">
      <summary>
              Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA384Cng" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.Initialize">
      <summary>
              Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA384CryptoServiceProvider" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.Initialize">
      <summary>
              Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA512Cng" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.Initialize">
      <summary>
              Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA512CryptoServiceProvider" />.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.Initialize">
      <summary>
              Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.TripleDESCng" /> с использованием временного ключа.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.TripleDESCng" /> с указанным именем ключа, который представляет существующий сохраненный ключ 3DES.
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="keyName" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  
              Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.TripleDESCng" /> с указанным именем ключа, который представляет существующий сохраненный ключ 3DES, и заданным поставщиком хранилища ключей (KSP).
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <param name="provider">
                Поставщик KSP, который содержит ключ.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="keyName" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="provider" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  
              Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.TripleDESCng" /> с указанным именем ключа, который представляет существующий сохраненный ключ 3DES, указанного поставщика хранилища ключей (KSP) и параметры открытия ключа.
            </summary>
      <param name="keyName">
                Имя ключа.
              </param>
      <param name="provider">
                Поставщик KSP, который содержит ключ.
              </param>
      <param name="openOptions">
                Побитовое сочетание значений перечисления, которые определяют параметры открытия ключа, например, расположение, из которого открывается ключ (компьютер или пользовательское хранилище), или отключение запросов пользовательского интерфейса.
              </param>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="keyName" /> имеет значение <see langword="null" />.
                
                  -или-
                
                  Свойство <paramref name="provider" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.PlatformNotSupportedException">
                  
              Криптография следующего поколения (CNG) не поддерживается в этой системе.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Все остальные ошибки.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateDecryptor">
      <summary>
              Создает симметричный объект-дешифратор 3DES с текущим ключом и вектором инициализации (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).
            </summary>
      <returns>
              Симметричный объект-дешифратор 3DES.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>
              Создает симметричный объект-дешифратор 3DES с указанным ключом и вектором инициализации (IV).
            </summary>
      <param name="rgbKey">
                Секретный ключ, используемый для алгоритма 3DES.
                 Размер ключа должен составлять 192 бита.
              </param>
      <param name="rgbIV">
                Вектор инициализации, используемый для алгоритма 3DES.
              </param>
      <returns>
              Симметричный объект-дешифратор 3DES.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Элемент <paramref name="rgbKey" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Размер элемента <paramref name="rgbKey" /> недопустимый для этого алгоритма.
                
                  -или-
                
                  Размер элемента <paramref name="rgbIV" /> не соответствует размеру блоков для этого алгоритма.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Элемент <paramref name="rgbKey" /> — это слабый ключ для этого алгоритма, поэтому он не может использоваться.
                
                  -или-
                
                  Элемент <paramref name="rgbIV" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateEncryptor">
      <summary>
              Создает симметричный объект-шифратор 3DES с помощью текущего ключа и вектора инициализации (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).
            </summary>
      <returns>
              Симметричный объект-шифратор 3DES.
            </returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>
              Создает симметричный объект-шифратор 3DES с указанным ключом и вектором инициализации (IV).
            </summary>
      <param name="rgbKey">
                Секретный ключ, используемый для алгоритма 3DES.
                 Размер ключа должен составлять 192 бита.
              </param>
      <param name="rgbIV">
                Вектор инициализации, используемый для алгоритма 3DES.
              </param>
      <returns>
              Симметричный объект-шифратор 3DES.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="rgbKey" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.ArgumentException">
                  Размер элемента <paramref name="rgbKey" /> недопустимый для этого алгоритма.
                
                  -или-
                
                  Размер элемента <paramref name="rgbIV" /> не соответствует размеру блоков для этого алгоритма.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Элемент <paramref name="rgbKey" /> — это слабый ключ для этого алгоритма, поэтому он не может использоваться.
                
                  -или-
                
                  Элемент <paramref name="rgbIV" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.GenerateIV">
      <summary>
              Создает случайный вектор инициализации (IV), который нужно использовать для алгоритма 3DES.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.GenerateKey">
      <summary>
              Создает случайный ключ для использования алгоритма 3DES.
            </summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              Получает закрытый ключ <see cref="T:System.Security.Cryptography.DSA" /> из сертификата <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
      <param name="certificate">
                Сертификат.
              </param>
      <returns>
              Закрытый ключ или <see langword="null" />, если у сертификата отсутствует закрытый ключ DSA.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="certificate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.DSACertificateExtensions.GetDSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              Получает открытый ключ <see cref="T:System.Security.Cryptography.DSA" /> из <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
      <param name="certificate">
                Сертификат.
              </param>
      <returns>
              Открытый ключ или <see langword="null" />, если у сертификата отсутствует открытый ключ DSA.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="certificate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Windows сообщает об ошибке.
                   Дополнительные сведения см. в разделе, посвященном свойству <see cref="P:System.Exception.Message" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              Возвращает закрытый ключ <see cref="T:System.Security.Cryptography.ECDsa" /> из сертификата <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
      <param name="certificate">
                Сертификат.
              </param>
      <returns>
              Закрытый ключ или <see langword="null" />, если у сертификата отсутствует закрытый ключ ECDsa.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="certificate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              Возвращает закрытый ключ <see cref="T:System.Security.Cryptography.ECDsa" /> из сертификата <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
      <param name="certificate">
                Сертификат.
              </param>
      <returns>
              Закрытый ключ или <see langword="null" />, если у сертификата отсутствует закрытый ключ ECDsa.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="certificate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Дескриптор недействителен.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              Получает закрытый ключ <see cref="T:System.Security.Cryptography.RSA" /> из сертификата <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
      <param name="certificate">
                Сертификат.
              </param>
      <returns>
              Закрытый ключ или <see langword="null" />, если у сертификата отсутствует закрытый ключ RSA.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="certificate" /> имеет значение <see langword="null" />.
                </exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.RSACertificateExtensions.GetRSAPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>
              Получает открытый ключ <see cref="T:System.Security.Cryptography.RSA" /> из <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
      <param name="certificate">
                Сертификат.
              </param>
      <returns>
              Открытый ключ или <see langword="null" />, если у сертификата отсутствует открытый ключ RSA.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Свойство <paramref name="certificate" /> имеет значение <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Windows сообщает об ошибке.
                   Дополнительные сведения см. в разделе, посвященном свойству <see cref="P:System.Exception.Message" />.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Threading.ReaderWriterLockSlim" /> значениями свойств по умолчанию.
            </summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Threading.ReaderWriterLockSlim" /> с указанием политики рекурсии блокировок.
            </summary>
      <param name="recursionPolicy">
                Одно из значений перечисления, определяющее политику рекурсии блокировки.
              </param>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>
              Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Threading.ReaderWriterLockSlim" />.
            </summary>
      <exception cref="T:System.Threading.SynchronizationLockException">
                  <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount" /> больше нуля.
                
                  -или-
                
                  <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount" /> больше нуля.
                
                  -или-
                
                  <see cref="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount" /> больше нуля.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>
              Пытается выполнить вход в блокировку в режиме чтения.
            </summary>
      <exception cref="T:System.Threading.LockRecursionException">
                  Текущему потоку не удается получить блокировку записи, когда он удерживает блокировку чтения.
                
                  -или-
                
                  Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, и текущий поток попытался получить блокировку чтения, когда уже удерживает эту блокировку чтения.
                
                  -или-
                
                  Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, и текущий поток попытался получить блокировку записи, когда уже удерживает эту блокировку записи.
                
                  -или-
                
                  Глубина рекурсии превышает емкость счетчика.
                   Данное ограничение настолько велико, что приложения никогда не должны столкнуться с этим исключением.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Объект <see cref="T:System.Threading.ReaderWriterLockSlim" /> был удален.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>
              Пытается выполнить вход в блокировку в обновляемом режиме.
            </summary>
      <exception cref="T:System.Threading.LockRecursionException">
                  <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Свойство <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> и текущий поток уже вошел в блокировку в любом режиме.
                
                  -или-
                
                  Текущий поток вошел в режим чтения, поэтому попытка входа в обновляемый режим создаст возможность взаимоблокировки.
                
                  -или-
                
                  Глубина рекурсии превышает емкость счетчика.
                   Ограничение настолько велико, что приложения никогда не должны попадать его.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.Threading.ReaderWriterLockSlim" /> Объект был удален.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>
              Пытается выполнить вход в блокировку в режиме записи.
            </summary>
      <exception cref="T:System.Threading.LockRecursionException">
                  <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Свойство <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> и текущий поток уже вошел в блокировку в любом режиме.
                
                  -или-
                
                  Текущий поток вошел в режим чтения, поэтому попытка войти в блокировку в режиме записи создаст возможность взаимоблокировки.
                
                  -или-
                
                  Глубина рекурсии превышает емкость счетчика.
                   Ограничение настолько велико, что приложения никогда не должны попадать его.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  <see cref="T:System.Threading.ReaderWriterLockSlim" /> Объект был удален.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>
              Уменьшает счетчик глубины рекурсии для режима чтения и выходит из режима чтения, если счетчик принял значение 0 (нуль).
            </summary>
      <exception cref="T:System.Threading.SynchronizationLockException">
                  Текущий поток не вошел в блокировку в режиме чтения.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>
              Уменьшает счетчик глубины рекурсии для обновляемого режима и выходит из обновляемого режима, если счетчик принял значение 0 (нуль).
            </summary>
      <exception cref="T:System.Threading.SynchronizationLockException">
                  Текущий поток не вошел в блокировку в обновляемом режиме.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>
              Уменьшает счетчик глубины рекурсии для режима записи и выходит из режима записи, если счетчик принял значение 0 (нуль).
            </summary>
      <exception cref="T:System.Threading.SynchronizationLockException">
                  Текущий поток не вошел в блокировку в режиме записи.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>
              Пытается войти в блокировку в режиме чтения с необязательным указанием времени ожидания целым числом.
            </summary>
      <param name="millisecondsTimeout">
                Время ожидания в миллисекундах или -1 (<see cref="F:System.Threading.Timeout.Infinite" />) в случае неограниченного времени ожидания.
              </param>
      <returns>
              Значение <see langword="true" />, если вызывающий поток вошел в режим чтения; в противном случае <see langword="false" />.
            </returns>
      <exception cref="T:System.Threading.LockRecursionException">
                  <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Свойство <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> и текущий поток уже вошел в блокировку.
                
                  -или-
                
                  Глубина рекурсии превышает емкость счетчика.
                   Ограничение настолько велико, что приложения никогда не должны попадать его.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="millisecondsTimeout" /> является отрицательным, но не равно <see cref="F:System.Threading.Timeout.Infinite" /> (-1), которое является единственным допустимым отрицательным значением.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Объект <see cref="T:System.Threading.ReaderWriterLockSlim" /> был удален.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>
              Пытается войти в блокировку в режиме чтения с необязательным указанием времени ожидания.
            </summary>
      <param name="timeout">
                Период ожидания или значение -1 миллисекунда для ожидания в течение неограниченного времени.
              </param>
      <returns>
              Значение <see langword="true" />, если вызывающий поток вошел в режим чтения; в противном случае <see langword="false" />.
            </returns>
      <exception cref="T:System.Threading.LockRecursionException">
                  <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Свойство <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> и текущий поток уже вошел в блокировку.
                
                  -или-
                
                  Глубина рекурсии превышает емкость счетчика.
                   Ограничение настолько велико, что приложения никогда не должны попадать его.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="timeout" /> является отрицательным, но не равно-1 миллисекунде, которое является единственным допустимым отрицательным значением.
                
                  -или-
                
                  Значение <paramref name="timeout" /> больше, чем <see cref="F:System.Int32.MaxValue" /> миллисекунд.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Объект <see cref="T:System.Threading.ReaderWriterLockSlim" /> был удален.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>
              Пытается войти в блокировку в обновляемом режиме с необязательным указанием времени ожидания.
            </summary>
      <param name="millisecondsTimeout">
                Время ожидания в миллисекундах или -1 (<see cref="F:System.Threading.Timeout.Infinite" />) в случае неограниченного времени ожидания.
              </param>
      <returns>
              Значение <see langword="true" />, если вызывающий поток вошел в обновляемый режим; в противном случае <see langword="false" />.
            </returns>
      <exception cref="T:System.Threading.LockRecursionException">
                  <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Свойство <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> и текущий поток уже вошел в блокировку.
                
                  -или-
                
                  Текущий поток изначально вошел в блокировку в режиме чтения, и поэтому попытка войти в обновляемый режим создаст возможность взаимоблокировки.
                
                  -или-
                
                  Глубина рекурсии превышает емкость счетчика.
                   Ограничение настолько велико, что приложения никогда не должны попадать его.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="millisecondsTimeout" /> является отрицательным, но не равно <see cref="F:System.Threading.Timeout.Infinite" /> (-1), которое является единственным допустимым отрицательным значением.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Объект <see cref="T:System.Threading.ReaderWriterLockSlim" /> был удален.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>
              Пытается войти в блокировку в обновляемом режиме с необязательным указанием времени ожидания.
            </summary>
      <param name="timeout">
                Период ожидания или значение -1 миллисекунда для ожидания в течение неограниченного времени.
              </param>
      <returns>
              Значение <see langword="true" />, если вызывающий поток вошел в обновляемый режим; в противном случае <see langword="false" />.
            </returns>
      <exception cref="T:System.Threading.LockRecursionException">
                  <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Свойство <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> и текущий поток уже вошел в блокировку.
                
                  -или-
                
                  Текущий поток изначально вошел в блокировку в режиме чтения, и поэтому попытка войти в обновляемый режим создаст возможность взаимоблокировки.
                
                  -или-
                
                  Глубина рекурсии превышает емкость счетчика.
                   Ограничение настолько велико, что приложения никогда не должны попадать его.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="timeout" /> является отрицательным, но не равно-1 миллисекунде, которое является единственным допустимым отрицательным значением.
                
                  -или-
                
                  Значение <paramref name="timeout" /> больше, чем <see cref="F:System.Int32.MaxValue" /> миллисекунд.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Объект <see cref="T:System.Threading.ReaderWriterLockSlim" /> был удален.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>
              Пытается войти в блокировку в режиме записи с необязательным указанием времени ожидания.
            </summary>
      <param name="millisecondsTimeout">
                Время ожидания в миллисекундах или -1 (<see cref="F:System.Threading.Timeout.Infinite" />) в случае неограниченного времени ожидания.
              </param>
      <returns>
              Значение <see langword="true" />, если вызывающий поток вошел в режим записи; в противном случае <see langword="false" />.
            </returns>
      <exception cref="T:System.Threading.LockRecursionException">
                  <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Свойство <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> и текущий поток уже вошел в блокировку.
                
                  -или-
                
                  Текущий поток изначально вошел в блокировку в режиме чтения, и поэтому попытка войти в режим записи создаст возможность взаимоблокировки.
                
                  -или-
                
                  Глубина рекурсии превышает емкость счетчика.
                   Ограничение настолько велико, что приложения никогда не должны попадать его.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="millisecondsTimeout" /> является отрицательным, но не равно <see cref="F:System.Threading.Timeout.Infinite" /> (-1), которое является единственным допустимым отрицательным значением.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Объект <see cref="T:System.Threading.ReaderWriterLockSlim" /> был удален.
                </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>
              Пытается войти в блокировку в режиме записи с необязательным указанием времени ожидания.
            </summary>
      <param name="timeout">
                Период ожидания или значение -1 миллисекунда для ожидания в течение неограниченного времени.
              </param>
      <returns>
              Значение <see langword="true" />, если вызывающий поток вошел в режим записи; в противном случае <see langword="false" />.
            </returns>
      <exception cref="T:System.Threading.LockRecursionException">
                  <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> Свойство <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" /> и текущий поток уже вошел в блокировку.
                
                  -или-
                
                  Текущий поток изначально вошел в блокировку в режиме чтения, и поэтому попытка войти в режим записи создаст возможность взаимоблокировки.
                
                  -или-
                
                  Глубина рекурсии превышает емкость счетчика.
                   Ограничение настолько велико, что приложения никогда не должны попадать его.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение <paramref name="timeout" /> является отрицательным, но не равно-1 миллисекунде, которое является единственным допустимым отрицательным значением.
                
                  -или-
                
                  Значение <paramref name="timeout" /> больше, чем <see cref="F:System.Int32.MaxValue" /> миллисекунд.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Объект <see cref="T:System.Threading.ReaderWriterLockSlim" /> был удален.
                </exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>
              Создает прокси <see cref="T:System.Threading.Tasks.Task" /> представляющий собой асинхронную операцию <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.
            </summary>
      <param name="task">
                <see langword="Task&lt;Task&gt;" /> (C#) или <see langword="Task (Of Task)" /> (Visual Basic), чтобы разворачивать.
              </param>
      <returns>
              Задача, представляющая асинхронную операцию указанных <see langword="System.Threading.Tasks.Task(Of Task)" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Исключение, возникающее, если <paramref name="task" /> аргумент имеет значение null.
                </exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>
              Создает прокси <see cref="T:System.Threading.Tasks.Task" /> представляющий собой асинхронную операцию <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) или <see langword="Task (Of Task(Of T))" /> (Visual Basic).
            </summary>
      <param name="task">
                <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) или <see langword="Task (Of Task(Of T))" /> (Visual Basic), чтобы разворачивать.
              </param>
      <typeparam name="TResult">
                Тип результата задачи.
              </typeparam>
      <returns>
              Объект <see cref="T:System.Threading.Tasks.Task" /> представляющий асинхронную операцию указанных <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) или <see langword="Task (Of Task(Of T))" /> (Visual Basic).
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Исключение, возникающее, если <paramref name="task" /> аргумент имеет значение null.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>
              Возвращает объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для определения равенства значений в наборе.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для определения равенства значений в наборе.
            </returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>
              Возвращает число элементов, содержащихся в наборе.
            </summary>
      <returns>
              Число элементов, содержащихся в наборе.
            </returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>
              Возвращает элемент, расположенный в текущей позиции перечислителя.
            </summary>
      <returns>
              Элемент в <see cref="T:System.Collections.Generic.HashSet`1" /> коллекции, соответствующий текущей позиции перечислителя.
            </returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>
              Возвращает элемент, расположенный в текущей позиции перечислителя.
            </summary>
      <returns>
              Элемент в коллекции, соответствующий текущей позиции перечислителя, как <see cref="T:System.Object" />.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Перечислитель располагается перед первым элементом коллекции или после последнего элемента.
                </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
              Возвращает значение, указывающее, доступна ли коллекция только для чтения.
            </summary>
      <returns>
              Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Channel">
      <summary>
              Получает значение канала из дескриптора событий.
            </summary>
      <returns>
              Канал, который определяет потенциальную цель для события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.EventId">
      <summary>
              Возвращает значение идентификатора события из дескриптора событий.
            </summary>
      <returns>
              Идентификатор события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Keywords">
      <summary>
              Получает значение ключевого слова из дескриптора событий.
            </summary>
      <returns>
              Ключевое слово, которое является битовой маской, указывающее категорию событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Level">
      <summary>
              Получает значение уровня из дескриптора событий.
            </summary>
      <returns>
              Уровень детализации сведений, включаемых в событие.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Opcode">
      <summary>
              Получает значение кода операции из дескриптора событий.
            </summary>
      <returns>
              Операция, выполняемая во время записи события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Task">
      <summary>
              Получает значение задачи из дескриптора событий.
            </summary>
      <returns>
              Задача, которая определяет логический компонент приложения, записывающего событие.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Version">
      <summary>
              Получает значение версии из дескриптора событий.
            </summary>
      <returns>
              Версия события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter">
      <summary>
              Возвращает и задает разделитель, используемый для разделения данных события, которые записываются в подсистему ETW.
            </summary>
      <returns>
              Разделитель, используемый для разделения данных события.
               Разделителем по умолчанию является запятая.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe">
      <summary>
              Возвращает значение, указывающее, является ли прослушиватель трассировки потокобезопасным.
            </summary>
      <returns>
              Значение <see langword="true" />, если прослушиватель трассировки потокобезопасен; в противном случае — значение <see langword="false" />.
               Значение по умолчанию — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.DisplayName">
      <summary>
              Получает локализованное имя ключевого слова.
            </summary>
      <returns>
              Возвращает строку, содержащую локализованное имя для этого ключевого слова.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Name">
      <summary>
              Получает нелокализованное имя ключевого слова.
            </summary>
      <returns>
              Возвращает строку, содержащую нелокализованное имя ключевого слова.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Value">
      <summary>
              Возвращает числовое значение, связанное с ключевым словом.
            </summary>
      <returns>
              Возвращает значение <see langword="long" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.DisplayName">
      <summary>
              Возвращает локализованное имя для уровня событий.
               Имя описывает уровень серьезности событий, этот уровень используется для.
            </summary>
      <returns>
              Возвращает строку, содержащую локализованное имя для уровня событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Name">
      <summary>
              Получает нелокализованное имя уровня событий.
            </summary>
      <returns>
              Возвращает строку, содержащую нелокализованное имя уровня событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Value">
      <summary>
              Возвращает числовое значение уровня событий.
            </summary>
      <returns>
              Возвращает целочисленное значение.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog">
      <summary>
              Возвращает флаг, который указывает, является ли журнал событий классическим журналом событий.
               Классический журнал событий, которое события которого определены в файле .mc вместо манифеста (XML-файл), используемый поставщиком событий.
            </summary>
      <returns>
              Возвращает <see langword="true" /> Если журнал событий является классическим журналом и возвращает <see langword="false" /> Если журнал событий не классический журнал.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled">
      <summary>
              Возвращает или задает логическое значение, определяющее, включен ли журнал событий.
               Включенный журнал, в котором можно заносить в журнал события и отключенные журнал представляет собой одно в нельзя журнал событий.
            </summary>
      <returns>
              Возвращает <see langword="true" /> если журнал включен и возвращает <see langword="false" /> при отключении журнала.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath">
      <summary>
              Возвращает или задает путь к каталогу файла расположение файла, где хранятся события в журнале.
            </summary>
      <returns>
              Возвращает строку, содержащую путь к файлу журнала событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation">
      <summary>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" /> значение, указывающее, является ли журнал событий приложения, системы или настраиваемый журнал событий.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" /> значение.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode">
      <summary>
              Возвращает или задает <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" /> значение, определяющее способ обработки событий при заполнении журнала событий.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" /> значение.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName">
      <summary>
              Возвращает имя журнала событий.
            </summary>
      <returns>
              Возвращает строку, содержащую имя журнала событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType">
      <summary>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> значение, определяющее тип журнала событий.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> значение.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes">
      <summary>
              Возвращает или задает максимальный размер в байтах, который может быть файл журнала событий.
               По достижении максимального размера файл считается заполненным.
            </summary>
      <returns>
              Возвращает значение типа long, представляющее максимальный размер в байтах, что файл журнала событий может быть.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName">
      <summary>
              Возвращает имя поставщика событий, создавшего данный журнал событий.
            </summary>
      <returns>
              Возвращает строку, содержащую имя поставщика событий, создавшего данный журнал событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize">
      <summary>
              Возвращает размер буфера, который использует поставщик событий для публикации событий в журнале.
            </summary>
      <returns>
              Возвращает целочисленное значение, которое может иметь значение null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid">
      <summary>
              Возвращает управления глобально уникальный идентификатор (GUID) для журнала событий, если журнал является журналом отладки.
               Если данный журнал не является журналом отладки, это значение будет равно null.
            </summary>
      <returns>
              Возвращает значение GUID или значение null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords">
      <summary>
              Возвращает или задает маску ключевого слова, используемого поставщиком событий.
            </summary>
      <returns>
              Возвращает значение типа long, может иметь значение null, если поставщик событий не определил ключевые слова.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency">
      <summary>
              Получает максимальное время задержки используемый поставщиком событий при публикации событий в журнале.
            </summary>
      <returns>
              Возвращает целочисленное значение, которое может быть равно null, если время задержки не было указано поставщиком событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel">
      <summary>
              Возвращает или задает максимальный уровень события (определяющий важность события), разрешено регистрироваться в журнале событий.
               Это значение определяется поставщиком событий.
            </summary>
      <returns>
              Возвращает целочисленное значение, которое может быть равно null, если максимальный уровень события не был определен в событии поставщика.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers">
      <summary>
              Получает максимальное количество буферов, используемых поставщиком событий при публикации событий в журнале событий.
            </summary>
      <returns>
              Возвращает целое значение, представляющее максимальное количество буферов, используемых поставщиком событий при публикации событий в журнале событий.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers">
      <summary>
              Получает минимальное количество буферов, используемых поставщиком событий при публикации событий в журнале событий.
            </summary>
      <returns>
              Возвращает целое значение, представляющее минимальное количество буферов, используемых поставщиком событий при публикации событий в журнале событий.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames">
      <summary>
              Возвращает перечисляемую коллекцию имен всех поставщиков событий, которые могут публиковать события в данном журнале событий.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию строк, содержащих имена поставщиков событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor">
      <summary>
              Возвращает или задает дескриптор безопасности журнала событий.
               Дескриптор безопасности определяет пользователей и группы пользователей, которые могут читать и записывать в журнал событий.
            </summary>
      <returns>
              Возвращает строку, содержащую дескриптор безопасности для журнала событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogException.Message">
      <summary>
              Возвращает сообщение об ошибке, описывающее текущее исключение.
            </summary>
      <returns>
              Возвращает строку, содержащую сообщение об ошибке, описывающее текущее исключение.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.Attributes">
      <summary>
              Получает атрибуты файла журнала, связанного с этим журналом.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.CreationTime">
      <summary>
              Получает время создания файла журнала, связанных с журналом событий.
            </summary>
      <returns>
              Возвращает объект <see cref="T:System.DateTime" />.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.FileSize">
      <summary>
              Возвращает размер файла в байтах, связанных с журналом событий.
            </summary>
      <returns>
              Возвращает значение типа long.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.IsLogFull">
      <summary>
              Возвращает логическое значение, определяющее, ли файл журнала достигла максимального размера (журнал заполнен).
            </summary>
      <returns>
              Возвращает <see langword="true" /> если журнал заполнен и возвращает <see langword="false" /> Если журнал не заполнен.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastAccessTime">
      <summary>
              Получает данные времени последнего файла журнала, связанных с журналом событий получен.
            </summary>
      <returns>
              Возвращает объект <see cref="T:System.DateTime" />.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastWriteTime">
      <summary>
              Получает время последней записи данных в файл журнала, связанных с журналом событий.
            </summary>
      <returns>
              Возвращает объект <see cref="T:System.DateTime" />.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.OldestRecordNumber">
      <summary>
              Получает число наиболее старых записей в журнале событий.
            </summary>
      <returns>
              Возвращает значение типа long, представляющее количество наиболее старых записей в журнале событий.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.RecordCount">
      <summary>
              Возвращает количество записей событий в журнале событий.
            </summary>
      <returns>
              Возвращает значение типа long, представляющее количество записей событий в журнале событий.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.DisplayName">
      <summary>
              Получает локализованное имя журнала событий.
            </summary>
      <returns>
              Возвращает строку, содержащую локализованное имя журнала событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.IsImported">
      <summary>
              Возвращает логическое значение, которое определяет ли журнал событий импортируется, а не определен поставщик событий.
               Импортированный журнал событий определяется в другом поставщике.
            </summary>
      <returns>
              Возвращает <see langword="true" /> Если журнал событий импортируется поставщиком событий и возвращает <see langword="false" /> Если журнал событий не импортируется поставщиком событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.LogName">
      <summary>
              Получает нелокализованное имя журнала событий, связанных с этим объектом.
            </summary>
      <returns>
              Возвращает строку, содержащую нелокализованное имя журнала событий, связанных с этим объектом.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.ReverseDirection">
      <summary>
              Возвращает или задает логическое значение, которое определяет, следует ли считывать события, начиная с новейшего события в журнале событий до наиболее старого события в журнале.
            </summary>
      <returns>
              Возвращает <see langword="true" /> Если чтения начиная с новейшего события в журнале событий старые события и возвращает <see langword="false" /> Если события считываются из старых событий в журнале для последнего события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.Session">
      <summary>
              Возвращает или задает сеанс, получить доступ к службе журнала событий на локальном или удаленном компьютере.
               Этот объект можно задать для доступа к удаленной журнала событий путем создания <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> объекта или <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> объект с данным <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> объекта.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> объекта.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.TolerateQueryErrors">
      <summary>
              Возвращает или задает логическое значение, которое определяет, будет ли этот запрос для получения событий, если запрос содержит ошибку.
            </summary>
      <returns>
              <see langword="true" /> Указывает, что запрос будет продолжать извлекать события даже при ошибке запроса на некоторых журналах и <see langword="false" /> Указывает, что этот запрос не будет продолжать извлекать события в случае сбоя запроса.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize">
      <summary>
              Возвращает или задает количество событий, извлекаемых из потока событий при каждой операции считывания.
            </summary>
      <returns>
              Возвращает целочисленное значение.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus">
      <summary>
              Получает состояние каждого журнала событий или файла журнала, связанного с запросом события в данном объекте.
            </summary>
      <returns>
              Возвращает список <see cref="T:System.Diagnostics.Eventing.Reader.EventLogStatus" /> объектов, содержащих сведения о журнале событий, связанных с запросом события в данном объекте состоянии.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ActivityId">
      <summary>
              Возвращает глобальный уникальный идентификатор (GUID) для действия в процессе, для которого используется событие.
               Это позволит потребителям группировать связанные действия.
            </summary>
      <returns>
              Возвращает значение GUID.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Bookmark">
      <summary>
              Получает местозаполнитель (закладку), соответствующий на это событие.
               Это может использоваться в качестве местозаполнителя в потоке событий.
            </summary>
      <returns>
              Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ContainerLog">
      <summary>
              Возвращает имя журнала событий или файла журнала событий, в котором хранится событие.
            </summary>
      <returns>
              Возвращает строку, содержащую имя журнала событий или файла журнала событий, в котором хранится событие.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Id">
      <summary>
              Возвращает идентификатор для данного события.
               Все события с данным идентификатором представляют один и тот же тип события.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Keywords">
      <summary>
              Получает маску ключевого слова события.
               Получить значение <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames" /> Свойства, чтобы получить имя ключевые слова, используемые в этой маски.
            </summary>
      <returns>
              Возвращает значение типа long.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames">
      <summary>
              Возвращает отображаемые имена ключевых слов, используемых в маске ключевых слов для этого события.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию строк, содержащих отображаемые имена ключевых слов, используемых в маске ключевых слов для этого события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Level">
      <summary>
              Возвращает уровень события.
               Данный уровень указывает серьезность события.
               Имя уровня, получить значение <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName" /> Свойства.
            </summary>
      <returns>
              Возвращает значение в байтах.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName">
      <summary>
              Возвращает отображаемое имя уровня для данного события.
            </summary>
      <returns>
              Возвращает строку, содержащую отображаемое имя уровня для данного события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LogName">
      <summary>
              Возвращает имя журнала событий, где это событие регистрируется.
            </summary>
      <returns>
              Возвращает строку, содержащую имя журнала событий, который содержит это событие.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MachineName">
      <summary>
              Возвращает имя компьютера, на котором было зарегистрировано это событие.
            </summary>
      <returns>
              Возвращает строку, содержащую имя компьютера, на котором было зарегистрировано это событие.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MatchedQueryIds">
      <summary>
              Получает список идентификаторов запроса, которым соответствует данное событие.
               Данное событие соответствует запроса, если запрос будет возвращать это событие.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию целых значений.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Opcode">
      <summary>
              Получает код операция события.
               Код операций определяет числовое значение, идентифицирующее действие или пункт действия, который приложение при вызове события.
               Для имени кода операции получения значения <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName" /> свойство.
            </summary>
      <returns>
              Возвращает короткое значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName">
      <summary>
              Возвращает отображаемое имя кода операций для данного события.
            </summary>
      <returns>
              Возвращает строку, содержащую отображаемое имя кода операций для данного события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProcessId">
      <summary>
              Возвращает идентификатор процесса для поставщика событий, зарегистрировавшего данное событие.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Properties">
      <summary>
              Получает определяемые пользователем свойства события.
            </summary>
      <returns>
              Возвращает список <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" /> объектов.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderId">
      <summary>
              Возвращает глобальный уникальный идентификатор (GUID) поставщика событий, опубликовавшего данное событие.
            </summary>
      <returns>
              Возвращает значение GUID.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderName">
      <summary>
              Возвращает имя поставщика событий, опубликовавшего данное событие.
            </summary>
      <returns>
              Возвращает строку, содержащую имя поставщика событий, опубликовавшего данное событие.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Qualifiers">
      <summary>
              Получает номера квалификаторов, используемых для идентификации события.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RecordId">
      <summary>
              Получает идентификатор записи события в журнале.
            </summary>
      <returns>
              Возвращает значение типа long.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RelatedActivityId">
      <summary>
              Возвращает глобальный уникальный идентификатор (GUID) для связанного действия в процессе, для которого задействуется событие.
            </summary>
      <returns>
              Возвращает значение GUID.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Task">
      <summary>
              Получает идентификатор задачи для части приложения или компонента, публикующего событие.
               Задача — 16-разрядное значение с 16 максимальных значений зарезервировано.
               Этот тип позволяет использовать любое значение между 0x0000 и 0xffef для использования.
               Для имени задачи, получить значение <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName" /> Свойства.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName">
      <summary>
              Возвращает отображаемое имя задачи для события.
            </summary>
      <returns>
              Возвращает строку, содержащую отображаемое имя задачи для события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ThreadId">
      <summary>
              Получает идентификатор потока для потока, выполняющегося поставщика событий.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TimeCreated">
      <summary>
              Возвращает время, в <see cref="T:System.DateTime" /> формате, что было создано событие.
            </summary>
      <returns>
              Возвращает значение <see cref="T:System.DateTime" />.
               Может иметь значение NULL.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.UserId">
      <summary>
              Получает дескриптор безопасности пользователя, контекст которого используется для публикации события.
            </summary>
      <returns>
              Возвращает значение <see cref="T:System.Security.Principal.SecurityIdentifier" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Version">
      <summary>
              Возвращает номер версии для события.
            </summary>
      <returns>
              Возвращает значение в байтах.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogSession.GlobalSession">
      <summary>
              Получает статический предопределенный объект сеанса, подключается к службе журнала событий на локальном компьютере.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> представляющий предопределенный объект сеанса, подключается к службе журнала событий на локальном компьютере.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.LogName">
      <summary>
              Возвращает имя журнала событий, для которого производится получение кода состояния.
            </summary>
      <returns>
              Возвращает строку, содержащую имя журнала событий, для которого производится получение кода состояния.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.StatusCode">
      <summary>
              Возвращает код состояния или код ошибки в журнале событий.
               Данное состояние или ошибка является результатом операции подписки или чтения журнала событий.
            </summary>
      <returns>
              Возвращает целочисленное значение.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled">
      <summary>
              Определяет, начинается ли данный объект доставки событий для делегата события.
            </summary>
      <returns>
              Возвращает <see langword="true" /> Когда этот объект можно доставить события делегат события и возвращает <see langword="false" /> Когда этот объект был остановлен доставки.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Description">
      <summary>
              Получает шаблон описания, связанный с событием, использующим язык текущего потока для языка описания.
            </summary>
      <returns>
              Возвращает строку, содержащую шаблон описания, связанный с событием.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Id">
      <summary>
              Возвращает идентификатор события, определенный в поставщике событий.
            </summary>
      <returns>
              Возвращает <see langword="long" /> значение, являющееся идентификатором события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Keywords">
      <summary>
              Возвращает ключевые слова, связанные с событием, определенным в поставщике событий.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Level">
      <summary>
              Возвращает уровень, связанный с событием, определенным в поставщике событий.
               Уровень определяет серьезность события.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> объекта.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.LogLink">
      <summary>
              Получает ссылку на журнал событий, принимающий событие при публикации поставщиком данного события.
            </summary>
      <returns>
              Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Opcode">
      <summary>
              Возвращает код операции, связанные с этим событием, которое определяется поставщиком событий.
               Код операций определяет числовое значение, идентифицирующее действие или пункт действия, который приложение при вызове события.
            </summary>
      <returns>
              Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Task">
      <summary>
              Возвращает задачу, связанную с событием.
               Задача, идентифицирующая часть приложения или компонента, публикующего событие.
            </summary>
      <returns>
              Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Template">
      <summary>
              Возвращает строку шаблона для события.
               Шаблоны используются для описания данных, используемых поставщиком при публикации события.
               Шаблоны опционально указывают XML, предоставляющий структуру события.
               XML позволяет значений, предоставляемых издателем событий должны быть вставлены во время отрисовки события.
            </summary>
      <returns>
              Возвращает строку, содержащую шаблон для события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Version">
      <summary>
              Возвращает версию события, который определяет идентификатор события.
            </summary>
      <returns>
              Возвращает значение в байтах.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.DisplayName">
      <summary>
              Возвращает локализованное имя для кода операций событий.
            </summary>
      <returns>
              Возвращает строку, содержащую локализованное имя кода операций события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Name">
      <summary>
              Получает нелокализованное имя кода операций события.
            </summary>
      <returns>
              Возвращает строку, содержащую нелокализованное имя кода операций события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Value">
      <summary>
              Возвращает числовое значение, связанное с кодом операций события.
            </summary>
      <returns>
              Возвращает целочисленное значение.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventProperty.Value">
      <summary>
              Возвращает значение свойства события, указанное поставщиком событий при публикации события.
            </summary>
      <returns>
              Возвращает объект.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ActivityId">
      <summary>
              Возвращает глобальный уникальный идентификатор (GUID) для действия в процессе, для которого используется событие.
               Это позволит потребителям группировать связанные действия.
            </summary>
      <returns>
              Возвращает значение GUID.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Bookmark">
      <summary>
              Получает местозаполнитель (закладку), соответствующий на это событие.
               Это может использоваться в качестве местозаполнителя в потоке событий.
            </summary>
      <returns>
              Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Id">
      <summary>
              Возвращает идентификатор для данного события.
               Все события с данным идентификатором представляют один и тот же тип события.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Keywords">
      <summary>
              Получает маску ключевого слова события.
               Получить значение <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames" /> Свойства, чтобы получить имя ключевые слова, используемые в этой маски.
            </summary>
      <returns>
              Возвращает значение типа long.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames">
      <summary>
              Получает отображаемые имена ключевых слов, используемых в маске ключевых слов для данного события.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию строк, содержащих отображаемые имена ключевых слов, используемых в маске ключевых слов для данного события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Level">
      <summary>
              Возвращает уровень события.
               Данный уровень указывает серьезность события.
               Имя уровня, получить значение <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName" /> Свойства.
            </summary>
      <returns>
              Возвращает значение в байтах.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName">
      <summary>
              Возвращает отображаемое имя уровня для данного события.
            </summary>
      <returns>
              Возвращает строку, содержащую отображаемое имя уровня для данного события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LogName">
      <summary>
              Возвращает имя журнала событий, где это событие регистрируется.
            </summary>
      <returns>
              Возвращает строку, содержащую имя журнала событий, который содержит это событие.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.MachineName">
      <summary>
              Возвращает имя компьютера, на котором было зарегистрировано это событие.
            </summary>
      <returns>
              Возвращает строку, содержащую имя компьютера, на котором было зарегистрировано это событие.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Opcode">
      <summary>
              Получает код операция события.
               Код операций определяет числовое значение, идентифицирующее действие или пункт действия, который приложение при вызове события.
               Для имени кода операции получения значения <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName" /> свойство.
            </summary>
      <returns>
              Возвращает короткое значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName">
      <summary>
              Возвращает отображаемое имя кода операций для данного события.
            </summary>
      <returns>
              Возвращает строку, содержащую отображаемое имя кода операций для данного события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProcessId">
      <summary>
              Возвращает идентификатор процесса для поставщика событий, зарегистрировавшего данное событие.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Properties">
      <summary>
              Получает определяемые пользователем свойства события.
            </summary>
      <returns>
              Возвращает список <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" /> объектов.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderId">
      <summary>
              Возвращает глобальный уникальный идентификатор (GUID) поставщика событий, опубликовавшего данное событие.
            </summary>
      <returns>
              Возвращает значение GUID.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderName">
      <summary>
              Возвращает имя поставщика событий, опубликовавшего данное событие.
            </summary>
      <returns>
              Возвращает строку, содержащую имя поставщика событий, опубликовавшего данное событие.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Qualifiers">
      <summary>
              Получает номера квалификаторов, используемых для идентификации события.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RecordId">
      <summary>
              Получает идентификатор записи события в журнале.
            </summary>
      <returns>
              Возвращает значение типа long.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RelatedActivityId">
      <summary>
              Возвращает глобальный уникальный идентификатор (GUID) для связанного действия в процессе, для которого задействуется событие.
            </summary>
      <returns>
              Возвращает значение GUID.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Task">
      <summary>
              Получает идентификатор задачи для части приложения или компонента, публикующего событие.
               Задача — 16-разрядное значение с 16 максимальных значений зарезервировано.
               Этот тип позволяет использовать любое значение между 0x0000 и 0xffef для использования.
               Чтобы получить имя задачи, получить значение <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName" /> Свойства.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName">
      <summary>
              Возвращает отображаемое имя задачи для события.
            </summary>
      <returns>
              Возвращает строку, содержащую отображаемое имя задачи для события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ThreadId">
      <summary>
              Получает идентификатор потока для потока, выполняющегося поставщика событий.
            </summary>
      <returns>
              Возвращает целочисленное значение.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TimeCreated">
      <summary>
              Возвращает время, в <see cref="T:System.DateTime" /> формате, что было создано событие.
            </summary>
      <returns>
              Возвращает значение <see cref="T:System.DateTime" />.
               Может иметь значение NULL.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.UserId">
      <summary>
              Получает дескриптор безопасности пользователя, контекст которого используется для публикации события.
            </summary>
      <returns>
              Возвращает значение <see cref="T:System.Security.Principal.SecurityIdentifier" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Version">
      <summary>
              Возвращает номер версии для события.
            </summary>
      <returns>
              Возвращает значение в байтах.
               Это значение может быть null.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventException">
      <summary>
              Возвращает исключение, произошедшее при сбое подписки на событие.
               Исключение имеет описание причин сбоя подписки.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Exception" /> объекта.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventRecord">
      <summary>
              Получает запись события, опубликованную в журнале событий.
               Это событие соответствует критериям запроса, указанного в подписке на событие.
            </summary>
      <returns>
              Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.DisplayName">
      <summary>
              Возвращает локализованное имя для задачи события.
            </summary>
      <returns>
              Возвращает строку, содержащую локализованное имя для задачи события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.EventGuid">
      <summary>
              Возвращает событие глобально уникальный идентификатор (GUID) связанного с задачей.
            </summary>
      <returns>
              Возвращает значение GUID.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Name">
      <summary>
              Получает нелокализованное имя задачи события.
            </summary>
      <returns>
              Возвращает строку, содержащую нелокализованное имя задачи события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Value">
      <summary>
              Возвращает числовое значение, связанное с задачей.
            </summary>
      <returns>
              Возвращает целочисленное значение.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.DisplayName">
      <summary>
              Возвращает локализованное имя поставщика событий.
            </summary>
      <returns>
              Возвращает строку, содержащую локализованное имя поставщика событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Events">
      <summary>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" /> объектов, каждый из которых представляет событие, определенных в поставщике.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" /> объектов.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.HelpLink">
      <summary>
              Получает базовый URL-адрес, используемый для формирования запросов справки для событий в этом поставщике событий.
            </summary>
      <returns>
              Возвращает значение <see cref="T:System.Uri" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Id">
      <summary>
              Возвращает глобальный уникальный идентификатор (GUID) для поставщика событий.
            </summary>
      <returns>
              Возвращает значение GUID для поставщика событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Keywords">
      <summary>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> объектов, каждый из которых представляет ключевое слово event, определенные в событии поставщика.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> объектов.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Levels">
      <summary>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> объектов, каждый из которых представляет уровень, определенные в событии поставщика.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> объектов.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.LogLinks">
      <summary>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> объектов, каждый из которых представляет ссылку в журнал событий, который используется поставщиком событий.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> объектов.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.MessageFilePath">
      <summary>
              Возвращает путь к файлу, содержащему ресурс таблицы сообщений, содержащий строки, связанные с поставщиком метаданных.
            </summary>
      <returns>
              Возвращает строку, содержащую путь поставщика файл сообщения.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Name">
      <summary>
              Возвращает уникальное имя поставщика событий.
            </summary>
      <returns>
              Возвращает строку, содержащую уникальное имя поставщика событий.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Opcodes">
      <summary>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> объектов, каждый из которых представляет код операции, определенные в событии поставщика.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> объектов.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ParameterFilePath">
      <summary>
              Возвращает путь к файлу, содержащему ресурс таблицы сообщений, содержащий строки, используемые для замены параметров в описаниях события.
            </summary>
      <returns>
              Возвращает строку, содержащую путь к файлу, содержащему ресурс таблицы сообщений, содержащий строки, используемые для замены параметров в описаниях события.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ResourceFilePath">
      <summary>
              Возвращает путь к файлу, содержащему метаданные, связанные с поставщиком.
            </summary>
      <returns>
              Возвращает строку, содержащую путь к файлу, содержащему метаданные, связанные с поставщиком.
            </returns>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Tasks">
      <summary>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> объектов, каждый из которых представляет задачу, которая имеет определенные события поставщика.
            </summary>
      <returns>
              Возвращает перечисляемую коллекцию <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> объектов.
            </returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.BufferSize">
      <summary>
              Возвращает размер выходного буфера.
            </summary>
      <returns>
              Размер выходного буфера в байтах.
            </returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe">
      <summary>
              Возвращает значение, указывающее, является ли прослушиватель трассировки потокобезопасным.
            </summary>
      <returns>
              Всегда возвращает значение <see langword="true" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize">
      <summary>
              Возвращает максимальный размер файла журнала.
            </summary>
      <returns>
              Максимальный размер файла в байтах.
            </returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles">
      <summary>
              Возвращает максимальное количество файлов журнала.
            </summary>
      <returns>
              Максимальное количество файлов журнала, определяемое значением свойства <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> файла.
            </returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption">
      <summary>
              Возвращает для файла параметр хранения журнала трассировки.
            </summary>
      <returns>
              Одно из значений перечисления <see cref="T:System.Diagnostics.TraceLogRetentionOption" />.
               Значение по умолчанию — <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />.
            </returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.Writer">
      <summary>
              Возвращает или задает основной модуль записи текста, записывающий данные в файл журнала.
            </summary>
      <returns>
              Объект <see cref="T:System.IO.TextWriter" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Попытка присвоить значение <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" /> Свойства.
                </exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.RawValue">
      <summary>
              Задает или получает необработанные данные счетчиков.
            </summary>
      <returns>
              Необработанные данные счетчиков.
            </returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.Value">
      <summary>
              Задает или получает данные счетчика.
            </summary>
      <returns>
              Данные счетчиков.
            </returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstance.Counters">
      <summary>
              Извлекает коллекцию данных счетчиков для экземпляра набора счетчиков.
            </summary>
      <returns>
              Коллекция данных счетчиков, содержащаяся в экземпляре набора счетчиков.
            </returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.Int32)">
      <summary>
              Обращается к значению счетчика в коллекции с помощью указанного идентификатора счетчика.
            </summary>
      <param name="counterId">
                Идентификатор счетчика.
                 Это идентификатор, который использовался при добавлении счетчика в набор счетчиков.
              </param>
      <returns>
              Данные счетчиков.
            </returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)">
      <summary>
              Обращается к значению счетчика в коллекции с помощью указанного имени счетчика.
            </summary>
      <param name="counterName">
                Имя счетчика.
                 Это имя, используемое при добавлении счетчика в набор счетчиков.
              </param>
      <returns>
              Данные счетчиков.
            </returns>
    </member>
    <member name="P:System.Diagnostics.UnescapedXmlDiagnosticData.UnescapedXml">
      <summary>
              Возвращает или задает escape-последовательность строка XML-данных.
            </summary>
      <returns>
              Escape-последовательность XML-строку.
            </returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>
              Вид бинарной операции.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.ExpressionType" /> Объект, представляющий тип бинарной операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>
              Число аргументов.
            </summary>
      <returns>
              Число аргументов.
            </returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>
              Имена аргументов.
            </summary>
      <returns>
              Только для чтения коллекция имен аргументов.
            </returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>
              Возвращает значение, указывающее, если преобразование должно быть явным.
            </summary>
      <returns>
              <see langword="True" /> Если существует явное преобразование, в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>
              Целевой тип преобразования.
            </summary>
      <returns>
              <see cref="T:System.Type" /> Представляющий тип для преобразования.
            </returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>
              Получает сигнатуру аргументов на сайте вызова.
            </summary>
      <returns>
              Сигнатура аргументов на сайте вызова.
            </returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>
              Получает сигнатуру аргументов на сайте вызова.
            </summary>
      <returns>
              Сигнатура аргументов на сайте вызова.
            </returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>
              Возвращает значение, указывающее, если сравнение строк должно учитывать регистр имени члена.
            </summary>
      <returns>
              Значение true, если сравнение строк должно учитывать регистр, в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>
              Возвращает имя элемента для удаления.
            </summary>
      <returns>
              Имя члена, который требуется удалить.
            </returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>
              Выражения, представляющего <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.
            </summary>
      <returns>
              Выражения, представляющего <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>
              Возвращает значение, указывающее, является ли <see cref="T:System.Dynamic.DynamicMetaObject" /> имеет значение времени выполнения.
            </summary>
      <returns>
              Значение true, если <see cref="T:System.Dynamic.DynamicMetaObject" /> имеет значение времени выполнения, в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>
              Возвращает тип ограничения <see cref="T:System.Dynamic.DynamicMetaObject" />.
            </summary>
      <returns>
              <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" /> Если значение времени выполнения, тип <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> в противном случае.
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>
              Набор ограничений, в которых привязка является допустимой привязки.
            </summary>
      <returns>
              Набор ограничений привязки.
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>
              Возвращает <see cref="T:System.Type" /> значение времени выполнения или значение null, если <see cref="T:System.Dynamic.DynamicMetaObject" /> Нет значения, связанные с ним.
            </summary>
      <returns>
              <see cref="T:System.Type" /> Значение времени выполнения или значение null.
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>
              Значение выполнения, представленный этим <see cref="T:System.Dynamic.DynamicMetaObject" />.
            </summary>
      <returns>
              Значение выполнения, представленный этим <see cref="T:System.Dynamic.DynamicMetaObject" />.
            </returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Count">
      <summary>
              Возвращает число элементов в <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <returns>
              Число элементов в массиве <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#IsReadOnly">
      <summary>
              Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.
            </summary>
      <returns>
              Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Item(System.String)">
      <summary>
              Возвращает или задает элемент, имеющий указанный ключ.
            </summary>
      <param name="key">
                Ключ элемента, который требуется получить или задать.
              </param>
      <returns>
              Элемент с указанным ключом.
            </returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Keys">
      <summary>
              Возвращает <see cref="T:System.Collections.Generic.ICollection`1" /> содержащий ключи из <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <returns>
              <see cref="T:System.Collections.Generic.ICollection`1" /> Содержащий ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{System#String@System#Object}#Values">
      <summary>
              Возвращает коллекцию <see cref="T:System.Collections.Generic.ICollection`1" />, которая содержит значения в <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <returns>
              <see cref="T:System.Collections.Generic.ICollection`1" /> Содержащий значения в объект, реализующий <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>
              Получает сигнатуру аргументов на сайте вызова.
            </summary>
      <returns>
              Сигнатура аргументов на сайте вызова.
            </returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>
              Возвращает значение, указывающее, если сравнение строк должно учитывать регистр имени члена.
            </summary>
      <returns>
              Значение true, если регистр знаков не учитывается.
            </returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>
              Получает имя члена, который требуется получить.
            </summary>
      <returns>
              Имя члена, который требуется получить.
            </returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>
              Возвращает значение, указывающее, следует ли данная операция получения члена вызывать свойства при выполнении операции get.
               Если этот интерфейс не присутствует значение по умолчанию — true.
            </summary>
      <returns>
              Значение true, если данная операция получения члена должна вызывать свойства при выполнении операции получения; в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>
              Получает сигнатуру аргументов на сайте вызова.
            </summary>
      <returns>
              Сигнатура аргументов на сайте вызова.
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>
              Получает сигнатуру аргументов на сайте вызова.
            </summary>
      <returns>
              Сигнатура аргументов на сайте вызова.
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>
              Возвращает значение, указывающее, если сравнение строк должно учитывать регистр имени члена.
            </summary>
      <returns>
              Значение true, если регистр знаков не учитывается.
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>
              Возвращает имя элемента для вызова.
            </summary>
      <returns>
              Имя вызываемого члена.
            </returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>
              Получает сигнатуру аргументов на сайте вызова.
            </summary>
      <returns>
              Сигнатура аргументов на сайте вызова.
            </returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>
              Возвращает значение, указывающее, если сравнение строк должно учитывать регистр имени члена.
            </summary>
      <returns>
              Значение true, если регистр знаков не учитывается.
            </returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>
              Получает имя члена, который требуется получить.
            </summary>
      <returns>
              Имя члена, который требуется получить.
            </returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>
              Вид унарной операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> представляющий вид унарной операции.
            </returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>
              Тип результата операции.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип результата операции.
            </returns>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle">
      <summary>
              Возвращает дескриптор размещенного в памяти файла.
            </summary>
      <returns>
              Дескриптор размещенного в памяти файла.
            </returns>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset">
      <summary>
              [Поддерживается в .NET Framework 4.5.1 и более поздних версиях.] 
            
              Возвращает число байтов, по которым начальную позицию этого представления смещение от начала файла размещенный в памяти.
            </summary>
      <returns>
              Число байтов в начало файла размещенный в памяти и начальная позиция в этом представлении.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Объект, из которого был создан этот экземпляр является <see langword="null" />.
                </exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle">
      <summary>
              Получает дескриптор для просмотра размещенного в памяти файла.
            </summary>
      <returns>
              Программа-оболочка для дескриптор операционной системы для просмотра файла.
            </returns>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.PointerOffset">
      <summary>
              [Поддерживается в .NET Framework 4.5.1 и более поздних версиях.] 
            
              Возвращает число байтов, по которым начальную позицию этого представления смещение от начала файла размещенный в памяти.
            </summary>
      <returns>
              Число байтов в начало файла размещенный в памяти и начальная позиция в этом представлении.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Объект, из которого был создан этот экземпляр является <see langword="null" />.
                </exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SafeMemoryMappedViewHandle">
      <summary>
              Получает дескриптор для просмотра размещенного в памяти файла.
            </summary>
      <returns>
              Программа-оболочка для дескриптор операционной системы для просмотра файла.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
      <summary>
              Задает режим чтения для <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> объекта.
            </summary>
      <returns>
              <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> Для <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> объектов.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Недопустимый режим передачи.
                   Для анонимных каналов, только <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> поддерживается.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Режим передачи <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Подключение разорвано или другой ошибки ввода-вывода.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
      <summary>
              Возвращает режим передачи, поддерживаемый текущим каналом.
            </summary>
      <returns>
              <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> Поддерживаемый текущим каналом.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
      <summary>
              Возвращает безопасный дескриптор для <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> объект, который в настоящее время подключен к <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> объекта.
            </summary>
      <returns>
              Дескриптор для <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> объект, который в настоящее время подключен к <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> объекта.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
      <summary>
              Задает режим чтения для <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> объекта.
               Анонимные каналы, режимом передачи необходимо <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.
            </summary>
      <returns>
              Режим чтения для <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> объекта.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Недопустимый режим передачи.
                   Для анонимных каналов, только <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> поддерживается.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Значение свойства <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />, который не поддерживается для анонимных каналов.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Подключение разорвано или другой ошибки ввода-вывода.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
      <summary>
              Возвращает режим передачи, поддерживаемый текущим каналом.
            </summary>
      <returns>
              <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> Поддерживаемый текущим каналом.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.NamedPipeClientStream.NumberOfServerInstances">
      <summary>
              Получает число экземпляров сервера с одинаковым именем канала.
            </summary>
      <returns>
              Число экземпляров сервера с одинаковым именем канала.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Дескриптор канала не был задан.
                
                  -или-
                
                  Текущий <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> объект еще не подключались к <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> объекта.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван или возникла ошибка ввода-вывода.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Основной дескриптор канала закрыт.
                </exception>
    </member>
    <member name="P:System.IO.Pipes.PipeAccessRule.PipeAccessRights">
      <summary>
              Возвращает <see cref="T:System.IO.Pipes.PipeAccessRights" /> флаги, связанные с текущим <see cref="T:System.IO.Pipes.PipeAccessRule" /> объекта.
            </summary>
      <returns>
              Поразрядное сочетание значений <see cref="T:System.IO.Pipes.PipeAccessRights" />.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeAuditRule.PipeAccessRights">
      <summary>
              Возвращает <see cref="T:System.IO.Pipes.PipeAccessRights" /> флаги, связанные с текущим <see cref="T:System.IO.Pipes.PipeAuditRule" /> объекта.
            </summary>
      <returns>
              Поразрядное сочетание значений <see cref="T:System.IO.Pipes.PipeAccessRights" />.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRightType">
      <summary>
              Возвращает <see cref="T:System.Type" /> защищаемого объекта, связанного с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <returns>
              Тип защищаемого объекта, связанного с текущим <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRuleType">
      <summary>
              Возвращает <see cref="T:System.Type" /> объекта, связанного с правилами доступа текущего <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <returns>
              Тип объекта, связанного с правилами доступа текущего <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AuditRuleType">
      <summary>
              Возвращает <see cref="T:System.Type" /> объекта, связанного с правилами аудита текущего <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </summary>
      <returns>
              Тип объекта, связанного с правилами аудита текущего <see cref="T:System.IO.Pipes.PipeSecurity" /> объекта.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanRead">
      <summary>
              Возвращает значение, указывающее, поддерживает ли текущий поток операции чтения.
            </summary>
      <returns>
              Значение <see langword="true" />, если поток поддерживает операции чтения, в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanSeek">
      <summary>
              Возвращает значение, указывающее, поддерживает ли текущий поток операции поиска.
            </summary>
      <returns>
              Значение <see langword="false" /> во всех случаях.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanWrite">
      <summary>
              Возвращает значение, указывающее, поддерживает ли текущий поток операции записи.
            </summary>
      <returns>
              Значение <see langword="true" />, если поток поддерживает операции записи, в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.InBufferSize">
      <summary>
              Возвращает размер (в байтах) входящего буфера для канала.
            </summary>
      <returns>
              Целое значение, представляющее размер входящего буфера (в байтах).
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Чтение потока невозможно.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Канал ожидает соединения.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван, или возникла другая ошибка ввода-вывода.
                </exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsAsync">
      <summary>
              Возвращает значение, показывающее, как был открыт объект <see cref="T:System.IO.Pipes.PipeStream" /> — синхронно или асинхронно.
            </summary>
      <returns>
              Значение <see langword="true" />, если объект <see cref="T:System.IO.Pipes.PipeStream" /> был открыт асинхронно, в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsConnected">
      <summary>
              Возвращает или задает значение, указывающее, подключен ли объект <see cref="T:System.IO.Pipes.PipeStream" />.
            </summary>
      <returns>
              Значение <see langword="true" />, если объект <see cref="T:System.IO.Pipes.PipeStream" /> подключен; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsHandleExposed">
      <summary>
              Возвращает значение, указывающее, предоставлен ли дескриптор в объект <see cref="T:System.IO.Pipes.PipeStream" />.
            </summary>
      <returns>
              Значение <see langword="true" />, если дескриптор представлен в объект <see cref="T:System.IO.Pipes.PipeStream" />; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsMessageComplete">
      <summary>
              Возвращает значение, указывающее, содержатся ли еще данные в сообщении, возвращенном из последней операции чтения.
            </summary>
      <returns>
              Значение <see langword="true" />, если в сообщении больше нет символов для чтения, в противном случае — значение <see langword="false" />.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Канал не подключен.
                
                  -или-
                
                  Дескриптор канала не был задан.
                
                  -или-
                
                  Свойство <see cref="P:System.IO.Pipes.PipeStream.ReadMode" /> канала не имеет значение <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Length">
      <summary>
              Возвращает длину потока в байтах.
            </summary>
      <returns>
              0 во всех случаях.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Создается всегда.
                </exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.OutBufferSize">
      <summary>
              Возвращает размер (в байтах) исходящего буфера для канала.
            </summary>
      <returns>
              Размер исходящего буфера в байтах.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Запись в поток невозможна.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Канал ожидает соединения.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван, или возникла другая ошибка ввода-вывода.
                </exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Position">
      <summary>
              Возвращает или задает текущую позицию в текущем потоке.
            </summary>
      <returns>
              0 во всех случаях.
            </returns>
      <exception cref="T:System.NotSupportedException">
                  Создается всегда.
                </exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.ReadMode">
      <summary>
              Возвращает или задает режим чтения для объекта <see cref="T:System.IO.Pipes.PipeStream" />.
            </summary>
      <returns>
              Одно из значений <see cref="T:System.IO.Pipes.PipeTransmissionMode" />, которое указывает, как объект <see cref="T:System.IO.Pipes.PipeStream" /> читает данные из канала.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Указанное значение не является допустимым значением <see cref="T:System.IO.Pipes.PipeTransmissionMode" />.
                </exception>
      <exception cref="T:System.NotSupportedException">
                  Указанное значение не является поддерживаемым значением <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> для этого потока канала.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Дескриптор не был задан.
                
                  -или-
                
                  Канал ожидает соединения с указанным клиентом.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван или в указанном клиенте возникла ошибка ввода-вывода.
                </exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.SafePipeHandle">
      <summary>
              Возвращает безопасный дескриптор для локального конца канала, инкапсулируемого текущим объектом <see cref="T:System.IO.Pipes.PipeStream" />.
            </summary>
      <returns>
              Объект <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> для канала, инкапсулируемого текущим объектом <see cref="T:System.IO.Pipes.PipeStream" />.
            </returns>
      <exception cref="T:System.InvalidOperationException">
                  Дескриптор канала не был задан.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.TransmissionMode">
      <summary>
              Возвращает режим передачи, поддерживаемый текущим каналом.
            </summary>
      <returns>
              Одно из значений <see cref="T:System.IO.Pipes.PipeTransmissionMode" />, указывающих режим передачи, поддерживаемый текущим каналом.
            </returns>
      <exception cref="T:System.ObjectDisposedException">
                  Канал закрыт.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                  Дескриптор не был задан.
                
                  -или-
                
                  Канал ожидает соединения в анонимной операции клиента/сервера или с именованным клиентом.
                </exception>
      <exception cref="T:System.IO.IOException">
                  Канал разорван, или возникла другая ошибка ввода-вывода.
                </exception>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>
              Возвращает тип данных в коллекции, представляемый этим экземпляром.
            </summary>
      <returns>
              Тип данных в коллекции, представляемый этим экземпляром.
            </returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>
              Возвращает дерево выражения, связанное с или, представляющий этот экземпляр.
            </summary>
      <returns>
              Дерево выражения, связанное с или, представляющий этот экземпляр.
            </returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>
              Возвращает поставщик запросов, связанный с данным экземпляром.
            </summary>
      <returns>
              Поставщик запросов, связанный с данным экземпляром.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>
              Возвращает значение, которое указывает, можно ли сократить узел дерева выражений.
            </summary>
      <returns>
              Значение true, если узел дерева выражений можно сократить; в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>
              Получает функцию преобразования типа, используемую операцию объединения или составного присваивания.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.LambdaExpression" />, представляющий тип функции преобразования.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>
              Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидируется вызов оператора.
            </summary>
      <returns>
              <see langword="true" /> Если узел представляет удаленный вызов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>
              Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидируется вызов оператора, тип возврата которого удален обнуляемый тип.
            </summary>
      <returns>
              <see langword="true" /> Если оператор возврата, тип удален обнуляемый тип; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>
              Возвращает левый операнд бинарной операции.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляющий левый операнд бинарной операции.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>
              Возвращает реализацию метода для бинарной операции.
            </summary>
      <returns>
              <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>
              Получает правый операнд бинарной операции.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляет правый операнд бинарной операции.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>
              Получает выражения в этом блоке.
            </summary>
      <returns>
              Только для чтения коллекция, содержащая все выражения в этом блоке.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>
              Получает последнее выражение в этом блоке.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Объект, представляющий последнее выражение в этом блоке.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.BlockExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>
              Получает переменные, определенные в этом блоке.
            </summary>
      <returns>
              Только для чтения коллекция, содержащая все переменные, определенные в этом блоке.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>
              Получает тело блока catch.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Объект, представляющий тело catch.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>
              Возвращает текст <see cref="T:System.Linq.Expressions.CatchBlock" /> фильтра.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Объект, представляющий тело <see cref="T:System.Linq.Expressions.CatchBlock" /> фильтра.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>
              Возвращает тип <see cref="T:System.Exception" /> перехватывает этот обработчик.
            </summary>
      <returns>
              <see cref="T:System.Type" /> Объект, представляющий тип <see cref="T:System.Exception" /> перехватывает этот обработчик.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>
              Получает ссылку на <see cref="T:System.Exception" /> объекта, Перехваченный данным обработчиком.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.ParameterExpression" /> Объект, представляющий ссылку на <see cref="T:System.Exception" /> объекта, Перехваченный данным обработчиком.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>
              Возвращает выражение для выполнения, если проверка имеет значение <see langword="false" />.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляющий выражение для выполнения, если проверка не <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>
              Возвращает выражение для выполнения, если проверка имеет значение <see langword="true" />.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляющий выражение для выполнения, если проверка не <see langword="true" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>
              Получает проверку условной операции.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляющий теста условной операции.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>
              Возвращает значение константного выражения.
            </summary>
      <returns>
              <see cref="T:System.Object" /> Равно значению, представленный выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>
              Возвращает <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> представляющий исходный файл.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>
              Получает конечный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
      <returns>
              Номер конечного столбца кода, которое было создано заключенное в оболочку выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>
              Получает конечную строку <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
      <returns>
              Номер конечной строки кода, который был использован для заключенное в оболочку выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>
              Возвращает значение, указывающее, если <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки последовательности.
            </summary>
      <returns>
              Значение true, если <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки последовательности, в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>
              Возвращает начальный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
      <returns>
              Номер начального столбца кода, который был использован для заключенное в оболочку выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>
              Возвращает начальную строку <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
      <returns>
              Номер начальной строки кода, который был использован для заключенное в оболочку выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>
              Получает аргументы динамической операции.
            </summary>
      <returns>
              Коллекции только для чтения, содержащие аргументы динамической операции.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>
              Получает <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, который определяет поведение во время выполнения динамического сайта.
            </summary>
      <returns>
              Объект <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, который определяет поведение во время выполнения динамического сайта.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>
              Получает тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" />, представляющий тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              Возвращает число аргументов для узла дерева выражения.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>
              Получает метод экземпляра, который используется для добавления элемента в коллекцию <see cref="T:System.Collections.IEnumerable" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра, который добавляет элемент в коллекцию.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>
              Получает коллекцию аргументов, передаваемых в метод, который добавляет элемент в коллекцию <see cref="T:System.Collections.IEnumerable" />.
            </summary>
      <returns>
              Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы для метода, который добавляет элемент в коллекцию.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              Возвращает число аргументов для узла дерева выражения.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>
              Указывает, что узел можно сократить до более простого.
               Если возвращается значение true, для получения сокращенной формы можно вызвать Reduce().
            </summary>
      <returns>
              Значение true, если узел можно сократить; в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>
              Получает тип узла данного объекта <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Одно из значений <see cref="T:System.Linq.Expressions.ExpressionType" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="T:System.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>
              Тип выражения «перейти к».
               Служит только в информационных целях.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> Объект, представляющий тип выражения «перейти к».
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>
              Целевая метка, где перейти из данного узла.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.LabelTarget" /> Объект, представляющий целевой метку для данного узла.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.GotoExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>
              Значение, передаваемое в целевой объект или значение null, если целевой тип — System.Void.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Объект, представляющий значение передается в целевой или значение null.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary>
              Возвращает число аргументов для узла дерева выражения.
                Не следует использовать этот тип.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <returns>
              Число аргументов для узла дерева выражения в виде <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary>
              Получает тип делегата, используемого CallSite, который является типом правил, используемых в полиморфном встроенном кэше динамического выражения.
            </summary>
      <returns>
              Тип делегата, используемый CallSite.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>
              Получает аргументы, которые будут использоваться для индексации свойства или массива.
            </summary>
      <returns>
              Предназначенная только для чтения коллекция, содержащая аргументы, которые будут использоваться для индексации свойства или массива.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>
              Получает <see cref="T:System.Reflection.PropertyInfo" /> для свойства, если выражение представляет индексированное свойство; в противном случае возвращает NULL.
            </summary>
      <returns>
              <see cref="T:System.Reflection.PropertyInfo" /> для свойства, если выражение представляет индексированное свойство; в противном случае значение NULL.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>
              Объект для индексации.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.Expression" />, который представляет объект для индексации.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              Возвращает число аргументов для узла дерева выражения.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.IndexExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>
              Получает аргументы, к которым применяется делегат или лямбда-выражение.
            </summary>
      <returns>
              Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы, к которым применяется делегат.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>
              Получает делегат или лямбда-выражение для применения.
            </summary>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат для применения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              Возвращает число аргументов для узла дерева выражения.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <returns>
              Число аргументов для узла дерева выражения в виде <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>
              Значение <see cref="T:System.Linq.Expressions.LabelExpression" /> после достижения метки через стандартный поток управления (например, является не вышла).
            </summary>
      <returns>
              Выражение объект, представляющий значение <see cref="T:System.Linq.Expressions.LabelExpression" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>
              <see cref="T:System.Linq.Expressions.LabelTarget" /> Связанный с меткой.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.LabelTarget" /> Связанный с меткой.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.LabelExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>
              Получает имя метки.
            </summary>
      <returns>
              Имя метки.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>
              Тип значения, которое передается при переходе к метке (или <see cref="T:System.Void" /> Если значение не должно быть передано).
            </summary>
      <returns>
              <see cref="T:System.Type" /> Объект, представляющий тип значения, которое передается при переходе к метке или <see cref="T:System.Void" /> Если значение не должно быть передано
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>
              Возвращает тело лямбда-выражения.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляющий тело лямбда-выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>
              Возвращает имя лямбда-выражения.
            </summary>
      <returns>
              Имя лямбда-выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>
              Возвращает параметры лямбда-выражения.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> из <see cref="T:System.Linq.Expressions.ParameterExpression" /> объектов, которые представляют параметры лямбда-выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>
              Возвращает возвращаемый тип лямбда-выражения.
            </summary>
      <returns>
              <see cref="T:System.Type" /> Объект, представляющий тип лямбда-выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>
              Возвращает значение, указывающее, что лямбда-выражения компилируются с оптимизацию вызовов с префиксом tail.
            </summary>
      <returns>
              Значение true, если лямбда-выражения компилируются с помощью заключительного вызова оптимизации, в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>
              Возвращает значение, которое указывает, можно ли сократить узел дерева выражений.
            </summary>
      <returns>
              Значение true, если узел можно сократить; в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>
              Инициализаторы элементов, которые используются для инициализации коллекции.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> из <see cref="T:System.Linq.Expressions.ElementInit" /> объектов, которые представляют элементы, которые используются для инициализации коллекции.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>
              Возвращает выражение, содержащее вызов в конструктор типа коллекции.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.NewExpression" /> представляющий вызов конструктора типа коллекции.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>
              Возвращает <see cref="T:System.Linq.Expressions.Expression" /> именно тело цикла.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Именно тело цикла.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>
              Возвращает <see cref="T:System.Linq.Expressions.LabelTarget" /> используемый в теле цикла как цель оператора break.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.LabelTarget" /> Используемая телом цикла как цель оператора break.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>
              Возвращает <see cref="T:System.Linq.Expressions.LabelTarget" /> используемая телом цикла в качестве цель оператора continue.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.LabelTarget" /> Используемая телом цикла в качестве цель оператора continue.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.LoopExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>
              Возвращает выражение для назначения полю или свойству.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляющий значение, присваиваемое полю или свойству.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>
              Возвращает тип привязки, который представлен.
            </summary>
      <returns>
              Одно из значений <see cref="T:System.Linq.Expressions.MemberBindingType" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>
              Возвращает поле или свойство для инициализации.
            </summary>
      <returns>
              <see cref="T:System.Reflection.MemberInfo" /> Представляющий поле или свойство для инициализации.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>
              Возвращает объект, содержащий поле или свойство.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляющий объект, содержащий поле или свойство.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>
              Возвращает поле или свойство для доступа.
            </summary>
      <returns>
              <see cref="T:System.Reflection.MemberInfo" /> Представляющий поле или свойство для доступа.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>
              Возвращает тип узла данного объекта <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>
              Получает привязки, описывающие способы инициализации членов вновь созданный объект.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> из <see cref="T:System.Linq.Expressions.MemberBinding" /> объекты, описывающие способы инициализации членов.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>
              Возвращает значение, которое указывает, можно ли сократить узел дерева выражений.
            </summary>
      <returns>
              Значение true, если узел можно сократить; в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>
              Возвращает выражение, представляющее вызов конструктора.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.NewExpression" /> представляющий вызов конструктора.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>
              Инициализаторы элементов для инициализации коллекции элементов созданного объекта.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> из <see cref="T:System.Linq.Expressions.ElementInit" /> объектов для инициализации коллекции элементов с.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>
              Получает привязки, описывающие способы инициализации элементов элемента.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> из <see cref="T:System.Linq.Expressions.MemberBinding" /> объекты, описывающие способы инициализации элементов элемента.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>
              Получает коллекцию выражений, представляющих аргументы вызываемого метода.
            </summary>
      <returns>
              Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющая аргументы для вызываемого метода.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>
              Получает <see cref="T:System.Reflection.MethodInfo" /> для вызываемого метода.
            </summary>
      <returns>
              Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий вызываемый метод.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>
              Получает выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее экземпляр для вызовов методов экземпляра, или значение NULL для вызовов статических методов.
            </summary>
      <returns>
              Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее получающий объект метода.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              Возвращает число аргументов для узла дерева выражения.
                Не следует использовать этот член.
                Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.
            </summary>
      <returns>
              Число аргументов для узла дерева выражения как  <see cref="T:System.Int32" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>
              Возвращает границы массива, если значение <see cref="P:System.Linq.Expressions.Expression.NodeType" /> свойство <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, или значения для инициализации элементов нового массива, если значение <see cref="P:System.Linq.Expressions.Expression.NodeType" /> свойство <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> из <see cref="T:System.Linq.Expressions.Expression" /> объектов, которые представляют либо границ массива или значения инициализации.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>
              Получает аргументы для конструктора.
            </summary>
      <returns>
              Коллекция объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющая аргументы для конструктора.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>
              Получает вызванный конструктор.
            </summary>
      <returns>
              Объект <see cref="T:System.Reflection.ConstructorInfo" />, представляющий вызываемый конструктор.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>
              Получает члены, которые могут извлечь значения полей, инициализированных с помощью аргументов конструктора.
            </summary>
      <returns>
              Коллекция объектов <see cref="T:System.Reflection.MemberInfo" />, представляющих члены, которые могут извлечь значения полей, инициализированных с помощью аргументов конструктора.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>
              Получает число аргументов для узла дерева выражения.
            </summary>
      <returns>
              Число аргументов для узла дерева выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.NewExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>
              Указывает, что эта ParameterExpression следует рассматривать <see langword="ByRef" /> параметр.
            </summary>
      <returns>
              Значение true, если ParameterExpression является <see langword="ByRef" /> параметром, в противном случае — false.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>
              Возвращает имя параметра или переменной.
            </summary>
      <returns>
              Строка <see cref="T:System.String" />, где содержится имя параметра.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>
              Переменные или параметры, к которым среда выполнения предоставляет доступ.
            </summary>
      <returns>
              Только для чтения коллекция, содержащая параметры, которые будут предоставляться доступ среды выполнения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>
              Получает тело блока case.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Объект, представляющий тело блока case.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>
              Возвращает значения для данного блока case.
               Этот вариант выбран для выполнения при <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> соответствует любому из следующих значений.
            </summary>
      <returns>
              Только для чтения коллекция значений данного блока case.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>
              Возвращает коллекцию <see cref="T:System.Linq.Expressions.SwitchCase" /> объектов для коммутатора.
            </summary>
      <returns>
              Коллекция объектов <see cref="T:System.Linq.Expressions.SwitchCase" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>
              Получает метод проверки равенства, если таковые имеются.
            </summary>
      <returns>
              <see cref="T:System.Reflection.MethodInfo" /> Объект, представляющий метод проверки равенства.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>
              Возвращает тест для коммутатора.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Объект, представляющий теста для коммутатора.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>
              Возвращает тест для коммутатора.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Объект, представляющий теста для коммутатора.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>
              Возвращает уникальный идентификатор типа документа, если таковые имеются.
               По умолчанию идентификатор GUID для текстового файла.
            </summary>
      <returns>
              Уникальный идентификатор типа документа.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>
              Имя исходного файла.
            </summary>
      <returns>
              Строка, представляющая имя исходного файла.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>
              Возвращает уникальный идентификатор языка, если таковые имеются.
            </summary>
      <returns>
              Уникальный идентификатор языка
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>
              Возвращает уникальный идентификатор поставщика языка, если таковые имеются.
            </summary>
      <returns>
              Уникальный идентификатор поставщика языка.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>
              Возвращает <see cref="T:System.Linq.Expressions.Expression" /> представляющий тело блока try.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляющий тело блока try.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>
              Возвращает <see cref="T:System.Linq.Expressions.Expression" /> представляет блок fault.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляет блок fault.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>
              Возвращает <see cref="T:System.Linq.Expressions.Expression" /> представляет блок finally.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляет блок finally.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>
              Возвращает коллекцию <see cref="T:System.Linq.Expressions.CatchBlock" /> выражения, связанный с блоком try.
            </summary>
      <returns>
              Коллекция <see cref="T:System.Linq.Expressions.CatchBlock" /> выражения, связанный с блоком try.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.TryExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>
              Получает операнд выражения операции проверки типа.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляет операнд выражения операции проверки типа.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>
              Возвращает тип узла данного выражения.
               Узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> при переопределении этого метода.
            </summary>
      <returns>
              Тип <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>
              Получает операнд типа операции проверки типа.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" /> представляет операнд типа операции проверки типа.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>
              Возвращает значение, которое указывает, можно ли сократить узел дерева выражений.
            </summary>
      <returns>
              Значение true, если узел можно сократить; в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>
              Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора.
            </summary>
      <returns>
              <see langword="true" /> Если узел представляет удаленный вызов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>
              Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора, тип возврата которого удален обнуляемый тип.
            </summary>
      <returns>
              <see langword="true" /> Если оператор возврата, тип удален обнуляемый тип; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>
              Возвращает реализацию метода для унарной операции.
            </summary>
      <returns>
              <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>
              Возвращает тип узла данного <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>
              Получает операнд унарной операции.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Представляет операнд унарной операции.
            </returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>
              Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.
            </summary>
      <returns>
              Тип <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />, представляющий этот статичный тип выражения.
            </returns>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>
              Возвращает ключ <see cref="T:System.Linq.IGrouping`2" />.
            </summary>
      <returns>
              Ключ <see cref="T:System.Linq.IGrouping`2" />.
            </returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>
              Возвращает коллекцию пар количество ключей и значений в <see cref="T:System.Linq.ILookup`2" />.
            </summary>
      <returns>
              Число пар ключ значение коллекции в <see cref="T:System.Linq.ILookup`2" />.
            </returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>
              Возвращает <see cref="T:System.Collections.Generic.IEnumerable`1" /> индексированных последовательность значений с помощью указанного ключа.
            </summary>
      <param name="key">
                Ключ требуемой последовательности значений.
              </param>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Последовательность значений индексированных с указанным ключом.
            </returns>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>
              Возвращает тип элементов, которые возвращаются, когда дерево выражения, связанный с этим экземпляром <see cref="T:System.Linq.IQueryable" /> выполняется.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" /> представляющий тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом.
            </returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>
              Возвращает дерево выражения, связанного с экземпляром <see cref="T:System.Linq.IQueryable" />.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Связанный с этим экземпляром <see cref="T:System.Linq.IQueryable" />.
            </returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>
              Возвращает поставщик запросов, связанный с этим источником данных.
            </summary>
      <returns>
              <see cref="T:System.Linq.IQueryProvider" /> Связанный с этим источником данных.
            </returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>
              Возвращает коллекцию пар количество ключей и значений в <see cref="T:System.Linq.Lookup`2" />.
            </summary>
      <returns>
              Число пар ключ значение коллекции в <see cref="T:System.Linq.Lookup`2" />.
            </returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>
              Возвращает коллекцию значений, индексированных по указанному ключу.
            </summary>
      <param name="key">
                Ключ требуемой коллекции значений.
              </param>
      <returns>
              Коллекция значений, индексированных по указанному ключу.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementBindAttribute.Schema">
      <summary>
              Возвращает или задает значение, определяющее тип вывода, который возвращает метод, помеченный атрибутом ManagementEnumerator.
            </summary>
      <returns>
              A <see cref="T:System.Type" /> значение, указывающее тип вывода, метод помечен атрибутом <see cref="ManagementBind" /> будет выводить атрибут.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Mode">
      <summary>
              Возвращает или задает режим свойство, которое указывает, как можно быстрее применения изменений к нему или при вызове метода commit.
            </summary>
      <returns>
              Возвращает <see cref="T:System.Management.Instrumentation.ManagementConfigurationType" /> указывающее, использует ли свойство WMI <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.Apply" /> или <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit" /> режиме.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Schema">
      <summary>
              Возвращает или задает значение, определяющее тип вывода, который возвращает свойство, помеченное атрибутом ManagementConfiguration.
            </summary>
      <returns>
              A <see cref="T:System.Type" /> возвращает значение, представляющее тип выходных данных, свойство, помеченное атрибутом ManagementConfiguration.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.External">
      <summary>
              Возвращает или задает значение, указывающее, представляет ли класс в поставщике реализован класс WMI внешних к текущей сборке.
            </summary>
      <returns>
              Логическое значение, равное true, если класс представляет внешний класс WMI и false в противном случае.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Name">
      <summary>
              Возвращает или задает имя класса WMI.
            </summary>
      <returns>
              Строка, содержащая имя класса WMI.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton">
      <summary>
              Указывает, представляет ли связанный класс singleton-классом WMI.
            </summary>
      <returns>
              Логическое значение, равное true, если класс представляет singleton-класс WMI и false в противном случае.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema">
      <summary>
              Возвращает или задает значение, определяющее тип вывода, который возвращает метод, помеченный атрибутом ManagementEnumerator.
            </summary>
      <returns>
              A <see cref="T:System.Type" /> значение, указывающее тип вывода, метод помечен атрибутом <see cref="ManagementEnumerator" /> будет выводить атрибут.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementMemberAttribute.Name">
      <summary>
              Возвращает или задает имя элемента управления.
            </summary>
      <returns>
              Возвращает строку, которая представляет имя элемента управления.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementNameAttribute.Name">
      <summary>
              Возвращает или задает понятное имя объекта.
               Этот объект может быть параметра метода или свойства, отмеченные ManagementProbe, ManagementKey или ManagementConfiguration атрибуты.
            </summary>
      <returns>
              A <see cref="T:System.String" /> значение, указывающее, понятное пользователям имя для объекта.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementProbeAttribute.Schema">
      <summary>
              Возвращает или задает значение, определяющее тип вывода, который возвращает свойство, помеченное атрибутом ManagementProbe.
            </summary>
      <returns>
              A <see cref="T:System.Type" /> значение, которое указывает тип вывода, который возвращает свойство, помеченное атрибутом ManagementProbe.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementReferenceAttribute.Type">
      <summary>
              Возвращает или задает имя типа, на который указывает ссылка.
            </summary>
      <returns>
              Строка, содержащая имя типа, на который указывает ссылка.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementRemoveAttribute.Schema">
      <summary>
              Возвращает или задает значение, определяющее тип вывода, который возвращает объект, помеченный атрибутом ManagementRemove.
            </summary>
      <returns>
              Объект <see cref="T:System.Type" /> будет выводить значение, указывающее тип вывода, который возвращает объект, помеченный атрибутом Remove.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementTaskAttribute.Schema">
      <summary>
              Возвращает или задает значение, определяющее тип вывода, который возвращает метод, помеченный атрибутом ManagementTask.
            </summary>
      <returns>
              A <see cref="T:System.Type" /> значение, которое указывает тип вывода, который возвращает метод, помеченный атрибутом ManagementTask.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingGroup">
      <summary>
              Возвращает или задает группу размещения для поставщика WMI.
            </summary>
      <returns>
              A <see cref="T:System.String" /> значение, указывающее группу размещения для поставщика WMI.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingModel">
      <summary>
              Возвращает или задает модель размещения для поставщика WMI.
            </summary>
      <returns>
              A <see cref="T:System.Management.Instrumentation.ManagementHostingModel" /> значение, указывающее модель размещения поставщика WMI.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.IdentifyLevel">
      <summary>
              Возвращает или задает значение, указывающее, может ли поставщик WMI олицетворять вызывающий объект.
               Если значение равно false, поставщик не может олицетворять, а если значение равно true, поставщик может олицетворять.
            </summary>
      <returns>
              Логическое значение, указывающее, является ли поставщик может или не может олицетворять вызывающий объект.
               Если значение равно false, поставщик не может олицетворять, а если значение равно true, поставщик может олицетворять.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.NamespaceSecurity">
      <summary>
              Возвращает или задает строку языка определения дескрипторов безопасности (SDDL), которая указывает дескриптор безопасности для пространства имен, в котором поставщик предоставляет управляющие объекты.
            </summary>
      <returns>
              Строки SDDL, представляющий дескриптор безопасности для пространства имен, в котором поставщик предоставляет управляющие объекты.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.Scope">
      <summary>
              Возвращает или задает пространство имен WMI, в котором поставщик WMI предоставляет классы.
            </summary>
      <returns>
              A <see cref="T:System.String" /> значение, указывающее пространство имен, в котором поставщик WMI предоставляет классы.
            </returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.SecurityRestriction">
      <summary>
              Возвращает или задает дескриптор безопасности для поставщика WMI.
               Дополнительные сведения см. в разделе сведения о свойстве SecurityDescriptor в разделе «__Win32Provider» в библиотеке MSDN online по http://www.msdn.com.
            </summary>
      <returns>
              A <see cref="T:System.String" /> значение, содержащее дескриптор безопасности для поставщика WMI.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>
              Класс, предназначенный для привязки динамических операций к динамическому сайту.
            </summary>
      <returns>
              <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> Объект, предназначенный для привязки динамических операций.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>
              Делегат обновления.
               Вызывается, когда узел dynamic совпадений в кэше.
            </summary>
      <returns>
              Делегат обновления.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>
              Возвращает метку, которая может использоваться для обновления привязки.
               Указывает, что привязка выражения больше не действительна.
               Обычно это используется «версией» динамический объект был изменен.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.LabelTarget" /> Объект, представляющий метку, которая может использоваться для запуска обновления привязки.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>
              Указывает в префикса обхода конструкции типа, который <see cref="T:System.Object" /> вхождений предназначены следует рассматривать как динамически выполняемый тип.
            </summary>
      <returns>
              Список <see cref="T:System.Object" /> которые следует рассматривать как динамически выполняемый тип.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>
              Возвращает количество переменных времени выполнения.
            </summary>
      <returns>
              Количество переменных во время выполнения.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>
              Возвращает значение переменной среды выполнения по указанному индексу.
            </summary>
      <param name="index">
                Отсчитываемый от нуля индекс переменной времени выполнения, значение которого равно должны быть возвращены.
              </param>
      <returns>
              Значение переменной времени выполнения.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>
              Возвращает или задает значение, которое ссылается объект.
            </summary>
      <returns>
              Значение, которое ссылается на объект.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>
              Возвращает и задает емкость данного ReadOnlyCollectionBuilder.
            </summary>
      <returns>
              Емкость данного ReadOnlyCollectionBuilder.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>
              Возвращает количество элементов в ReadOnlyCollectionBuilder.
            </summary>
      <returns>
              Число элементов в массиве ReadOnlyCollectionBuilder.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>
              Возвращает или задает элемент по указанному индексу.
            </summary>
      <param name="index">
                Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.
              </param>
      <returns>
              Элемент, расположенный по указанному индексу.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
              Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.
            </summary>
      <returns>
              Значение <see langword="true" />, если коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступна только для чтения; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              Возвращает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).
            </summary>
      <returns>
              <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>
              Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.
            </summary>
      <returns>
              Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>
              Получает значение, указывающее, имеет ли список <see cref="T:System.Collections.IList" /> фиксированный размер.
            </summary>
      <returns>
              Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>
              Получает значение, указывающее, является ли объект <see cref="T:System.Collections.IList" /> доступным только для чтения.
            </summary>
      <returns>
              Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.IList" /> доступен только для чтения; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>
              Возвращает или задает элемент по указанному индексу.
            </summary>
      <param name="index">
                Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.
              </param>
      <returns>
              Элемент, расположенный по указанному индексу.
            </returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>
              Возвращает или задает значение, которое <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> ссылки.
            </summary>
      <returns>
              Значение, <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> ссылки.
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>
              Получает атрибуты для этого события.
            </summary>
      <returns>
              Атрибуты только для чтения для данного события.
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>
              Возвращает класс, объявивший этот член.
            </summary>
      <returns>
              <see cref="T:System.Type" /> Объект для класса, который объявляет этот член.
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>
              Возвращает имя текущего элемента.
            </summary>
      <returns>
              Имя данного элемента.
            </returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>
              Получает объект класса, который использовался для инициализации данного экземпляра.
            </summary>
      <returns>
              <see cref="T:System.Type" /> Объект, который был использован для инициализации текущего объекта.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCng.Key">
      <summary>
              Возвращает или задает ключ для алгоритма <see cref="T:System.Security.Cryptography.AesCng" />.
            </summary>
      <returns>
              Ключ для алгоритма <see cref="T:System.Security.Cryptography.AesCng" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCng.KeySize">
      <summary>
              Возвращает или задает размер (в битах) секретного ключа, который используется алгоритмом <see cref="T:System.Security.Cryptography.AesCng" />.
            </summary>
      <returns>
              Размер (в битах) секретного ключа, который используется алгоритмом <see cref="T:System.Security.Cryptography.AesCng" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Key">
      <summary>
              Возвращает или задает симметричный ключ, используемый для шифрования и расшифровки.
            </summary>
      <returns>
              Симметричный ключ, используемый для шифрования и расшифровки.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Значение ключа равно <see langword="null" />.
                </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  Недопустимый размер ключа.
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.KeySize">
      <summary>
              Возвращает или задает размер (в битах), секретного ключа.
            </summary>
      <returns>
              Размер ключа в битах.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>
              Возвращает или задает число бит для обратной связи.
            </summary>
      <returns>
              Размер ответа в битах.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>
              Возвращает или задает вектор инициализации (IV) для симметричного алгоритма.
            </summary>
      <returns>
              Вектор инициализации, используемый для симметричного алгоритма
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>
              Возвращает или задает секретный ключ для симметричного алгоритма.
            </summary>
      <returns>
              Ключ для симметричного алгоритма.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>
              Возвращает или задает размер (в битах) секретный ключ для симметричного алгоритма.
            </summary>
      <returns>
              Размер (в битах) ключа, используемого симметричным алгоритмом.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>
              Возвращает или задает режим функционирования симметричного алгоритма.
            </summary>
      <returns>
              Одно из значений перечисления, указывающее режим блочного шифра для использования при шифровании.
               Значение по умолчанию — <see cref="F:System.Security.Cryptography.CipherMode.CBC" />.
            </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
                  <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> имеет значение <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> или <see cref="F:System.Security.Cryptography.CipherMode.OFB" />.
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>
              Возвращает или задает режим заполнения, используемый в симметричном алгоритме.
            </summary>
      <returns>
              Одно из значений перечисления, указывающее тип применяемого заполнения.
               Значение по умолчанию — <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Algorithm">
      <summary>
              Возвращает имя алгоритма, заданного текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.
            </summary>
      <returns>
              Внедренное имя алгоритма.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellman">
      <summary>
              Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм обмена ключами эллиптической кривой Диффи-Хелмана (ECDH), кривая которого описывается с помощью свойства ключа.
            </summary>
      <returns>
              Объект, задающий алгоритм обмена ключами ECDH, кривая которого описывается с помощью свойства ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256">
      <summary>
              Возвращает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм обмена ключами Диффи-Хеллмана на эллиптических кривых (ECDH), в котором используется кривая P-256.
            </summary>
      <returns>
              Объект, задающий алгоритм ECDH, в котором используется кривая P-256.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384">
      <summary>
              Возвращает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм обмена ключами Диффи-Хеллмана на эллиптических кривых (ECDH), в котором используется кривая P-384.
            </summary>
      <returns>
              Объект, задающий алгоритм ECDH, в котором используется кривая P-384.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521">
      <summary>
              Возвращает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм обмена ключами Диффи-Хеллмана на эллиптических кривых (ECDH), в котором используется кривая P-521.
            </summary>
      <returns>
              Объект, задающий алгоритм ECDH, в котором используется кривая P-521.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsa">
      <summary>
              Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм цифровых подписей на основе эллиптических кривых (ECDSA), кривая которого описывается с помощью свойства ключа.
            </summary>
      <returns>
              Объект, задающий алгоритм ECDSA, кривая которого описывается с помощью свойства ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP256">
      <summary>
              Возвращает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм цифровых подписей на основе эллиптических кривых (ECDSA), в котором используется кривая P-256.
            </summary>
      <returns>
              Объект, задающий алгоритм ECDSA, в котором используется кривая P-256.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP384">
      <summary>
              Возвращает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм цифровых подписей на основе эллиптических кривых (ECDSA), в котором используется кривая P-384.
            </summary>
      <returns>
              Объект, задающий алгоритм ECDSA, в котором используется кривая P-384.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP521">
      <summary>
              Возвращает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм цифровых подписей на основе эллиптических кривых (ECDSA), в котором используется кривая P-521.
            </summary>
      <returns>
              Объект, задающий алгоритм ECDSA, в котором используется кривая P-521.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.MD5">
      <summary>
              Возвращает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий хэш-алгоритм MD5.
            </summary>
      <returns>
              Объект, задающий алгоритм MD5.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Rsa">
      <summary>
              Возвращает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий хэш-алгоритм RSA.
            </summary>
      <returns>
              Объект, задающий алгоритм RSA.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha1">
      <summary>
              Возвращает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм SHA-1.
            </summary>
      <returns>
              Объект, задающий алгоритм SHA-1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha256">
      <summary>
              Возвращает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм SHA-256.
            </summary>
      <returns>
              Объект, задающий алгоритм SHA-256.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha384">
      <summary>
              Возвращает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм SHA-384.
            </summary>
      <returns>
              Объект, задающий алгоритм SHA-384.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha512">
      <summary>
              Возвращает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм SHA-512.
            </summary>
      <returns>
              Объект, задающий алгоритм SHA-512.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup">
      <summary>
              Возвращает имя группы алгоритмов, текущий <see cref="T:System.Security.Cryptography.CngAlgorithm" /> указывает объект.
            </summary>
      <returns>
              Имя группы embedded алгоритма.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> объект, задающий алгоритм Диффи-Хелмана семейство алгоритмов.
            </summary>
      <returns>
              Объект, задающий семейство алгоритмов, Диффи-Хелмана.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Dsa">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> объект, задающий семейство алгоритмов, алгоритм цифровой подписи (DSA).
            </summary>
      <returns>
              Объект, задающий семейство алгоритмов, DSA.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> объект, задающий семейство алгоритмов, алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).
            </summary>
      <returns>
              Объект, задающий семейство алгоритмов, ECDH.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> объект, задающий семейство алгоритмов, эллиптических кривых цифровой подписи алгоритма (ECDSA).
            </summary>
      <returns>
              Объект, задающий семейство алгоритмов, ECDSA.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Rsa">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> объект, задающий семейство алгоритмов, Ривест Шамир адельман () (RSA).
            </summary>
      <returns>
              Объект, задающий семейство алгоритмов RSA.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Algorithm">
      <summary>
              Возвращает алгоритм, используемый ключом.
            </summary>
      <returns>
              Объект, задающий имя алгоритма шифрования.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.AlgorithmGroup">
      <summary>
              Возвращает группу алгоритм, используемый ключом.
            </summary>
      <returns>
              Объект, задающий имя группы алгоритмов шифрования.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ExportPolicy">
      <summary>
              Получает политику экспорта, используемую ключом.
            </summary>
      <returns>
              Объект, задающий политику экспорта ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Handle">
      <summary>
              Возвращает безопасный дескриптор, представляющий собственный ключ (NCRYPT_KEY_HANDLE).
            </summary>
      <returns>
              Безопасный дескриптор, представляющий ключ.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsEphemeral">
      <summary>
              Получает состояние сохранения ключа.
            </summary>
      <returns>
              <see langword="true" /> Если ключ является эфемерным; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsMachineKey">
      <summary>
              Возвращает область (компьютера или пользователя) ключа.
            </summary>
      <returns>
              <see langword="true" /> Если ключ доступен для всех пользователей компьютера; <see langword="false" /> Если ключ только для текущего пользователя.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyName">
      <summary>
              Возвращает имя ключа.
            </summary>
      <returns>
              Имя ключа.
               Если ключ является эфемерным, значение равно <see langword="null" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeySize">
      <summary>
              Получает размер ключа в битах.
            </summary>
      <returns>
              Размер ключа в битах.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyUsage">
      <summary>
              Получает криптографические операции, заданные ключом.
            </summary>
      <returns>
              Побитовое сочетание значений перечисления, определяющих разрешенные варианты ключ использования.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ParentWindowHandle">
      <summary>
              Возвращает или задает дескриптор окна (HWND), который должен использоваться для запросов пользовательского интерфейса для пользователей при доступе к разделу.
            </summary>
      <returns>
              Дескриптор родительского окна для ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Provider">
      <summary>
              Получает поставщик хранилища ключей (KSP), управляющего ключом.
            </summary>
      <returns>
              KSP, управляющий ключом.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ProviderHandle">
      <summary>
              Получает собственный дескриптор (NCRYPT_PROV_HANDLE) для поставщика хранилища ключей (KSP).
            </summary>
      <returns>
              Дескриптор KSP.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UIPolicy">
      <summary>
              Получает параметры, управляющие пользовательский интерфейс (UI) для доступа к разделу.
            </summary>
      <returns>
              Объект, содержащий параметры конфигурации для отображения пользовательского интерфейса.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UniqueName">
      <summary>
              Возвращает уникальное имя для ключа.
            </summary>
      <returns>
              Альтернативное имя для ключа.
               Если ключ является эфемерным, значение равно <see langword="null" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob">
      <summary>
              Получает объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />, указывающий BLOB-объект закрытого ключа для ключа шифрования на основе эллиптических кривых (ECC), содержащий параметры явной кривой.
            </summary>
      <returns>
              Объект, описывающий BLOB-объект закрытого ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob">
      <summary>
              Получает объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />, указывающий BLOB-объект открытого ключа для ключа шифрования на основе эллиптических кривых (ECC), содержащий параметры явной кривой.
            </summary>
      <returns>
              Объект, описывающий BLOB-объект открытого ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> объект, задающий большой двоичный объект закрытого ключа для ключа шифрования (ECC) эллиптической кривой.
            </summary>
      <returns>
              Объект, задающий большой двоичный объект закрытого ключа ECC.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> указывающий открытый ключ большого двоичного ОБЪЕКТА для ключа шифрования (ECC) эллиптической кривой.
            </summary>
      <returns>
              Объект, задающий большой двоичный объект открытого ключа ECC.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Format">
      <summary>
              Возвращает имя формата большого двоичного ОБЪЕКТА ключа, текущий <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> указывает объект.
            </summary>
      <returns>
              Внедренные BLOB формат имя ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> объект, задающий универсальный большой двоичный объект закрытого ключа.
            </summary>
      <returns>
              Объект, задающий универсальный большой двоичный объект закрытого ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> объект, задающий универсальный большой двоичный объект открытого ключа.
            </summary>
      <returns>
              Объект, задающий универсальный большой двоичный объект открытого ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> объект, задающий большой двоичный объект ключа непрозрачной передачи.
            </summary>
      <returns>
              Объект, задающий большой двоичный объект ключа непрозрачной передачи.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> объект, задающий большой двоичный объект закрытого ключа сведения синтаксис Standard (PKCS #8) ключа.
            </summary>
      <returns>
              Объект, задающий большой двоичный объект закрытого ключа PKCS 8.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy">
      <summary>
              Возвращает или задает политику экспорта ключа.
            </summary>
      <returns>
              Объект, задающий политику экспорта ключа.
               Значение по умолчанию — <see langword="null" />, которое указывает, что задана политика экспорта по умолчанию поставщик хранилища ключей.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions">
      <summary>
              Возвращает или задает параметры создания ключа.
            </summary>
      <returns>
              Объект, задающий параметры создания ключа.
               Значение по умолчанию — <see langword="null" />, которое указывает, что заданы параметры создания ключа по умолчанию поставщик хранилища ключей.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyUsage">
      <summary>
              Возвращает или задает криптографические операции, которые применяются к текущему ключу.
            </summary>
      <returns>
              Побитовое сочетание значений перечисления, определяющих использование ключа.
               Значение по умолчанию — <see langword="null" />, которое указывает, что задано использование ключа по умолчанию поставщик хранилища ключей.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Parameters">
      <summary>
              Позволяет <see cref="T:System.Security.Cryptography.CngKey" /> объекта с дополнительными свойствами, которые устанавливаются до завершения ключ.
            </summary>
      <returns>
              Объект коллекции, содержащий любые дополнительные параметры, которые должны быть установлены на <see cref="T:System.Security.Cryptography.CngKey" /> объекта во время создания ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle">
      <summary>
              Возвращает или задает дескриптор окна, которое должно использоваться в качестве родительского окна для диалоговых окон, созданные классы криптографии следующего поколения (CNG).
            </summary>
      <returns>
              HWND родительского окна, используемый для диалоговых окон CNG.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Provider">
      <summary>
              Возвращает или задает поставщике хранилища ключей (KSP), для создания ключа.
            </summary>
      <returns>
              Объект, задающий KSP, в котором будет создан новый ключ в.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  <see cref="P:System.Security.Cryptography.CngKeyCreationParameters.Provider" /> Свойству <see langword="null" /> значение.
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.UIPolicy">
      <summary>
              Возвращает или задает сведения о пользовательском интерфейсе для отображения при создании или получить ключ.
            </summary>
      <returns>
              Объект, содержащий сведения о пользовательском интерфейсе, показаны классы криптографии следующего поколения (CNG) при создании или получить ключ.
               A <see langword="null" /> значение указывает, что задана политика интерфейса пользователя по умолчанию поставщик хранилища ключей.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Name">
      <summary>
              Возвращает свойство name, текущий <see cref="T:System.Security.Cryptography.CngProperty" /> указывает объект.
            </summary>
      <returns>
              Имя свойства, которое задано в текущем <see cref="T:System.Security.Cryptography.CngProperty" /> объекта.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Options">
      <summary>
              Получает параметры свойств, текущего <see cref="T:System.Security.Cryptography.CngProperty" /> указывает объект.
            </summary>
      <returns>
              Объект, который указывает параметры, заданные в текущем <see cref="T:System.Security.Cryptography.CngProperty" /> объекта.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngProvider" /> объект, задающий поставщика хранилища ключей для Microsoft смарт-карты.
            </summary>
      <returns>
              Объект, задающий поставщика хранилищ ключей смарт-карт Microsoft.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider">
      <summary>
              Возвращает <see cref="T:System.Security.Cryptography.CngProvider" /> определяющий поставщик хранилища ключей программного обеспечения Microsoft.
            </summary>
      <returns>
              Объект, задающий поставщик хранилища ключей программного обеспечения Microsoft.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.Provider">
      <summary>
              Возвращает имя поставщика хранилища ключей (KSP), текущий <see cref="T:System.Security.Cryptography.CngProvider" /> указывает объект.
            </summary>
      <returns>
              Внедренное имя.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.CreationTitle">
      <summary>
              Возвращает заголовок, отображаемый в пользовательском Интерфейсе подсказки.
            </summary>
      <returns>
              Заголовок диалогового окна, которое появляется при доступе к ключу.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.Description">
      <summary>
              Получает строку описания, которая отображается в пользовательском Интерфейсе в запросе.
            </summary>
      <returns>
              Текст описания для диалогового окна, которое появляется при доступе к ключу.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.FriendlyName">
      <summary>
              Возвращает понятное имя, которое отображается в пользовательском Интерфейсе подсказки.
            </summary>
      <returns>
              Понятное имя, которое используется для описания ключа в диалоговом окне, которое появляется при доступе к ключу.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.ProtectionLevel">
      <summary>
              Возвращает уровень защиты пользовательского интерфейса для ключа.
            </summary>
      <returns>
              Объект, описывающий уровень защиты пользовательского интерфейса для применения к ключу.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.UseContext">
      <summary>
              Возвращает описание использования ключа.
            </summary>
      <returns>
              Описание использования ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.Key">
      <summary>
              Получает ключ, который будет использоваться объектом <see cref="T:System.Security.Cryptography.DSACng" /> для любой выполняемой им криптографической операции.
            </summary>
      <returns>
              Ключ, используемый объектом <see cref="T:System.Security.Cryptography.DSACng" /> для выполнения криптографических операций.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.KeyExchangeAlgorithm">
      <summary>
              Получает имя алгоритма обмена ключами.
            </summary>
      <returns>
              Всегда <see langword="null" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.LegalKeySizes">
      <summary>
              Возвращает размеры ключа (в битах), которые поддерживаются алгоритмом DSA.
            </summary>
      <returns>
              Массив, содержащий размеры ключа, поддерживаемые алгоритмом.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.SignatureAlgorithm">
      <summary>
              Получает имя алгоритма подписи.
            </summary>
      <returns>
              Строка DSA.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
      <summary>
              Получает значение, обозначающее, указывает ли тип кривой явную кривую характеристики 2.
            </summary>
      <returns>
              Значение <see langword="true" />, если кривая является явной кривой характеристики 2; значение <see langword="false" />, если кривая является именованной кривой характеристики 2, простой или неявной кривой.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
      <summary>
              Получает значение, обозначающее, указывает ли тип кривой явную кривую (простую кривую или кривую характеристики 2).
            </summary>
      <returns>
              Значение <see langword="true" />, если кривая является явной кривой (простой кривой или кривой характеристики 2); значение <see langword="false" />, если кривая является именованной или неявной кривой.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
      <summary>
              Получает значение, обозначающее, указывает ли тип кривой именованную кривую.
            </summary>
      <returns>
              Значение <see langword="true" />, если кривая является именованной кривой; значение <see langword="false" />, если кривая является неявной или явной кривой (простой кривой или кривой характеристики 2).
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
      <summary>
              Получает значение, обозначающее, указывает ли тип кривой явную простую кривую.
            </summary>
      <returns>
              Значение <see langword="true" />, если кривая является явной простой кривой; значение <see langword="false" />, если кривая является именованной простой кривой, кривой характеристики 2 или неявной кривой.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160r1">
      <summary>
              Получает именованную кривую brainpoolP160r1.
            </summary>
      <returns>
              Именованная кривая brainpoolP160r1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160t1">
      <summary>
              Получает именованную кривую brainpoolP160t1.
            </summary>
      <returns>
              Именованная кривая brainpoolP160t1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192r1">
      <summary>
              Получает именованную кривую brainpoolP192r1.
            </summary>
      <returns>
              Именованная кривая brainpoolP192r1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192t1">
      <summary>
              Получает именованную кривую brainpoolP192t1.
            </summary>
      <returns>
              Именованная кривая brainpoolP192t1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224r1">
      <summary>
              Получает именованную кривую brainpoolP224r1.
            </summary>
      <returns>
              Именованная кривая brainpoolP224r1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224t1">
      <summary>
              Получает именованную кривую brainpoolP224t1.
            </summary>
      <returns>
              Именованная кривая brainpoolP224t1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256r1">
      <summary>
              Получает именованную кривую brainpoolP256r1.
            </summary>
      <returns>
              Именованная кривая brainpoolP256r1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256t1">
      <summary>
              Получает именованную кривую brainpoolP256t1.
            </summary>
      <returns>
              Именованная кривая brainpoolP256t1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320r1">
      <summary>
              Получает именованную кривую brainpoolP320r1.
            </summary>
      <returns>
              Именованная кривая brainpoolP320r1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320t1">
      <summary>
              Получает именованную кривую brainpoolP320t1.
            </summary>
      <returns>
              Именованная кривая brainpoolP320t1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384r1">
      <summary>
              Получает именованную кривую brainpoolP384r1.
            </summary>
      <returns>
              Именованная кривая brainpoolP384r1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384t1">
      <summary>
              Получает именованную кривую brainpoolP384t1.
            </summary>
      <returns>
              Именованная кривая brainpoolP384t1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512r1">
      <summary>
              Получает именованную кривую brainpoolP512r1.
            </summary>
      <returns>
              Именованная кривая brainpoolP512r1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512t1">
      <summary>
              Получает именованную кривую brainpoolP512t1.
            </summary>
      <returns>
              Именованная кривая brainpoolP512t1.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP256">
      <summary>
              Получает именованную кривую nistP256.
            </summary>
      <returns>
              Именованная кривая nistP256.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP384">
      <summary>
              Получает именованную кривую nistP384.
            </summary>
      <returns>
              Именованная кривая nistP384.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP521">
      <summary>
              Получает именованную кривую nistP521.
            </summary>
      <returns>
              Именованная кривая nistP521.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.Oid">
      <summary>
              Получает идентификатор именованной кривой.
            </summary>
      <returns>
              Идентификатор именованной кривой.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>
              Получает имя алгоритма обмена ключами.
            </summary>
      <returns>
              Имя алгоритма обмена ключами.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>
              Возвращает открытый ключ, используемый в текущем экземпляре алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).
            </summary>
      <returns>
              Открытая часть пары ключей ECDH, который используется в этом <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> экземпляр.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>
              Получает имя алгоритма подписи.
            </summary>
      <returns>
              Всегда <see langword="null" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm">
      <summary>
              Возвращает или задает хэш-алгоритм, используемый при генерации ключевого материала.
            </summary>
      <returns>
              Объект, задающий хэш-алгоритм.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Значение равно <see langword="null." />
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey">
      <summary>
              Возвращает или задает ключ хэш-сообщения проверки подлинности кода (HMAC), используемый при формировании ключевого материала.
            </summary>
      <returns>
              Ключ хэш-сообщения проверки подлинности кода (HMAC), используемый при формировании ключевого материала.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Key">
      <summary>
              Указывает <see cref="T:System.Security.Cryptography.CngKey" /> используемый текущим объектом для криптографических операций.
            </summary>
      <returns>
              Пара ключей, используемые этим объектом для выполнения криптографических операций.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction">
      <summary>
              Возвращает или задает функцию формирования ключа для <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> класса.
            </summary>
      <returns>
              Один из <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> значений перечисления: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />, или <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.
               Значение по умолчанию — <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                  Значение перечисления находится вне диапазона.
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Label">
      <summary>
              Возвращает или задает значение метки, используемый для формирования ключа.
            </summary>
      <returns>
              Значение метки.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey">
      <summary>
              Возвращает открытый ключ, который может использоваться в другом <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> объект для создания общего секретного соглашения.
            </summary>
      <returns>
              Открытый ключ, связанный с этим экземпляром <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> объекта.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend">
      <summary>
              Возвращает или задает значение, добавляемое к концу секретного соглашения при генерации ключевого материала.
            </summary>
      <returns>
              Значение, добавляемое к концу секретного соглашения.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend">
      <summary>
              Возвращает или задает значение, добавляемое к началу секретного соглашения при формировании ключевого материала.
            </summary>
      <returns>
              Значение, добавляемое к началу секретного соглашения при формировании ключевого материала.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed">
      <summary>
              Возвращает или задает начальное значение, которое будет использоваться при формировании ключевого материала.
            </summary>
      <returns>
              Начальное значение.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey">
      <summary>
              Возвращает значение, указывающее, используется ли секретное соглашение в качестве ключа хэш-сообщения проверки подлинности кода (HMAC) для получения материала ключа.
            </summary>
      <returns>
              <see langword="true" /> Если секретное соглашение используется в качестве ключа HMAC для формирования ключевого материала; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.BlobFormat">
      <summary>
              Возвращает формат большого двоичного ОБЪЕКТА ключа <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> объекта.
            </summary>
      <returns>
              Формат, выраженный в большой двоичный объект ключа.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>
              Получает имя алгоритма обмена ключами.
            </summary>
      <returns>
              Всегда <see langword="null" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>
              Получает имя алгоритма подписи.
            </summary>
      <returns>
              Строка «ECDsa».
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.HashAlgorithm">
      <summary>
              Возвращает или задает хэш-алгоритм, используемый при подписывании и проверке данных.
            </summary>
      <returns>
              Объект, задающий хэш-алгоритм.
            </returns>
      <exception cref="T:System.ArgumentNullException">
                  Значение — <see langword="null" />.
                </exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.Key">
      <summary>
              Возвращает или задает ключ, используемый при подписании и проверке данных.
            </summary>
      <returns>
              Объект, задающий ключ.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.AlgorithmName">
      <summary>
              Получает имя выполняемого алгоритма.
            </summary>
      <returns>
              Имя выполняемого алгоритма.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature">
      <summary>
              Возвращает сведения о подписи Authenticode для манифеста.
            </summary>
      <returns>
              <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" /> Объект, содержащий сведения о подписи Authenticode для манифеста, или <see langword="null" /> Если подпись отсутствует.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.Manifest">
      <summary>
              Возвращает тип манифеста.
            </summary>
      <returns>
              Одно из значений <see cref="T:System.Security.ManifestKinds" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature">
      <summary>
              Возвращает сведения о подписи строгого имени манифеста.
            </summary>
      <returns>
              Объект <see cref="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature" /> объект, который содержит подпись, или <see langword="null" /> Если подпись строгого имени отсутствует.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACng.Key">
      <summary>
              Получает ключ, который будет использоваться объектом <see cref="T:System.Security.Cryptography.RSACng" /> для любой выполняемой им криптографической операции.
            </summary>
      <returns>
              Ключ, используемый объектом <see cref="T:System.Security.Cryptography.RSACng" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACng.KeyExchangeAlgorithm">
      <summary>
              Получает имя алгоритма обмена ключами, доступного в этой реализации RSA.
            </summary>
      <returns>
              Возвращает RSA.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACng.SignatureAlgorithm">
      <summary>
              Получает имя алгоритма подписи, доступного в этой реализации RSA.
            </summary>
      <returns>
              Возвращает RSA.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm">
      <summary>
              Возвращает хэш-алгоритм, используемый для вычисления подписи строгого имени.
            </summary>
      <returns>
              Имя хэш-алгоритма, который используется для вычисления подписи строгого имени.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HResult">
      <summary>
              Возвращает значение HRESULT кода результата.
            </summary>
      <returns>
              Значение HRESULT кода результата.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.IsValid">
      <summary>
              Возвращает значение, указывающее, является ли допустимым подписи строгого имени.
            </summary>
      <returns>
              <see langword="true" /> Если подпись со строгим именем является допустимым; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.PublicKey">
      <summary>
              Возвращает открытый ключ, используемый для проверки подписи.
            </summary>
      <returns>
              Открытый ключ, используемый для проверки подписи.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult">
      <summary>
              Возвращает результат проверки подписи строгого имени.
            </summary>
      <returns>
              Коды результатов для проверки подписи.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCng.Key">
      <summary>
              Возвращает или задает ключ для алгоритма <see cref="T:System.Security.Cryptography.TripleDESCng" />.
            </summary>
      <returns>
              Ключ для алгоритма <see cref="T:System.Security.Cryptography.TripleDESCng" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCng.KeySize">
      <summary>
              Возвращает или задает размер (в битах) секретного ключа, который используется алгоритмом <see cref="T:System.Security.Cryptography.TripleDESCng" />.
            </summary>
      <returns>
              Размер (в битах) секретного ключа, который используется алгоритмом <see cref="T:System.Security.Cryptography.TripleDESCng" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Description">
      <summary>
              Получает описание сертификата для подписи.
            </summary>
      <returns>
              Описание сертификата для подписи.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.DescriptionUrl">
      <summary>
              Возвращает URL-адрес описания сертификата для подписи.
            </summary>
      <returns>
              URL-адрес описания сертификата для подписи.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HashAlgorithm">
      <summary>
              Возвращает хэш-алгоритм, используемый для расчета подписи.
            </summary>
      <returns>
              Хэш-алгоритм, используемый для расчета подписи.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HResult">
      <summary>
              Возвращает значение HRESULT из проверки подписи.
            </summary>
      <returns>
              Значение HRESULT из проверки подписи.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SignatureChain">
      <summary>
              Получает цепочку сертификатов, используемых для проверки подписи Authenticode.
            </summary>
      <returns>
              <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> Объект, содержащий цепочку сертификатов.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SigningCertificate">
      <summary>
              Возвращает сертификат, подписанный манифест.
            </summary>
      <returns>
              <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> Объект, представляющий сертификат.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Timestamp">
      <summary>
              Получает отметку времени, которая была применена к подписи Authenticode.
            </summary>
      <returns>
              Объект <see cref="T:System.Security.Cryptography.X509Certificates.TimestampInformation" /> содержащий метку времени подписи.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.TrustStatus">
      <summary>
              Возвращает уровень доверия подписи Authenticode.
            </summary>
      <returns>
              Одно из значений <see cref="T:System.Security.Cryptography.X509Certificates.TrustStatus" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.VerificationResult">
      <summary>
              Получает результат проверки подписи Authenticode.
            </summary>
      <returns>
              Одно из значений <see cref="T:System.Security.Cryptography.SignatureVerificationResult" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HashAlgorithm">
      <summary>
              Возвращает хэш-алгоритм, используемый для вычисления подписи отметки времени.
            </summary>
      <returns>
              Хэш-алгоритм, используемый для вычисления подписи отметки времени.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HResult">
      <summary>
              Возвращает значение HRESULT, полученного в результате проверки подписи.
            </summary>
      <returns>
              Значение HRESULT, полученного в результате проверки подписи.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.IsValid">
      <summary>
              Возвращает значение, указывающее, является ли допустимым штамп времени подписи.
            </summary>
      <returns>
              <see langword="true" /> Если отметка времени допустима; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SignatureChain">
      <summary>
              Получает цепочку сертификатов, используемую для проверки отметки времени подписи.
            </summary>
      <returns>
              <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> Объект, представляющий цепочки сертификатов.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SigningCertificate">
      <summary>
              Возвращает сертификат, подписанный штамп времени.
            </summary>
      <returns>
              <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> Объект, представляющий сертификат.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.Timestamp">
      <summary>
              Получает отметку времени, которая была применена к подписи.
            </summary>
      <returns>
              Объект <see cref="T:System.DateTime" /> объект, который представляет собой отметку времени.
            </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.VerificationResult">
      <summary>
              Возвращает результат проверки подписи отметки времени.
            </summary>
      <returns>
              Одно из значений <see cref="T:System.Security.Cryptography.SignatureVerificationResult" />.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>
              Получает общее количество уникальных потоков, вошедших в блокировку в режиме чтения.
            </summary>
      <returns>
              Количество уникальных потоков, вошедших в блокировку в режиме чтения.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>
              Получает значение, указывающее, вошел ли текущий поток в блокировку в режиме чтения.
            </summary>
      <returns>
              Значение <see langword="true" />, если текущий поток вошел в режим чтения; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>
              Возвращает значение, указывающее, вошел ли текущий поток в блокировку в обновляемом режиме.
            </summary>
      <returns>
              Значение <see langword="true" />, если текущий поток вошел в обновляемый режим; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>
              Получает значение, указывающее, вошел ли текущий поток в блокировку в режиме записи.
            </summary>
      <returns>
              Значение <see langword="true" />, если текущий поток вошел в режим записи; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>
              Возвращает значение, указывающее политику рекурсии для текущего объекта <see cref="T:System.Threading.ReaderWriterLockSlim" />.
            </summary>
      <returns>
              Одно из значений перечисления, определяющее политику рекурсии блокировки.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>
              Получает количество раз, которые текущий поток входил в блокировку в режиме чтения, как показатель рекурсии.
            </summary>
      <returns>
              0 (нуль), если текущий поток не вошел в режим чтения, 1, если поток вошел в режим чтения, но не рекурсивно, или n, если поток вошел в блокировку рекурсивно n - 1 раз.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>
              Получает количество раз, которые текущий поток входил в блокировку в обновляемом режиме, как показатель рекурсии.
            </summary>
      <returns>
              0 (нуль), если текущий поток не вошел в обновляемый режим, 1, если поток вошел в обновляемый режим, но не рекурсивно, или n, если поток вошел в обновляемый режим рекурсивно n - 1 раз.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>
              Получает количество раз, которые текущий поток входил в блокировку в режиме записи, как показатель рекурсии.
            </summary>
      <returns>
              0 (нуль), если текущий поток, не вошел в режим записи, 1, если поток вошел в режим записи, но не рекурсивно, или n, если поток вошел в режим записи рекурсивно n - 1 раз.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>
              Получает общее количество потоков, ожидающих вхождения в блокировку в режиме чтения.
            </summary>
      <returns>
              Общее количество потоков, ожидающих вхождения в режим чтения.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>
              Получает общее количество потоков, ожидающих входа в блокировку в обновляемом режиме.
            </summary>
      <returns>
              Общее количество потоков, ожидающих входа в обновляемый режим.
            </returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>
              Получает общее количество потоков, ожидающих входа в блокировку в режиме записи.
            </summary>
      <returns>
              Общее количество потоков, ожидающих входа в режим записи.
            </returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle">
      <summary>
              Предоставляет безопасный дескриптор, представляющий размещенный в памяти файл для последовательного доступа.
            </summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
      <summary>
              Предоставляет безопасный дескриптор, представляющий представление блок неуправляемой памяти для произвольного доступа.
            </summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle">
      <summary>
              Предоставляет безопасный дескриптор для использования объектами криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle">
      <summary>
              Предоставляет безопасный дескриптор, представляющий ключ (NCRYPT_KEY_HANDLE).
            </summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle">
      <summary>
              Предоставляет безопасный дескриптор, представляющий поставщика хранилища ключей (NCRYPT_PROV_HANDLE).
            </summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle">
      <summary>
              Предоставляет безопасный дескриптор, представляющий значение секретного соглашения (NCRYPT_SECRET_HANDLE).
            </summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafePipeHandle">
      <summary>
              Представляет класс-оболочку для дескриптора канала.
            </summary>
    </member>
    <member name="T:System.Action`10">
      <summary>
              Инкапсулирует метод, который имеет 10 параметров и не возвращает значение.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>
              Инкапсулирует метод, который имеет 11 параметров и не возвращает значение.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>
              Инкапсулирует метод, который имеет 12 параметров и не возвращает значение.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg12">
                Двенадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T12">
                Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>
              Инкапсулирует метод, который имеет 13 параметров и не возвращает значение.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg12">
                Двенадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg13">
                Тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T12">
                Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T13">
                Тип тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>
              Инкапсулирует метод, который имеет 14 параметров и не возвращает значение.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg12">
                Двенадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg13">
                Тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg14">
                Четырнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T12">
                Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T13">
                Тип тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T14">
                Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>
              Инкапсулирует метод, который имеет 15 параметров и не возвращает значение.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg12">
                Двенадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg13">
                Тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg14">
                Четырнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg15">
                Пятнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T12">
                Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T13">
                Тип тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T14">
                Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T15">
                Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>
              Инкапсулирует метод, который принимает 16 параметров и не возвращает значение.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg12">
                Двенадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg13">
                Тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg14">
                Четырнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg15">
                Пятнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg16">
                Шестнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T12">
                Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T13">
                Тип тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T14">
                Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T15">
                Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T16">
                Тип шестнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>
              Инкапсулирует метод, который имеет девять параметров и не возвращает значения.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>
              Представляет набор значений.
            
              Просмотреть исходный код .NET Framework для этого типа Reference Source.
            </summary>
      <typeparam name="T">
                Тип элементов в коллекции.
              </typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>
              Перечисляет элементы объекта <see cref="T:System.Collections.Generic.HashSet`1" />.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventDescriptor">
      <summary>
              Содержит метаданные, определяющие событие.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider">
      <summary>
              Этот класс используется для записи событий.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode">
      <summary>
              Определяет возможные состояния последней операции записи.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoError">
      <summary>
              Запись выполнена успешно.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoFreeBuffers">
      <summary>
              Сеанс исчерпал свободные буфера для записи.
               Это может произойти при высокой частоте событий из-за перегрузки дисковой подсистемы или количество буферов слишком мал.
               Вместо блокировки, пока буферы не станут доступны, то событие удаляется.
               Рекомендуется увеличить количество и размер буферов для сеанса, или уменьшить количество записанных событий или размер события.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.EventTooBig">
      <summary>
              Событие превышает размер буфера сеанса. события не может выходить за пределы буферов.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProviderTraceListener">
      <summary>
              Прослушиватель для <see cref="T:System.Diagnostics.TraceSource" /> который записывает события ETW подсистем.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventBookmark">
      <summary>
              Представляет местозаполнитель (закладку) в потоке событий.
               Заполнитель можно использовать для пометки события и возвращения к данной позиции в потоке событий.
               Экземпляр этого объекта можно получить из <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> объекта, в этом случае он соответствует позиции записи этого события.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventKeyword">
      <summary>
              Представляет ключевое слово для события.
               Ключевые слова определены в поставщике событий и используются для группирования события с другими идентичными событиями (основаны на использовании событий).
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLevel">
      <summary>
              Содержит уровень события, определенный в поставщике событий.
               Данный уровень указывает серьезность события.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration">
      <summary>
              Содержит статические сведения и параметры конфигурации для журнала событий.
               Многие параметры конфигураций были определены поставщиком событий, создавшим журнал.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogException">
      <summary>
              Представляет базовый класс для всех исключений, которые вызываются при возникновении ошибки при чтении журнала событий сведения.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInformation">
      <summary>
              Позволяет получить доступ к свойствам времени выполнения активных журналов событий и журналов событий.
               Эти свойства включают количество событий в журнале, размер журнала, значение, определяющее ли журнал полон, и время последнего журнала были записаны или получить доступ к.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException">
      <summary>
              Представляет исключение, вызываемое при публикации поставщиком недопустимых данных в событии.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogIsolation">
      <summary>
              Определяет права доступа по умолчанию для журнала событий.
               Приложения и системы значения указывают, что журнал совместно список управления доступом (ACL) соответствующий журнал Windows (приложения или системы, журналы событий) и общей папки с журналами, другие же изоляции сеанса трассировки событий для Windows (ETW).
               Все каналы с пользовательской изоляцией используют закрытый сеанс ETW.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Application">
      <summary>
              В журнале совместно использует список управления доступом с журналом событий приложения и использует сеанс ETW с другие журналы, имеющие изоляции приложений.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.System">
      <summary>
              Журнал совместно использует список управления доступом с журналом событий системы и использует сеанс ETW совместно с другими журналы системы.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Custom">
      <summary>
              Журнал событий — имя пользовательского журнала событий, который использует свой собственный закрытый сеанс ETW.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogLink">
      <summary>
              Представляет связь между поставщиком событий и журнал событий, в котором поставщик публикует данные событий.
               Невозможно создать экземпляр этого объекта.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogMode">
      <summary>
              Определяет поведение для службы журнала событий обрабатывает журнал событий, когда файл журнала достигает максимального размера (при заполнении журнала событий).
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Circular">
      <summary>
              Новые записи продолжают храниться, когда файл журнала заполнен.
               Каждое новое событие заменяет старые события в журнале.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.AutoBackup">
      <summary>
              Архивировать журнал при заполнении, не перезаписывать события.
               Журнал автоматически архивируется при необходимости.
               Событий не перезаписываются.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Retain">
      <summary>
              Не перезаписывать события.
               Очистка журнала только вручную.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException">
      <summary>
              Представляет исключение, возникающее, если запрошенный журнал событий (обычно указывается имя журнала событий или путь к файлу журнала событий) не существует.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector">
      <summary>
              Содержит массив строк, представляющих запросы XPath для элементов в XML-представление события, который основан на Event Schema.
               Запросы в данном объекте используются для извлечения значений из события.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException">
      <summary>
              Представляет исключение, возникающее, если указанное имя поставщика событий ссылается на отключенного поставщика событий.
               Отключенный поставщик событий не может публиковать события.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogQuery">
      <summary>
              Представляет запрос для событий в журнал событий и параметры, определяющие, как выполняется запрос и на каком компьютере выполняется запрос для.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReader">
      <summary>
              Позволяет считывать события из журнала событий на основе запроса событий.
               События, которые считываются этот объект возвращается в виде <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> объектов.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReadingException">
      <summary>
              Представляет исключение, которое возникает, когда произошла ошибка при чтении, запроса или подписки на события в журнале событий.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogRecord">
      <summary>
              Содержит свойства экземпляра события для события, полученные от <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> объекта.
               Свойства события предоставляют сведения о событии, такие как имя компьютера, на котором было зарегистрировано событие и время создания события.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogSession">
      <summary>
              Используется для доступа к службе журнала событий на локальном или удаленном компьютере, поэтому можно управлять и сбора информации о журналах событий и поставщиков событий на компьютере.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogStatus">
      <summary>
              Содержит код состояния или код ошибки для определенного журнала событий.
               Это состояние может использоваться, чтобы определить, доступно ли журнал событий для операции.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogType">
      <summary>
              Определяет тип события, записываемые в журнал событий.
               Каждый журнал может содержать только один тип события.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Administrative">
      <summary>
              Эти события являются в основном для конечных пользователей, администраторов и поддержки.
               События, обнаруженные в журналах административного типа указывают на проблемы и четко определенных решений, администратор может выполнять.
               Примером административных событий является событие, которое происходит, когда приложение не сможет подключиться к принтеру.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Operational">
      <summary>
              События в журнале событий операционного типа используются для анализа и диагностики проблем или событий.
               Они могут использоваться для запуска средств или задач, исходя из проблемы или происхождения события.
               Примером события операционного является событие, возникающее, когда принтер добавляется или удаляется из системы.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Analytical">
      <summary>
              События в журнале аналитических событий публикуются в больших объемах.
               Они описывают функционирование программы и указывают на проблемы, которые не могут быть обработаны вмешательства пользователя.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Debug">
      <summary>
              События в журнале событий отладочного типа используются только разработчиками для диагностики проблемы при отладке.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogWatcher">
      <summary>
              Позволяет подписаться на входящие события.
               Каждый раз при публикации требуемое событие в журнал событий <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> события, и метод, который обрабатывает это событие будет выполняться.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventMetadata">
      <summary>
              Содержит метаданные (свойства и параметры) для события, определенного в поставщике событий.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventOpcode">
      <summary>
              Содержит код операций события, определенный в поставщике событий.
               Код операций определяет числовое значение, идентифицирующее действие или пункт действия, который приложение при вызове события.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventProperty">
      <summary>
              Содержит значение свойства события, указанное поставщиком событий при публикации события.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecord">
      <summary>
              Определение свойств экземпляра события для события, полученные от <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> объекта.
               Свойства события предоставляют сведения о события, такие как имя компьютера, на котором было зарегистрировано событие и время создания события.
               Этот класс является абстрактным классом.
              <see cref="T:System.Diagnostics.Eventing.Reader.EventLogRecord" /> Класс реализует этот класс.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs">
      <summary>
              При <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> события, экземпляр этого объекта передается в метод-делегат, обрабатывающий событие.
               Этот объект содержит событие, опубликованное в журнале событий или исключение, произошедшее при сбое подписки на событие.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventTask">
      <summary>
              Содержит задачу события, определенного в поставщике событий.
               Задача идентифицирует часть приложения или компонента, публикующего событие.
               Задача — 16-разрядное значение с 16 максимальных значений зарезервировано.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.PathType">
      <summary>
              Указывает, что строка содержит имя журнала событий или путь к файлу журнала событий.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.LogName">
      <summary>
              Параметр пути содержит имя журнала событий.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.FilePath">
      <summary>
              Параметр пути содержит путь к файлу журнала событий.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.ProviderMetadata">
      <summary>
              Содержит статическую информацию о поставщике событий, такие как имя и идентификатор поставщика, а также коллекцию событий, определенных в поставщике.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.SessionAuthentication">
      <summary>
              Определяет значения для типа проверки подлинности, используемый во время входа на сервер удаленного вызова процедур (RPC).
               Это имя входа происходит при создании <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> указывающий соединение с удаленным компьютером.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Default">
      <summary>
              Метод проверки подлинности по умолчанию во время входа RPC.
               Проверка подлинности по умолчанию эквивалентен Negotiate.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Negotiate">
      <summary>
              Метод проверки подлинности Negotiate во время входа RPC.
               Это позволяет клиентскому приложению выбрать наиболее подходящий метод проверки подлинности (NTLM или Kerberos) для ситуации.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Kerberos">
      <summary>
              Использование проверки подлинности Kerberos при входе RPC.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Ntlm">
      <summary>
              Использовать проверку подлинности Windows NT LAN Manager (NTLM) во время входа RPC.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventKeywords">
      <summary>
              Определяет стандартные ключевые слова, которые прикреплены к событиям поставщиком событий.
               Дополнительные сведения о ключевых словах см. в разделе <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.None">
      <summary>
              Это значение указывает, что фильтрация по ключевому слову не выполняется при публикации события.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.ResponseTime">
      <summary>
              Вкладывается во все события времени ответа.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiContext">
      <summary>
              Вкладывается во все контекстные события инфраструктуры диагностики Windows (WDI).
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiDiagnostic">
      <summary>
              Вкладывается во все диагностические события инфраструктуры диагностики Windows (WDI).
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.Sqm">
      <summary>
              Вкладывается во все события механизма качества служб (SQM).
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditFailure">
      <summary>
              Вкладывается во все неудавшиеся события аудита безопасности.
               Это ключевое слово следует использовать только для событий в журнале безопасности.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditSuccess">
      <summary>
              Вкладывается во все успешные события аудита безопасности.
               Это ключевое слово следует использовать только для событий в журнале безопасности.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint">
      <summary>
              Присоединенные события перемещения, в которых идентификатор действия (Корреляционный идентификатор) является вычисленным значением и не обязательно быть уникальным (не является действительным GUID).
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint2">
      <summary>
              Присоединенные события перемещения, в которых идентификатор действия (Корреляционный идентификатор) является вычисленным значением и не обязательно быть уникальным (не является действительным GUID).
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.EventLogClassic">
      <summary>
              Назначенные события, вызываемые с помощью функции RaiseEvent.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventLevel">
      <summary>
              Определяет стандартные уровни событий, используемые в службе журнала событий.
               Уровень определяет серьезность события.
               Пользовательские уровни события могут быть определены за пределами этих стандартных уровнях.
               Дополнительные сведения об уровнях см. в разделе <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.LogAlways">
      <summary>
              Это значение указывает, что не фильтрация на уровне выполняется во время публикации событий.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Critical">
      <summary>
              Данный уровень соответствует критических ошибок, который является серьезной ошибкой, которая вызвала серьезный сбой.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Error">
      <summary>
              Данный уровень соответствует обычным сообщениям об ошибке, указывающим на наличие проблемы.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Warning">
      <summary>
              Данный уровень соответствует события предупреждения.
               Например событие, которое получает опубликован, поскольку диск почти полностью событие является предупреждением.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Informational">
      <summary>
              Данный уровень соответствует информационные события и сообщения, которые не являются ошибками.
               Эти события могут помочь ход трассировки или состоянии приложения.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Verbose">
      <summary>
              Данный уровень соответствует длительным событиям или сообщениям.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventOpcode">
      <summary>
              Определяет стандартные коды операций, связанных с поставщиком событий.
               Дополнительные сведения о кодах операций см. в разделе <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Info">
      <summary>
              Событие с данным кодом операций является информационное событие.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Start">
      <summary>
              Событие с данным кодом операций публикуется при запуске приложения в новой транзакции или действия.
               Это могут быть внедрены в другую транзакцию или действие, если несколько событий с кодом операций Start друг за другом без кода операций Stop событие.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Stop">
      <summary>
              Событие с данным кодом операций публикуется при завершении действия или транзакции в приложении.
               Событие соответствует последнему непарному событию с кодом операций Start.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStart">
      <summary>
              Событие с данным кодом операций является событием запуска коллекции трассировки.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStop">
      <summary>
              Событие с данным кодом операций является событием остановки коллекции трассировки.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Extension">
      <summary>
              Событие с данным кодом операций является событием расширения.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Reply">
      <summary>
              Событие с данным кодом операций публикуется после ответа действия в приложении на событие.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Resume">
      <summary>
              Событие с данным кодом операций публикуется после выхода действия в приложении из приостановленного состояния.
               Это событие должно следовать событие с кодом операций Suspend.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Suspend">
      <summary>
              Событие с данным кодом операций публикуется при приостановке действия в приложении.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Send">
      <summary>
              Событие с данным кодом операций публикуется при передаче одного действия в приложении данных или системных ресурсов другому действию.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Receive">
      <summary>
              Событие с данным кодом операций публикуется, когда одно действие в приложение получает данные.
            </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventTask">
      <summary>
              Определяет стандартные задачи, присоединенные к событиям поставщиком событий.
               Дополнительные сведения о задачах см. в разделе <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />.
            </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventTask.None">
      <summary>
              Ни одна задача используется для идентификации части приложения, публикующего событие.
            </summary>
    </member>
    <member name="T:System.Diagnostics.EventSchemaTraceListener">
      <summary>
              Направляет результаты трассировки или отладки сквозных событий в совместимый со схемой файл журнала в XML-представлении.
            </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterData">
      <summary>
              Содержит необработанные данные для счетчика.
            </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSet">
      <summary>
              Определяет набор логических счетчиков.
            </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstance">
      <summary>
              Создает экземпляр логических счетчиков, определенных в классе <see cref="T:System.Diagnostics.PerformanceData.CounterSet" />.
            </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet">
      <summary>
              Содержит набор значений счетчика.
            </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceType">
      <summary>
              Указывает, допускает ли набор счетчиков несколько экземпляров, например, процессы и физических дисков, или одного экземпляра, например памяти.
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Single">
      <summary>
              Набор счетчиков содержит счетчики с единственным экземпляром, например, счетчик объема физической памяти.
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple">
      <summary>
              Набор счетчиков содержит многоэкземплярные счетчики, например, счетчик для измерения среднего числа операций дискового ввода-вывода для процесса.
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate">
      <summary>
              Набор счетчиков содержит счетчики с единственным экземпляром, статистические значения которых получается из одного или нескольких источников.
               Например счетчик в наборе счетчиков данного типа может получать число операций чтения из каждого из трех жестких дисков на компьютере и сумма их значения.
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregateWithHistory">
      <summary>
              Этот тип аналогичен <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate" /> за исключением того, что этот набор счетчиков типа хранит все значения счетчиков в течение времени существования приложения-потребителя (значение счетчика кэшируется после истечения времени жизни счетчика).
               Например если один из жестких дисков в примере глобальной статистики перестает становятся недоступными, общее число байтов, считанных с данного диска по-прежнему будет доступно и может использоваться для вычисления статистического значения.
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate">
      <summary>
              Набор счетчиков содержит многоэкземплярные счетчики, статистические значения которых получается из всех экземпляров счетчика.
               Например счетчик в наборе счетчиков данного типа может получать общего времени выполнения потока для всех потоков многопоточного приложения и суммировать их значения.
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate">
      <summary>
              Этот тип аналогичен <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" />, за исключением того, что вместо статистической обработки все данные экземпляра в одном экземпляре агрегированные (_Total), он будет выполнять статистическую обработку данных счетчиков из экземпляров с тем же именем.
               Например, если несколько поставщик обрабатывает вложенных экземпляров с именем IExplore <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple" /> и <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> CounterSet покажет несколько экземпляров IExplore (IExplore, IExplore #1, IExplore #2 и т. д.), однако <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate" /> публикации только один экземпляр IExplore с статистических данных для всех экземпляров с именем IExplore тип экземпляра.
            </summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterType">
      <summary>
              Определяет возможные типы счетчика.
               Каждому счетчику присваивается тип счетчика.
               Тип счетчика определяет, как вычисляется, в среднем и отображаются данные счетчика.
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength">
      <summary>
              Счетчик данного типа предназначен для отслеживания средней длины очереди к ресурсу со временем.
               Он показывает разницу между длинами очередей, наблюдаемых в течение последних двух интервалов, деленную на продолжительность интервала.
               (См. тип счетчика PERF_COUNTER_QUEUELEN_TYPE в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.LargeQueueLength">
      <summary>
              Счетчик данного типа отслеживает среднюю длину очереди к ресурсу со временем.
               Счетчики этого типа отображают разницу между длинами очередей, наблюдаемых в течение последних двух интервалов, деленную на продолжительность интервала.
               Этот тип счетчика является таким же, как <see cref="F:System.Diagnostics.PerformanceData.CounterType.QueueLength" /> счетчик типа, за исключением того, что используются большие поля для размещения больших значений.
               (См. тип счетчика PERF_COUNTER_LARGE_QUEUELEN_TYPE в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength100Ns">
      <summary>
              Этот тип счетчика измеряет длину очереди произведение на интервалах 100 нс.
               (См. тип счетчика PERF_COUNTER_100NS_QUEUELEN_TYPE в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLengthObjectTime">
      <summary>
              Этот тип счетчика измеряет произведение интервалах длина очереди базы относящиеся к определенному объекту.
               (См. тип счетчика PERF_COUNTER_OBJ_QUEUELEN_TYPE в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData32">
      <summary>
              Счетчик данного типа показывает только последнее наблюдаемое значение.
               Он не отображает среднее значение.
               (См. тип счетчика PERF_COUNTER_RAWCOUNT в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData64">
      <summary>
              Этот тип счетчик показывает последнее наблюдаемое значение, не является средним значением.
               Это аналогично <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawData32" /> счетчик типа, за исключением того, что используются большие поля для размещения больших значений.
               (См. тип счетчика PERF_COUNTER_LARGE_RAWCOUNT в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32">
      <summary>
              Счетчик данного типа показывает наиболее измеренного значения в шестнадцатеричном формате.
               Он не отображает среднее значение.
               (См. тип счетчика PERF_COUNTER_RAWCOUNT_HEX в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex64">
      <summary>
              Этот тип счетчик отображает последнее наблюдаемое значение в шестнадцатеричном формате.
               Это аналогично <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32" /> счетчик типа, за исключением того, что используются большие поля для размещения больших значений.
               (См. тип счетчика PERF_COUNTER_LARGE_RAWCOUNT_HEX в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32">
      <summary>
              Счетчик данного типа показывает среднее число операций, завершенных в течение каждой секунды интервала выборки.
               Счетчики этого типа измеряют время в тактах системных часов.
               (См. тип счетчика PERF_COUNTER_COUNTER в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond64">
      <summary>
              Счетчик данного типа показывает среднее число операций, завершенных в течение каждой секунды интервала выборки.
               Счетчики этого типа измеряют время в тактах системных часов.
               Этот тип счетчика является таким же, как <see cref="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32" /> типа, но использует большие поля для размещения больших значений.
               (См. тип счетчика PERF_COUNTER_BULK_COUNT в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32">
      <summary>
              Этот счетчик показывает отношение подмножества к множеству в процентах.
               Например он сравнивает число байтов, используемых на диске, чтобы общее число байтов на диске.
               Счетчики этого типа отображают только текущий процент, не является средним значением по времени.
               (См. тип счетчика PERF_RAW_FRACTION в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64">
      <summary>
              Этот счетчик показывает отношение подмножества к множеству в процентах.
               Например он сравнивает число байтов, используемых на диске, чтобы общее число байтов на диске.
               Счетчики этого типа отображают только текущий процент, не является средним значением по времени.
               Это аналогично <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> счетчик типа, за исключением того, что используются большие поля для размещения больших значений.
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase32">
      <summary>
              Счетчик данного типа хранит только последнее наблюдаемое значение.
               Значение используется как знаменатель счетчика, представляющего обычную арифметическую дробь.
               Этот тип поддерживает <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> тип счетчика.
               (См. сведения о типе счетчика PERF_RAW_BASE в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase64">
      <summary>
              Счетчик данного типа хранит последнее наблюдаемое значение.
               Это аналогично <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawBase32" />счетчик типа, за исключением того, что используются большие поля для размещения больших значений.
               Этот тип поддерживает <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64" /> тип счетчика.
               (См. тип счетчика PERF_LARGE_RAW_BASE в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction">
      <summary>
              Этот счетчик показывает среднее отношение обращений ко всем операциям за последние два интервала.
               (См. тип счетчика PERF_SAMPLE_FRACTION в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleCounter">
      <summary>
              Счетчик данного типа показывает среднее число операций, завершенных за одну секунду.
               Он измеряет время в тактах системного таймера производительности.
               Переменная F представляет количество тактов в секунду.
               Значение F добавляется в уравнение для отображения результата в секундах.
               (См. тип счетчика PERF_SAMPLE_COUNTER в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleBase">
      <summary>
              Этот счетчик хранит количество выполненных прерываний для измерения и используется в качестве знаменателя в дробь выборки.
               Этот тип поддерживает <see cref="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction" /> тип счетчика.
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32">
      <summary>
              Этот тип счетчика измеряет среднее время, необходимое для завершения процесса или операции.
               Счетчики этого типа отображают отношение общее затраченное время интервала выборки на число процессов или операций, завершенных за это время.
               Этот тип счетчика измеряет время в тактах системных часов.
               (См. тип счетчика PERF_AVERAGE_TIMER в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageBase">
      <summary>
              Этот счетчик используется как базовый данных (делитель) при расчете времени или количества средних значений для <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64" /> и <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32" /> типов счетчиков.
               Счетчик данного типа хранит только последнее наблюдаемое значение.
               (См. тип счетчика PERF_AVERAGE_BASE в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64">
      <summary>
              Счетчик данного типа показывает, сколько элементов обработано в среднем за операцию.
               Счетчики этого типа отображают отношение обработанных (например, отправленных байтов) элементов к числу завершенных операций.
               Это отношение вычисляется путем сравнения число обработанных элементов в течение последнего интервала число операций, завершенных в течение последнего интервала.
               (См. тип счетчика PERF_AVERAGE_BULK в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive">
      <summary>
              Этот счетчик показывает среднее время, компонент был активным в процентах к полному времени измерения.
               (См. тип счетчика PERF_COUNTER_TIMER в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive">
      <summary>
              Это обратный тип счетчика.
               Обратные счетчики измеряют время, компонент не был активным и получают из этого измерения активное время.
               Счетчики этого типа для отображения среднего процента измеренного за интервал времени.
               Значение этих счетчиков вычисляется путем мониторинга процент времени, для которого служба была неактивна и затем вычитанием этого значения из 100%.
               Этот тип счетчика является таким же, как <see cref="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns" /> счетчик типа, за исключением того, что он измеряет время в тактах системного таймера производительности, а не в единицах измерения, равных 100 нс.
               (См. тип счетчика PERF_COUNTER_TIMER_INV в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive100Ns">
      <summary>
              Счетчик данного типа показывает активное время компонента в процентах от общее затраченное время интервала выборки.
               Время измеряется в единицах 100 наносекунд.
               Счетчики этого типа предназначены для измерения активности компонента одновременно.
               (См. сведения о типе счетчика PERF_100NSEC_TIMER в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns">
      <summary>
              Этот тип счетчика среднего процента измеренного за определенный интервал времени.
               Это обратный счетчик.
               Обратные счетчики вычисляется путем мониторинга процент времени, для которого служба была неактивна и затем вычитанием этого значения из 100%.
               (См. тип счетчика PERF_100NSEC_TIMER_INV в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ElapsedTime">
      <summary>
              Счетчик данного типа показывает полное время между началом работы компонента или процесса и вычислением это значение.
               (См. тип счетчика PERF_ELAPSED_TIME в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive">
      <summary>
              Этот тип счетчика является мультитаймером.
               Мультитаймеры более одного экземпляра компонента, например процессора или диска.
               Счетчики этого типа отображают активного времени одного или нескольких компонентов в процентах от общего времени интервала выборки.
               Поскольку числитель записывает время активности работающих компонентов одновременно, результат может превышать 100 процентов.
               Этот тип счетчика отличается от <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" /> в том, что он измеряет время в тактах системного таймера производительности, а не в единицах измерения, равных 100 нс.
               (См. тип счетчика PERF_COUNTER_MULTI_TIMER в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive">
      <summary>
              Счетчик данного типа показывает активного времени одного или нескольких компонентов в процентах от общего времени интервала выборки.
               Этот тип счетчика представляет собой обратный мультитаймер.
               Мультитаймеры исследуют более одного экземпляра компонента, например процессора или диска.
               Обратные счетчики измеряют время, компонент не был активным и получают из этого измерения активное время.
               Этот счетчик отличается от <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" /> в том, что он измеряет время в тактах системного таймера производительности, а не в единицах измерения, равных 100 нс.
               (См. тип счетчика PERF_COUNTER_MULTI_TIMER_INV в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns">
      <summary>
              Счетчик данного типа показывает активного времени одного или нескольких компонентов в процентах от общего времени интервала выборки.
               Время измеряется в единицах измерения, равных 100 нс.
               Этот тип счетчика является мультитаймером.
               Мультитаймеры предназначены для наблюдения за более одного экземпляра компонента, например процессора или диска.
               (См. тип счетчика PERF_100NSEC_MULTI_TIMER в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns">
      <summary>
              Счетчик данного типа показывает активного времени одного или нескольких компонентов в процентах от общего времени интервала выборки.
               Счетчики этого типа измерения времени в единицах измерения, равных 100 нс.
               Этот тип счетчика представляет собой обратный мультитаймер.
               Мультитаймеры предназначены для наблюдения за более одного экземпляра компонента, например процессора или диска.
               Обратные счетчики измеряют время, компонент не был активным и таким образом из измерения времени.
               (См. тип счетчика PERF_100NSEC_MULTI_TIMER_INV в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerBase">
      <summary>
              Указывает число измеренных элементов.
               Используется как знаменатель в вычислениях для получения среднего среди измеренных элементов при измерении времени нескольких, но очень похожие элементы.
               Этот тип поддерживает следующие типы счетчика: <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive" />, <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive" />, <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" />, и <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />.
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta32">
      <summary>
              Счетчик данного типа показывает изменение в атрибуте измеренный между двумя последними интервалами измерения.
               (См. тип счетчика PERF_COUNTER_DELTA в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta64">
      <summary>
              Счетчик данного типа показывает изменение в атрибуте измеренный между двумя последними интервалами измерения.
               Это аналогично <see cref="F:System.Diagnostics.PerformanceData.CounterType.Delta32" /> счетчик типа, за исключением того, что используются большие поля для размещения больших значений.
               (См. тип счетчика PERF_COUNTER_LARGE_DELTA в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ObjectSpecificTimer">
      <summary>
              Этот тип 64-разрядный счетчик является таймер для отображения единиц измерения определенного объекта.
               (См. тип счетчика PERF_OBJ_TIME_TIMER в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionSystemTimer">
      <summary>
              Этот счетчик показывает значение, которое состоит из значений двух счетчиков: количества времени, отслеживаемого события и частоты системного таймера производительности.
               Этот тип счетчика отличается от других таймеров тем, что значение тактов часов сопровождающий значение счетчика тактируется из-за задержки в вызове функции.
               Точные типы счетчиков используются, когда стандартный системный таймер не обеспечивает необходимую точность значений.
               (См. тип счетчика PERF_PRECISION_TIMER в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionTimer100Ns">
      <summary>
              Этот счетчик показывает значение, которое состоит из значений двух счетчиков: количества времени, отслеживаемого события и времени, измеренного частным таймером в тех же единицах.
               Время измеряется в единицах измерения, равных 100 нс.
               Этот тип счетчика отличается от других таймеров тем, что значение тактов часов сопровождающий значение счетчика тактируется из-за задержки в вызове функции.
               Точные типы счетчиков используются, когда стандартный системный таймер не обеспечивает необходимую точность значений.
               (См. тип счетчика PERF_PRECISION_100NS_TIMER в пакете развертывания).
            </summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionObjectSpecificTimer">
      <summary>
              Этот счетчик показывает значение, которое состоит из значений двух счетчиков: количества времени, затраченного отслеживаемого события и частотой, указанной в поле PerfFreq заголовка объекта.
               Этот тип счетчика отличается от других таймеров тем, что значение тактов часов сопровождающий значение счетчика для устранения возможных разница из-за задержки в вызове функции.
               Точные типы счетчиков используются, когда стандартный системный таймер не обеспечивает необходимую точность значений.
               (См. тип счетчика PERF_PRECISION_OBJECT_TIMER в пакете развертывания).
            </summary>
    </member>
    <member name="T:System.Diagnostics.TraceLogRetentionOption">
      <summary>
              Задает структуру файла, который будет использоваться для <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> журнала.
            </summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize">
      <summary>
              Один файл без ограничения максимального размера.
            </summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize">
      <summary>
              Один файл с максимально допустимый размер файла определяется <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> свойство.
            </summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles">
      <summary>
              Неограниченное число последовательных файлов, каждый из которых имеет максимальный размер файла, определяется <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> свойство.
               Нет нет логических границ для количества или размера файлов, но она ограничена физических ограничений, налагаемых компьютером.
            </summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles">
      <summary>
              Конечное число последовательных файлов, каждый из которых имеет максимальный размер файла.
               Когда <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> будет достигнуто значение свойства, начинается запись в новый файл с суффиксом увеличивается целое число со знаком.
            </summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles">
      <summary>
              Конечное число последовательных файлов, каждый из которых имеет максимальный размер файла.
               Когда <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> будет достигнуто значение свойства, начинается запись в новый файл с суффиксом увеличивается целое число со знаком.
               Когда <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" /> будет достигнуто значение свойства, первый файл очищается и перезаписаны.
               Затем файлы последовательно перезаписываются циклически.
            </summary>
    </member>
    <member name="T:System.Diagnostics.UnescapedXmlDiagnosticData">
      <summary>
              Предоставляет escape-последовательность XML-данных для ведения журнала трассировки пользовательских данных.
            </summary>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>
              Представляет бинарную динамическую операцию в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>
              Представляет набор ограничений привязки для <see cref="T:System.Dynamic.DynamicMetaObject" /> под которое динамической привязки является допустимым.
            </summary>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>
              Описывает аргументы в процессе динамической привязки.
            </summary>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>
              Представляет динамическую операцию преобразования в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>
              Представляет динамическую операцию создания в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>
              Представляет динамическую операцию удаления индекса в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>
              Представляет динамическую операцию удаления члена в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>
              Представляет динамическую привязку и логику привязки объекта, участвующего в динамической привязке.
            </summary>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>
              Привязки узла динамического вызова, который участвует в <see cref="T:System.Dynamic.DynamicMetaObject" /> протокол привязки.
            </summary>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>
              Предоставляет базовый класс для указания динамического поведения в среде выполнения.
               Этот класс должен наследоваться; создать его экземпляр напрямую нельзя.
            </summary>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>
              Представляет объект, члены которого могут динамически добавляться и удаляться в среде выполнения.
            </summary>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>
              Представляет динамическую операцию получения индекса в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>
              Представляет динамическую операцию получения члена в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>
              Представляет динамический объект, операции которого могут быть связаны в среде выполнения.
            </summary>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>
              Представляет информацию о динамической операции получения члена, сообщающую, должен ли этот член вызывать свойства при выполнении операции получения.
            </summary>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>
              Представляет динамическую операцию вызова в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>
              Представляет динамическую операцию вызова члена в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>
              Представляет динамическую операцию установки индекса в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>
              Представляет динамическую операцию установки члена в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>
              Представляет унарную динамическую операцию в источнике вызова с указанием семантики привязки и сведений об операции.
            </summary>
    </member>
    <member name="T:System.Func`10">
      <summary>
              Инкапсулирует метод, который имеет девять параметров и возвращает значение типа, указанного параметром <paramref name="TResult" /> параметр.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="TResult">
                Тип возвращаемого значения метода, инкапсулируемого данным делегатом.
              </typeparam>
      <returns>
              Возвращаемое значение метода, инкапсулируемого данным делегатом.
            </returns>
    </member>
    <member name="T:System.Func`11">
      <summary>
              Инкапсулирует метод, который имеет 10 параметров и возвращает значение типа, указанного параметром <paramref name="TResult" /> параметр.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="TResult">
                Тип возвращаемого значения метода, инкапсулируемого данным делегатом.
              </typeparam>
      <returns>
              Возвращаемое значение метода, инкапсулируемого данным делегатом.
            </returns>
    </member>
    <member name="T:System.Func`12">
      <summary>
              Инкапсулирует метод, который имеет 11 параметров и возвращает значение типа, указанного параметром <paramref name="TResult" /> параметр.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="TResult">
                Тип возвращаемого значения метода, инкапсулируемого данным делегатом.
              </typeparam>
      <returns>
              Возвращаемое значение метода, инкапсулируемого данным делегатом.
            </returns>
    </member>
    <member name="T:System.Func`13">
      <summary>
              Инкапсулирует метод, который имеет 12 параметров и возвращает значение типа, указанного параметром <paramref name="TResult" /> параметр.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg12">
                Двенадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T12">
                Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="TResult">
                Тип возвращаемого значения метода, инкапсулируемого данным делегатом.
              </typeparam>
      <returns>
              Возвращаемое значение метода, инкапсулируемого данным делегатом.
            </returns>
    </member>
    <member name="T:System.Func`14">
      <summary>
              Инкапсулирует метод, который имеет 13 параметров и возвращает значение типа, указанного параметром <paramref name="TResult" /> параметр.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg12">
                Двенадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg13">
                Тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого аргумента метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого аргумента метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T12">
                Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T13">
                Тип тринадцатого аргумента метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="TResult">
                Тип возвращаемого значения метода, инкапсулируемого данным делегатом.
              </typeparam>
      <returns>
              Возвращаемое значение метода, инкапсулируемого данным делегатом.
            </returns>
    </member>
    <member name="T:System.Func`15">
      <summary>
              Инкапсулирует метод, который имеет 14 параметров и возвращает значение типа, указанного параметром <paramref name="TResult" /> параметр.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg12">
                Двенадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg13">
                Тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg14">
                Четырнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T12">
                Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T13">
                Тип тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T14">
                Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="TResult">
                Тип возвращаемого значения метода, инкапсулируемого данным делегатом.
              </typeparam>
      <returns>
              Возвращаемое значение метода, инкапсулируемого данным делегатом.
            </returns>
    </member>
    <member name="T:System.Func`16">
      <summary>
              Инкапсулирует метод, который имеет 15 параметров и возвращает значение типа, указанного параметром <paramref name="TResult" /> параметр.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg12">
                Двенадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg13">
                Тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg14">
                Четырнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg15">
                Пятнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T12">
                Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T13">
                Тип тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T14">
                Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T15">
                Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="TResult">
                Тип возвращаемого значения метода, инкапсулируемого данным делегатом.
              </typeparam>
      <returns>
              Возвращаемое значение метода, инкапсулируемого данным делегатом.
            </returns>
    </member>
    <member name="T:System.Func`17">
      <summary>
              Инкапсулирует метод, который принимает 16 параметров и возвращает значение типа, указанного параметром <paramref name="TResult" /> параметр.
            </summary>
      <param name="arg1">
                Первый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg2">
                Второй параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg3">
                Третий параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg4">
                Четвертый параметр метода, инкапсулируемого этим делегатом.
              </param>
      <param name="arg5">
                Пятого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg6">
                Шестой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg7">
                Седьмого параметра метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg8">
                Восьмой параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg9">
                Девятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg10">
                Десятый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg11">
                Одиннадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg12">
                Двенадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg13">
                Тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg14">
                Четырнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg15">
                Пятнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <param name="arg16">
                Шестнадцатый параметр метода, инкапсулируемого данным делегатом.
              </param>
      <typeparam name="T1">
                Тип первого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T2">
                Тип второго параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T3">
                Тип третьего параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T4">
                Тип четвертого параметра метода, инкапсулируемого этим делегатом.
              </typeparam>
      <typeparam name="T5">
                Тип пятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T6">
                Тип шестого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T7">
                Тип седьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T8">
                Тип восьмого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T9">
                Тип девятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T10">
                Тип десятого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T11">
                Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T12">
                Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T13">
                Тип тринадцатый параметр метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T14">
                Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T15">
                Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="T16">
                Тип шестнадцатого параметра метода, инкапсулируемого данным делегатом.
              </typeparam>
      <typeparam name="TResult">
                Тип возвращаемого значения метода, инкапсулируемого данным делегатом.
              </typeparam>
      <returns>
              Возвращаемое значение метода, инкапсулируемого данным делегатом.
            </returns>
    </member>
    <member name="T:System.IO.HandleInheritability">
      <summary>
              Указывает, является ли базовый дескриптор наследуемым дочерними процессами.
            </summary>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>
              Указывает, что дескриптор не наследуется дочерними процессами.
            </summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>
              Указывает, что дескриптор наследоваться дочерними процессами.
            </summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFile">
      <summary>
              Представляет размещенный в памяти файл.
            </summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess">
      <summary>
              Задает возможности доступа и ограничения для размещенного в памяти файла или представления.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite">
      <summary>
              Чтение и запись в файл.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read">
      <summary>
              Доступ только для чтения к файлу.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write">
      <summary>
              Доступ только для записи в файл.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.CopyOnWrite">
      <summary>
              Чтение и запись к файлу с тем ограничением, что все операции записи не будет виден другим процессам.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadExecute">
      <summary>
              Доступ для чтения к файлу, можно хранить и запускать выполняемый код.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWriteExecute">
      <summary>
              Чтение и запись в файл, который может хранить и запускать выполняемый код.
            </summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileOptions">
      <summary>
              Предоставляет параметры выделения памяти файлы памяти.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.None">
      <summary>
              Применяются никакие параметры выделения памяти.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages">
      <summary>
              Выделение памяти откладывается, пока не будет создано представление с помощью <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor" /> или <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream" /> метод.
            </summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights">
      <summary>
              Задает права доступа, размещенный в памяти файл, который не связан с файлом на диске.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.CopyOnWrite">
      <summary>
              Право на чтение и запись в файл с тем ограничением, что все операции записи не будет виден другим процессам.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Write">
      <summary>
              Право добавлять данные в файл или удалить данные из файла.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read">
      <summary>
              Право открывать и копировать файл только для чтения.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute">
      <summary>
              Право на запуск файла приложения.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Delete">
      <summary>
              Право на удаление файла.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadPermissions">
      <summary>
              Право открывать и копировать доступа и аудита правил из файла.
               Это не включает в себя право на чтение данных, атрибутов файловой системы или дополнительных атрибутов файловой системы.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ChangePermissions">
      <summary>
              Право на изменение параметров безопасности и аудита, связанные с файлом.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.TakeOwnership">
      <summary>
              Право изменять владельца файла.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWrite">
      <summary>
              Право открывать и копировать файлы и право добавлять данные в файл или удалить данные из файла.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadExecute">
      <summary>
              Право открывать и копировать папки или файла только для чтения, а также запускать файлы приложений.
               Это право включает <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read" /> вправо и <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute" /> вправо.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWriteExecute">
      <summary>
              Право открывать и копировать файл право добавлять данные в файл или удалить данные из файла и право на запуск файла приложения.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.FullControl">
      <summary>
              Право на полный контроль над файлом и изменение управления доступом и аудита.
               Это значение представляет право выполнять любые операции с файлом и представляет собой сочетание всех прав в этом перечислении.
            </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.AccessSystemSecurity">
      <summary>
              Право на получение или задание разрешений для файла.
            </summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity">
      <summary>
              Представляет разрешения, которые могут быть предоставлены для доступа к файлам и операций в памяти файлов.
            </summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
      <summary>
              Представляет представление произвольным доступом размещенный в памяти файла.
            </summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewStream">
      <summary>
              Представление размещенного в памяти файла в виде потока с последовательным доступом.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeClientStream">
      <summary>
              Предоставляет поток анонимного канала, поддерживающий синхронные и асинхронные операции чтения и записи на стороне клиента.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeServerStream">
      <summary>
              Предоставляет поток для анонимного канала, поддерживающий синхронные и асинхронные операции чтения и записи.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeClientStream">
      <summary>
              Предоставляет <see cref="T:System.IO.Stream" /> вокруг именованного канала, поддерживающий синхронные и асинхронные операции чтения и записи.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeServerStream">
      <summary>
              Предоставляет <see cref="T:System.IO.Stream" /> в именованном канале, поддерживая синхронные и асинхронные чтения и записи операций.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRights">
      <summary>
              Определяет права доступа для использования при создании доступа и аудита.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadData">
      <summary>
              Право на чтение данных из канала.
               Это включает право на чтение атрибутов файловой системы, дополнительных атрибутов файловой системы или правил доступа и аудита.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteData">
      <summary>
              Право на запись данных в канал.
               Право на запись атрибутов файловой системы или дополнительных файловой системы атрибуты отсутствуют.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadAttributes">
      <summary>
              Право на чтение атрибутов файловой системы из канала.
               Это не включает в себя право на чтение данных, дополнительных атрибутов файловой системы или доступа и аудита.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteAttributes">
      <summary>
              Право на запись атрибутов файловой системы в канал.
               Право на запись данных или расширенных атрибутов системы отсутствует.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes">
      <summary>
              Право на чтение дополнительных атрибутов файловой системы из канала.
               Это не включает в себя право на чтение данных, атрибутов файловой системы или доступа и аудита.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes">
      <summary>
              Право на запись дополнительных атрибутов файловой системы в канал.
               Это включает право на запись данных или атрибутов файла.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.CreateNewInstance">
      <summary>
              Право на создание нового канала.
               Установка это право доступа также наборы <see cref="F:System.IO.Pipes.PipeAccessRights.Synchronize" /> вправо.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Delete">
      <summary>
              Право на удаление канала.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadPermissions">
      <summary>
              Право на чтение правил и аудита из канала.
               Это не включает в себя право на чтение данных, атрибутов файловой системы или дополнительных атрибутов файловой системы.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ChangePermissions">
      <summary>
              Право на изменение параметров безопасности и аудита, связанных с каналом.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.TakeOwnership">
      <summary>
              Право на смену владельца канала.
               Обратите внимание, что владельцы канала имеют полный доступ к этому ресурсу.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Synchronize">
      <summary>
              Указывает, может ли приложение ждать дескриптора канала для синхронизации с завершением операции ввода-вывода.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.FullControl">
      <summary>
              Право на полный контроль над каналом, а также изменение управления доступом и аудита.
               Это значение представляет комбинацию всех прав в этом перечислении.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Read">
      <summary>
              Право на чтение из канала.
               Это право включает <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />, и <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" /> права.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Write">
      <summary>
              Указывает право на запись в канал.
               Это право включает <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" />, и <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" /> права.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadWrite">
      <summary>
              Право на чтение и запись из канала.
               Это право включает <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" />, и <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" /> права.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity">
      <summary>
              Право вносить изменения в системе управления доступом (SACL).
            </summary>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRule">
      <summary>
              Представляет абстракцию записи управления доступом (ACE), определяющей правило доступа для канала.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.PipeAuditRule">
      <summary>
              Представляет абстракцию записи управления доступом (ACE), определяющей правило аудита для канала.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.PipeDirection">
      <summary>
              Задает направление канала.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.In">
      <summary>
              Указывает, что канал.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.Out">
      <summary>
              Указывает, что канал.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.InOut">
      <summary>
              Указывает, что канал является двусторонней.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.PipeOptions">
      <summary>
              Предоставляет параметры для создания <see cref="T:System.IO.Pipes.PipeStream" /> объекта.
               Это перечисление имеет атрибут <see cref="T:System.FlagsAttribute" />, который позволяет составлять побитовые сочетания значений его элементов.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.None">
      <summary>
              Указывает, что нет дополнительных параметров.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.WriteThrough">
      <summary>
              Указывает, что система должна выполняться через любой промежуточный кэш и перейти непосредственно к каналу.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.Asynchronous">
      <summary>
              Указывает, что канал может использоваться для асинхронного чтения и записи.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.PipeSecurity">
      <summary>
              Представляет элемент управления доступом и аудита безопасности для канала.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.PipeStream">
      <summary>
              Предоставляет объект <see cref="T:System.IO.Stream" /> для канала, поддерживающий анонимные и именованные каналы.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.PipeStreamImpersonationWorker">
      <summary>
              Представляет метод, вызываемый клиентом.
            </summary>
    </member>
    <member name="T:System.IO.Pipes.PipeTransmissionMode">
      <summary>
              Задает режим передачи канала.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Byte">
      <summary>
              Указывает, что данные в канале передаются и считываются как поток байтов.
            </summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Message">
      <summary>
              Указывает, что данные в канале передаются и считываются как поток сообщений.
            </summary>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>
              Предоставляет набор <see langword="static" /> (<see langword="Shared" /> в Visual Basic) методы для запроса объектов, реализующих <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>
              Представляет дерево выражений и предоставляет функциональные возможности для выполнения дерева выражения после его перезаписи.
            </summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>
              Представляет дерево выражений и предоставляет функциональные возможности для выполнения дерева выражения после его перезаписи.
            </summary>
      <typeparam name="T">
                Тип данных значение, получаемое в результате выполнения дерева выражения.
              </typeparam>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>
              Представляет <see cref="T:System.Collections.IEnumerable" /> как <see cref="T:System.Linq.EnumerableQuery" /> источника данных.
            </summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>
              Представляет коллекцию <see cref="T:System.Collections.Generic.IEnumerable`1" /> в качестве источника данных <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
      <typeparam name="T">
                Тип данных в коллекции.
              </typeparam>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>
              Представляет выражение, имеющее бинарный оператор.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>
              Представляет блок, содержащий последовательность выражений, в которых могут быть определены переменные.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>
              Представляет оператор catch в блоке try.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>
              Представляет выражение, имеющее условный оператор.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>
              Представляет выражение, имеющее постоянное значение.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>
              Создает или очищает точку последовательности для информации об отладке.
               Это позволяет отладчику выделить правильный исходный код при отладке.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>
              Представляет значение типа по умолчанию или пустое выражение.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>
              Представляет динамическую операцию.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>
              Представляет посетителя или модуль записи для деревьев динамических выражений.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>
              Представляет инициализатор для единичного элемента коллекции <see cref="T:System.Collections.IEnumerable" />.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>
              Предоставляет базовый класс, производными от которого являются классы, представляющие узлы дерева выражения.
               Также содержит методы фабрики <see langword="static" /> (<see langword="Shared" /> в Visual Basic) для создания различных типов узлов.
               Это класс <see langword="abstract" />.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>
              Представляет строго типизированное лямбда-выражение как структуру данных в виде дерева выражений.
               Этот класс не наследуется.
            </summary>
      <typeparam name="TDelegate">
                Тип делегата, <see cref="T:System.Linq.Expressions.Expression`1" /> представляет.
              </typeparam>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>
              Описывает типы узлов для узлов дерева выражений.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>
              Операции сложения, например a + b, без проверки переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>
              Операции сложения, например (a + b), с проверкой переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>
              Побитовое или логических <see langword="AND" /> операции, такие как (a &amp; b) в C# и (a And b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>
              Условную <see langword="AND" /> операции, вычисляющую второй операнд, только в том случае, если первый операнд имеет значение <see langword="true" />.
               Он соответствует (a &amp;&amp; b) в C# и (a AndAlso b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>
              Операция получения длины одномерного массива, такие как array.Length.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>
              Индексирование операции в одномерный массив, например array[index] в C# или array(index) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>
              Вызов метода, таких как obj.sampleMethod() выражение.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>
              Узел, представляющий объединяющую операцию null, например (a ?? b) в C# или If(a, b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>
              Условной операции, такие как a &gt; b ? a : b в C# или If(a &gt; b, a, b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>
              Постоянное значение.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>
              Операция приведения или преобразования, такие как (SampleType)obj в C#или CType(obj, SampleType) в Visual Basic.
               Числовые преобразования если преобразованное значение слишком велико для целевого типа, исключение не возникает.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>
              Операция приведения или преобразования, такие как (SampleType)obj в C#или CType(obj, SampleType) в Visual Basic.
               Числовые преобразования если преобразованное значение не соответствует целевого типа, исключение.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>
              Операции деления, такие как (a / b), для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>
              Узел, представляющий сравнение равенства, таких как (a == b) в C# или (a = b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>
              Побитовое или логических <see langword="XOR" /> операции, такие как (a ^ b) в C# или (a Xor b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>
              Сравнение «больше чем», такие как (a &gt; b).
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>
              Сравнение «больше или равно», такие как (a &gt;= b).
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>
              Операция, которая вызывает делегат или лямбда-выражения, такие как sampleDelegate.Invoke().
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>
              Лямбда-выражения, такие как a =&gt; a + a в C# или Function(a) a + a в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>
              Операция побитового сдвига влево, например (a &lt;&lt; b).
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>
              Сравнения «меньше чем», такие как (a &lt; b).
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>
              «Меньше или равно» сравнения, таких как (a &lt;= b).
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>
              Операция создания нового <see cref="T:System.Collections.IEnumerable" /> объекта и инициализирует его из списка элементов, таких как new List&lt;SampleType&gt;(){ a, b, c } в C# или Dim sampleList = { a, b, c } в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>
              Операция чтения из поля или свойства, такие как obj.SampleProperty.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>
              Операция, которая создает новый объект и инициализирует один или несколько его элементов, таких как new Point { X = 1, Y = 2 } в C# или New Point With {.X = 1, .Y = 2} в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>
              Арифметический остаток от деления операции, такие как (a % b) в C# или (a Mod b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>
              Операции умножения, такие как (a * b), без проверки переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>
              Операция арифметического умножения, например (a * b), с проверкой переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>
              Операцию арифметического отрицания, такие как (-a).
               Объект a не должны быть изменены на месте.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>
              Унарный плюс операции, такие как (+a).
               Результат предопределенные унарный плюс операции является значение операнда, но определенные пользователем реализации могут иметь нетривиальные результаты.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>
              Операцию арифметического отрицания, такие как (-a), с проверкой переполнения.
               Объект a не должны быть изменены на месте.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>
              Операция, которая вызывает конструктор для создания нового объекта, например new SampleType().
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>
              Операция, которая создает новый одномерный массив и инициализирует его из списка элементов, таких как new SampleType[]{a, b, c} в C# или New SampleType(){a, b, c} в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>
              Операцию, которая создает новый массив, в котором указаны границы для каждого измерения, такие как new SampleType[dim1, dim2] в C# или New SampleType(dim1, dim2) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>
              Побитовое дополнение или операцию логического отрицания.
               В C# это эквивалентно (~a) для целочисленных типов и в (!a) для логических значений.
               В Visual Basic, это эквивалентно (Not a).
               Объект a не должны быть изменены на месте.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>
              Сравнение неравенства, например (a != b) в C# или (a &lt;&gt; b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>
              Побитовое или логических <see langword="OR" /> операции, такие как (a | b) в C# или (a Or b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>
              Сокращенное вычисление условную <see langword="OR" /> операции, такие как (a || b) в C# или (a OrElse b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>
              Ссылка на параметр или переменную, которая определена в контексте выражения.
               Дополнительные сведения см. в разделе <see cref="T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>
              Математические операции возведения числа в степень, такие как (a ^ b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>
              Выражение, которое содержит постоянное значение типа <see cref="T:System.Linq.Expressions.Expression" />.
               A <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> узел может содержать ссылки на параметры, определенные в контексте выражения, он представляет.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>
              Операция побитового сдвига вправо, например (a &gt;&gt; b).
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>
              Операция арифметического вычитания, например (a - b), без проверки переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>
              Операция арифметического вычитания, например (a - b), с проверкой переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>
              Явной ссылки или упаковки-преобразования, в котором <see langword="null" /> предоставляется, если преобразование завершается неудачей, такие как (obj as SampleType) в C# или TryCast(obj, SampleType) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>
              Тип теста, таких как obj is SampleType в C# или TypeOf obj is SampleType в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>
              Операция присваивания, такие как (a = b).
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>
              Блок выражений.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>
              Отладочная информация.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>
              Унарный уменьшения операции, такие как (a - 1) в C# и Visual Basic.
               Объект a не должны быть изменены на месте.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>
              Динамической операции.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>
              Значение по умолчанию.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>
              Выражение расширения.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>
              Объект ««перейти к» выражения, такие как goto Label в C# или GoTo Label в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>
              Унарная операция инкремента, такие как (a + 1) в C# и Visual Basic.
               Объект a не должны быть изменены на месте.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>
              Операция индекса или операция, которая обращается к свойству, которое принимает аргументы.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>
              Метка.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>
              Список переменных времени выполнения.
               Дополнительные сведения см. в разделе <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>
              Объект цикл, такой как for или while.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>
              Объект переключения операции, такие как <see langword="switch" /> в C# или <see langword="Select Case" /> в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>
              Операция, которая создает исключение, такие как throw new Exception().
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>
              A <see langword="try-catch" /> выражение.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>
              Значение распаковки-преобразования типа операции, такие как <see langword="unbox" /> и <see langword="unbox.any" /> в MSIL.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>
              Это дополнение Операция составного присваивания, такие как (a += b), без проверки переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>
              Побитовое или логических <see langword="AND" /> Операция составного присваивания, такие как (a &amp;= b) в C#.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>
              Операция составного присваивания деления, такие как (a /= b), для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>
              Побитовое или логических <see langword="XOR" /> Операция составного присваивания, такие как (a ^= b) в C#.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>
              Побитового сдвига влево составного присваивания, например (a &lt;&lt;= b).
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>
              Арифметического остатка Операция составного присваивания, такие как (a %= b) в C#.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>
              Составного присваивания арифметического умножения, например (a *= b), без проверки переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>
              Побитовое или логических <see langword="OR" /> Составное присваивание, такие как (a |= b) в C#.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>
              Операция составного присваивания возведения числа в степень, такие как (a ^= b) в Visual Basic.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>
              Побитового сдвига вправо Операция составного присваивания, такие как (a &gt;&gt;= b).
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>
              Вычитание Операция составного присваивания, такие как (a -= b), без проверки переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>
              Это дополнение Операция составного присваивания, такие как (a += b), с проверкой переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>
              Составного присваивания арифметического умножения, например (a *= b), с проверкой переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>
              Вычитание Операция составного присваивания, такие как (a -= b), с проверкой переполнения для числовых операндов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>
              Унарный префиксный инкремент, такие как (++a).
               Объект a должен быть изменен.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>
              Унарный Префиксный декремент, такие как (--a).
               Объект a должен быть изменен.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>
              Унарное Постфиксное приращение, такие как (a++).
               Объект a должен быть изменен.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>
              Унарное Постфиксное уменьшение, например (a--).
               Объект a должен быть изменен.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>
              Проверка совпадения типа.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>
              А те операцию дополнения до единицы, такие как (~a) в C#.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>
              A <see langword="true" /> условие значение.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>
              A <see langword="false" /> условие значение.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>
              Представляет посетителя или модуль записи для деревьев выражений.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>
              Представляет безусловный переход.
               Сюда входят операторы возврата, прерывания и продолжения выполнения, а также другие переходы.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>
              Указывает, какой тип перехода это <see cref="T:System.Linq.Expressions.GotoExpression" /> представляет.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>
              Объект <see cref="T:System.Linq.Expressions.GotoExpression" /> представляющий ссылку в нужное расположение.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>
              Объект <see cref="T:System.Linq.Expressions.GotoExpression" /> представляющий оператор return.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>
              Объект <see cref="T:System.Linq.Expressions.GotoExpression" /> представляющий оператор break.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>
              Объект <see cref="T:System.Linq.Expressions.GotoExpression" /> представляющий оператор continue.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary>
              Предоставляет внутренний интерфейс для доступа к аргументам нескольких узлов дерева (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression и InexExpression).
                Не следует использовать этот API.
                Он является открытым только из-за рефакторинга DLL и существует только для внутренней оптимизации производительности.
            
              Благодаря этому доступны два способа оптимизации, которые уменьшают размер деревьев выражений.
                Первый способ позволяет узлам дерева удерживаться в IList&lt;T&gt; вместо ReadOnlyCollection.
                IList&lt;T&gt; экономит выделение ReadOnlyCollection для каждого узла.
                Второй способ включает создание специализированных подклассов, которые могут захватывать определенное число аргументов (например, Block2, Block3, Block4).
                Таким образом, для этих узлов не требуется выделять ReadOnlyCollection и массив для хранения их элементов, что экономит по 32 байта на каждый узел.
            
              Узлы дерева выражения по-прежнему предоставляют исходные свойства ReadOnlyCollections LINQ.
                Это достигается повторным использованием поля для хранения массива или элемента, который обычно хранятся в массиве.
            
              В случае массива коллекции типизируется в IList&lt;T&gt; вместо ReadOnlyCollection&lt;T&gt;.
                Когда узел изначально создается, он является массивом.
                Компилятор при доступе к членам использует этот интерфейс.
                Доступ к элементам массива повышает уровень массива до ReadOnlyCollection.
            
              В случае объекта первый аргумент хранится в поле, типизированном в объект.
                Когда узел изначально создается, это поле содержит выражение.
                Компилятор обращается к аргументам через этот интерфейс, и метод доступа для первого аргумента использует Expression.ReturnObject для возврата объекта, который обрабатывает случай выражения (Expression) или ReadOnlyCollection.
                Когда пользователь обращается к ReadOnlyCollection, поле объекта обновляется для хранения непосредственно в ReadOnlyCollection.
            
              Важно, что выражения всегда возвращают один и тот же объект ReadOnlyCollection.
                В противном случае обход дерева перезаписи будет нарушен.
                Это критическое изменение LINQ v1 для возврата разных ReadOnlyCollection из того же узла Expression.
                В настоящее время пользователи могут использовать удостоверение объекта, чтобы сообщать, изменился ли узел.
                Хранение ReadOnlyCollection в перегруженном поле позволяет сократить использование памяти и обеспечивает совместимость для открытого API-интерфейса.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary>
              Предоставляет внутренний интерфейс для доступа к аргументам узлов дерева DynamicExpression, а также к функциональным возможностям CallSite и Rewriting.
                Не следует использовать этот API.
                Он является открытым только из-за рефакторинга DLL и существует только для внутренней оптимизации производительности.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>
              Представляет индексацию свойства или массива.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>
              Создает выражение, применяющее делегат или лямбда-выражение к списку выражений аргумента.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>
              Представляет метку, которую можно разместить в любом <see cref="T:System.Linq.Expressions.Expression" /> контекста.
               Если выполняется переход, он получит значение, указанное с помощью соответствующих <see cref="T:System.Linq.Expressions.GotoExpression" />.
               В противном случае она получает значение в <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />.
               Если <see cref="T:System.Type" /> равно System.Void, значение не должно быть указано.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>
              Используется для представления объекта <see cref="T:System.Linq.Expressions.GotoExpression" />.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>
              Описывает лямбда-выражение.
               Здесь фиксируется блок кода, аналогичный телу метода .NET.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>
              Представляет вызов конструктора, обладающий инициализатором коллекции.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>
              Представляет бесконечный цикл.
               Он может завершаться прерыванием.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>
              Представляет операцию присваивания для поля или свойства объекта.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>
              Предоставляет базовый класс, производными от которого являются классы, представляющие привязки для использования в инициализации членов вновь создаваемых объектов.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>
              Описывает типы привязок, которые используются в <see cref="T:System.Linq.Expressions.MemberInitExpression" /> объектов.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>
              Привязка, представляющая инициализацию элемента со значением выражения.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>
              Привязка, которая представляет инициализацию элементов элемента рекурсивно.
            </summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>
              Привязка, которая представляет инициализацию члена типа <see cref="T:System.Collections.IList" /> или <see cref="T:System.Collections.Generic.ICollection`1" /> из списка элементов.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>
              Представляет получение доступа к полю или свойству.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>
              Представляет вызов конструктора и инициализацию одного или нескольких членов нового объекта.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>
              Представляет инициализацию элементов члена коллекции вновь созданного объекта.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>
              Представляет инициализацию элементов члена вновь созданного объекта.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>
              Представляет вызов статического метода или метода экземпляра.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>
              Представляет создание нового массива и по возможности инициализацию элементов нового массива.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>
              Представляет вызов конструктора.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>
              Представляет выражение именованного параметра.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>
              Выражение, предоставляющее разрешение выполнения чтения и записи для переменных.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>
              Представляет отдельный случай класса <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>
              Представляет выражение элемента управления, которое обрабатывает множественный выбор, передачей управления <see cref="T:System.Linq.Expressions.SwitchCase" />.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>
              Хранит информацию, позволяющую пропустить отладку сведений о символах исходного файла, в частности имени файла и уникального идентификатора языка.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>
              Представляет блок try/catch/finally/fault.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>
              Представляет операцию, выполняемую между выражением и типом.
            </summary>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>
              Представляет выражение, имеющее унарный оператор.
            </summary>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>
              Представляет коллекцию объектов с общим ключом.
            </summary>
      <typeparam name="TKey">
                Тип ключа <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
      <typeparam name="TElement">
                Тип значений в <see cref="T:System.Linq.IGrouping`2" />.
              </typeparam>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>
              Определяет индексатор, свойство size и метод поиска логических структур данных, сопоставляющих ключи для <see cref="T:System.Collections.Generic.IEnumerable`1" /> последовательности значений.
            </summary>
      <typeparam name="TKey">
                Тип ключей в <see cref="T:System.Linq.ILookup`2" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов в <see cref="T:System.Collections.Generic.IEnumerable`1" /> последовательностей, которые составляют значения в <see cref="T:System.Linq.ILookup`2" />.
              </typeparam>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>
              Представляет упорядоченную последовательность.
            </summary>
      <typeparam name="TElement">
                Тип элементов последовательности.
              </typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>
              Представляет результат операции сортировки.
            </summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>
              Представляет результат операции сортировки.
            </summary>
      <typeparam name="T">
                Тип содержимого источника данных.
              </typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>
              Предоставляет функциональные возможности для оценки запросов по определенным источникам данных в случае, если тип данных не указан.
            </summary>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>
              Предоставляет функциональные возможности для оценки запросов по определенным источникам данных в случае, если тип данных известен.
            </summary>
      <typeparam name="T">
                Тип данных в источнике данных.
              </typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>
              Определяет методы для создания и выполнения запросов, описываемых <see cref="T:System.Linq.IQueryable" /> объекта.
            </summary>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>
              Представляет коллекцию ключей, каждый из сопоставляется с одним или несколькими значениями.
            </summary>
      <typeparam name="TKey">
                Тип ключей в <see cref="T:System.Linq.Lookup`2" />.
              </typeparam>
      <typeparam name="TElement">
                Тип элементов каждого <see cref="T:System.Collections.Generic.IEnumerable`1" /> значение в <see cref="T:System.Linq.Lookup`2" />.
              </typeparam>
    </member>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>
              Представляет упорядоченную параллельную последовательность.
            </summary>
      <typeparam name="TSource">
                Тип элементов в исходной коллекции.
              </typeparam>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>
              Предоставляет набор методов для выполнения запросов к объектам, реализующим ParallelQuery{TSource}.
               Это параллельный эквивалент объекта <see cref="T:System.Linq.Enumerable" />.
            </summary>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>
              Режим выполнения запросов представляет собой рекомендацию, сообщающую системе, каким образом  следует обрабатывать компромиссы производительности при параллелизации запросов.
            </summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>
              Этот флажок установлен по умолчанию.
               Рассмотрим структуру запроса PLINQ и только параллельного выполнения запроса Если будет может привести к ускорения вычислений.
               Если структура запроса указывает, ускорение скорее всего не удастся получить, PLINQ выполнит запрос как обычный запрос LINQ to Objects.
            </summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>
              Параллелизации всего запроса, даже если это означает, что с помощью алгоритмов высокими издержками.
               Этот флаг используется в случаях, когда вы знаете, параллельное выполнение запроса приведет к ускорению, что PLINQ в режиме по умолчанию будет выполнен как последовательный.
            </summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>
              Указывает предпочитаемый тип слияния вывода для использования в запросе.
               Другими словами, указывает, каким образом PLINQ должен объединять результаты из различных разделов в одну итоговую последовательность.
               Это только рекомендация, которую система может не соблюдать при параллелизации всех запросов.
            </summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>
              Используйте тип слияния по умолчанию, то есть AutoBuffered.
            </summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>
              Используется режим слияния без буферов вывода.
               Как только после вычисления результирующих элементов доступность этого элемента потребителю запроса.
            </summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>
              Для слияния используются буферы вывода, размер определяется системой.
               Результаты накапливаются в буфере вывода, прежде чем они станут доступными потребителю запроса.
            </summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>
              Используется режим слияния с полными буферами вывода.
               Система будет накапливать все результаты перед выполнением любой из них потребителю запроса.
            </summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>
              Представляет параллельную последовательность.
            </summary>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>
              Представляет параллельную последовательность.
            </summary>
      <typeparam name="TSource">
                Тип элементов исходной последовательности.
              </typeparam>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>
              Предоставляет набор <see langword="static" /> (<see langword="Shared" /> в Visual Basic) методы для запроса структур данных, которые реализуют <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.InstanceNotFoundException">
      <summary>
              Вызываемое исключение, которое указывает на отсутствие экземпляров, возвращаемых поставщиком.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationBaseException">
      <summary>
              Представляет базовое исключение, связанное с поставщиком.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationException">
      <summary>
              Представляет исключение, связанное с поставщиком.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementBindAttribute">
      <summary>
              Атрибут ManagementBind указывает, что метод используется для возврата экземпляра класса WMI, связанного с определенным значением ключа.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCommitAttribute">
      <summary>
              Атрибут ManagementCommit указывает метод, который вызывается, если необходимо обновить набор свойств чтения и записи в рамках одной атомарной операции.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationAttribute">
      <summary>
              Атрибут ManagementConfiguration указывает, что свойство или поле представляет свойство WMI с доступом на чтение и запись.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationType">
      <summary>
              Представляет возможное поведение фиксации свойства чтения и записи.
               Используется в качестве значения параметра атрибута <see cref="T:System.Management.Instrumentation.ManagementConfigurationAttribute" />.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.Apply">
      <summary>
              Установленные значения вступают в силу только после вызова метода Commit.
            </summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit">
      <summary>
              Установленные значения вступают в силу немедленно.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCreateAttribute">
      <summary>
              Атрибут ManagementCreateAttribute указывает на то, что метод создает экземпляр управляемого объекта.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEntityAttribute">
      <summary>
              Атрибут ManagementEntity указывает, что класс предоставляет сведения об управлении, полученные от поставщика WMI.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEnumeratorAttribute">
      <summary>
              Атрибут ManagementEnumerator помечает метод, который возвращает все экземпляры класса WMI.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementHostingModel">
      <summary>
              Определяет значения, которые указывают модель размещения для поставщика.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.Decoupled">
      <summary>
              Активирует поставщик в качестве несвязанного поставщика.
            </summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.NetworkService">
      <summary>
              Активирует поставщик в хост-процессе поставщика, который выполняется под учетной записью NetworkService.
            </summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalService">
      <summary>
              Активирует поставщик в хост-процессе поставщика, который выполняется под учетной записью LocalService.
            </summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalSystem">
      <summary>
              Активирует поставщик в хост-процессе поставщика, который выполняется под учетной записью LocalSystem.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementKeyAttribute">
      <summary>
              Атрибут ManagementKey определяет ключевые свойства класса WMI.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementMemberAttribute">
      <summary>
              Этот класс использует платформа расширений поставщика WMI.NET.
               Это базовый класс для всех управляющих атрибутов, которые могут применяться к элементам.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNameAttribute">
      <summary>
              Атрибут ManagementName используется для переопределения имен, предоставляемых через класс WMI.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNewInstanceAttribute">
      <summary>
              Базовый класс для атрибутов управления, у которых есть только функции времени выполнения и нет представления схемы.
               Классы атрибутов управления ManagementBindAttribute, ManagementCreateAttribute и ManagementEnumeratorAttribute являются производными от этого класса.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementProbeAttribute">
      <summary>
              Атрибут ManagementProbe указывает, что свойство или поле представляет свойство WMI с доступом только на чтение.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementReferenceAttribute">
      <summary>
              Атрибут ManagementReferenceAttribute помечает элемент класса, свойство или параметр метода в качестве ссылки на другой объект или класс управления.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementRemoveAttribute">
      <summary>
              Атрибут ManagementRemoveAttribute указывает на то, что метод очищает экземпляр управляемого объекта.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementTaskAttribute">
      <summary>
              Атрибут ManagementTask указывает, что целевой метод реализует метод WMI.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Management.Instrumentation.WmiConfigurationAttribute">
      <summary>
              Атрибут WmiConfiguration указывает, что сборка содержит код, который реализует поставщик WMI с использованием модели расширений поставщика WMI.NET.
               Атрибут принимает параметры, которые обеспечивают конфигурацию высокого уровня для реализованного поставщика WMI.
            
              Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки.
               Для всех новых разработок следует использовать API-интерфейсы MI.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>
              Базовый класс узла динамического вызова.
               Этот тип используется как тип параметра для целей динамического узла.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>
              Тип динамического узла.
            </summary>
      <typeparam name="T">
                Тип делегата.
              </typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>
              Класс, предназначенный для привязки среды выполнения динамических операций к узлу динамического вызова.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>
              Класс, содержащий вспомогательные методы для класса callsite среды DLR.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteOps">
      <summary>
              Создает и кэширует правила привязки.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.Closure">
      <summary>
              Представляет состояние выполнения динамически создаваемого метода.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>
              Создает отладочную информацию для лямбда-выражений в дереве выражения.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>
              Указывает, что использование <see cref="T:System.Object" /> на член должен рассматриваться как динамически выполняемый тип.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>
              Представляет состояние выполнения динамически создаваемого метода.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>
              Представляет значения переменных во время выполнения.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>
              Определяет свойство для доступа к значению, на которое ссылается объект.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>
              Построитель для коллекции, предназначенной только для чтения.
            </summary>
      <typeparam name="T">
                Тип элемента коллекции.
              </typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>
              Представляет кэш правил привязки времени выполнения.
            </summary>
      <typeparam name="T">
                Тип делегата.
              </typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeOps">
      <summary>
              Содержит вспомогательные методы, вызываемые из динамически создаваемых методов.
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>
              Содержит ссылку на значение.
            </summary>
      <typeparam name="T">
                Тип значения, на которое ссылается <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.
              </typeparam>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>
              Разрешает регистрацию позднего связывания для обработчика событий.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.AesCng">
      <summary>
              Предоставляет реализацию алгоритма AES на платформе криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.AesCryptoServiceProvider">
      <summary>
              Выполняет симметричное шифрование и дешифрование с помощью реализации криптографических интерфейсы программирования приложений (CAPI) алгоритма расширенный стандарт шифрования (AES).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>
              Предоставляет управляемую реализацию алгоритма симметричного расширенный стандарт шифрования (AES).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithm">
      <summary>
              Инкапсулирует имя алгоритма шифрования.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithmGroup">
      <summary>
              Инкапсулирует имя группы алгоритмов шифрования.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngExportPolicies">
      <summary>
              Задает политики экспорта для ключа.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.None">
      <summary>
              Политики экспорта не устанавливаются.
               Экспорт ключа разрешен без ограничений.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowExport">
      <summary>
              Закрытый ключ может быть экспортирован несколько раз.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextExport">
      <summary>
              Закрытый ключ может быть экспортирован несколько раз, как обычный текст.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowArchiving">
      <summary>
              Закрытый ключ может быть экспортирован один раз для архивирования.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextArchiving">
      <summary>
              Закрытый ключ можно экспортировать один раз в виде открытого текста.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKey">
      <summary>
              Определяет базовую функциональность для ключей, используемых объектами криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyBlobFormat">
      <summary>
              Задает формат BLOB-объекта ключа для использования с объектами криптографии следующего поколения (CNG) Майкрософт.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationOptions">
      <summary>
              Указывает параметры, используемые для создания ключа.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.None">
      <summary>
              Параметры создания ключа не используются.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.MachineKey">
      <summary>
              Создать ключ компьютера.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.OverwriteExistingKey">
      <summary>
              Существующий ключ перезаписывается во время создания ключа.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationParameters">
      <summary>
              Содержит дополнительные свойства для создания ключа.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyHandleOpenOptions">
      <summary>
              Задает параметры открытия дескрипторов ключа.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.None">
      <summary>
              Открываемый дескриптор ключа не определяет эфемерный ключ.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey">
      <summary>
              Открываемый дескриптор ключа определяет эфемерный ключ.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyOpenOptions">
      <summary>
              Задает параметры открытия ключа.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.None">
      <summary>
              Параметры открытия ключа не указаны.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.UserKey">
      <summary>
              Если <see cref="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey" /> значение не указано, вместо него открывается ключа пользователя.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey">
      <summary>
              Открывается ключ компьютера.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.Silent">
      <summary>
              Запросы пользовательского интерфейса подавляются.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyUsages">
      <summary>
              Задает криптографические операции, которые могут использовать ключ криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.None">
      <summary>
              Без использования значения присваиваются ключ.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Decryption">
      <summary>
              Ключ может использоваться для шифрования и расшифровки.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Signing">
      <summary>
              Ключ может использоваться для подписывания и проверки.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.KeyAgreement">
      <summary>
              Ключ может использоваться для формирования секретного соглашения и обмена ключами.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.AllUsages">
      <summary>
              Ключ может использоваться для всех целей.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProperty">
      <summary>
              Инкапсулирует свойство ключа или поставщика криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyCollection">
      <summary>
              Предоставляет строго типизированную коллекцию свойств криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyOptions">
      <summary>
              Указывает параметры свойства ключа криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.None">
      <summary>
              Указанное свойство не имеет параметров.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.CustomProperty">
      <summary>
              Свойство не указано, CNG.
               Используйте этот параметр, чтобы избежать конфликтов имен будущих свойств CNG.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.Persist">
      <summary>
              Свойство должно быть сохранено.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProvider">
      <summary>
              Инкапсулирует имя поставщика хранилища ключей (KSP) для работы с объектами криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngUIPolicy">
      <summary>
              Инкапсулирует дополнительные параметры конфигурации для пользовательского интерфейса (UI), отображаемого криптографией следующего поколения (CNG) при доступе к защищенному ключу.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.CngUIProtectionLevels">
      <summary>
              Задает уровень защиты ключа в сценариях запроса пользовательского интерфейса (UI).
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.None">
      <summary>
              Пользовательский Интерфейс не подсказка при доступе к ключу.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ProtectKey">
      <summary>
              Пользовательский Интерфейс запрос отображается при первом доступе к ключу в процессе.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ForceHighProtection">
      <summary>
              Пользовательский Интерфейс приглашение выводится при каждом доступе к ключу.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.DSACng">
      <summary>
              Предоставляет реализацию алгоритма цифровых подписей (DSA) на платформе криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve">
      <summary>
              Представляет эллиптическую кривую.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.ECCurveType">
      <summary>
              Определяет способ интерпретации данных, содержащихся в объекте <see cref="T:System.Security.Cryptography.ECCurve" />.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Implicit">
      <summary>
              Данные кривой не интерпретируются.
               Предполагается, что вызывающему объекту известен тип кривой.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeShortWeierstrass">
      <summary>
              Параметры кривой представляют простую кривую с помощью формулы y^2 = x^3 + A*x + B в простом поле P.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeTwistedEdwards">
      <summary>
              Параметры кривой представляют простую кривую с помощью формулы A*x^2 + y^2 = 1 + B*x^2*y^2 в простом поле P.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeMontgomery">
      <summary>
              Параметры кривой представляют простую кривую с помощью формулы B*y^2 = x^3 + A*x^2 + x.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Characteristic2">
      <summary>
              Параметры кривой представляют кривую характеристики 2.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Named">
      <summary>
              Параметры кривой представляют именованную кривую.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.NamedCurves">
      <summary>
              Представляет класс фабрики для создания именованных кривых.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>
              Предоставляет абстрактный базовый класс, эллиптических кривых Диффи-Хелмана (ECDH) могут быть производными реализаций алгоритмов.
               Этот класс предоставляет базовый набор операций, которые должны поддерживать все реализации алгоритма ECDH.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCng">
      <summary>
              Предоставляет реализацию алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH) алгоритма криптографии следующего поколения (CNG).
               Этот класс используется для выполнения криптографических операций.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey">
      <summary>
              Указывает открытый ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH) для использования с <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> класса.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
      <summary>
              Задает функцию формирования ключа, <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> класс будет использоваться для преобразования секретного соглашения в ключевой материал.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash">
      <summary>
              Хэш-алгоритм используется для формирования ключевого материала.
              <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" /> Свойство задает имя алгоритма для использования.
               Если имя алгоритма не указан, <see cref="T:System.Security.Cryptography.SHA256" /> используется как алгоритм по умолчанию.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac">
      <summary>
              Для формирования ключевого материала используется алгоритм хэширования-сообщения проверки подлинности кода (HMAC).
              <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" /> Свойство указывает ключ, используемый.
               Либо это свойство должно быть задано или <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" /> должно быть присвоено свойству <see langword="true" />; в противном случае — <see cref="T:System.Security.Cryptography.CryptographicException" /> возникает при использовании <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />.
               Если заданы оба свойства, секретное соглашение используется в качестве ключа HMAC.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls">
      <summary>
              Для формирования ключевого материала используется протокол безопасности транспортного уровня (TLS).
              <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> И <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> свойства должно быть задано, в противном случае — <see cref="T:System.Security.Cryptography.CryptographicException" /> возникает при использовании <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>
              Предоставляет абстрактный базовый класс, от которого должны наследоваться все реализации <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>
              Предоставляет абстрактный базовый класс, который инкапсулирует алгоритм цифровых подписей на основе эллиптических кривых (ECDSA).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDsaCng">
      <summary>
              Предоставляет реализацию алгоритма цифровых подписей на основе эллиптических кривых (ECDSA) на платформе криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECKeyXmlFormat">
      <summary>
              Определяет форматы сериализации XML для ключей эллиптической кривой.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050">
      <summary>
              Формат сериализации XML, описанной в документе RFC 4050, «Использование алгоритм подписи эллиптических кривых (ECDSA) для XML цифровые подписи».
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECParameters">
      <summary>
              Представляет стандартные параметры для алгоритма шифрования на основе эллиптических кривых (ECC).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ECPoint">
      <summary>
              Представляет пару координат (X,Y) для структур шифрования на основе эллиптических кривых (ECC).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.IncrementalHash">
      <summary>
              Обеспечивает поддержку для постепенного вычисления значения хэша или HMAC в нескольких сегментах.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformation">
      <summary>
              Сведения о подписи манифеста.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformationCollection">
      <summary>
              Представляет доступную только для чтения коллекцию объектов <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" />.  </summary>
    </member>
    <member name="T:System.Security.Cryptography.MD5Cng">
      <summary>
              Предоставляет реализацию CNG (интерфейсы Cryptography Next Generation) MD5 (Message Digest 5) алгоритма хэширования 128-разрядный.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.RSACng">
      <summary>
              Предоставляет реализацию алгоритма SHA на платформе криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Cng">
      <summary>
              Предоставляет реализацию для алгоритма SHA (Secure Hash) криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Cng">
      <summary>
              Предоставляет реализацию криптографии следующего поколения (CNG) для алгоритма SHA (Secure Hash) для 256-разрядный хэш-значения.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256CryptoServiceProvider">
      <summary>
              Определяет объект обертки для доступа к реализации служб шифрования (CSP) <see cref="T:System.Security.Cryptography.SHA256" /> алгоритма.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Cng">
      <summary>
              Предоставляет реализацию криптографии следующего поколения (CNG) для алгоритма SHA (Secure Hash) для 384-разрядных хэш-значений.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384CryptoServiceProvider">
      <summary>
              Определяет объект обертки для доступа к реализации служб шифрования (CSP) <see cref="T:System.Security.Cryptography.SHA384" /> алгоритма.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Cng">
      <summary>
              Предоставляет реализацию криптографии следующего поколения (CNG) для алгоритма SHA (Secure Hash) для 512-разрядных значений хэша.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512CryptoServiceProvider">
      <summary>
              Определяет объект обертки для доступа к реализации служб шифрования (CSP) <see cref="T:System.Security.Cryptography.SHA512" /> алгоритма.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureVerificationResult">
      <summary>
              Задает большинство кодов результата для проверки подписи.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.Valid">
      <summary>
              Результат проверки: сертификат является допустимым.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.AssemblyIdentityMismatch">
      <summary>
              Удостоверение сборки, указанные в данных / asm: assemblyIdentity манифеста не совпадает с именем сборки в подписи Authenticode в данных и ds:signature или DS: KeyInfo или msrel:RelData или r: лицензии или r: grant / как: ManifestInformation или как: assemblyIdentity узла.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.ContainingSignatureInvalid">
      <summary>
              Не проверяет подпись строгого имени в <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" /> объекта.
               Поскольку подпись строгого имени охватывает подпись Authenticode, злоумышленник может попытаться подменить подпись Authenticode подписью по своему выбору.
               Чтобы избежать этого, этот код ошибки возвращается, если строгое имя не удается проверить подмена части подписи строгого имени сделает его.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublicKeyTokenMismatch">
      <summary>
              Токен открытого ключа из манифеста удостоверения в данных / asm: узел не соответствует токен открытого ключа ключ, используемый для подписания манифеста.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublisherMismatch">
      <summary>
              Имя издателя из данных / asmv2:publisherIdentity не соответствует имени субъекта сертификата подписи или хэша ключа издателя из одного узла publisherIdentity не соответствует хеш ключа сертификата подписи.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.SystemError">
      <summary>
              При проверке отношений доверия произошла ошибка системного уровня.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidSignerCertificate">
      <summary>
              Сертификат для подписи сообщения является недопустимым или не найден.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCountersignature">
      <summary>
              Одна из подписей счетчика является недопустимой.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateSignature">
      <summary>
              Невозможно проверить подпись сертификата.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimestamp">
      <summary>
              Подписи отметки времени или сертификат имеет неправильный формат или не могут быть проверены.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadDigest">
      <summary>
              Цифровая подпись объекта не была проверена.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BasicConstraintsNotObserved">
      <summary>
              Расширение основных ограничений сертификата не были просмотрены.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownTrustProvider">
      <summary>
              Сертификат имеет неизвестный поставщик доверия.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownVerificationAction">
      <summary>
              Сертификат имеет Неизвестная операция проверки.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadSignatureFormat">
      <summary>
              Недопустимый формат подписи.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateNotExplicitlyTrusted">
      <summary>
              Сертификат не является доверенным явным образом.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.MissingSignature">
      <summary>
              Отсутствует подпись.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExpired">
      <summary>
              Истек срок действия сертификата.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimePeriodNesting">
      <summary>
              Сертификат был выдан после выдачи сертификата истек.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateRole">
      <summary>
              Сертификат имеет недопустимую роль.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PathLengthConstraintViolated">
      <summary>
              Нарушено ограничение длины цепочки сертификатов.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownCriticalExtension">
      <summary>
              В сертификате содержится Неизвестное расширение, отмечены как критические.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateUsageNotAllowed">
      <summary>
              Сертификат не может использоваться для подписывания и проверки.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.IssuerChainingError">
      <summary>
              Является родительским для данного сертификата не выдавал этот дочерний сертификат.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateMalformed">
      <summary>
              Сертификат не найден или имеет пустое значение важных полей, таких как имя субъекта или поставщика.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedRootCertificate">
      <summary>
              Корневой сертификат не является доверенным.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CouldNotBuildChain">
      <summary>
              Не удается построить цепочку.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.GenericTrustFailure">
      <summary>
              Не удалось общие доверия сертификата.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateRevoked">
      <summary>
              Сертификат был отозван.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedTestRootCertificate">
      <summary>
              Тестовый корневой сертификат не является доверенным.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.RevocationCheckFailure">
      <summary>
              Сбой проверки отзыва.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateUsage">
      <summary>
              Сертификат имеет недопустимое назначение.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExplicitlyDistrusted">
      <summary>
              Сертификат был явно помечен как ненадежный пользователем.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedCertificationAuthority">
      <summary>
              Цепочка сертификатов обработана правильно, но один из сертификатов ЦС не является доверенным для поставщика политики.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificatePolicy">
      <summary>
              Сертификат имеет недопустимую политику.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateName">
      <summary>
              Сертификат имеет недопустимое имя.
               Имя не включены в список разрешенных или явно исключен.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.StrongNameSignatureInformation">
      <summary>
              Содержит сведения о подписи строгого имени для манифеста.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.TripleDESCng">
      <summary>
              Предоставляет реализацию алгоритма 3DES на платформе криптографии следующего поколения (CNG).
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation">
      <summary>
              Предоставляет сведения о подписи Authenticode для манифеста.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.DSACertificateExtensions">
      <summary>
              Предоставляет методы расширения для получения реализаций <see cref="T:System.Security.Cryptography.DSA" /> для открытых и закрытых ключей <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions">
      <summary>
              Предоставляет методы расширения для получения реализаций <see cref="T:System.Security.Cryptography.ECDsa" /> для открытых и закрытых ключей сертификата <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.RSACertificateExtensions">
      <summary>
              Предоставляет методы расширения для получения реализаций <see cref="T:System.Security.Cryptography.RSA" /> для открытых и закрытых ключей <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TimestampInformation">
      <summary>
              Предоставляет сведения об отметке времени, которая была применена к подписи Authenticode для манифеста.
            </summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TrustStatus">
      <summary>
              Идентифицирует уровень достоверности, назначенный подписи манифеста.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Untrusted">
      <summary>
              Подпись создана явно доверяемый домен издателем.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.UnknownIdentity">
      <summary>
              Удостоверение не известно, Недопустимая подпись.
               Так как отсутствует проверенная подпись, невозможно определить идентификацию.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.KnownIdentity">
      <summary>
              Известная идентификация и подпись действительна.
               Действительная подпись Authenticode предоставляет удостоверение.
            </summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Trusted">
      <summary>
              Подпись действительна и была создана явно доверенным издателем.
            </summary>
    </member>
    <member name="T:System.Security.ManifestKinds">
      <summary>
              Представляет тип, к которому применяется сведения о подписи манифеста.
            </summary>
    </member>
    <member name="F:System.Security.ManifestKinds.None">
      <summary>
              Манифест — без конкретного типа.
            </summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Deployment">
      <summary>
              Манифест — только для развертывания.
            </summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Application">
      <summary>
              Является манифест приложения.
            </summary>
    </member>
    <member name="F:System.Security.ManifestKinds.ApplicationAndDeployment">
      <summary>
              Является манифест для развертывания и приложения.
               Значение по умолчанию для проверки сигнатур.
            </summary>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>
              Указывает, можно ли несколько раз войти в блокировку из одного и того же потока.
            </summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>
              Если поток пытается войти в блокировку рекурсивно, выдается исключение.
               Некоторые классы могут допускать определенные виды рекурсий, когда этот параметр.
            </summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>
              Поток может войти в блокировку рекурсивно.
               Некоторые классы могут игнорировать эту возможность.
            </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>
              Представляет блокировку, используемую для управления доступом к ресурсу, которая позволяет нескольким потокам производить считывание или получать монопольный доступ на запись.
            </summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>
              Предоставляет набор статических (Shared в Visual Basic) методов для работы с определенными типами из <see cref="T:System.Threading.Tasks.Task" /> экземпляров.
            </summary>
    </member>
  </members>
</doc>