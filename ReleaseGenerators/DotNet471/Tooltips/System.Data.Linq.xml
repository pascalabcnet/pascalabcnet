<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Linq</name>
  </assembly>
  <members>
    <member name="E:System.Data.Linq.EntitySet`1.ListChanged">
      <summary>
              Происходит при изменении содержимого списка.
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Arguments">
      <summary>
              Перехватывает внутреннее состояние для быстрого материализатора.
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.BufferReader">
      <summary>
              Представляет средство чтения, который считывает строки данных в режиме только вперед.
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.DataReader">
      <summary>
              Представляет средство чтения данных.
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Globals">
      <summary>
              Перехватывает внутреннее состояние для быстрого материализатора.
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Locals">
      <summary>
              Перехватывает внутреннее состояние для быстрого материализатора.
            </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Ordinals">
      <summary>
              Представляет порядковые номера столбцов для чтения данных.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Binary" />.
            </summary>
      <param name="value">
                Байт, представляющий двоичные данные.
              </param>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)">
      <summary>
              Определяет, равны ли два двоичных объекта.
            </summary>
      <param name="other">
                <see cref="T:System.Object" /> С которым сравнивается текущий объект.
              </param>
      <returns>
              <see langword="true" /> Если два двоичных объекта равны; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Object)">
      <summary>
              Определяет, равен ли указанный объект <see cref="T:System.Object" /> текущему объекту <see cref="T:System.Object" />.
            </summary>
      <param name="obj">
                Объект <see cref="T:System.Object" />, с которым сравнивается текущий объект <see cref="T:System.Object" />.
              </param>
      <returns>
              <see langword="true" /> Если два двоичных объекта равны; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.GetHashCode">
      <summary>
              Служит хэш-функцией для определенного типа.
            </summary>
      <returns>
              Хэш-код для текущего двоичного объекта.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>
              Описывает равенство между двумя двоичными объектами.
            </summary>
      <param name="binary1">
                Первый двоичный объект.
              </param>
      <param name="binary2">
                Второй двоичный объект.
              </param>
      <returns>
              <see langword="true" /> Если двоичные объекты равны; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
      <summary>
              Позволяет использовать массивы байтов быть неявно преобразован к <see cref="T:System.Data.Linq.Binary" /> тип в языке программирования.
            </summary>
      <param name="value">
                Массив байтов для преобразования в экземпляр <see cref="T:System.Data.Linq.Binary" /> типа.
              </param>
      <returns>
              A <see cref="T:System.Data.Linq.Binary" /> класс, содержащий запрещенное значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>
              Описывает неравенство между двумя двоичными объектами.
            </summary>
      <param name="binary1">
                Первый двоичный объект.
              </param>
      <param name="binary2">
                Второй двоичный объект.
              </param>
      <returns>
              <see langword="true" /> Если двоичные объекты не равны; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.ToArray">
      <summary>
              Возвращает массив байтов, который представляет текущий двоичный объект.
            </summary>
      <returns>
              Массив байтов, содержащий значение текущего двоичного объекта.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Binary.ToString">
      <summary>
              Возвращает <see cref="T:System.String" /> представляющий текущий двоичный объект.
            </summary>
      <returns>
              Объект <see cref="T:System.String" /> представляющий текущий двоичный объект.
            </returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Clear">
      <summary>
              Удаляет все конфликты из коллекции.
            </summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)">
      <summary>
              Указывает, является ли указанный конфликт является членом коллекции.
            </summary>
      <param name="item">
                Указанный конфликт.
              </param>
      <returns>
              Возвращает значение true, если указанный конфликт является элементом коллекции.
            </returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.
            </summary>
      <param name="array">
                Массив для копирования данных.
              </param>
      <param name="arrayIndex">
                Индекс массива, с которого начнется копирование.
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.GetEnumerator">
      <summary>
              Возвращает перечислитель для коллекции.
            </summary>
      <returns>
              Перечислитель для коллекции.
            </returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)">
      <summary>
              Указывает, удален ли указанный конфликт из коллекции.
            </summary>
      <param name="item">
                Конфликт для удаления.
              </param>
      <returns>
              Возвращает значение true, если <see cref="T:System.Data.Linq.ObjectChangeConflict" /> удален из коллекции.
            </returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)">
      <summary>
              Разрешает все конфликты в коллекции, используя указанную стратегию.
            </summary>
      <param name="mode">
                Один из вариантов, доступных в <see cref="T:System.Data.Linq.RefreshMode" />.
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>
              Разрешает все конфликты в коллекции, используя указанную стратегию.
            </summary>
      <param name="mode">
                Стратегия, используемая для разрешения конфликта.
              </param>
      <param name="autoResolveDeletes">
                Если значение равно true, автоматически разрешает конфликты, которые являются результатом измененного объекта, который больше не находится в базе данных.
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#Add(System.Data.Linq.ObjectChangeConflict)">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.
            </summary>
      <param name="item">
                Добавляемый элемент.
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              Копирует коллекцию в массив.
            </summary>
      <param name="array">
                Имя массива.
              </param>
      <param name="index">
                Индекс массива.
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>
              Перечислитель, который осуществляет перебор коллекции.
            </returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ChangeConflictException" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.ChangeConflictException" /> класса и указывает сообщения для объяснения исключения.
            </summary>
      <param name="message">
                Сообщение, отображаемое при возникновении исключения.
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String,System.Exception)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.ChangeConflictException" /> классом, указывает сообщения для объяснения исключения и указывает исключение, вызвавшее данное исключение.
            </summary>
      <param name="message">
                Сообщение, отображаемое при возникновении исключения.
              </param>
      <param name="innerException">
                Указывает исключение, из которых <see cref="T:System.Data.Linq.ChangeConflictException" /> результат.
              </param>
    </member>
    <member name="M:System.Data.Linq.ChangeSet.ToString">
      <summary>
              Возвращает строку, которая представляет текущий объект <see cref="T:System.Data.Linq.ChangeSet" />.
            </summary>
      <returns>
              Строка, представляющая текущий объект <see cref="T:System.Data.Linq.ChangeSet" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg6">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg7">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg8">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg6">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg7">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg8">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg9">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg6">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg7">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg8">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg9">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg10">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg6">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg7">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg8">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg9">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg10">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg11">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg6">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg7">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg8">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg9">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg10">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg11">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg12">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg6">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg7">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg8">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg9">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg10">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg11">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg12">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg13">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg6">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg7">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg8">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg9">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg10">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg11">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg12">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg13">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg14">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg6">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg7">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg8">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg9">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg10">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg11">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg12">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg13">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg14">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg15">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg6">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>
              Компилирует запрос.
            </summary>
      <param name="query">
                Выражение запроса для компиляции.
              </param>
      <typeparam name="TArg0">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg1">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg2">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg3">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg4">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg5">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg6">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TArg7">
                Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.
              </typeparam>
      <typeparam name="TResult">
                Тип <see langword="T" /> в <see cref="T:System.Collections.Generic.IEnumerable`1" /> возвращены при выполнении делегата, возвращаемого методом <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> метод.
              </typeparam>
      <returns>
              Универсальный делегат, представляющий скомпилированный запрос.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.DataContext" /> ссылки на подключение, используемое классом .NET Framework.
            </summary>
      <param name="connection">
                Подключение, используемое .NET Framework.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.DataContext" /> класс, ссылаясь на подключение и источник сопоставления.
            </summary>
      <param name="connection">
                Соединение, используемое платформой .NET Framework.
              </param>
      <param name="mapping">
                Источник для сопоставления.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.DataContext" /> класс, ссылаясь на исходный файл.
            </summary>
      <param name="fileOrServerOrConnection">
                Этот аргумент может быть одним из следующих:
              
                Имя файла, где находится база данных SQL Server Express.
              
                Имя сервера, где находится база данных.
                 В этом случае поставщик использует базу данных по умолчанию для пользователя.
              
                Полная строка подключения.
                
                  LINQ to SQL просто передает строку поставщику без изменений.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.DataContext" /> класс, ссылаясь на исходный файл и источник сопоставления.
            </summary>
      <param name="fileOrServerOrConnection">
                Этот аргумент может быть одним из следующих:
              
                Имя файла, где находится база данных SQL Server Express.
              
                Имя сервера, где находится база данных.
                 В этом случае поставщик использует базу данных по умолчанию для пользователя.
              
                Полная строка подключения.
                
                  LINQ to SQL просто передает строку поставщику без изменений.
              </param>
      <param name="mapping">
                Источник для сопоставления.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateDatabase">
      <summary>
              Создает базу данных на сервере.
            </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>
              Выполняет функцию базы данных, возвращающие табличные значения, связанные с указанным методом CLR.
            </summary>
      <param name="instance">
                 Экземпляр вызова метода (текущий объект).
              </param>
      <param name="methodInfo">
                <see cref="T:System.Reflection.MethodInfo" /> Определяет метод CLR, соответствующий методу базы данных.
              </param>
      <param name="parameters">
                Массив параметров для передачи в команду.
              </param>
      <typeparam name="TResult">
                Тип элементов в возвращаемой коллекции.
              </typeparam>
      <returns>
              Коллекция результирующих значений, возвращаемых запросом к базе данных.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.DatabaseExists">
      <summary>
              Определяет, можно ли открыть связанную базу данных.
            </summary>
      <returns>
              <see langword="true" /> Если указанная база данных может быть открыт; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.DeleteDatabase">
      <summary>
              Удаляет связанную базу данных.
            </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose">
      <summary>
              Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Data.Linq.DataContext" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose(System.Boolean)">
      <summary>
              Освобождает неуправляемые ресурсы, используемые <see cref="T:System.Data.Linq.DataContext" /> класса и при необходимости освобождает и управляемые ресурсов.
            </summary>
      <param name="disposing">
                Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
      <summary>
              Выполняет команды SQL напрямую для базы данных.
            </summary>
      <param name="command">
                Выполняемая команда SQL.
              </param>
      <param name="parameters">
                Массив параметров для передачи в команду.
                 Следует отметить следующее поведение:
              
                Если количество объектов в массиве меньше, чем наибольший номер, заданный в командной строке, создается исключение.
              
                Если массив содержит объекты, на которые нет ссылок в командной строке, исключение не возникает.
              
                Если какая-либо из параметров имеет значение null, он преобразуется в <see langword="DBNull.Value" />.
              </param>
      <returns>
              Число строк, измененных выполненной командой.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)">
      <summary>
              Выполняется внутри переопределенные методы удаления для повторного делегирования в LINQ to SQL задачи создания и выполнения динамического SQL для операции удаления.
            </summary>
      <param name="entity">
                Удаляемая сущность.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
      <summary>
              Выполняется внутри переопределенные методы вставки для повторного делегирования в LINQ to SQL задачи создания и выполнения динамического SQL для операций вставки.
            </summary>
      <param name="entity">
                Объект для вставки.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)">
      <summary>
              Выполняется внутри переопределенные методы обновления для повторного делегирования в LINQ to SQL задачи создания и выполнения динамического SQL для операций обновления.
            </summary>
      <param name="entity">
                Обновить сущность.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>
              Выполняет хранимую процедуру базы данных или скалярную функцию, связанную с указанным методом CLR.
            </summary>
      <param name="instance">
                 Экземпляр вызова метода (текущий объект).
              </param>
      <param name="methodInfo">
                Определяет метод CLR, соответствующий методу базы данных.
              </param>
      <param name="parameters">
                Массив параметров для передачи в команду.
              </param>
      <returns>
              Результат (возвращаемое значение и выходные параметры) выполнения указанного метода.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
      <summary>
              Выполняет запросы SQL непосредственно в базе данных.
            </summary>
      <param name="elementType">
                Тип <see cref="T:System.Collections.Generic.IEnumerable`1" /> должны быть возвращены.
              
                Алгоритм сопоставления столбцов в результате запроса с полями или свойствами в объекте работает следующим образом:
              
                Если поле или свойство сопоставляется с определенным именем столбца, это имя столбца ожидается в наборе результатов.
              
                Если поле или свойство не сопоставляется, столбец с тем же именем, как и поле или свойство ожидается в наборе результатов.
              
                Сравнение выполняется сначала ищет совпадение с учетом регистра.
                 Если это совпадение не найдено, следующий поиск выполняется для совпадений без учета регистра.
              
                Запрос должен возвращать все отслеженные поля и свойства объекта (кроме тех, которые загружаются отложена) Если выполняются все следующие условия:
              
                <paramref name="T" /> сущность явно отслеживается <see cref="T:System.Data.Linq.DataContext" />.
              
                Свойство <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> имеет значение <see langword="true" />.
              
                Сущность содержит первичный ключ.
              
                В противном случае возникает исключение.
              </param>
      <param name="query">
                Запрос SQL для выполнения.
              </param>
      <param name="parameters">
                Массив параметров для передачи в команду.
                 Следует отметить следующее поведение:
              
                Если количество объектов в массиве меньше, чем наибольший номер, заданный в командной строке, создается исключение.
              
                Если массив содержит объекты, на которые нет ссылок в командной строке, исключение не возникает.
              
                Если параметр является <see langword="null" />, он преобразуется в <see langword="DBNull.Value" />.
              </param>
      <returns>
              <see cref="T:System.Collections.Generic.IEnumerable`1" /> Коллекция объектов, возвращаемых запросом.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
      <summary>
              Выполняет запросы SQL непосредственно в базе данных и возвращает объекты.
            </summary>
      <param name="query">
                Запрос SQL для выполнения.
              </param>
      <param name="parameters">
                Массив параметров для передачи в команду.
                 Следует отметить следующее поведение:
              
                Если количество объектов в массиве меньше, чем наибольший номер, заданный в командной строке, создается исключение.
              
                Если массив содержит объекты, на которые нет ссылок в командной строке, исключение не возникает.
              
                Если параметр имеет значение null, он преобразуется в <see langword="DBNull.Value" />.
              </param>
      <typeparam name="TResult">
                Тип элементов в возвращаемой коллекции.
              </typeparam>
      <returns>
              Коллекция объектов, возвращаемых запросом.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetChangeSet">
      <summary>
              Возвращает измененный объектами, отслеживаемыми классом <see cref="T:System.Data.Linq.DataContext" />.
            </summary>
      <returns>
              Набор объектов возвращается как три коллекции только для чтения.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
      <summary>
              Возвращает сведения о командах SQL, создаваемые LINQ to SQL.
            </summary>
      <param name="query">
                Запрос, сведения команды SQL которого не требуется извлечь.
              </param>
      <returns>
              Запрошенный объект данных команды.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable(System.Type)">
      <summary>
              Возвращает коллекцию объектов определенного типа, где определяется тип <paramref name="type" /> параметр.
            </summary>
      <param name="type">
                Тип возвращаемых объектов.
              </param>
      <returns>
              Коллекция объектов, определенных <paramref name="type" /> параметр.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable``1">
      <summary>
              Возвращает коллекцию объектов определенного типа, где определяется тип <paramref name="TEntity" /> параметр.
            </summary>
      <typeparam name="TEntity">
                Тип возвращаемых объектов.
              </typeparam>
      <returns>
              Коллекция объектов, определенных <paramref name="TEntity" /> параметр.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)">
      <summary>
              Обновляет коллекцию объектов сущности в соответствии с указанным режимом.
            </summary>
      <param name="mode">
                Значение, указывающее конфликтов оптимистичного параллелизма, обрабатываются.
              </param>
      <param name="entities">
                Коллекция сущностей для обновления.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)">
      <summary>
              Обновляет объект сущности в соответствии с указанным режимом.
            </summary>
      <param name="mode">
                Значение, указывающее конфликтов оптимистичного параллелизма, обрабатываются.
              </param>
      <param name="entity">
                Обновляемый объект.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])">
      <summary>
              Обновляет массив объектов сущности в соответствии с указанным режимом.
            </summary>
      <param name="mode">
                Значение, указывающее конфликтов оптимистичного параллелизма, обрабатываются.
              </param>
      <param name="entities">
                Массив объектов сущностей, который требуется обновить.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges">
      <summary>
              Вычисляет набор измененных объектов, которые вставлены, обновлены или удалены и выполняет соответствующие команды для внесения изменений в базу данных.
            </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
      <summary>
              Отправляет изменения, внесенные в извлеченных объектов в основную базу данных и действие, выполняемое при сбое отправки.
            </summary>
      <param name="failureMode">
                Действие, выполняемое при сбое отправки.
                 Ниже приведены допустимые аргументы:
              
                <see cref="F:System.Data.Linq.ConflictMode.FailOnFirstConflict" />
              
                <see cref="F:System.Data.Linq.ConflictMode.ContinueOnConflict" />
              </param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)">
      <summary>
              Преобразует существующий <see cref="T:System.Data.Common.DbDataReader" /> к объектам.
            </summary>
      <param name="reader">
                Преобразуемая структура <see cref="T:System.Data.IDataReader" />.
              </param>
      <returns>
              Список объектов, возвращаемых преобразованием.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
      <summary>
              Преобразует существующий <see cref="T:System.Data.Common.DbDataReader" /> к объектам.
            </summary>
      <param name="elementType">
                Тип <see cref="T:System.Collections.Generic.IEnumerable`1" /> должны быть возвращены.
              
                Алгоритм сопоставления столбцов в результате с полями и свойствами в объекте работает следующим образом:
              
                Если поле или свойство сопоставляется с определенным именем столбца, это имя столбца ожидается в наборе результатов.
              
                Если поле или свойство не сопоставляется, столбец с тем же именем, как и поле или свойство ожидается в наборе результатов.
              
                Сравнение выполняется сначала ищет совпадение с учетом регистра.
                 Если это совпадение не найдено, следующий поиск выполняется для совпадений без учета регистра.
              
                Запрос должен возвращать все отслеженные поля и свойства объекта (кроме тех, которые загружаются отложена) Если выполняются все следующие условия:
              
                <paramref name="T" /> сущность явно отслеживается <see cref="T:System.Data.Linq.DataContext" />.
              
                Свойство <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> имеет значение <see langword="true" />.
              
                Сущность содержит первичный ключ.
              
                В противном случае возникает исключение.
              </param>
      <param name="reader">
                Преобразуемая структура <see cref="T:System.Data.IDataReader" />.
              </param>
      <returns>
              Список объектов, возвращаемых преобразованием.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>
              Преобразует существующий <see cref="T:System.Data.Common.DbDataReader" /> к объектам.
            </summary>
      <param name="reader">
                Преобразуемая структура <see cref="T:System.Data.IDataReader" />.
              </param>
      <typeparam name="TResult">
                Тип <see cref="T:System.Collections.Generic.IEnumerable`1" /> должны быть возвращены.
              </typeparam>
      <returns>
              Коллекция объектов, возвращаемых преобразованием.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DataLoadOptions" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
      <summary>
              Фильтрует объекты, извлеченные для определенной связи.
            </summary>
      <param name="expression">
                Определяет запрос, используемый на конкретной один ко многим поля или свойства.
                 Примите во внимание следующее.
              
                Если выражение не начинается с поле или свойство, которое представляет связь «один ко многим», создается исключение.
              
                Если в выражении отображается оператор, отличный от допустимого оператора, создается исключение.
                 Ниже приведены допустимые операторы.
              
                Где
              
                OrderBy
              
                ThenBy
              
                OrderByDescending
              
                ThenByDescending
              
                Take
              </param>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
              Фильтрует объекты, извлеченные для определенной связи.
            </summary>
      <param name="expression">
                Определяет запрос, используемый на конкретной один ко многим поля или свойства.
                 Примите во внимание следующее.
              
                Если выражение не начинается с поле или свойство, которое представляет связь «один ко многим», создается исключение.
              
                Если в выражении отображается оператор, отличный от допустимого оператора, создается исключение.
                 Ниже приведены допустимые операторы.
              
                Где
              
                OrderBy
              
                ThenBy
              
                OrderByDescending
              
                ThenByDescending
              
                Take
              </param>
      <typeparam name="T">
                Запрашиваемый тип.
              
                Если тип не сопоставляется, создается исключение.
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
      <summary>
              Извлекает указанные данные, связанные с основными целевыми объектами с помощью лямбда-выражение.
            </summary>
      <param name="expression">
                Лямбда-выражение, определяющее связанный материал.
              </param>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
              Указывает, какие вложенные объекты следует извлечь при отправке запроса на объект типа T.
            </summary>
      <param name="expression">
                Определяет поле или свойство для извлечения.
              
                Если выражение не определяет поле или свойство, которое представляет связь «один к одному "или" один ко многим», создается исключение.
              </param>
      <typeparam name="T">
                Тип, запрашиваемый.
              
                Если этот тип не сопоставляется, создается исключение.
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType(System.Object,System.Type)">
      <summary>
              Изменяет указанное значение к указанному типу.
            </summary>
      <param name="value">
                Преобразуемый объект.
              </param>
      <param name="type">
                Тип, в который требуется преобразовать объект.
              </param>
      <returns>
              Объект, содержащий преобразованное значение указанного типа.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType``1(System.Object)">
      <summary>
              Изменяет указанное значение на текущий тип.
            </summary>
      <param name="value">
                Преобразуемый объект.
              </param>
      <typeparam name="T">
                Чтобы изменить тип.
              </typeparam>
      <returns>
              Объект указанного типа, содержащий преобразованное значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.DuplicateKeyException" />.
            </summary>
      <param name="duplicate">
                Повторяющийся ключ, вызвавшего исключение.
              </param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.DuplicateKeyException" /> класс, ссылаясь на дубликат ключа и указывая сообщение об ошибке.
            </summary>
      <param name="duplicate">
                Повторяющийся ключ, вызвавшего исключение.
              </param>
      <param name="message">
                Сообщение, отображаемое при возникновении исключения.
              </param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String,System.Exception)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.DuplicateKeyException" /> класс, ссылаясь на дубликат ключа, создавая сообщение об ошибке и указав исключение, вызвавшее это исключение.
            </summary>
      <param name="duplicate">
                Повторяющийся ключ, вызвавшего исключение.
              </param>
      <param name="message">
                Сообщение, отображаемое при возникновении исключения.
              </param>
      <param name="innerException">
                Предыдущее исключение, вызвавшее <see cref="T:System.Data.Linq.DuplicateKeyException" /> исключение.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(`0)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.EntityRef`1" /> класса путем указания целевой сущности.
            </summary>
      <param name="entity">
                Целевой сущности.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.EntityRef`1" /> класса путем указания источника.
            </summary>
      <param name="source">
                Указанный источник.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Data.Linq.EntityRef{`0})">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.EntityRef`1" /> класс, ссылаясь на целевую сущность.
            </summary>
      <param name="entityRef">
                Целевой сущности.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.EntitySet`1" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor(System.Action{`0},System.Action{`0})">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.EntitySet`1" /> класса при поставке обработчиков для Добавление и удаление операций.
            </summary>
      <param name="onAdd">
                Делегат для <see cref="M:System.Data.Linq.EntitySet`1.Add(`0)" />.
              </param>
      <param name="onRemove">
                Делегат для <see cref="M:System.Data.Linq.EntitySet`1.Remove(`0)" />.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Add(`0)">
      <summary>
              Добавление сущности.
            </summary>
      <param name="entity">
                Добавляемая сущность.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Добавляет коллекцию сущностей.
            </summary>
      <param name="collection">
                Коллекция для добавления.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Assign(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Назначает <see cref="T:System.Data.Linq.EntitySet`1" /> коллекцию в другой <see cref="T:System.Data.Linq.EntitySet`1" /> коллекции.
            </summary>
      <param name="entitySource">
                Коллекция для назначения.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Clear">
      <summary>
              Удаляет все элементы.
            </summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Contains(`0)">
      <summary>
              Указывает, является ли <see cref="T:System.Data.Linq.EntitySet`1" /> содержит определенную сущность.
            </summary>
      <param name="entity">
                Сущность.
              </param>
      <returns>
              <see langword="true" /> Если <see cref="T:System.Data.Linq.EntitySet`1" /> содержит сущности; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.CopyTo(`0[],System.Int32)">
      <summary>
              Копирует <see cref="T:System.Data.Linq.EntitySet`1" /> в массив.
            </summary>
      <param name="array">
                Массив для копирования данных.
              </param>
      <param name="arrayIndex">
                Начальный индекс в массиве.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetEnumerator">
      <summary>
              Возвращает перечислитель, который осуществляет итерацию по коллекции.
            </summary>
      <returns>
              Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetNewBindingList">
      <summary>
              Создает новый список для привязки к источнику данных.
            </summary>
      <returns>
              Новый <see cref="T:System.ComponentModel.IBindingList" /> для привязки к источнику данных.
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.IndexOf(`0)">
      <summary>
              Возвращает индекс сущности.
            </summary>
      <param name="entity">
                Сущность, индекс которого возвращается.
              </param>
      <returns>
              Целое число, представляющее индекс.
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Insert(System.Int32,`0)">
      <summary>
              Вставляет объект в позицию индекса.
            </summary>
      <param name="index">
                Индекс, представляющий позицию, по которому следует вставить сущность.
              </param>
      <param name="entity">
                Объект для вставки.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Load">
      <summary>
              Загружает <see cref="T:System.Data.Linq.EntitySet`1" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Remove(`0)">
      <summary>
              Удаляет сущность.
            </summary>
      <param name="entity">
                Удаляемая сущность.
              </param>
      <returns>
              <see langword="true" /> Если сущность успешно удалена; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.RemoveAt(System.Int32)">
      <summary>
              Удаляет сущность по указанному индексу.
            </summary>
      <param name="index">
                Индекс удаляемая сущность.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.SetSource(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Задает источник <see cref="T:System.Data.Linq.EntitySet`1" />.
            </summary>
      <param name="entitySource">
                Источник <see cref="T:System.Data.Linq.EntitySet`1" />.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.
            </summary>
      <param name="array">
                Массив, в который копируются элементы коллекции.
              </param>
      <param name="index">
                Индекс массива, с которого выполняется копирование начинается.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>
              <see cref="T:System.Collections.IEnumerator" /> Объект, который может использоваться для итерации по коллекции.
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Add(System.Object)">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.Collections.IList.Add(System.Object)" />.
            </summary>
      <param name="value">
                Объект, который нужно добавить в список.
              </param>
      <returns>
              Позиция, на которую вставлен новый элемент.
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Contains(System.Object)">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.Collections.IList.Contains(System.Object)" />.
            </summary>
      <param name="value">
                Объект, который нужно найти в списке.
              </param>
      <returns>
              <see langword="true" /> Если <see cref="T:System.Object" /> находится в <see cref="T:System.Collections.IList" />; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.
            </summary>
      <param name="value">
                Объект, который нужно найти в списке.
              </param>
      <returns>
              Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.
            </returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.
            </summary>
      <param name="index">
                Индекс объекта в списке.
              </param>
      <param name="value">
                Объект, который нужно вставить в список.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Remove(System.Object)">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.Collections.IList.Remove(System.Object)" />.
            </summary>
      <param name="value">
                Объект, который нужно удалить из списка.
              </param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList">
      <summary>
              Описание этого члена см. в разделе <see cref="M:System.ComponentModel.IListSource.GetList" />.
            </summary>
      <returns>
              <see cref="T:System.Collections.IList" /> Можно привязать к источнику данных из объекта.
            </returns>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> системным сообщением, содержащим описание ошибки.
            </summary>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> с использованием заданного сообщения, содержащего описание ошибки.
            </summary>
      <param name="message">
                Сообщение с описанием исключения.
                 Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.
              </param>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String,System.Exception)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее данное исключение.
            </summary>
      <param name="message">
                Сообщение с описанием исключения.
                 Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.
              </param>
      <param name="innerException">
                Исключение, которое является причиной текущего исключения.
                 Если значение параметра <paramref name="innerException" /> не равно <see langword="null" />, текущее исключение сгенерировано в блоке <see langword="catch" />, обрабатывающем внутреннее исключение.
              </param>
    </member>
    <member name="M:System.Data.Linq.IExecuteResult.GetParameterValue(System.Int32)">
      <summary>
              Предоставляет доступ к nй выходной параметр.
            </summary>
      <param name="parameterIndex">
                Индекс параметра для извлечения.
              </param>
      <returns>
              Объект, содержащий значение указанного параметра.
            </returns>
    </member>
    <member name="M:System.Data.Linq.IMultipleResults.GetResult``1">
      <summary>
              Извлекает следующий результат как последовательность указанного типа.
            </summary>
      <typeparam name="TElement">
                Тип возвращаемой последовательности.
              </typeparam>
      <returns>
              Перечисление для итерации результатов.
            </returns>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object)">
      <summary>
              Присоединяет объект для <see cref="T:System.Data.Linq.DataContext" /> в неизмененном состоянии.
            </summary>
      <param name="entity">
                Сущности должны быть присоединены.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)">
      <summary>
              Присоединяет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.
            </summary>
      <param name="entity">
                Коллекция сущностей.
              </param>
      <param name="asModified">
                <see langword="true" /> Чтобы присоединить сущности как измененное.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)">
      <summary>
              Присоединяет объект для <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии, указав сущности и исходное состояние.
            </summary>
      <param name="entity">
                Сущности должны быть присоединены.
              </param>
      <param name="original">
                Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)">
      <summary>
              Присоединяет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.
            </summary>
      <param name="entities">
                Коллекция сущностей.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>
              Присоединяет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.
            </summary>
      <param name="entities">
                Коллекция сущностей.
              </param>
      <param name="asModified">
                <see langword="true" /> Чтобы присоединить сущности как измененное.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>
              Помещает все сущности из коллекции в <see langword="pending delete" /> состояние.
            </summary>
      <param name="entities">
                Коллекция, из которой удалены все элементы.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)">
      <summary>
              Помещает сущность из этой таблицы в <see langword="pending delete" /> состояние.
            </summary>
      <param name="entity">
                Удаляемая сущность.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)">
      <summary>
              Возвращает массив измененных элементов, содержащих их текущее и исходное значения.
            </summary>
      <param name="entity">
                Объект, из которого следует получить массив.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
      <summary>
              Извлекает исходные значения.
            </summary>
      <param name="entity">
                Сущность, исходное значение которой требуется извлечь.
              </param>
      <returns>
              Копия исходной сущности.
               Имеет значение null, если передаваемый объект не отслеживается.
               Отключенные сущности, отправленные клиентом должен быть подключен перед <see cref="T:System.Data.Linq.DataContext" /> может начать отслеживать их состояние.
               «Исходное состояние «только что прикрепленной сущности устанавливается на основе значений, полученных от клиента.
               Контекст данных не отслеживает состояние отключенных сущностей.
            </returns>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>
              Добавляет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в <see langword="pending insert" /> состояние.
            </summary>
      <param name="entities">
                Добавление сущности.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)">
      <summary>
              Добавление сущности в <see langword="pending insert" /> состоянии для этой таблицы.
            </summary>
      <param name="entity">
                Для добавления сущности.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.Attach(`0)">
      <summary>
              При переопределении прикрепляет отключенную или «отсоединенную» сущность в новую <see cref="T:System.Data.Linq.DataContext" /> когда исходные значения необходимы для проверок оптимистической блокировки.
            </summary>
      <param name="entity">
                Добавляемый объект.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.DeleteOnSubmit(`0)">
      <summary>
              При переопределении приводит сущность из этой таблицы в <see langword="pending delete" /> состояние.
            </summary>
      <param name="entity">
                Удаляемый объект.
              </param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.InsertOnSubmit(`0)">
      <summary>
              При переопределении добавляет сущность в <see langword="pending insert" /> состояние это <see cref="T:System.Data.Linq.ITable`1" />.
            </summary>
      <param name="entity">
                Вставляемый объект.
              </param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(`0)">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.Link`1" /> структуры, ссылаясь на значение свойства.
            </summary>
      <param name="value">
                Значение для свойства.
              </param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.Link`1" /> структуры, ссылающийся на источник.
            </summary>
      <param name="source">
                Исходная коллекция.
              </param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Data.Linq.Link{`0})">
      <summary>
              Инициализирует новый экземпляр <see cref="T:System.Data.Linq.Link`1" /> структуры путем копирования из другого внутреннее состояние <see cref="T:System.Data.Linq.Link`1" /> экземпляра.
            </summary>
      <param name="link">
                <see cref="T:System.Data.Linq.Link`1" /> Экземпляр, из которого выполняется копирование.
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.AssociationAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.AssociationAttribute" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.AttributeMappingSource.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.AttributeMappingSource" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ColumnAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ColumnAttribute" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DataAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.DataAttribute" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DatabaseAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.DatabaseAttribute" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.FunctionAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.FunctionAttribute" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MappingSource" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.CreateModel(System.Type)">
      <summary>
              Создает новую модель сопоставления.
            </summary>
      <param name="dataContextType">
                Тип <see cref="T:System.Data.Linq.DataContext" /> в качестве основы сопоставление.
              </param>
      <returns>
              Мета-модель, созданная в соответствии с текущей схемой.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.GetModel(System.Type)">
      <summary>
              Возвращает модель сопоставления.
            </summary>
      <param name="dataContextType">
                Тип <see cref="T:System.Data.Linq.DataContext" /> модели должны быть возвращены.
              </param>
      <returns>
              Модель сопоставления, связанный с этим источником сопоставления.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaAccessor" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.GetBoxedValue(System.Object)">
      <summary>
              Указывает объект, для которого задается значение или из которого необходимо получить значение.
            </summary>
      <param name="instance">
                Экземпляр, из которого необходимо получить значение или для которого задается значение.
              </param>
      <returns>
              Упакованное значение этого экземпляра.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasAssignedValue(System.Object)">
      <summary>
              Указывает, имеет ли экземпляр присвоено значение.
            </summary>
      <param name="instance">
                Экземпляр.
              </param>
      <returns>
              <see langword="true" /> Если экземпляр содержит присвоено значение; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasLoadedValue(System.Object)">
      <summary>
              Указывает, имеет ли экземпляр значение, загруженное из отложенного источника.
            </summary>
      <param name="instance">
                Экземпляр.
              </param>
      <returns>
              <see langword="true" /> Если экземпляр содержит значение, загруженное из отложенного источника; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasValue(System.Object)">
      <summary>
              Указывает, имеет ли экземпляр загруженное или присвоенное значение.
            </summary>
      <param name="instance">
                Экземпляр.
              </param>
      <returns>
              <see langword="true" /> Если экземпляр содержит загруженное или присвоенное значение; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.SetBoxedValue(System.Object@,System.Object)">
      <summary>
              Задает значение в виде объекта.
            </summary>
      <param name="instance">
                Экземпляр, для которого задается значение.
              </param>
      <param name="value">
                Задаваемое значение.
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaAccessor`2" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetBoxedValue(System.Object)">
      <summary>
              Указывает объект, для которого задается значение или из которого необходимо получить значение.
            </summary>
      <param name="instance">
                Экземпляр, из которого необходимо получить значение или для которого задается значение.
              </param>
      <returns>
              Упакованное значение этого экземпляра.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetValue(`0)">
      <summary>
              Задает строго типизированное значение.
            </summary>
      <param name="instance">
                Экземпляр, из которого необходимо получить значение.
              </param>
      <returns>
              Значение данного экземпляра.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetBoxedValue(System.Object@,System.Object)">
      <summary>
              Задает экземпляр, для которого задается упакованное значение.
            </summary>
      <param name="instance">
                Экземпляр, для которого задается упакованное значение.
              </param>
      <param name="value">
                Задаваемое значение.
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetValue(`0@,`1)">
      <summary>
              Задает экземпляр, для которого задается строго типизированное значение.
            </summary>
      <param name="instance">
                Экземпляр, для которого задается значение.
              </param>
      <param name="value">
                Строго типизированное значение.
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAssociation.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaAssociation" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaDataMember" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(System.Data.Linq.Mapping.MetaType)">
      <summary>
              Указывает, объявлен ли этот член в заданном типе.
            </summary>
      <param name="type">
                Проверяемый тип.
              </param>
      <returns>
              <see langword="true" /> Если данный элемент по указанному типу; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaFunction.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaFunction" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaModel" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Mapping.MetaFunction" /> соответствующий функции базы данных.
            </summary>
      <param name="method">
                Метод, определенный на <see cref="T:System.Data.Linq.DataContext" /> или подчиненного класса, который представляет функцию базы данных.
              </param>
      <returns>
              Мета функция, которая соответствует функции базы данных.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunctions">
      <summary>
              Возвращает перечисление всех функций.
            </summary>
      <returns>
              Перечисление, которое может использоваться для перебора всех функций.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)">
      <summary>
              Обнаружение <see cref="T:System.Data.Linq.Mapping.MetaType" /> для указанного <see cref="T:System.Type" />.
            </summary>
      <param name="type">
                Тип, для которого <see cref="T:System.Data.Linq.Mapping.MetaType" /> выполняется поиск.
              </param>
      <returns>
              Мета тип, соответствующий указанному типу.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Mapping.MetaTable" /> связанные с указанным <see cref="T:System.Type" />.
            </summary>
      <param name="rowType">
                Тип строки общеязыковой среды выполнения (CLR).
              </param>
      <returns>
              Мета таблицу, связанную с указанным типом строки.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTables">
      <summary>
              Возвращает перечисление всех таблиц.
            </summary>
      <returns>
              Перечислитель, который может использоваться для перебора таблиц.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaParameter.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaParameter" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaTable.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaTable" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.MetaType" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetDataMember(System.Reflection.MemberInfo)">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> связаны с указанным элементом.
            </summary>
      <param name="member">
                Элемент, для которого связанный <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> выполняется поиск.
              </param>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> Если он связан с указанного элемента, в противном случае — <see langword="null" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetInheritanceType(System.Type)">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Mapping.MetaType" /> для подтип наследования.
            </summary>
      <param name="type">
                Подтип.
              </param>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.MetaType" /> Для подтип наследования.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(System.Object)">
      <summary>
              Возвращает тип метаданных, связанных с указанным кодом наследования.
            </summary>
      <param name="code">
                Код наследования.
              </param>
      <returns>
              Мета тип, связанный с указанным кодом наследования.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.ParameterAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ParameterAttribute" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor(System.Type)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.
            </summary>
      <param name="type">
                Тип поставщика, используемый для создания <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.ResultTypeAttribute.#ctor(System.Type)">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.ResultTypeAttribute" />.
            </summary>
      <param name="type">
                Тип результата, возвращаемого функцией с различными типами результатов.
              </param>
    </member>
    <member name="M:System.Data.Linq.Mapping.TableAttribute.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.Mapping.TableAttribute" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromReader(System.Xml.XmlReader)">
      <summary>
              Создает источник сопоставления из средства чтения XML.
            </summary>
      <param name="reader">
                Средство чтения XML.
              </param>
      <returns>
              Новый источник сопоставления XML как тип <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromStream(System.IO.Stream)">
      <summary>
              Создает источник сопоставления из XML-потока.
            </summary>
      <param name="stream">
                Поток XML.
              </param>
      <returns>
              Новый источник сопоставления XML как тип <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromUrl(System.String)">
      <summary>
              Создает источник сопоставления из XML-кода, который загружается с URL-адреса.
            </summary>
      <param name="url">
                URL-адрес, указывающий на XML.
              </param>
      <returns>
              Новый источник сопоставления XML как тип <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromXml(System.String)">
      <summary>
              Создает источник сопоставления из XML-строки.
            </summary>
      <param name="xml">
                Строка, содержащая XML.
              </param>
      <returns>
              Новый источник сопоставления XML как тип <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>
              Использует <see cref="T:System.Data.Linq.RefreshMode" /> параметр, чтобы автоматически задать значение как текущее значение для элемента в конфликте.
            </summary>
      <param name="refreshMode">
                См. раздел <see cref="T:System.Data.Linq.RefreshMode" />.
              </param>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Object)">
      <summary>
              Указывает значение, присваиваемое как текущее значение для элемента в конфликте.
            </summary>
      <param name="value">
                Значение задается в качестве текущего значения.
              </param>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve">
      <summary>
              Разрешает конфликты элемента, сохранив текущие значения и сброс основные исходные значения в соответствии с более поздней значениями базы данных.
            </summary>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>
              Разрешает конфликты элементов с помощью заданного <see cref="T:System.Data.Linq.RefreshMode" />.
            </summary>
      <param name="refreshMode">
                Соответствующий параметр из <see cref="T:System.Data.Linq.RefreshMode" />.
              </param>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>
              Разрешает конфликты элемента, сохранив текущие значения и сброс основные исходные значения.
            </summary>
      <param name="refreshMode">
                Соответствующий параметр из <see cref="T:System.Data.Linq.RefreshMode" />.
              </param>
      <param name="autoResolveDeletes">
                Когда <see langword="true" />, автоматически разрешает конфликты, возникающие в результате измененного объекта, который больше не находится в базе данных.
              </param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Convert``1(System.Collections.IEnumerable)">
      <summary>
              Изменяет тип каждого элемента в указанной последовательности.
            </summary>
      <param name="source">
                Последовательность, содержащая элементы, чтобы преобразовать.
              </param>
      <typeparam name="TOutput">
                Тип преобразуемых элементов.
              </typeparam>
      <returns>
              Последовательность, содержащая преобразованные элементы.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateGroup``2(``0,System.Collections.Generic.IEnumerable{``1})">
      <summary>
              Создает группу на основе заданного ключа и коллекции значений.
            </summary>
      <param name="key">
                Ключ для группы.
              </param>
      <param name="items">
                Значения для группы.
              </param>
      <typeparam name="TKey">
                Тип ключа группы.
              </typeparam>
      <typeparam name="TElement">
                Тип значений в группе.
              </typeparam>
      <returns>
              Группа с указанным ключом и заданной коллекцией значений.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateOrderedEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Создает упорядоченную последовательность из заданной коллекции значений.
            </summary>
      <param name="items">
                Значения, чтобы поместить в упорядоченную последовательность.
              </param>
      <typeparam name="TElement">
                Тип значений в упорядоченной последовательности.
              </typeparam>
      <returns>
              Упорядоченная последовательность, содержащая указанные значения.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ErrorAssignmentToNull(System.Type)">
      <summary>
              Возвращает исключение, которое указывает, что <see langword="null" /> была произведена попытка назначить тип значения, не допускающие значения NULL.
            </summary>
      <param name="type">
                Тип, к которому <see langword="null" /> была произведена попытка назначить значение.
              </param>
      <returns>
              Исключение, которое указывает, что <see langword="null" /> была произведена попытка назначить тип значения, не допускающим значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ExecuteSubQuery(System.Int32,System.Object[])">
      <summary>
              При переопределении в производном классе выполняет запрос.
            </summary>
      <param name="iSubQuery">
                Индекс запроса.
              </param>
      <param name="args">
                Аргументы запроса.
              </param>
      <returns>
              Результаты выполнения запроса.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetLinkSource``1(System.Int32,System.Int32,System.Object[])">
      <summary>
              При переопределении в производном классе создает новый отложенный источник.
            </summary>
      <param name="globalLink">
                Индекс ссылки.
              </param>
      <param name="localFactory">
                Индекс фабрики.
              </param>
      <param name="keyValues">
                Ключевые значения для отложенного источника.
              </param>
      <typeparam name="T">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              Перечислимый отложенный источник.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetNestedLinkSource``1(System.Int32,System.Int32,System.Object)">
      <summary>
              При переопределении в производном классе создает новый отложенный источник.
            </summary>
      <param name="globalLink">
                Индекс ссылки.
              </param>
      <param name="localFactory">
                Индекс фабрики.
              </param>
      <param name="instance">
                Экземпляр для отложенного источника.
              </param>
      <typeparam name="T">
                Тип результирующих элементов.
              </typeparam>
      <returns>
              Перечислимый отложенный источник.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.InsertLookup(System.Int32,System.Object)">
      <summary>
              При переопределении в производном классе вставляет значение в структуру данных.
            </summary>
      <param name="globalMetaType">
                Индекс <see cref="T:System.Data.Linq.Mapping.MetaType" />.
              </param>
      <param name="instance">
                Объект, вставляемый в структуру данных.
              </param>
      <returns>
              Значение, вставленной в структуре данных.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Read">
      <summary>
              При переопределении в производном классе перемещает модуль чтения к следующей записи.
            </summary>
      <returns>
              <see langword="true" /> Если имеются другие строки; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.SendEntityMaterialized(System.Int32,System.Object)">
      <summary>
              При переопределении в производном классе, вызывает метод, представленный <see cref="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod" />.
            </summary>
      <param name="globalMetaType">
                Индекс <see cref="T:System.Data.Linq.Mapping.MetaType" />.
              </param>
      <param name="instance">
                Параметр, передаваемый вызываемому методу.
              </param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2000Provider.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Sql2000Provider" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2005Provider.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Sql2005Provider" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2008Provider.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.Sql2008Provider" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringContainsPattern(System.String,System.Char)">
      <summary>
              Создает строку шаблона поиска, где указанный текст не может содержать другой текст до и после его.
            </summary>
      <param name="text">
                Строка, вставляемая в строку шаблона поиска.
              </param>
      <param name="escape">
                Символ, используемый в escape-символы-шаблоны.
              </param>
      <returns>
              Строка шаблона поиска, который содержит указанную строку и символ «%» до и после него.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringEndsWithPattern(System.String,System.Char)">
      <summary>
              Создает строку шаблона поиска, где указанный текст не может содержать другой текст перед ним, но не за ним.
            </summary>
      <param name="text">
                Строка, вставляемая в строку шаблона поиска.
              </param>
      <param name="escape">
                Символ, используемый в escape-символы-шаблоны.
              </param>
      <returns>
              Строка шаблона поиска, содержащая символ «%», за которым следуют указанную строку.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringStartsWithPattern(System.String,System.Char)">
      <summary>
              Создает строку шаблона поиска, где указанный текст не может содержать другой текст после него, но не ранее.
            </summary>
      <param name="text">
                Строка, вставляемая в строку шаблона поиска.
              </param>
      <param name="escape">
                Символ, используемый в escape-символы-шаблоны.
              </param>
      <returns>
              Строка шаблона поиска, содержащая заданную строку, за которым следует символ «%».
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.TranslateVBLikePattern(System.String,System.Char)">
      <summary>
              Преобразует шаблон поиска для Visual Basic <see langword="Like" /> оператор шаблону поиска SQL Server <see langword="LIKE" /> оператор.  
            </summary>
      <param name="pattern">
                
                  Visual Basic <see langword="Like" /> Шаблон поиска для перевода SQL Server <see langword="LIKE" /> шаблону поиска.  
              </param>
      <param name="escape">
                Символ, используемый для экранирования специальных знаков SQL или самого escape-символ.
              </param>
      <returns>
              Шаблон поиска для SQL Server <see langword="LIKE" /> оператор, соответствующий указанному Visual Basic <see langword="Like" /> шаблону поиска.  
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTime,System.DateTime)">
      <summary>
              Подсчитывает количество границ дней между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Число границ дней между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              Подсчитывает количество границ дней между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Число границ дней между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              Подсчитывает количество границ дней между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ дней между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              Подсчитывает количество границ дней между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ дней между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTime,System.DateTime)">
      <summary>
              Подсчитывает количество границ часов между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ часов между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              Подсчитывает количество границ часов между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ часов между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              Подсчитывает количество границ часов между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ часов между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              Подсчитывает количество границ часов между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ часов между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> возвращаемое значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTime,System.DateTime)">
      <summary>
              Подсчитывает количество границ микросекунд между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ микросекунд между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              Подсчитывает количество границ микросекунд между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ микросекунд между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              Подсчитывает количество границ микросекунд между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ микросекунд между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              Подсчитывает количество границ микросекунд между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ микросекунд между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTime,System.DateTime)">
      <summary>
              Подсчитывает количество границ миллисекунд между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ миллисекунд между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              Подсчитывает количество границ миллисекунд между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ миллисекунд между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              Подсчитывает количество границ миллисекунд между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ миллисекунд между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              Подсчитывает количество границ миллисекунд между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ миллисекунд между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTime,System.DateTime)">
      <summary>
              Подсчитывает количество границ минут между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ минут между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              Подсчитывает количество границ минут между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ минут между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              Подсчитывает количество границ минут между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ минут между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              Подсчитывает количество границ минут между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ минут между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTime,System.DateTime)">
      <summary>
              Подсчитывает количество границ месяцев между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ месяцев между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              Подсчитывает количество границ месяцев между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ месяцев между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              Подсчитывает количество границ месяцев между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ месяцев между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              Подсчитывает количество границ месяцев между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ месяцев между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTime,System.DateTime)">
      <summary>
              Подсчитывает количество границ наносекунд между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ наносекунд между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              Подсчитывает количество границ наносекунд между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ наносекунд между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              Подсчитывает количество границ наносекунд между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ наносекунд между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              Подсчитывает количество границ наносекунд между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ наносекунд между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTime,System.DateTime)">
      <summary>
              Подсчитывает количество границ секунд между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ секунд между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              Подсчитывает количество границ секунд между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ секунд между двумя указанными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              Подсчитывает количество границ секунд между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает число границ секунд между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              Подсчитывает количество границ секунд между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает число границ секунд между двумя указанными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTime,System.DateTime)">
      <summary>
              Подсчитывает количество границ лет между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ лет между двумя заданными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
              Подсчитывает количество границ лет между двумя датами, не допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Количество границ лет между двумя заданными датами.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>
              Подсчитывает количество границ лет между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ лет между двумя заданными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>
              Подсчитывает количество границ лет между двумя датами, допускающие значения NULL.
            </summary>
      <param name="startDate">
                Дата начала периода времени.
              </param>
      <param name="endDate">
                Дата окончания периода времени.
              </param>
      <returns>
              Если оба параметра не являются <see langword="null" />, возвращает количество границ лет между двумя заданными датами.
               Если один или оба параметра равны <see langword="null" />, возвращает <see langword="null" /> значение.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String)">
      <summary>
              Определяет, совпадает ли указанная символьная строка с заданным шаблоном.
               Этот метод является в настоящее время только поддерживаемые в запросах LINQ to SQL.
            </summary>
      <param name="matchExpression">
                Строка для поиска соответствия.
              </param>
      <param name="pattern">
                Шаблон, который может включать подстановочные знаки для сопоставления в <paramref name="matchExpression" />.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="matchExpression" /> соответствует шаблону; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String,System.Char)">
      <summary>
              Определяет, совпадает ли указанная символьная строка с заданным шаблоном.
               Этот метод является в настоящее время только поддерживаемые в запросах LINQ to SQL.
            </summary>
      <param name="matchExpression">
                Строка для поиска соответствия.
              </param>
      <param name="pattern">
                Шаблон, который может включать подстановочные знаки для сопоставления в <paramref name="matchExpression" />.
              </param>
      <param name="escapeCharacter">
                Символ, который необходимо поместить перед символом-шаблоном, чтобы обозначить следует интерпретировать как обычный символ, а не как подстановочный знак.
              </param>
      <returns>
              <see langword="true" /> Если <paramref name="matchExpression" /> соответствует шаблону; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.#ctor">
      <summary>
              Инициализирует новый экземпляр класса <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose">
      <summary>
              Освобождает управляемые ссылки и закрытие соединения, открытые одним <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.
            </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose(System.Boolean)">
      <summary>
              При необходимости освобождает управляемые ссылки и закрытие соединения, открытые одним <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.
            </summary>
      <param name="disposing">
                <see langword="true" /> Чтобы освободить управляемые ссылки и закрыть подключения; в противном случае — <see langword="false" />.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0)">
      <summary>
              Прикрепляет отключенную или «отсоединенную» сущность новый <see cref="T:System.Data.Linq.DataContext" /> когда исходные значения необходимы для проверок оптимистической блокировки.
            </summary>
      <param name="entity">
                Исходные значения объекта должны быть присоединены.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,`0)">
      <summary>
              Присоединяет объект для <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии, указав сущности и исходное состояние.
            </summary>
      <param name="entity">
                Сущности должны быть присоединены.
              </param>
      <param name="original">
                Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
      <summary>
              Присоединяет объект для <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.
            </summary>
      <param name="entity">
                Сущности должны быть присоединены.
              </param>
      <param name="asModified">
                <see langword="true" /> присоединить объект как измененный; <see langword="false" /> присоединить объект как неизмененный.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Присоединяет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.
            </summary>
      <param name="entities">
                Коллекция сущностей.
              </param>
      <typeparam name="TSubEntity">
                Тип сущности для присоединения.
              </typeparam>
      <typeparam name="TEntity">
                Тип данных в таблице.
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>
              Присоединяет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.
            </summary>
      <param name="entities">
                Коллекция сущностей.
              </param>
      <param name="asModified">
                <see langword="true" /> Если объект содержит временную метку или элемент RowVersion; <see langword="false" /> Если исходные значения используются для проверки оптимистичного параллелизма.
              </param>
      <typeparam name="TSubEntity">
                Тип сущности для присоединения.
              </typeparam>
      <typeparam name="TEntity">
                Тип данных в таблице.
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Помещает все сущности из коллекции в <see langword="pending delete" /> состояние.
            </summary>
      <param name="entities">
                Сущности для удаления.
              </param>
      <typeparam name="TSubEntity">
                Тип элементов для удаления.
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
      <summary>
              Помещает сущность из этой таблицы в <see langword="pending delete" /> состояние.
            </summary>
      <param name="entity">
                Удаляемая сущность.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий итерацию по коллекции.
            </summary>
      <returns>
              Перечислитель, который можно использовать для итерации по коллекции.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)">
      <summary>
              Возвращает массив измененных элементов, содержащих их текущее и исходное значения.
            </summary>
      <param name="entity">
                Объект, из которого следует получить массив.
              </param>
      <returns>
              Массив измененных элементов, содержащих их текущее и исходное значения.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetNewBindingList">
      <summary>
              Создает новый список для привязки к источнику данных.
            </summary>
      <returns>
              Новый <see cref="T:System.ComponentModel.IBindingList" /> для привязки к источнику данных.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Table`1" /> экземпляр, содержащий исходное состояние сущности.
            </summary>
      <param name="entity">
                Сущность, исходное состояние которой возвращается.
              </param>
      <returns>
              A <see cref="T:System.Data.Linq.Table`1" /> экземпляр, содержащий исходное состояние сущности.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
              Добавляет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в <see langword="pending insert" /> состояние.
            </summary>
      <param name="entities">
                Добавление сущности.
              </param>
      <typeparam name="TSubEntity">
                Тип элементов для вставки.
              </typeparam>
      <typeparam name="TEntity">
                Тип данных в таблице.
              </typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)">
      <summary>
              Добавление сущности в <see langword="pending insert" /> состояние это <see cref="T:System.Data.Linq.Table`1" />.
            </summary>
      <param name="entity">
                Для добавления сущности.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{TEntity}#GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий перебор элементов в коллекции.
            </summary>
      <returns>
              Перечислитель, который можно использовать для итерации по коллекции.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
              Возвращает перечислитель, выполняющий перебор элементов в коллекции.
            </summary>
      <returns>
              Перечислитель, который можно использовать для итерации по коллекции.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
      <summary>
              Возвращает <see cref="T:System.Collections.IList" /> можно привязать к источнику данных из объекта, который не реализует <see cref="T:System.Collections.IList" /> сам.
            </summary>
      <returns>
              <see cref="T:System.Collections.IList" /> Можно привязать к источнику данных.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
      <summary>
              Присоединяет объект для <see cref="T:System.Data.Linq.DataContext" /> в неизмененном состоянии.
            </summary>
      <param name="entity">
                Сущности должны быть присоединены.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
      <summary>
              Присоединяет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.
            </summary>
      <param name="entity">
                Сущности должны быть присоединены.
              </param>
      <param name="asModified">
                <see langword="true" /> присоединить объект как измененный; <see langword="false" /> присоединенными сущности как без изменений.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
      <summary>
              Присоединяет объект для <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии, указав сущности и исходное состояние.
            </summary>
      <param name="entity">
                Сущности должны быть присоединены.
              </param>
      <param name="original">
                Экземпляр того же типа сущности с элементами данных, которые содержат исходные значения.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
      <summary>
              Присоединяет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.
            </summary>
      <param name="entities">
                Коллекция сущностей для присоединения.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>
              Присоединяет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в измененном или неизмененном состоянии.
            </summary>
      <param name="entities">
                Коллекция сущностей для подключенного.
              </param>
      <param name="asModified">
                <see langword="true" /> Чтобы присоединить сущности как измененное; <see langword="false" /> присоединить сущности как без изменений.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>
              Помещает все сущности из коллекции в <see langword="pending delete" /> состояние.
            </summary>
      <param name="entities">
                Удаляемые сущности.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
      <summary>
              Помещает сущность из этой таблицы в <see langword="pending delete" /> состояние.
            </summary>
      <param name="entity">
                Удаляемая сущность.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
      <summary>
              Возвращает массив измененных элементов, содержащих их текущее и исходное значения.
            </summary>
      <param name="entity">
                Сущность, из которого следует получать измененные элементы.
              </param>
      <returns>
              Массив измененных элементов.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
      <summary>
              Извлекает исходные значения для данной сущности.
            </summary>
      <param name="entity">
                Сущность, исходное состояние которой должен осуществляться.
              </param>
      <returns>
              Копия исходной сущности.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>
              Добавляет все сущности коллекции <see cref="T:System.Data.Linq.DataContext" /> в <see langword="pending insert" /> состояние.
            </summary>
      <param name="entities">
                Коллекция сущностей для добавления.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
      <summary>
              Добавление сущности в <see langword="pending insert" /> состоянии для этой таблицы.
            </summary>
      <param name="entity">
                Добавляемая сущность.
              </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.IQueryable" /> объекта, который позволяет вычислить запрос, представленный заданным деревом выражения.
            </summary>
      <param name="expression">
                Выражение запроса, из которого выполняется вычисление.
              </param>
      <returns>
              <see cref="T:System.Linq.IQueryable" /> Можно вычислить запрос, представленный заданным деревом выражения.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
              Создает <see cref="T:System.Linq.IQueryable`1" /> объекта, который позволяет вычислить запрос, представленный заданным деревом выражения.
            </summary>
      <param name="expression">
                Выражение запроса, из которого выполняется вычисление.
              </param>
      <typeparam name="TResult">
                Тип данных в таблице.
              </typeparam>
      <returns>
              <see cref="T:System.Linq.IQueryable`1" /> Можно вычислить запрос, представленный заданным деревом выражения.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>
              Выполняет запрос, представленный заданным деревом выражения.
            </summary>
      <param name="expression">
                Выражение запроса для выполнения.
              </param>
      <returns>
              Значение, получаемое в результате выполнения указанного запроса.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>
              Выполняет строго типизированный запрос, представленный заданным деревом выражения.
            </summary>
      <param name="expression">
                Выражение запроса для выполнения.
              </param>
      <typeparam name="TResult">
                Тип данных в таблице.
              </typeparam>
      <returns>
              Значение, получаемое в результате выполнения указанного запроса.
            </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.ToString">
      <summary>
              Возвращает строку, представляющую таблицу.
            </summary>
      <returns>
              Строковое представление таблицы.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Binary.Length">
      <summary>
              Возвращает длину двоичного объекта.
            </summary>
      <returns>
              Целое число, представляющее длину.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Count">
      <summary>
              Возвращает количество конфликтов в коллекции.
            </summary>
      <returns>
              целочисленный
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Item(System.Int32)">
      <summary>
              Возвращает элемент в конфликте.
            </summary>
      <param name="index">
                Индекс в коллекции элемента в конфликте.
              </param>
      <returns>
              <see cref="T:System.Data.Linq.ObjectChangeConflict" /> Представляет элемент в конфликте.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{System#Data#Linq#ObjectChangeConflict}#IsReadOnly">
      <summary>
              Описание этого члена см. в разделе <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.
            </summary>
      <returns>
              Возвращает <see langword="true" /> если коллекция доступна только для чтения.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
              Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.IsSynchronized" />.
            </summary>
      <returns>
              Возвращает <see langword="true" /> если доступ к коллекции синхронизированным (потокобезопасным).
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot">
      <summary>
              Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.IsSynchronized" />.
            </summary>
      <returns>
              Возвращает объект, который может использоваться для синхронизации доступа к коллекции.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Deletes">
      <summary>
              Получает список объектов, которые были удалены из <see cref="T:System.Data.Linq.ChangeSet" />.
            </summary>
      <returns>
              <see cref="T:System.Collections.IList" /> Удаленных сущностей.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Inserts">
      <summary>
              Получает список объектов, которые были вставлены в <see cref="T:System.Data.Linq.ChangeSet" />.
            </summary>
      <returns>
              <see cref="T:System.Collections.IList" /> Вставленного сущностей.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Updates">
      <summary>
              Получает список объектов, которые были обновлены в <see cref="T:System.Data.Linq.ChangeSet" />.
            </summary>
      <returns>
              <see cref="T:System.Collections.IList" /> Обновленных сущностей.
            </returns>
    </member>
    <member name="P:System.Data.Linq.CompiledQuery.Expression">
      <summary>
              Возвращает запрос как лямбда-выражение.
            </summary>
      <returns>
              Лямбда-выражение, которое представляет запрос.
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.ChangeConflicts">
      <summary>
              Возвращает коллекцию объектов, вызвавшие конфликты параллелизма при <see cref="M:System.Data.Linq.DataContext.SubmitChanges" /> был вызван.
            </summary>
      <returns>
              Коллекция объектов, вызвавшие конфликты параллелизма.
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.CommandTimeout">
      <summary>
              Возвращает или задает значение, которое увеличивает время ожидания для запросов, которые бы в противном случае значение времени ожидания в течение периода ожидания по умолчанию.
            </summary>
      <returns>
              Целочисленное значение, увеличивает время ожидания для запросов, которые бы в противном случае значение времени ожидания в течение периода ожидания по умолчанию.
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Connection">
      <summary>
              Возвращает соединение, используемое платформой.
            </summary>
      <returns>
              Соединение, используемое платформой.
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
      <summary>
              Возвращает или задает значение, указывающее, следует ли загрузить с задержкой связи "один ко многим" или один к одному.
            </summary>
      <returns>
              <see langword="true" /> Если отложенная загрузка включена. в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.LoadOptions">
      <summary>
              Возвращает или задает <see cref="T:System.Data.Linq.DataLoadOptions" /> связанный с этим <see cref="T:System.Data.Linq.DataContext" />.
            </summary>
      <returns>
              Предварительно выбранные параметры загрузки для связанных данных.
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Log">
      <summary>
              Возвращает или задает назначение для записи команды или запроса SQL.
            </summary>
      <returns>
              <see cref="T:System.IO.TextReader" /> Может использоваться для написания команды.
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Mapping">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Mapping.MetaModel" /> на основе сопоставления.
            </summary>
      <returns>
              Сопоставление между объектами базы данных и домена.
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
      <summary>
              Возвращает или задает значение, указывающее, включено ли отслеживание объекта.
            </summary>
      <returns>
              <see langword="true" /> Если включено отслеживание объекта; в противном случае — <see langword="false" />.
               Значение по умолчанию — <see langword="true" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Transaction">
      <summary>
              Возвращает или задает локальную транзакцию для .NET Framework для доступа к базе данных.
            </summary>
      <returns>
              Объект транзакции, используемые <see cref="T:System.Data.Linq.DataContext" /> при выполнении запросов и команд.
            </returns>
    </member>
    <member name="P:System.Data.Linq.DuplicateKeyException.Object">
      <summary>
              Возвращает объект, который вызвал исключение.
            </summary>
      <returns>
              Объект, который вызвал исключение.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.Entity">
      <summary>
              Возвращает или задает целевую сущность.
            </summary>
      <returns>
              Целевой сущности.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.HasLoadedOrAssignedValue">
      <summary>
              Возвращает значение, указывающее, ли целевой объект был загружен или назначен.
            </summary>
      <returns>
              <see langword="True" /> Если целевой объект был загружен или назначен.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Count">
      <summary>
              Получает число сущностей в <see cref="T:System.Data.Linq.EntitySet`1" /> коллекции.
            </summary>
      <returns>
              Целое число, представляющее число сущностей.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues">
      <summary>
              Указывает, является ли <see cref="T:System.Data.Linq.EntitySet`1" /> загружен или назначен значение.
            </summary>
      <returns>
              Возвращает значение true, если <see cref="T:System.Data.Linq.EntitySet`1" /> загружено или присвоено значение.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.IsDeferred">
      <summary>
              Указывает, является ли это <see cref="T:System.Data.Linq.EntitySet`1" /> имеет отложенный запрос, который еще не выполнен.
            </summary>
      <returns>
              <see langword="true" /> Если отложенный запрос еще не был выполнен; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Item(System.Int32)">
      <summary>
              Возвращает или задает элемент по указанному индексу.
            </summary>
      <param name="index">
                Индекс элемента.
              </param>
      <returns>
              <see cref="T:System.Data.Linq.EntitySet`1" /> Представляет элемент.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection{TEntity}#IsReadOnly">
      <summary>
              Описание этого члена см. в разделе <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.
            </summary>
      <returns>
              Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
              Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.IsSynchronized" />.
            </summary>
      <returns>
              Значение <see langword="true" />, если доступ к коллекции является синхронизированным (потокобезопасным); в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot">
      <summary>
              Описание этого члена см. в разделе <see cref="P:System.Collections.ICollection.SyncRoot" />.
            </summary>
      <returns>
              Объект, который можно использовать для синхронизации доступа к коллекции.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize">
      <summary>
              Описание этого члена см. в разделе <see cref="P:System.Collections.IList.IsFixedSize" />.
            </summary>
      <returns>
              <see langword="true" /> Если коллекция имеет фиксированный размер. в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly">
      <summary>
              Описание этого члена см. в разделе <see cref="P:System.Collections.IList.IsReadOnly" />.
            </summary>
      <returns>
              Значение <see langword="true" />, если коллекция доступна только для чтения; в противном случае — значение <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#Item(System.Int32)">
      <summary>
              Описание этого члена см. в разделе <see cref="P:System.Collections.IList.Item(System.Int32)" />.
            </summary>
      <param name="index">
                Индекс, по которому следует задать или получить элемент.
              </param>
      <returns>
              Элемент, расположенный по указанному индексу.
            </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>
              Описание этого члена см. в разделе <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.
            </summary>
      <returns>
              <see langword="true" /> Если коллекция является коллекцией из <see cref="T:System.Collections.IList" /> объектов; в противном случае <see langword="false" />;
            </returns>
    </member>
    <member name="P:System.Data.Linq.IExecuteResult.ReturnValue">
      <summary>
              Получает возвращаемое значение или результат выполненного запроса.
            </summary>
      <returns>
              Значение или результат выполненного запроса.
            </returns>
    </member>
    <member name="P:System.Data.Linq.IFunctionResult.ReturnValue">
      <summary>
              Получает возвращаемое значение функции.
            </summary>
      <returns>
              Значение, возвращаемое функцией.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ITable.Context">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.DataContext" /> использовался для получения этого <see cref="T:System.Data.Linq.ITable" />.
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.DataContext" /> Используется для извлечения <see cref="T:System.Data.Linq.ITable" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ITable.IsReadOnly">
      <summary>
              Указывает, если тип сущностей, содержащихся в данном <see cref="T:System.Data.Linq.ITable" /> экземпляр имеет первичный ключ.
            </summary>
      <returns>
              Возвращает <see langword="true" /> если тип сущности не имеет первичного ключа; в противном случае — значение false.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasLoadedOrAssignedValue">
      <summary>
              Указывает, является ли <see cref="T:System.Data.Linq.Link`1" /> загружен или назначен значение.
            </summary>
      <returns>
              <see langword="true" /> Если <see cref="T:System.Data.Linq.Link`1" /> загружено или назначено значение; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasValue">
      <summary>
              Возвращает значение, указывающее, содержит ли источник значение.
            </summary>
      <returns>
              Возвращает <see langword="true" /> Если источник содержит назначенного или загруженное значение (включая значение null).
            </returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.Value">
      <summary>
              Возвращает или задает значение назначения или загружен <see cref="T:System.Data.Linq.Link`1" />.
            </summary>
      <returns>
              Значение этого отложенного свойства.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteOnNull">
      <summary>
              При задании для сопоставления 1:1, в которой члены внешнего ключа не поддерживают значение NULL, удаляет объект при установке ассоциации значения в значение null.
            </summary>
      <returns>
              Установка <see langword="True" /> удаляет объект.
               Значение по умолчанию — <see langword="False" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteRule">
      <summary>
              Возвращает или задает поведение для связи при удалении.
            </summary>
      <returns>
              Строка, представляющая правило.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsForeignKey">
      <summary>
              Возвращает или задает элемент в качестве внешнего ключа в ассоциации, представляющей отношение базы данных.
            </summary>
      <returns>
              По умолчанию = <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsUnique">
      <summary>
              Возвращает или задает значение, указывающее ограничение уникальности для первичного ключа.
            </summary>
      <returns>
              По умолчанию = <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.OtherKey">
      <summary>
              Возвращает или задает один или несколько членов целевого класса сущности в качестве ключевых значений на другой стороне ассоциации.
            </summary>
      <returns>
              По умолчанию = идентификатор связанного класса.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.ThisKey">
      <summary>
              Возвращает или задает члены этого класса сущности, представляющие ключевые значения на этой стороне ассоциации.
            </summary>
      <returns>
              По умолчанию — идентификатор содержащего класса.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.AutoSync">
      <summary>
              Получает или задает перечисление <see cref="T:System.Data.Linq.Mapping.AutoSync" />.
            </summary>
      <returns>
              Значение <see cref="T:System.Data.Linq.Mapping.AutoSync" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.CanBeNull">
      <summary>
              Возвращает или задает значение, указывающее столбец может содержать значения null.
            </summary>
      <returns>
              По умолчанию = <see langword="true" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.DbType">
      <summary>
              Возвращает или задает тип столбца базы данных.
            </summary>
      <returns>
              См. заметки.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.Expression">
      <summary>
              Возвращает или задает значение, указывающее, является ли столбец вычисляемым столбцом в базе данных.
            </summary>
      <returns>
              По умолчанию пусто.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated">
      <summary>
              Возвращает или задает, содержит ли столбец значения, автоматически генерируемые базой данных.
            </summary>
      <returns>
              По умолчанию = <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDiscriminator">
      <summary>
              Возвращает или задает значение, указывающее столбец содержит значение дискриминатора для LINQ to SQL иерархии наследования.
            </summary>
      <returns>
              По умолчанию = <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey">
      <summary>
              Возвращает или задает, является ли этот член класса представляет столбец, входящий в состав первичного ключа таблицы.
            </summary>
      <returns>
              По умолчанию = <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion">
      <summary>
              Возвращает или задает значение, указывающее, является ли тип столбца члена номер версии или отметки времени в базе данных.
            </summary>
      <returns>
              Значение по умолчанию = <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck">
      <summary>
              Возвращает или задает способ LINQ to SQL подходы для обнаружения конфликтов оптимистичного параллелизма.
            </summary>
      <returns>
              По умолчанию = <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Always" />, если <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> является <see langword="true" /> для элемента.
            
              Другие значения оказываются <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" /> и <see cref="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Name">
      <summary>
              Возвращает или задает имя столбца.
            </summary>
      <returns>
              Имя.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Storage">
      <summary>
              Возвращает или задает закрытое поле для хранения значения из столбца.
            </summary>
      <returns>
              Имя поля хранения.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.DatabaseAttribute.Name">
      <summary>
              Возвращает или задает имя базы данных.
            </summary>
      <returns>
              Имя.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.IsComposable">
      <summary>
              Возвращает или задает значение, указывающее, сопоставлен метод — функции или хранимой процедуры.
            </summary>
      <returns>
              <see langword="true" /> Если функция; <see langword="false" /> хранимая процедура.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.Name">
      <summary>
              Возвращает или задает имя функции.
            </summary>
      <returns>
              Имя функции или хранимой процедуры.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Code">
      <summary>
              Возвращает или задает значение кода дискриминатора в сопоставляемой иерархии наследования.
            </summary>
      <returns>
              Должно быть указано пользователем.
               Значение по умолчанию отсутствует.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault">
      <summary>
              Возвращает или задает значение, указывающее экземпляр объекта данного типа, когда значение дискриминатора не соответствует заданному значению.
            </summary>
      <returns>
              По умолчанию = <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Type">
      <summary>
              Возвращает или задает тип класса в иерархии.
            </summary>
      <returns>
              Должно быть указано пользователем.
               Значение по умолчанию отсутствует.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor.Type">
      <summary>
              Возвращает тип члена, которому принадлежит данный метод доступа.
            </summary>
      <returns>
              Тип элемента.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor`2.Type">
      <summary>
              Возвращает тип члена, которому принадлежит данный метод доступа.
            </summary>
      <returns>
              Тип элемента.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteOnNull">
      <summary>
              Получает значение, указывающее объект будет удален, когда ассоциация устанавливается в null.
            </summary>
      <returns>
              Если <see langword="true" />, объект удаляется, когда ассоциация устанавливается в null.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteRule">
      <summary>
              Возвращает поведение при удалении дочернего.
            </summary>
      <returns>
              Строка, представляющая правило, или <see langword="null" /> если не указано действие удаления.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsForeignKey">
      <summary>
              Получает значение, указывающее второй тип является родительским для данного типа.
            </summary>
      <returns>
              Возвращает <see langword="true" /> является второй тип является родительским для данного типа.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsMany">
      <summary>
              Получает значение, указывающее ассоциация представляет отношение один ко многим.
            </summary>
      <returns>
              Возвращает <see langword="true" /> Если ассоциация представляет отношение один ко многим.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsNullable">
      <summary>
              Получает значение, указывающее ассоциации может иметь значение null.
            </summary>
      <returns>
              Возвращает <see langword="true" /> Если ассоциация может иметь значение null.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsUnique">
      <summary>
              Получает значение, указывающее ассоциация является уникальной.
            </summary>
      <returns>
              Возвращает <see langword="true" /> Если ассоциация является уникальной.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey">
      <summary>
              Возвращает список элементов, представляющий значения на другой стороне ассоциации.
            </summary>
      <returns>
              Возвращает коллекцию, представляющую значения на другой стороне ассоциации.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKeyIsPrimaryKey">
      <summary>
              Получает ли <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> forms удостоверение типа.
            </summary>
      <returns>
              <see langword="true" /> Если <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> forms identity (первичный ключ) другого типа.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherMember">
      <summary>
              Возвращает элемент на другой стороне ассоциации, представляющий обратную связь.
            </summary>
      <returns>
              Член с другой стороны.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherType">
      <summary>
              Возвращает тип на другой стороне ассоциации.
            </summary>
      <returns>
              Тип.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey">
      <summary>
              Возвращает список членов, представляющих значения на этой стороне ассоциации.
            </summary>
      <returns>
              Коллекция.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKeyIsPrimaryKey">
      <summary>
              Получает ли <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> формирует идентификатор этого типа.
            </summary>
      <returns>
              <see langword="true" /> Если <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> forms identity (первичный ключ) ассоциации.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisMember">
      <summary>
              Возвращает элемент с этой стороны, представляющий ассоциацию.
            </summary>
      <returns>
              Член.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Association">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> соответствующего этому члену.
            </summary>
      <returns>
              Соответствующий <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> если таковой существует; в противном случае — <see langword="null" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.AutoSync">
      <summary>
              Возвращает режим чтения для этого элемента для вставки и обновления.
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.AutoSync" /> Перечисления.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.CanBeNull">
      <summary>
              Получает значение, указывающее значение этого элемента может быть назначено <see langword="null" /> значение.
            </summary>
      <returns>
              <see langword="true" /> Если этот член может быть назначена <see langword="null" /> значение; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DbType">
      <summary>
              Возвращает тип соответствующего столбца базы данных.
            </summary>
      <returns>
              Тип столбца базы данных в виде строки.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeclaringType">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Mapping.MetaType" /> содержащий этот элемент данных.
            </summary>
      <returns>
              Мета тип, содержащий текущий элемент.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor">
      <summary>
              Возвращает метод доступа, используемый для получения и задания отложенного источника этого элемента.
            </summary>
      <returns>
              Метод доступа, используемый для доступа к отложенного источника для этого элемента.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor">
      <summary>
              Возвращает метод доступа, используемый для получения и задания отложенного значения этого члена (без обращения к базе данных).
            </summary>
      <returns>
              Метод доступа, используемый для доступа к отложенному значению для этого элемента.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Expression">
      <summary>
              Возвращает выражение, определяющее значение вычисляемого столбца.
            </summary>
      <returns>
              Выражение для вычисляемого столбца, как строка.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsAssociation">
      <summary>
              Получает значение, указывающее данный член определяет отношение ассоциации.
            </summary>
      <returns>
              <see langword="true" /> Если данный член определяет отношение ассоциации; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated">
      <summary>
              Получает значение, указывающее, этот элемент автоматически создается в базе данных.
            </summary>
      <returns>
              <see langword="true" /> Если этот элемент автоматически создается в базе данных; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDeferred">
      <summary>
              Получает значение, указывающее поведение по умолчанию — загрузить этот член отложена.
            </summary>
      <returns>
              <see langword="true" /> Если этот элемент загружен отложена по умолчанию; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator">
      <summary>
              Получает значение, указывающее этот член представляет дискриминатор наследования.
            </summary>
      <returns>
              <see langword="true" /> Если этот член представляет дискриминатор наследования; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPersistent">
      <summary>
              Получает значение, указывающее этот член сопоставляется столбцу (или ограничению).
            </summary>
      <returns>
              <see langword="true" /> Если этот член сопоставляется столбцу (или ограничению); в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey">
      <summary>
              Получает значение, указывающее, этот член является частью идентификатора типа.
            </summary>
      <returns>
              <see langword="true" /> Этот член является частью идентификатора типа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsVersion">
      <summary>
              Получает значение, указывающее этот член представляет версию строки или отметки времени.
            </summary>
      <returns>
              <see langword="true" /> Если этот член представляет версию строки или штамп времени; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.LoadMethod">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.DataContext" /> метод, используемый для выполнения операции загрузки.
            </summary>
      <returns>
              Метод load как <see cref="T:System.Reflection.MethodInfo" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MappedName">
      <summary>
              Возвращает имя столбца (или ограничения) в базе данных.
            </summary>
      <returns>
              Имя столбца (или ограничения) как строка.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Member">
      <summary>
              Возвращает основной объект <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <returns>
              Элемент атрибута и сведения о метаданных.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MemberAccessor">
      <summary>
              Возвращает метод доступа, используемый для получения или установки значения этого элемента.
            </summary>
      <returns>
              Метод доступа.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Name">
      <summary>
              Возвращает имя элемента совпадает с <see cref="T:System.Reflection.MemberInfo" /> имя.
            </summary>
      <returns>
              Имя совпадает с <see cref="T:System.Reflection.MemberInfo" /> имя.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Ordinal">
      <summary>
              Возвращает порядковое положение этого элемента в структуре по умолчанию результатов запроса.
            </summary>
      <returns>
              Порядковый номер.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageAccessor">
      <summary>
              Возвращает метод доступа, используемый для получения или задания хранимого значения этого элемента.
            </summary>
      <returns>
              Метод доступа для хранения значения этого элемента.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageMember">
      <summary>
              Возвращает элемент, который хранит данные для этого элемента.
            </summary>
      <returns>
              Элемент хранилища.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Type">
      <summary>
              Возвращает тип этого элемента.
            </summary>
      <returns>
              Тип текущего элемента.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.UpdateCheck">
      <summary>
              Возвращает политику проверки оптимистичного параллелизма для этого элемента.
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.UpdateCheck" /> Перечисления.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.HasMultipleResults">
      <summary>
              Возвращает ли хранимая процедура имеет несколько типов результатов.
            </summary>
      <returns>
              <see langword="true" /> Если хранимая процедура имеет несколько типов результатов.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.IsComposable">
      <summary>
              Возвращает ли функция может использоваться в запросе.
            </summary>
      <returns>
              <see langword="true" /> Если функция может использоваться в запросе.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.MappedName">
      <summary>
              Возвращает имя базы данных функции или процедуры.
            </summary>
      <returns>
              Строка, представляющая имя базы данных функции или процедуры.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Method">
      <summary>
              Возвращает соответствующий метод контекста.
            </summary>
      <returns>
              Объект <see cref="T:System.Reflection.MethodInfo" /> объект, соответствующий базовому методу контекста.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Model">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Mapping.MetaModel" /> содержащей эту функцию.
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.MetaModel" /> Объект, который содержит эту функцию.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Name">
      <summary>
              Возвращает имя метода.
            </summary>
      <returns>
              Объект <see langword="string" /> представляющее имя метода.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Parameters">
      <summary>
              Возвращает перечисление параметров функции.
            </summary>
      <returns>
              Коллекция параметров.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ResultRowTypes">
      <summary>
              Возвращает перечисление возможных результатов типов строк.
            </summary>
      <returns>
              Коллекция возможных типов.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ReturnParameter">
      <summary>
              Возвращает выходной параметр.
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.MetaParameter" /> Соответствующий возвращаемый параметр.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ContextType">
      <summary>
              Возвращает тип <see cref="T:System.Data.Linq.DataContext" /> тип, описывающий эту модель.
            </summary>
      <returns>
              Тип контекста данных.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.DatabaseName">
      <summary>
              Возвращает имя базы данных.
            </summary>
      <returns>
              Имя базы данных в виде строки.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.MappingSource">
      <summary>
              Возвращает источник сопоставления, была создана эта модель.
            </summary>
      <returns>
              Исходный источник сопоставления.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ProviderType">
      <summary>
              Возвращает или задает тип поставщика.
            </summary>
      <returns>
              Тип поставщика.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.DbType">
      <summary>
              Возвращает тип параметра в базе данных.
            </summary>
      <returns>
              Тип базы данных параметра в виде строки.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.MappedName">
      <summary>
              Возвращает имя параметра в функции базы данных.
            </summary>
      <returns>
              Имя в виде строки.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Name">
      <summary>
              Возвращает имя параметра.
            </summary>
      <returns>
              Имя параметра в виде строки.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Parameter">
      <summary>
              Возвращает соответствующий параметр метода.
            </summary>
      <returns>
              Соответствующий параметр метода.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.ParameterType">
      <summary>
              Возвращает тип CLR (CLR) параметра.
            </summary>
      <returns>
              Тип.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.DeleteMethod">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.DataContext" /> метод, используемый для выполнения операции удаления.
            </summary>
      <returns>
              <see cref="T:System.Reflection.MethodInfo" /> Соответствующий метод, используемый для операций удаления.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.InsertMethod">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.DataContext" /> метод, используемый для выполнения операций вставки.
            </summary>
      <returns>
              <see cref="T:System.Reflection.MethodInfo" /> Соответствующий метод, используемый для операций вставки.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.Model">
      <summary>
              Возвращает составное действие <see cref="T:System.Data.Linq.Mapping.MetaModel" />, в котором содержится данный объект <see cref="T:System.Data.Linq.Mapping.MetaTable" />.
            </summary>
      <returns>
              <see cref="T:System.Data.Linq.Mapping.MetaModel" /> Включающий этот MetaTable.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.RowType">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Mapping.MetaType" /> описывающее тип строки таблицы.
            </summary>
      <returns>
              Тип строки в таблице.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.TableName">
      <summary>
              Возвращает имя таблицы, как определено в базе данных.
            </summary>
      <returns>
              Объект <see langword="string" /> представляет имя таблицы.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.UpdateMethod">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.DataContext" /> метод, используемый для выполнения операции обновления.
            </summary>
      <returns>
              <see cref="T:System.Reflection.MethodInfo" /> Соответствующий метод, используемый для операций обновления.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Associations">
      <summary>
              Возвращает перечисление всех ассоциаций.
            </summary>
      <returns>
              Набор ассоциаций.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.CanInstantiate">
      <summary>
              Получает значение, указывающее базовый тип может быть создан в результате запроса.
            </summary>
      <returns>
              <see langword="true" /> Если базовый тип может быть создан как результат запроса; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DataMembers">
      <summary>
              Возвращает перечисление всех элементов данных (поля и свойства).
            </summary>
      <returns>
              Коллекция элементов данных.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember">
      <summary>
              Возвращает элемент, представляющий столбец автоматически созданное удостоверение.
            </summary>
      <returns>
              Член, представляющий автоматически сгенерированный столбец идентификатора, или <see langword="null" /> Если нет столбца автоматически созданное удостоверение.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DerivedTypes">
      <summary>
              Возвращает перечисление непосредственно производных типов в иерархии наследования.
            </summary>
      <returns>
              Перечисление типов метаданных.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Discriminator">
      <summary>
              Возвращает элемент, представляющий столбец-дискриминатор наследования.
            </summary>
      <returns>
              Член, представляющий столбец-дискриминатор наследования, или <see langword="null" /> если такового не имеется.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod">
      <summary>
              Возвращает значение, указывающее, является ли текущий <see cref="T:System.Data.Linq.Mapping.MetaType" /> или какой-либо из его базовых классов типов имеет OnLoaded метод.
            </summary>
      <returns>
              <see langword="true" /> Если тип метаданных или любой базовый тип метаданных OnLoaded метод; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod">
      <summary>
              Возвращает значение, указывающее, является ли <see cref="T:System.Data.Linq.Mapping.MetaType" /> или какой-либо из его базовых типов имеет OnValidate метод.
            </summary>
      <returns>
              <see langword="true" />Если meta-type или любой базовый тип метаданных имеет OnValidate метод; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritance">
      <summary>
              Возвращает значение, указывающее, является ли тип частью сопоставляемой иерархии наследования.
            </summary>
      <returns>
              <see langword="true" /> Если тип является частью сопоставляемой иерархии наследования; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritanceCode">
      <summary>
              Возвращает значение, указывающее, является ли этот тип определяет код наследования.
            </summary>
      <returns>
              <see langword="true" /> Если этот тип определяет код наследования; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasUpdateCheck">
      <summary>
              Возвращает значение, указывающее, имеет ли тип постоянный член, который может потребоваться проверка на наличие конфликтов оптимистического параллелизма.
            </summary>
      <returns>
              <see langword="true" /> Если тип содержит постоянный член с <see cref="T:System.Data.Linq.Mapping.UpdateCheck" /> политики, отличный от <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" />; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IdentityMembers">
      <summary>
              Возвращает перечисление всех элементов данных, определяющих уникальный идентификатор типа.
            </summary>
      <returns>
              Перечисление членов, определяющих уникальный идентификатор типа.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceBase">
      <summary>
              Возвращает базовый тип метаданных в иерархии наследования.
            </summary>
      <returns>
              Базовый тип для текущей иерархии наследования по meta.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceCode">
      <summary>
              Возвращает значение, указывающее, является ли этот тип определяет код наследования.
            </summary>
      <returns>
              <see langword="true" /> Если этот тип определяет код наследования; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceDefault">
      <summary>
              Возвращает значение, указывающее, является ли этот тип используется по умолчанию для иерархии наследования.
            </summary>
      <returns>
              Метаданные для типа по умолчанию в сопоставление наследования.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceRoot">
      <summary>
              Возвращает корневой тип иерархии наследования.
            </summary>
      <returns>
              Корневой тип.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceTypes">
      <summary>
              Возвращает коллекцию всех типов, которые определены в иерархии наследования.
            </summary>
      <returns>
              Коллекция метатипов в текущей иерархии наследования.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsEntity">
      <summary>
              Возвращает значение, указывающее, является ли <see cref="T:System.Data.Linq.Mapping.MetaType" /> Тип сущности.
            </summary>
      <returns>
              <see langword="true" /> Если <see cref="T:System.Data.Linq.Mapping.MetaType" /> имеет тип сущности; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsInheritanceDefault">
      <summary>
              Возвращает значение, указывающее, является ли этот тип используется по умолчанию для иерархии наследования.
            </summary>
      <returns>
              <see langword="true" /> Если этот тип используется по умолчанию для иерархии наследования; в противном случае <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Model">
      <summary>
              Возвращает составное действие <see cref="T:System.Data.Linq.Mapping.MetaModel" />, в котором содержится данный объект <see cref="T:System.Data.Linq.Mapping.MetaType" />.
            </summary>
      <returns>
              Метамодель.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Name">
      <summary>
              Возвращает имя объекта <see cref="T:System.Data.Linq.Mapping.MetaType" />.
            </summary>
      <returns>
              Имя текущего типа meta.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod">
      <summary>
              Возвращает сведения OnLoaded содержится мета тип метода.
            </summary>
      <returns>
              Описание OnLoaded метод для этого типа meta.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnValidateMethod">
      <summary>
              Возвращает сведения OnValidate содержится мета тип метода.
            </summary>
      <returns>
              Описание OnValidate метод для этого типа meta.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.PersistentDataMembers">
      <summary>
              Возвращает коллекцию всех постоянных членов-данных.
            </summary>
      <returns>
              Коллекция всех членов-метаданных в текущем типе.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Table">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.Mapping.MetaTable" /> использующего это <see cref="T:System.Data.Linq.Mapping.MetaType" /> для определения строки.
            </summary>
      <returns>
              Мета таблицу, которая использует текущий тип метаданных для определения строк.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Type">
      <summary>
              Возвращает базовый тип среды CLR (CLR).
            </summary>
      <returns>
              Связанный тип среды CLR.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.VersionMember">
      <summary>
              Возвращает столбец версии строки или штампа времени для этого <see cref="T:System.Data.Linq.Mapping.MetaType" />.
            </summary>
      <returns>
              Член метаданных, представляющий столбец версии строки или штампа времени для мета тип, или <see langword="null" /> если такового не имеется.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.DbType">
      <summary>
              Возвращает или задает тип параметра для базы данных от поставщика.
            </summary>
      <returns>
              Тип в виде строки.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.Name">
      <summary>
              Возвращает или задает имя параметра.
            </summary>
      <returns>
              Имя в виде строки.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ProviderAttribute.Type">
      <summary>
              Возвращает тип поставщика, который используется для создания <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.
            </summary>
      <returns>
              Тип поставщика.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ResultTypeAttribute.Type">
      <summary>
              Возвращает тип допустимые или ожидаемые сопоставления для функции с различными типами результатов.
            </summary>
      <returns>
              Тип результата (<see cref="T:System.Type" />).
            </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.TableAttribute.Name">
      <summary>
              Возвращает или задает имя таблицы или представления.
            </summary>
      <returns>
              По умолчанию значение совпадает с именем класса.
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.CurrentValue">
      <summary>
              Возвращает текущее значение элемента в конфликте.
            </summary>
      <returns>
              Объект в конфликте.
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.DatabaseValue">
      <summary>
              Возвращает значение базы данных элемента в конфликте.
            </summary>
      <returns>
              Значение объекта в конфликте.
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsModified">
      <summary>
              Возвращает значение, указывающее, член данных был ли изменен с момента последней базы данных чтения или обновления.
            </summary>
      <returns>
              <see langword="True" /> Если данные элемента были изменены.
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsResolved">
      <summary>
              Возвращает значение, указывающее, был ли конфликт разрешен.
            </summary>
      <returns>
              <see langword="True" /> Если конфликт был разрешен.
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.Member">
      <summary>
              Возвращает метаданные об элементе в конфликте.
            </summary>
      <returns>
              Сведения об элементе в конфликте.
            </returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.OriginalValue">
      <summary>
              Возвращает исходное значение элемента в конфликте.
            </summary>
      <returns>
              Исходное значение элемента в конфликте.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.CurrentValue">
      <summary>
              Возвращает текущее значение измененного члена.
            </summary>
      <returns>
              Значение элемента.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.Member">
      <summary>
              Возвращает сведения об элементе для измененного элемента.
            </summary>
      <returns>
              Сведения об элементе в конфликте.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.OriginalValue">
      <summary>
              Возвращает исходное значение измененного члена.
            </summary>
      <returns>
              Исходное значение для измененного элемента.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsDeleted">
      <summary>
              Возвращает значение, указывающее, был ли объект в конфликте удален из базы данных.
            </summary>
      <returns>
              <see langword="True" /> Если объект был удален.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsResolved">
      <summary>
              Возвращает значение, указывающее, является ли конфликты для этого объекта уже разрешены.
            </summary>
      <returns>
              <see langword="True" /> Если конфликты были устранены.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.MemberConflicts">
      <summary>
              Возвращает коллекцию всех конфликтов элемента, вызвавших сбой при обновлении.
            </summary>
      <returns>
              Коллекция конфликтов элемента.
            </returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.Object">
      <summary>
              Возвращает объект в конфликте.
            </summary>
      <returns>
              Объект в конфликте.
            </returns>
    </member>
    <member name="P:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CanDeferLoad">
      <summary>
              При переопределении в производном классе получает значение, указывающее, включена ли отложенная загрузка.
            </summary>
      <returns>
              <see langword="true" /> Если отложенная загрузка включена. в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.Context">
      <summary>
              Возвращает <see cref="T:System.Data.Linq.DataContext" /> использовался для получения этого <see cref="T:System.Data.Linq.Table`1" />.
            </summary>
      <returns>
              Контекст данных, который использовался для получения этой таблицы.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.IsReadOnly">
      <summary>
              Возвращает значение, указывающее, является ли тип сущностей, содержащихся в данном <see cref="T:System.Data.Linq.Table`1" /> экземпляр имеет первичный ключ.
            </summary>
      <returns>
              <see langword="true" /> Если тип сущности не имеет первичного ключа; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>
              Возвращает значение, указывающее, является ли коллекция коллекцию <see cref="T:System.Collections.IList" /> объектов.
            </summary>
      <returns>
              <see langword="true" /> Если коллекция является коллекцией из <see cref="T:System.Collections.IList" /> объектов; в противном случае — <see langword="false" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
      <summary>
              Возвращает тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом.
            </summary>
      <returns>
              Тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
      <summary>
              Возвращает дерево выражения, связанного с данным экземпляром <see cref="T:System.Linq.IQueryable" />.
            </summary>
      <returns>
              <see cref="T:System.Linq.Expressions.Expression" /> Связанный с этим экземпляром <see cref="T:System.Linq.IQueryable" />.
            </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
      <summary>
              Возвращает поставщик запросов, связанный с этим источником данных.
            </summary>
      <returns>
              <see cref="T:System.Linq.IQueryProvider" /> Связанный с этим источником данных.
            </returns>
    </member>
    <member name="T:System.Data.Linq.Binary">
      <summary>
              Представляет неизменяемый блок двоичных данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.ChangeAction">
      <summary>
              Описывает тип изменений, которые будут подвергнуты сущности, когда изменения будут отправлены в базу данных.
            </summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.None">
      <summary>
              Сущность не будет отправлена.
            </summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Delete">
      <summary>
              Сущность будет удалена.
            </summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Insert">
      <summary>
              Сущность будет вставлена.
            </summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Update">
      <summary>
              Сущность будет обновляться.
            </summary>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictCollection">
      <summary>
              Возвращает коллекцию объектов, участвующих в конфликтах параллелизма.
            </summary>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictException">
      <summary>
              Возникает при сбое обновления, так как значения базы данных были обновлены с момента клиента последнего прочтения.
            </summary>
    </member>
    <member name="T:System.Data.Linq.ChangeSet">
      <summary>
              Предоставляет контейнер для изменений.
            </summary>
    </member>
    <member name="T:System.Data.Linq.CompiledQuery">
      <summary>
              Предусматривает компиляцию и кэширование запросов для повторного использования.
            </summary>
    </member>
    <member name="T:System.Data.Linq.ConflictMode">
      <summary>
              Указывает, когда должно выдаваться конфликтов параллелизма.
            </summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.FailOnFirstConflict">
      <summary>
              Указывает, что попытки обновления базы данных следует остановить немедленно при обнаружении первая ошибка конфликта параллелизма.
            </summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.ContinueOnConflict">
      <summary>
              Указывает, что все обновления базы данных можно выполнять и что накапливаются конфликтов параллелизма и они будут возвращены в конце процесса.
            </summary>
    </member>
    <member name="T:System.Data.Linq.DataContext">
      <summary>
              Представляет главную точку входа для LINQ to SQL framework.
            </summary>
    </member>
    <member name="T:System.Data.Linq.DataLoadOptions">
      <summary>
              Предоставляет немедленную загрузку и фильтрацию связанных данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.DBConvert">
      <summary>
              Используется для преобразования одного типа в другой.
            </summary>
    </member>
    <member name="T:System.Data.Linq.DuplicateKeyException">
      <summary>
              Возникает, если попытка добавить объект в кэш идентификации с помощью ключа, который уже используется.
            </summary>
    </member>
    <member name="T:System.Data.Linq.EntityRef`1">
      <summary>
              Обеспечивает отложенную загрузку и связь для одной стороны отношения «один ко многим» в LINQ to SQL приложения.
            </summary>
      <typeparam name="TEntity">
                Тип целевой сущности.
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.EntitySet`1">
      <summary>
              Обеспечивает отложенную загрузку и поддержку отношений "один ко многим" и "один к одному" на стороне коллекции в приложениях LINQ to SQL. </summary>
      <typeparam name="TEntity">
                Тип данных целевой сущности.
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException">
      <summary>
              Представляет ошибки, возникающие при попытке изменить внешний ключ, если сущность уже загружена.
            </summary>
    </member>
    <member name="T:System.Data.Linq.IExecuteResult">
      <summary>
              Предоставляет доступ к возвращаемому значению или результатам выполнения запроса.
            </summary>
    </member>
    <member name="T:System.Data.Linq.IFunctionResult">
      <summary>
              Предоставляет доступ к возвращаемому значению функции.
            </summary>
    </member>
    <member name="T:System.Data.Linq.IMultipleResults">
      <summary>
              Представляет результаты сопоставляемых функций и запросов с переменной возвращают последовательности.
            </summary>
    </member>
    <member name="T:System.Data.Linq.ISingleResult`1">
      <summary>
              Представляет результат сопоставленной функции, которая содержит одну возвращаемую последовательность.
            </summary>
      <typeparam name="T">
                Тип элементов в возвращаемой последовательности.
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.ITable">
      <summary>
              Используется для слабо типизированных сценариев запросов.
            </summary>
    </member>
    <member name="T:System.Data.Linq.ITable`1">
      <summary>
              Представляет таблицу для определенного типа в основной базе данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Link`1">
      <summary>
              Используется для включения отложенной загрузки отдельные свойства (аналогично <see cref="T:System.Data.Linq.EntityRef`1" />).
            </summary>
      <typeparam name="T">
                Тип элементов в отложенном источнике.
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.Mapping.AssociationAttribute">
      <summary>
              Определяет свойства для представления ассоциация базы данных, такие как связь по внешнему ключу.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.AttributeMappingSource">
      <summary>
              Источник сопоставления, использующий атрибуты контекста для создания модели сопоставления.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.AutoSync">
      <summary>
              Указывает, что среда выполнения как получить значение после выполнения операции вставки или обновления.
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Default">
      <summary>
              Автоматически выбирает значение.
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Always">
      <summary>
              Всегда возвращает значение.
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Never">
      <summary>
              Никогда не возвращает значение.
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnInsert">
      <summary>
              Возвращает значение только после выполнения операции вставки.
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnUpdate">
      <summary>
              Возвращает значение только после выполнения операции обновления.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ColumnAttribute">
      <summary>
              Связывает класс со столбцом в таблице базы данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.DataAttribute">
      <summary>
              Предоставляет члены для описания атрибутов данных в столбцах.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.DatabaseAttribute">
      <summary>
              Задает определенные атрибуты класса, представляющего базу данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.FunctionAttribute">
      <summary>
              Связывает метод с хранимой процедуры или определяемой пользователем функции в базе данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.InheritanceMappingAttribute">
      <summary>
              Сопоставляет иерархию наследования в LINQ to SQL приложения.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MappingSource">
      <summary>
              Представляет источник информации сопоставления.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor">
      <summary>
              Представляет метод доступа к члену.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor`2">
      <summary>
              Строго типизированную версию <see cref="T:System.Data.Linq.Mapping.MetaAccessor" /> класса.
            </summary>
      <typeparam name="TEntity">
                Тип источника.
              </typeparam>
      <typeparam name="TMember">
                Тип члена данного источника.
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAssociation">
      <summary>
              Представляет отношение ассоциации между двумя типами сущностей.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaDataMember">
      <summary>
              Представляет сопоставление между полем или свойством объекта домена в столбец таблицы базы данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaFunction">
      <summary>
              Представляет сопоставление между методом контекста и функции базы данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaModel">
      <summary>
              Это абстракция, которая представляет сопоставление между объектами базы данных и домена.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaParameter">
      <summary>
              Представляет сопоставление между параметром метода и параметром функции базы данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaTable">
      <summary>
              Представляет абстракцию таблицы базы данных или представления.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaType">
      <summary>
              Представляет сопоставление типа объекта домена со столбцами таблицы базы данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ParameterAttribute">
      <summary>
              Разрешает задание деталей сопоставления для параметра метода хранимой процедуры.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ProviderAttribute">
      <summary>
              Указывает, какой поставщик базы данных для использования.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ResultTypeAttribute">
      <summary>
              Используется для задания каждого типа результата; для функций с различными типами результатов.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.TableAttribute">
      <summary>
              Определяет класс как класс сущности, связанный с таблицей базы данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.UpdateCheck">
      <summary>
              Указывает, когда объекты должны проверяться наличие конфликтов параллелизма.
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Always">
      <summary>
              Всегда выполнять проверку.
               Это значение по умолчанию, если <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> является <see langword="true" /> для элемента.
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Never">
      <summary>
              Никогда не проверять.
            </summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged">
      <summary>
              Проверка только в том случае, если объект был изменен.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.XmlMappingSource">
      <summary>
              Представляет источник сопоставления, для создания модели используется внешний файл сопоставления XML.
            </summary>
    </member>
    <member name="T:System.Data.Linq.MemberChangeConflict">
      <summary>
              Представляет ситуацию, в котором попытка обновления завершается ошибкой, так как значения элемента были обновлены с момента последнего их чтения клиентом.
            </summary>
    </member>
    <member name="T:System.Data.Linq.ModifiedMemberInfo">
      <summary>
              Содержит значения элементов, которые были изменены в LINQ to SQL приложений.
            </summary>
    </member>
    <member name="T:System.Data.Linq.ObjectChangeConflict">
      <summary>
              Представляет попытку обновления с одного или нескольких конфликтов оптимистического параллелизма.
            </summary>
    </member>
    <member name="T:System.Data.Linq.RefreshMode">
      <summary>
              Определяет как <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> метод обработки конфликтов оптимистичного параллелизма.
            </summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepCurrentValues">
      <summary>
              Принудительно <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> метод исходные значения со значениями, полученными из базы данных.
               Текущее значение не изменяется.
            </summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepChanges">
      <summary>
              Принудительно <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> метод, чтобы сохранить текущее значение, которое было изменено, но другие значения обновляются значениями из базы данных.
            </summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.OverwriteCurrentValues">
      <summary>
              Принудительно <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> метод переопределения все текущие значения значениями из базы данных.
            </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1">
      <summary>
              Определяет методы для динамической материализации объектов.
            </summary>
      <typeparam name="TDataReader">
                Тип модуля чтения данных.
              </typeparam>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2000Provider">
      <summary>
              Содержит функции для подключения и взаимодействия с SQL Server 2000.
            </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2005Provider">
      <summary>
              Содержит функции для подключения и взаимодействия с SQL Server 2005.
            </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2008Provider">
      <summary>
              Содержит функции для подключения и взаимодействия с SQL Server 2008.  </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlHelpers">
      <summary>
              Предоставляет вспомогательные методы для операций с использованием строковых шаблонов.
            </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlMethods">
      <summary>
              Предоставляет методы, которые соответствуют SQL Server функции.
               Методы в <see cref="T:System.Data.Linq.SqlClient.SqlMethods" /> класса поддерживаются только в LINQ в SQL-запросы.
            </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlProvider">
      <summary>
              Содержит функции для подключения и взаимодействия с SQL Server.
            </summary>
    </member>
    <member name="T:System.Data.Linq.Table`1">
      <summary>
              Представляет таблицу для определенного типа в основной базе данных.
            </summary>
      <typeparam name="TEntity">
                Тип данных в таблице.
              </typeparam>
    </member>
  </members>
</doc>