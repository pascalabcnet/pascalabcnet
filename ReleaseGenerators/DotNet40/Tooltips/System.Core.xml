<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle">
      <summary>Предоставляет безопасный дескриптор, представляющий размещенный в памяти файл для последовательного доступа.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
      <summary>Предоставляет безопасный дескриптор, соответствующий представлению блока неуправляемой памяти для произвольного доступа. </summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle">
      <summary>Предоставляет безопасный дескриптор, который может быть использован объектами криптографии следующего поколения (Cryptography Next Generation, CNG).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" />.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle">
      <summary>Освобождает дескриптор, используемый объектом криптографии следующего поколения (Cryptography Next Generation, CNG).</summary>
      <returns>Значение true, если дескриптор успешно освобожден; в противном случае — false.</returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle">
      <summary>Освобождает собственный дескриптор, используемый объектом криптографии следующего поколения (Cryptography Next Generation, CNG).</summary>
      <returns>Значение true, если дескриптор успешно освобожден; в противном случае — false.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle">
      <summary>Предоставляет безопасный дескриптор, представляющий ключ (NCRYPT_KEY_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" />.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle">
      <summary>Предоставляет безопасный дескриптор, представляющий поставщика хранилища ключей (NCRYPT_PROV_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle" />.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle">
      <summary>Предоставляет безопасный дескриптор, представляющий секретное значение согласования (NCRYPT_SECRET_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" />.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafePipeHandle">
      <summary>Представляет класс-оболочку для дескриптора файла. </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />.</summary>
      <param name="preexistingHandle">Объект <see cref="T:System.IntPtr" />, представляющий ранее существующий дескриптор для использования.</param>
      <param name="ownsHandle">Значение true, чтобы наверняка освободить дескриптор на стадии завершения; в противном случае — значение false (не рекомендуется).</param>
    </member>
    <member name="T:System.Action`10">
      <summary>Инкапсулирует метод, который принимает 10 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`11">
      <summary>Инкапсулирует метод, который принимает 11 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`12">
      <summary>Инкапсулирует метод, который принимает 12 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`13">
      <summary>Инкапсулирует метод, который принимает 13 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`14">
      <summary>Инкапсулирует метод, который принимает 14 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`15">
      <summary>Инкапсулирует метод, который принимает 15 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg15">Пятнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T15">Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`16">
      <summary>Инкапсулирует метод, который принимает 16 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg15">Пятнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg16">Шестнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T15">Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T16">Тип шестнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`9">
      <summary>Инкапсулирует метод, который принимает девять параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`10">
      <summary>Инкапсулирует метод, который принимает девять параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`11">
      <summary>Инкапсулирует метод, который принимает 10 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`12">
      <summary>Инкапсулирует метод, который принимает 11 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`13">
      <summary>Инкапсулирует метод, который принимает 12 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`14">
      <summary>Инкапсулирует метод, который принимает 13 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`15">
      <summary>Инкапсулирует метод, который принимает 14 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`16">
      <summary>Инкапсулирует метод, который принимает 15 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg15">Пятнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T15">Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`17">
      <summary>Инкапсулирует метод, который принимает 16 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg15">Пятнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg16">Шестнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T15">Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T16">Тип шестнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>Представляет набор значений.</summary>
      <typeparam name="T">Тип элементов в наборе.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>Инициализирует пустой экземпляр класса <see cref="T:System.Collections.Generic.HashSet`1" />, который является пустым и использует компаратор по умолчанию для типа набора.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.HashSet`1" />, который использует компаратор по умолчанию для типа набора, содержит элементы, скопированные из указанной коллекции, и обладает емкостью, достаточной для того, чтобы вместить количество скопированных элементов.</summary>
      <param name="collection">Коллекция, элементы которой копируются в новый набор.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.HashSet`1" />, который использует указанный компаратор для типа набора, содержит элементы, скопированные из указанной коллекции, и обладает емкостью, достаточной для того, чтобы вместить количество скопированных элементов.</summary>
      <param name="collection">Коллекция, элементы которой копируются в новый набор.</param>
      <param name="comparer">Реализация <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, которую следует использовать при сравнении значений в наборе, или значение null, чтобы использовать реализацию <see cref="T:System.Collections.Generic.EqualityComparer`1" /> по умолчанию для типа набора.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Инициализирует пустой экземпляр класса <see cref="T:System.Collections.Generic.HashSet`1" />, который является пустым и использует указанный компаратор для типа набора.</summary>
      <param name="comparer">Реализация <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, которую следует использовать при сравнении значений в наборе, или значение null, чтобы использовать реализацию <see cref="T:System.Collections.Generic.EqualityComparer`1" /> по умолчанию для типа набора.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Collections.Generic.HashSet`1" /> с сериализованными данными.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который содержит сведения, требуемые для сериализации объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="context">Структура <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащая исходный и конечный объекты сериализованного потока, связанного с объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>Добавляет указанный элемент в набор.</summary>
      <returns>Значение true, если элемент добавлен в объект <see cref="T:System.Collections.Generic.HashSet`1" />; значение false, если элемент уже присутствует в нем.</returns>
      <param name="item">Элемент, добавляемый в набор.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>Удаляет все элементы из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>Получает объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для определения равенства для значений в наборе.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для определения равенства для значений в наборе.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>Определяет, содержит ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> указанный элемент.</summary>
      <returns>Значение true, если объект содержит указанный элемент <see cref="T:System.Collections.Generic.HashSet`1" />; в противном случае — значение false.</returns>
      <param name="item">Объект, который требуется отыскать в объекте <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>Копирует элементы объекта <see cref="T:System.Collections.Generic.HashSet`1" /> в массив.</summary>
      <param name="array">Одномерный массив, являющийся назначением элементов, копируемых из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.Индексация в массиве должна начинаться с нуля.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы объекта <see cref="T:System.Collections.Generic.HashSet`1" /> в массив, начиная с указанного индекса массива.</summary>
      <param name="array">Одномерный массив, являющийся назначением элементов, копируемых из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.Индексация в массиве должна начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="arrayIndex" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="arrayIndex" /> больше длине массива назначения <paramref name="array" />.— или —Значение <paramref name="count" /> больше размера массива назначения <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Копирует указанное количество элементов объекта <see cref="T:System.Collections.Generic.HashSet`1" /> в массив, начиная с указанного индекса массива.</summary>
      <param name="array">Одномерный массив, являющийся назначением элементов, копируемых из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.Индексация в массиве должна начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <param name="count">Число элементов, копируемых в массив <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="arrayIndex" /> меньше 0.— или —Значение параметра <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="arrayIndex" /> больше длине массива назначения <paramref name="array" />.— или —Значение <paramref name="count" /> превышает доступное место, начиная с индекса <paramref name="index" /> и до конца массива назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>Возвращает число элементов, содержащихся в наборе.</summary>
      <returns>Число элементов, содержащихся в наборе.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>Возвращает объект <see cref="T:System.Collections.IEqualityComparer" />, который может быть использован для проверки равенства для объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.IEqualityComparer" />, который может быть использован для выполнения глубокой проверки равенства для объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет все элементы в указанной коллекции из текущего объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="other">Коллекция элементов, удаляемая из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий перебор элементов объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> для объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Реализует интерфейс <see cref="T:System.Runtime.Serialization.ISerializable" /> и возвращает данные, необходимые для сериализации объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который содержит сведения, требуемые для сериализации объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="context">Структура <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащая исходный и конечный объекты сериализованного потока, связанного с объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> имеет значение null;</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий объект <see cref="T:System.Collections.Generic.HashSet`1" />, чтобы он содержал только элементы, которые имеются в этом объекте и в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> строгим подмножеством указанной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> строгим надмножеством указанной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> строгим надмножеством <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> подмножеством указанной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> подмножеством <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> надмножеством указанной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> строгим надмножеством <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>Реализует интерфейс <see cref="T:System.Runtime.Serialization.ISerializable" /> и вызывает событие десериализации при завершении десериализации.</summary>
      <param name="sender">Источник события десериализации.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, связанный с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />, является недействительным.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, имеются ли общие элементы в текущем объекте <see cref="T:System.Collections.Generic.HashSet`1" /> и в заданной коллекции.</summary>
      <returns>Значение true, если объекты <see cref="T:System.Collections.Generic.HashSet`1" /> и <paramref name="other" /> совместно используют по крайней мере один общий элемент; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>Удаляет указанный элемент из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Значение true, если элемент успешно найден и удален; в противном случае — значение false.Этот метод возвращает значение false, если параметр <paramref name="item" /> не найден в объекте <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <param name="item">Подлежащий удалению элемент.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Удаляет все элементы, удовлетворяющие условиям, которые были определены указанным предикатом из коллекции <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Количество элементов, удаленных из коллекции <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <param name="match">Делегат <see cref="T:System.Predicate`1" />, определяющий условия удаления элемента.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, содержат ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> и указанная коллекция одни и те же элементы.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> равен данному параметру; в противном случае — значение <paramref name="other" />.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий объект <see cref="T:System.Collections.Generic.HashSet`1" />, чтобы он содержал только элементы, которые имеются либо в этом объекте, либо в указанной коллекции, но не одновременно в них обоих.</summary>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Добавляет элемент в объект <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Объект, добавляемый в объект <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция только для чтения.</summary>
      <returns>Значение true если коллекция доступна только для чтения; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий итерацию в коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который может использоваться для перебора элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет перебор элементов коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>Задает емкость объекта <see cref="T:System.Collections.Generic.HashSet`1" /> равной фактическому числу элементов, которые в нем содержатся, округленному в большую сторону ближайшего значения, зависящего от реализации.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий объект <see cref="T:System.Collections.Generic.HashSet`1" />, чтобы он содержал все элементы, которые имеются и в этом объекте, и в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null;</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>Выполняет перечисление элементов объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>Получает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции <see cref="T:System.Collections.Generic.HashSet`1" />, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу коллекции <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца коллекции.</returns>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Получает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, находящийся в текущей позиции перечислителя, в виде объекта <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="T:System.Diagnostics.EventSchemaTraceListener">
      <summary>Направляет результаты трассировки или отладки сквозных событий в совместимый со схемой файл журнала в XML-представлении.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" />, используя указанный файл в качестве получателя выходных данных отладки и трассировки.</summary>
      <param name="fileName">Новый путь для файла журнала.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> с заданным именем, используя указанный файл в качестве получателя выходных данных отладки и трассировки.</summary>
      <param name="fileName">Новый путь для файла журнала.</param>
      <param name="name">Имя прослушивателя.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> с заданным именем и указанным размером буфера, используя указанный файл в качестве получателя выходных данных отладки и трассировки.</summary>
      <param name="fileName">Новый путь для файла журнала.</param>
      <param name="name">Имя прослушивателя.</param>
      <param name="bufferSize">Размер буфера выходных данных (в байтах).</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> с заданным именем и указанным размером буфера, используя указанный файл с заданной политикой хранения журнала в качестве получателя выходных данных отладки и трассировки.</summary>
      <param name="fileName">Новый путь для файла журнала.</param>
      <param name="name">Имя прослушивателя.</param>
      <param name="bufferSize">Размер буфера выходных данных (в байтах).</param>
      <param name="logRetentionOption">Одно из значений <see cref="T:System.Diagnostics.TraceLogRetentionOption" />. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> с заданным именем и указанным размером буфера, используя указанный файл с заданной политикой хранения и максимальным размером журнала в качестве получателя выходных данных отладки и трассировки.</summary>
      <param name="fileName">Новый путь для файла журнала.</param>
      <param name="name">Имя прослушивателя.</param>
      <param name="bufferSize">Размер буфера выходных данных (в байтах).</param>
      <param name="logRetentionOption">Одно из значений <see cref="T:System.Diagnostics.TraceLogRetentionOption" />.</param>
      <param name="maximumFileSize">Максимальный размер файла в байтах.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="maximumFileSize" /> меньше значения <paramref name="bufferSize" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="maximumFileSize" /> является отрицательным числом.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> с заданным именем и указанным размером буфера, используя в качестве получателя выходных данных отладки и трассировки указанный файл с заданной политикой хранения и максимальным размером журнала, а также счетчиком файлов.</summary>
      <param name="fileName">Новый путь для файла журнала.</param>
      <param name="name">Имя прослушивателя.</param>
      <param name="bufferSize">Размер буфера выходных данных (в байтах).</param>
      <param name="logRetentionOption">Одно из значений <see cref="T:System.Diagnostics.TraceLogRetentionOption" />.</param>
      <param name="maximumFileSize">Максимальный размер файла в байтах.</param>
      <param name="maximumNumberOfFiles">Максимальное количество выходных файлов журнала.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="maximumFileSize" /> меньше значения <paramref name="bufferSize" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="maximumFileSize" /> является отрицательным числом.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="maximumNumberOfFiles" /> меньше 1, а значение параметра <paramref name="logRetentionOption" /> равно <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="maximumNumberOfFiles" /> меньше 2, а значение параметра <paramref name="logRetentionOption" /> равно <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.BufferSize">
      <summary>Получает размер буфера выходных данных.</summary>
      <returns>Размер буфера выходных данных (в байтах). </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Close">
      <summary>Закрывает файл журнала данного прослушивателя. Теперь этот журнал не будет получать выходные данные отладки или трассировки.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)">
      <summary>Записывает в файл журнала сведения об ошибках, в том числе базовое и подробное сообщение об ошибке.</summary>
      <param name="message">Записываемое базовое сообщение об ошибке.</param>
      <param name="detailMessage">Подробное сообщение об ошибке, дополняющее базовое сообщение об ошибке.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Flush">
      <summary>Вызывает запись буферизированных данных в журнал этого прослушивателя.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes">
      <summary>Возвращает настраиваемые атрибуты конфигурации XML, поддерживаемые прослушивателем трассировки.</summary>
      <returns>Массив типа <see cref="T:System.String" />, содержащий атрибуты конфигурации XML, распознаваемые данным прослушивателем.</returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe">
      <summary>Возвращает значение, указывающее, является ли прослушиватель трассировки потокобезопасным.</summary>
      <returns>Всегда возвращает значение true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize">
      <summary>Возвращает максимальный размер файла журнала.</summary>
      <returns>Максимальный размер файла в байтах.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles">
      <summary>Возвращает максимальное количество файлов журнала.</summary>
      <returns>Максимальное количество файлов журнала, определяемое значением свойства <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> файла.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>Записывает в файл журнала сведения трассировки, единичный объект данных и сведения о событии.</summary>
      <param name="eventCache">Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификаторы процесса и потока, а также сведения трассировки стека.</param>
      <param name="source">Имя источника. </param>
      <param name="eventType">Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />.</param>
      <param name="id">Числовой идентификатор события.</param>
      <param name="data">Объект данных для выдачи.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>Записывает в файл журнала сведения трассировки, несколько объектов данных и сведения о событии.</summary>
      <param name="eventCache">Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификаторы процесса и потока, а также сведения трассировки стека.</param>
      <param name="source">Имя источника. </param>
      <param name="eventType">Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />.</param>
      <param name="id">Числовой идентификатор события.</param>
      <param name="data">Массив объектов данных для выдачи.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>Записывает сведения трассировки, сообщение и сведения о событиях в файл журнала.</summary>
      <param name="eventCache">Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификаторы процесса и потока, а также сведения трассировки стека.</param>
      <param name="source">Имя источника. </param>
      <param name="eventType">Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />.</param>
      <param name="id">Числовой идентификатор события.</param>
      <param name="message">Сообщение для записи.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>Записывает сведения трассировки, форматированное сообщение и сведения о событиях в файл журнала.</summary>
      <param name="eventCache">Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификаторы процесса и потока, а также сведения трассировки стека.</param>
      <param name="source">Имя источника. </param>
      <param name="eventType">Одно из значений <see cref="T:System.Diagnostics.TraceEventType" />.</param>
      <param name="id">Числовой идентификатор события.</param>
      <param name="format">Строка формата, содержащая нулевое или ненулевое количество элементов форматирования, соответствующих объектам в массиве <paramref name="args" />.</param>
      <param name="args">Массив объектов, содержащий нулевое или ненулевое количество объектов, которые необходимо отформатировать.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption">
      <summary>Возвращает для файла параметр хранения журнала трассировки.</summary>
      <returns>Одно из значений <see cref="T:System.Diagnostics.TraceLogRetentionOption" />.Значение по умолчанию — <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>Записывает сведения трассировки, включая идентификацию сопутствующего действия, сообщение и сведения о событии в файл журнала.</summary>
      <param name="eventCache">Объект <see cref="T:System.Diagnostics.TraceEventCache" />, содержащий текущие идентификаторы процесса и потока, а также сведения трассировки стека.</param>
      <param name="source">Имя источника. </param>
      <param name="id">Числовой идентификатор события.</param>
      <param name="message">Сообщение трассировки для записи.</param>
      <param name="relatedActivityId">Структура <see cref="T:System.Guid" />, идентифицирующая сопутствующую активность.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)">
      <summary>Записывает сообщение в файл журнала, не указывая какой-либо дополнительной контекстной информации.</summary>
      <param name="message">Сообщение для записи.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)">
      <summary>Записывает в файл журнала сообщение, после которого следует текущий разделитель строк, без какой-либо дополнительной контекстной информации.</summary>
      <param name="message">Сообщение для записи.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.Writer">
      <summary>Возвращает или задает основной модуль записи текста, записывающий данные в файл журнала.</summary>
      <returns>Объект <see cref="T:System.IO.TextWriter" />.</returns>
      <exception cref="T:System.NotSupportedException">Предпринята попытка присвоить значение свойству <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.TraceLogRetentionOption">
      <summary>Задает структуру файла, которая будет использоваться для журнала <see cref="T:System.Diagnostics.EventSchemaTraceListener" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize">
      <summary>Один файл без ограничения максимального размера.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize">
      <summary>Один файл с максимальным размером, определенным свойством <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles">
      <summary>Неограниченное число последовательных файлов, каждый из которых с максимальным размером, определенным свойством <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />.Не существует логических границ для количества или размера файлов, однако существуют пределы физических ограничений, налагаемых компьютером.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles">
      <summary>Конечное число последовательных файлов, каждый из которых максимального размера.При достижении значения свойства <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> начинается запись нового файла с увеличенным целочисленным суффиксом.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles">
      <summary>Конечное число последовательных файлов, каждый из которых максимального размера.При достижении значения свойства <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> начинается запись нового файла с увеличенным целочисленным суффиксом.При достижении значения свойства <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" /> первый файл очищается и перезаписывается.Затем файлы последовательно циклически перезаписываются.</summary>
    </member>
    <member name="T:System.Diagnostics.UnescapedXmlDiagnosticData">
      <summary>Предоставляет не являющиеся escape-последовательностью XML-данные для внесения в журнал предоставленных пользователем данных трассировки.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" />, используя указанную строку XML-данных.</summary>
      <param name="xmlPayload">XML-данные, которые необходимо внести в журнал в узле схемы событий UserData.  </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" />.</summary>
      <returns>Строковое представление объекта <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" />.Если объекту соответствует значение null, этот метод возвращает пустую строку.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.UnescapedXmlDiagnosticData.UnescapedXml">
      <summary>Получает или задает строку XML-данных, не являющуюся escape-последовательностью.</summary>
      <returns>Строка XML, не являющаяся escape-последовательностью.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventDescriptor">
      <summary>Содержит метаданные, определяющие событие.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventDescriptor.#ctor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Int64)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />.</summary>
      <param name="id">Идентификатор события.</param>
      <param name="version">Версия события.В версии указывается редакция определения события.Этот элемент и элемент Id можно использовать для идентификации уникального события.</param>
      <param name="channel">Определяет потенциальную цель для события.</param>
      <param name="level">Указывает уровень детализации сведений, включаемых в событие.</param>
      <param name="opcode">Операция, выполняемая во время записи события.</param>
      <param name="task">Идентифицирует логический компонент приложения, записывающего событие.</param>
      <param name="keywords">Битовая маска, указывающая категорию события.Ключевое слово может содержать одно или несколько ключевых слов, определенных поставщиком, стандартные ключевые слова или и те, и другие.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Channel">
      <summary>Получает значение канала из дескриптора событий.</summary>
      <returns>Канал, который определяет потенциальную цель для события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.EventId">
      <summary>Получает значение идентификатора события из дескриптора событий.</summary>
      <returns>Идентификатор события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Keywords">
      <summary>Получает значение ключевого слова из дескриптора событий.</summary>
      <returns>Ключевое слово, которое является битовой маской, указывающей категорию события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Level">
      <summary>Получает значение уровня из дескриптора событий.</summary>
      <returns>Уровень детализации сведений, включаемых в событие.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Opcode">
      <summary>Получает значение кода операции из дескриптора событий.</summary>
      <returns>Операция, выполняемая во время записи события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Task">
      <summary>Получает значение задачи из дескриптора событий.</summary>
      <returns>Задача, которая определяет логический компонент приложения, записывающего событие.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Version">
      <summary>Получает значение версии из дескриптора событий.</summary>
      <returns>Версия события. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider">
      <summary>Этот класс используется для записи событий.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.EventProvider" />.</summary>
      <param name="providerGuid">Идентификатор Guid, однозначно определяющий поставщика.</param>
      <exception cref="T:System.InsufficientMemoryException">Недостаточно памяти для выполнения операции.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы в пространстве имен <see cref="N:System.Diagnostics.Eventing" /> работают только в Windows Vista.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="providerGuid" /> не может быть равен null.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">Ошибка, возвращенная подсистемой ETW. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Close">
      <summary>Удаляет регистрацию поставщика из подсистемы ETW и освобождает все неуправляемые ресурсы.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">Ошибка, возвращенная подсистемой ETW. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId">
      <summary>Создает уникальный идентификатор действия для поставщика.</summary>
      <returns>Уникальный идентификатор Guid, который используется при вызове метода <see cref="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)" />, чтобы установить идентификатор действия для поставщика.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)"></member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Finalize"></member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError">
      <summary>Возвращает код последней ошибки, связанной со сбоем записи события.</summary>
      <returns>Это значение используется для определения причины сбоя записи события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled">
      <summary>Определяет, разрешен ли поставщик каким-либо сеансом, независимо от значений уровня и ключевого слова, используемых для разрешения этого поставщика.</summary>
      <returns>Значение true, если поставщик разрешен для какого-либо сеанса, в противном случае — false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)">
      <summary>Определяет, запрашивается ли каким-либо сеансом от поставщика указанное событие.</summary>
      <returns>Значение true, если в каком-либо сеансе запрашивается указанное событие, в противном случае — false.</returns>
      <param name="level">Уровень детализации сведений, включаемых в событие.</param>
      <param name="keywords">Битовая маска, указывающая категорию события.Эта маска должна быть такой же, как и маска ключевого слова, которая определена в манифесте события.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)">
      <summary>Задает идентификатор текущего действия, используемый методами <see cref="Overload:System.Diagnostics.Eventing.EventProvider.WriteEvent" />.</summary>
      <param name="id">Уникальный идентификатор действия, возвращаемый методом <see cref="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)">
      <summary>Записывает событие.Данные события указаны в качестве блока памяти.</summary>
      <returns>Значение true, если событие записано, в противном случае — false.Если событие не записано, для определения причины сбоя можно использовать метод <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" />.</returns>
      <param name="eventDescriptor">Экземпляр <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />, определяющий событие для записи.</param>
      <param name="dataCount">Размер данных события, на которые указывает параметр <paramref name="data" />.Максимальный размер данных события ограничен 64 КБ за вычетом размера заголовков события.Размер события может быть меньше, если меньше размер буфера сеанса и сеанс включает вместе с событием расширенные элементы данных.</param>
      <param name="data">Указатель на данные события для записи.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])">
      <summary>Записывает событие.Данные события указываются в виде массива объектов.</summary>
      <returns>Значение true, если событие записано, в противном случае — false.Если событие не записано, для определения причины сбоя можно использовать метод <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" />.</returns>
      <param name="eventDescriptor">Экземпляр <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />, определяющий событие для записи.</param>
      <param name="eventPayload">Массив объектов, которые содержат данные записываемого события.Объекты должны быть в том порядке, который указан в манифесте.Размер массива ограничен 32 объектами, из которых только 8 могут быть строчными.Максимальный размер данных события ограничен 64 КБ за вычетом размера заголовков события.Размер события может быть меньше, если меньше размер буфера сеанса и сеанс включает вместе c событием расширенные элементы данных.Этот параметр может быть равен null.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="eventPayload" /> содержит слишком много объектов или строк.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)">
      <summary>Записывает событие.Данные события указаны в виде строки.</summary>
      <returns>Значение true, если событие записано, в противном случае — false.Если событие не записано, для определения причины сбоя можно использовать метод <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" />.</returns>
      <param name="eventDescriptor">Экземпляр <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />, определяющий событие для записи.</param>
      <param name="data">Строка для записи в качестве данных события.</param>
      <exception cref="T:System.ArgumentException">Если значение <paramref name="data" /> равно null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)">
      <summary>Записывает событие, которое содержит строку в качестве данных.</summary>
      <returns>Значение true, если событие записано, в противном случае — false.Если событие не записано, для определения причины сбоя можно использовать метод <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /></returns>
      <param name="eventMessage">Строка для записи в качестве данных события.</param>
      <exception cref="T:System.ArgumentException">Если значение <paramref name="eventMessage" /> равно null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)">
      <summary>Записывает событие, которое содержит строку в качестве данных, если уровень и ключевое слово соответствуют событиям, запрашиваемым сеансом.</summary>
      <returns>Значение true, если событие записано, в противном случае — false.Если событие не записано, для определения причины сбоя можно использовать метод <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /></returns>
      <param name="eventMessage">Строка для записи в качестве данных события.</param>
      <param name="eventLevel">Уровень детализации сведений, включаемых в событие.Если поставщик использует манифест для определения события, это значение устанавливается таким же, как и значение уровня, определенное в манифесте.</param>
      <param name="eventKeywords">Битовая маска, указывающая категорию события.Если поставщик использует манифест для определения события, это значение устанавливается таким же, как и значение маски ключевого слова, определенное в манифесте.</param>
      <exception cref="T:System.ArgumentException">Если значение <paramref name="eventMessage" /> равно null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)">
      <summary>Связывает события при сквозной трассировке.Данные события указаны в качестве блока памяти.</summary>
      <returns>Значение true, если событие записано, в противном случае — false.Если событие не записано, для определения причины сбоя можно использовать метод <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" />.</returns>
      <param name="eventDescriptor">Экземпляр <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />, определяющий событие для записи.</param>
      <param name="relatedActivityId">Идентификатор действия от предыдущего компонента.Этот параметр используется для связи событий компонента с событиями предыдущего компонента.</param>
      <param name="dataCount">Размер данных события, на которые указывает параметр <paramref name="data" />.Максимальный размер данных события ограничен 64 КБ за вычетом размера заголовков события.Размер события может быть меньше, если меньше размер буфера сеанса и сеанс включает вместе с событием расширенные элементы данных.</param>
      <param name="data">Указатель на данные события для записи.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])">
      <summary>Связывает события при сквозной трассировке.Данные события указываются в виде массива объектов.</summary>
      <returns>Значение true, если событие записано, в противном случае — false.Если событие не записано, для определения причины сбоя можно использовать метод <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /></returns>
      <param name="eventDescriptor">Экземпляр <see cref="T:System.Diagnostics.Eventing.EventDescriptor" />, определяющий событие для записи.</param>
      <param name="relatedActivityId">Идентификатор действия от предыдущего компонента.Этот параметр используется для связи событий компонента с событиями предыдущего компонента.</param>
      <param name="eventPayload">Массив объектов, которые содержат данные записываемого события.Объекты должны быть в том порядке, который указан в манифесте.Размер массива ограничен 32 объектами, из которых только 8 могут быть строчными.Максимальный размер данных события ограничен 64 КБ за вычетом размера заголовков события.Размер события может быть меньше, если меньше размер буфера сеанса и сеанс включает вместе с событием расширенные элементы данных.</param>
      <exception cref="T:System.ArgumentException">Если параметр <paramref name="eventPayload" /> содержит слишком много объектов или строк.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode">
      <summary>Определяет возможные состояния последней операции записи.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoError">
      <summary>Запись выполнена успешно.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoFreeBuffers">
      <summary>Сеанс исчерпал свободные буфера для записи.Это может произойти при высокой частоте событий из-за перегрузки дисковой подсистемы или недостаточного количества буферов.Вместо блокировки события до тех пор, пока буферы не станут доступны, оно удаляется.Следует увеличить количество и размер буферов для сеанса, уменьшить количество записанных событий или их размер.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.EventTooBig">
      <summary>Событие превышает размер буфера сеанса. События не могут выходить за пределы буферов.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProviderTraceListener">
      <summary>Прослушиватель <see cref="T:System.Diagnostics.TraceSource" /> записывает события в подсистему ETW. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> с помощью указанного идентификатора поставщика.</summary>
      <param name="providerId">Уникальная строка <see cref="T:System.Guid" />, определяющая поставщика.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> с помощью указанного идентификатора поставщика и имени прослушивателя.</summary>
      <param name="providerId">Уникальная строка <see cref="T:System.Guid" />, определяющая поставщика.</param>
      <param name="name">Имя прослушивателя.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> с помощью указанного идентификатора поставщика, имени прослушивателя и разделителя.</summary>
      <param name="providerId">Уникальная строка <see cref="T:System.Guid" />, определяющая поставщика.</param>
      <param name="name">Имя прослушивателя.</param>
      <param name="delimiter">Разделитель, используемый для разделения данных события.(Дополнительные сведения см. в свойстве <see cref="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter" />.)</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Close">
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter">
      <summary>Возвращает и задает разделитель, используемый для разделения данных события, которые записаны в подсистему ETW.</summary>
      <returns>Разделитель, используемый для разделения данных события.Разделителем по умолчанию является запятая.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Fail(System.String,System.String)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Flush">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes"></member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Write(System.String)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(System.String)">
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventBookmark">
      <summary>Представляет местозаполнитель (закладку) в потоке событий.Местозаполнитель можно использовать для пометки события и возвращения к данной позиции в потоке событий.Экземпляр данного объекта можно получить из объекта <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />; в этом случае он соответствует позиции данной записи события.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который содержит сведения, требуемые для сериализации нового объекта <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />.</param>
      <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий источник сериализованного потока, связанного с новым объектом <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Заполняет объект <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> данными, необходимыми для сериализации целевого объекта.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object to populate with data.</param>
      <param name="context">Назначение этой сериализации.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object with the data needed to serialize the target object.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" />, который требуется заполнить данными.</param>
      <param name="context">Назначение этой сериализации.</param>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventKeyword">
      <summary>Представляет ключевое слово для события.Ключевые слова определены в поставщике событий и используются для группирования события с другими идентичными событиями в соответствии с использованием событий.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.DisplayName">
      <summary>Получает локализованное имя ключевого слова.</summary>
      <returns>Возвращает строку, содержащую локализованное имя для данного ключевого слова.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Name">
      <summary>Получает нелокализованное имя ключевого слова.</summary>
      <returns>Возвращает строку, содержащую нелокализованное имя данного ключевого слова.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Value">
      <summary>Получает цифровое значение, связанное с ключевым словом.</summary>
      <returns>Returns a long value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLevel">
      <summary>Содержит уровень события, определенный в поставщике событий.Данный уровень указывает серьезность события.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.DisplayName">
      <summary>Получает локализованное имя для уровня событий.Имя описывает уровень серьезности событий, для которых используется данный уровень.</summary>
      <returns>Возвращает строку, содержащую локализованное имя для уровня событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Name">
      <summary>Получает нелокализованное имя уровня событий.</summary>
      <returns>Возвращает строку, содержащую нелокализованное имя уровня событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Value">
      <summary>Получает цифровое значение уровня события.</summary>
      <returns>Возвращает целое значение.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration">
      <summary>Содержит статическую информацию и параметры конфигурации для журнала событий.Многие параметры конфигураций были определены поставщиком событий, создавшим журнал.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String)">
      <summary>Инициализирует новый объект <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" />, указывая локальный журнал событий, для которого следует получить информацию и параметры конфигурации. </summary>
      <param name="logName">Имя локального журнала событий, для которого следует получить информацию и параметры конфигурации.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)">
      <summary>Инициализирует новый объект <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" />, указывая имя журнала, для которого следует получить информацию и параметры конфигурации.Журнал может располагаться на локальном или удаленном компьютере (в зависимости от указанного сеанса журнала событий).</summary>
      <param name="logName">Имя журнала событий, для которого следует получить информацию и параметры конфигурации.</param>
      <param name="session">Сеанс журнала событий, используемый для определения службы журнала событий, к которой принадлежит указанный журнал.Сеанс подключается к службе журнала событий на локальном или удаленном компьютере.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose">
      <summary>Освобождает все ресурсы, используемые этим объектом.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые этим объектом. Кроме того, возможно освобождение управляемых ресурсов.</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые), или значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog">
      <summary>Получает флаг, указывающий, является ли журнал событий классическим журналом событий.Классический журнал событий является журналом, события которого определены в файле .mc, а не в файле манифеста (XML-файле), используемом поставщиком событий.</summary>
      <returns>Возвращает значение true, если журнал событий является классическим журналом; возвращает значение false, если журнал событий не является классическим журналом.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled">
      <summary>Получает или задает логическое значение, определяющее состояние журнала события (включен или отключен).Включенный журнал событий является журналом, в котором могут регистрироваться события; отключенный журнал событий является журналом, в котором события регистрироваться не могут.</summary>
      <returns>Возвращает значение true, если журнал включен; возвращает значениеfalse, если журнал отключен.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath">
      <summary>Получает или задает путь к каталогу файла, в котором сохраняются события для журнала.</summary>
      <returns>Возвращает строку, содержащую путь к файлу журнала событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation">
      <summary>Получает значение <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" />, указывающее тип журнала событий (журнал событий приложений, журнал событий системы или пользовательский журнал событий). </summary>
      <returns>Возвращает значение <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode">
      <summary>Получает или задает значение <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" />, определяющее способ обработки событий при заполнении журнала событий.</summary>
      <returns>Возвращает значение <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName">
      <summary>Получает имя журнала событий.</summary>
      <returns>Возвращает строку, содержащую имя журнала событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType">
      <summary>Получает значение <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" />, определяющее тип журнала событий.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes">
      <summary>Получает или задает максимальный размер файла журнала событий (в байтах).При достижении максимального размера файл считается заполненным.</summary>
      <returns>Возвращает длинное значение, представляющее максимальный размер файла журнала событий (в байтах).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName">
      <summary>Получает имя поставщика событий, создавшего данный журнал событий.</summary>
      <returns>Возвращает строку, содержащую имя поставщика событий, создавшего данный журнал событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize">
      <summary>Получает размер буфера, используемого поставщиком событий для публикации событий в журнале.</summary>
      <returns>Возвращает целое значение (может иметь значение null).</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid">
      <summary>Получает глобальный уникальный ИД (GUID) для журнала событий, если журнал является журналом отладки.Если данный журнал не является журналом отладки, данное значение будет равно null.</summary>
      <returns>Возвращает значение GUID или значение null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords">
      <summary>Получает или задает маску ключевого слова, используемого поставщиком событий.</summary>
      <returns>Возвращает длинное значение, которое может быть равно null, если поставщик событий не определил ключевые слова.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency">
      <summary>Получает максимальное время задержки, используемое поставщиком событий при публикации событий в журнале.</summary>
      <returns>Возвращает целое значение, которое может иметь значение null, если время задержки не было определено поставщиком событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel">
      <summary>Получает или задает максимальный уровень события (определяющий важность события) для регистрации в журнале событий.Данное значение определяется поставщиком событий.</summary>
      <returns>Возвращает целое значение, которое может иметь значение null, если максимальный уровень события не был определен поставщиком событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers">
      <summary>Получает максимальное количество буферов, используемых поставщиком событий при публикации событий в журнале событий.</summary>
      <returns>Возвращает целое значение, представляющее максимальное количество буферов, используемых поставщиком событий при публикации событий в журнале событий.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers">
      <summary>Получает минимальное количество буферов, используемых поставщиком событий при публикации событий в журнале событий.</summary>
      <returns>Возвращает целое значение, представляющее минимальное количество буферов, используемых поставщиком событий при публикации событий в журнале событий.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames">
      <summary>Получает перечисляемую коллекцию имен всех поставщиков событий, которые могут публиковать события в данном журнале событий.</summary>
      <returns>Возвращает перечисляемую коллекцию строк, содержащих имена поставщиков событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges">
      <summary>Сохраняет параметры конфигурации </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor">
      <summary>Получает или задает дескриптор безопасности журнала событий.Дескриптор безопасности определяет пользователей и группы, которые могут считывать и производить запись в журнал событий.</summary>
      <returns>Возвращает строку, содержащую дескриптор безопасности журнала событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogException">
      <summary>Представляет базовый класс для всех исключений, вызываемых при происхождении ошибки в ходе считывании информации, связанной с журналом событий. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> с кодом ошибки для исключения.</summary>
      <param name="errorCode">Код ошибки для ошибки, произошедшей при считывании или конфигурировании информации, связанной с журналом событий.Дополнительная информация и список кодов ошибок, связанных с журналом событий, приведены по адресу http://go.microsoft.com/fwlink/?LinkId=82629.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class with serialized data.</summary>
      <param name="serializationInfo">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта о выдаваемом исключении.</param>
      <param name="streamingContext">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">Сообщение об ошибке, описывающее текущее исключение.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" />, используя указанное сообщение об ошибке и внутреннее исключение.</summary>
      <param name="message">Сообщение об ошибке, описывающее текущее исключение.</param>
      <param name="innerException">Экземпляр класса Exception, вызвавший текущее исключение.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Задает в объекте SerializationInfo информацию об исключении.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта о выдаваемом исключении.</param>
      <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogException.Message">
      <summary>Получает сообщение об ошибке, описывающее текущее исключение.</summary>
      <returns>Возвращает строку, содержащую сообщение об ошибке с описанием текущего исключения.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInformation">
      <summary>Позволяет осуществлять доступ к свойствам времени выполнения активных журналов событий и файлов журналов событий.Эти свойства включают количество событий в журнале, размер журнала, значение, определяющее заполнение журнала и время последнего доступа к журналу или произведения в нем записи.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.Attributes">
      <summary>Получает атрибуты файла журнала, связанные с журналом.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.CreationTime">
      <summary>Получает данные времени создания файла журнала, связанного с журналом событий.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> object.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.FileSize">
      <summary>Получает размер файла (в байтах), связанного с журналом событий.</summary>
      <returns>Возвращает длинное значение.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.IsLogFull">
      <summary>Получает логическое значение, определяющее, достиг ли размер файла журнала максимального допустимого размера (журнал заполнен).</summary>
      <returns>Возвращает значение true, если журнал заполнен; возвращает значениеfalse, если журнал не заполнен.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastAccessTime">
      <summary>Получает данные времени последнего доступа к файлу журнала, связанного с журналом событий.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> object.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastWriteTime">
      <summary>Получает данные времени последней записи данных в файл журнала, связанного с журналом событий.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> object.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.OldestRecordNumber">
      <summary>Получает число наиболее старых записей в журнале событий.</summary>
      <returns>Возвращает длинное значение, представляющее количество наиболее старых записей событий в журнале событий.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.RecordCount">
      <summary>Получает число наиболее записей событий в журнале событий.</summary>
      <returns>Возвращает длинное значение, представляющее количество записей событий в журнале событий.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException">
      <summary>Представляет исключение, вызываемое при публикации поставщиком данных недопустимых данных в событии.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class with serialized data.</summary>
      <param name="serializationInfo">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта о выдаваемом исключении.</param>
      <param name="streamingContext">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">Сообщение об ошибке, описывающее текущее исключение.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" />, используя указанное сообщение об ошибке и внутреннее исключение.</summary>
      <param name="message">Сообщение об ошибке, описывающее текущее исключение.</param>
      <param name="innerException">Экземпляр класса Exception, вызвавший текущее исключение.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogIsolation">
      <summary>Определяет права доступа по умолчанию для журнала событий.Значение приложения и системы указывают, что журнал использует список управления доступом (ACL) совместно с соответствующим журналом Windows (журнал событий приложения или системы), а также совместно использует сеанс трассировки событий Windows (ETW) с другими журналами одной изоляции.Все каналы с пользовательской изоляцией используют закрытый сеанс ETW.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Application">
      <summary>Журнал совместно использует список управления доступом с журналом событий приложения; журнал совместно использует сеанс ETW с другими журналами, имеющими изоляцию приложения.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.System">
      <summary>Журнал событий совместно использует список управления доступом с журналом событий системы; журнал событий использует совместный доступ к сеансу ETW с другими журналами, имеющими системную изоляцию.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Custom">
      <summary>Журнал событий является пользовательским журналом событий, использующим собственный закрытый сеанс ETW.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogLink">
      <summary>Представляет связь между поставщиком событий и журналом событий, в котором поставщик публикует данные событий.Этот объект не может быть использован для создания объектов.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.DisplayName">
      <summary>Получает локализованное имя журнала событий.</summary>
      <returns>Возвращает строку, содержащую локализованное имя журнала событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.IsImported">
      <summary>Получает логическое значение, определяющее, импортируется ли журнал событий вопреки параметрам, определенным в поставщике событий.Импортированный журнал событий определяется в другом поставщике.</summary>
      <returns>Возвращает значение true, если журнал событий импортируется поставщиком событий; возвращает значение false, если журнал событий не импортируется поставщиком событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.LogName">
      <summary>Получает нелокализованное имя журнала событий, связанного с данным объектом.</summary>
      <returns>Возвращает строку, содержащую нелокализованное имя журнала событий, связанного с данным объектом.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogMode">
      <summary>Определяет поведение при обработке службой журнала событий журнала событий при достижении максимального размера (при заполнении журнала событий).</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Circular">
      <summary>Новый события сохраняются при заполнении журнала.Каждое новое входящее событие заменяет в журнале более старое событие.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.AutoBackup">
      <summary>Выполните архивирование журнала при его заполнении. Не следует производить регистрацию событий поверх событий, зарегистрированных ранее.При необходимости журнал архивируется автоматически.Событий не перезаписываются.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Retain">
      <summary>Не следует перезаписывать события.Очистку журнала предпочтительно выполнять вручную.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException">
      <summary>Представляет исключение, вызываемое в случае, если запрошенный журнал событий (как правило, указывается имя журнала событий или путь к файлу журнала событий) не существует.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class with serialized data.</summary>
      <param name="serializationInfo">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта о выдаваемом исключении.</param>
      <param name="streamingContext">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">Сообщение об ошибке, описывающее текущее исключение.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" />, используя указанное сообщение об ошибке и внутреннее исключение.</summary>
      <param name="message">Сообщение об ошибке, описывающее текущее исключение.</param>
      <param name="innerException">Экземпляр класса Exception, вызвавший текущее исключение.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector">
      <summary>Содержит массив строк, представляющих запросы XPath для элементов в представлении XML события на основе Event Schema.Запросы в данном объекте используются для извлечения значений из события.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector" />.</summary>
      <param name="propertyQueries">Запросы XPath, используемые для извлечения значений из представления XML события.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose">
      <summary>Освобождает все ресурсы, используемые этим объектом.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые этим объектом. Кроме того, возможно освобождение управляемых ресурсов.</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые), или значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException">
      <summary>Представляет исключение, которое вызывается, когда определенное имя поставщика событий ссылается на отключенного поставщика событий.Отключенный поставщик событий не может публиковать события.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class with serialized data.</summary>
      <param name="serializationInfo">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта о выдаваемом исключении.</param>
      <param name="streamingContext">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">Сообщение об ошибке, описывающее текущее исключение.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class with an error message and inner exception.</summary>
      <param name="message">Сообщение об ошибке, описывающее текущее исключение.</param>
      <param name="innerException">Экземпляр класса Exception, вызвавший текущее исключение.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogQuery">
      <summary>Представляет запрос для событий в журнале событий и параметры, определяющие метод выполнения запроса и компьютер, на котором запрос будет выполнен.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" />, указывая цель запроса.Цель может быть активным журналом событий или файлом журнала.</summary>
      <param name="path">Имя запрашиваемого журнала событий или путь к запрашиваемому файлу журнала событий.</param>
      <param name="pathType">Указывает, что определяет строка в параметре path: имя журнала события или путь к файлу журнала события.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" />, указывая цель запроса и запрос события.Цель может быть активным журналом событий или файлом журнала.</summary>
      <param name="path">Имя запрашиваемого журнала событий или путь к запрашиваемому файлу журнала событий.</param>
      <param name="pathType">Указывает, что определяет строка в параметре path: имя журнала события или путь к файлу журнала события.</param>
      <param name="query">Запрос события, используемый для извлечения события, соответствующих условию запроса.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.ReverseDirection">
      <summary>Получает или задает логическое значение, определяющее, следует ли считывать события в журнале, начиная с новейшего события до наиболее старого события.</summary>
      <returns>Возвращает значение true, если события в журнале считываются, начиная с новейшего события до наиболее старого события; возвращает значение false, если события в журнале считываются, начиная с наиболее старого события до новейшего события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.Session">
      <summary>Получает или задает сеанс, осуществляющий доступ к службе журнала событий на локальном или удаленном компьютере.Данный объект может быть настроен для осуществления доступа к удаленному журналу событий путем создания объекта <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> или объекта <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> с данным объектом <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" />.</summary>
      <returns>Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.TolerateQueryErrors">
      <summary>Получает или задает логическое значение, определяющее, будет ли данный запрос продолжать извлечение событий при наличии в запросе ошибки.</summary>
      <returns>Значение true указывает, что запрос будет продолжать извлекать события даже при ошибке запроса на некоторых журналах; значение false указывает, что запрос остановит извлечение событий при ошибке запроса.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReader">
      <summary>Позволяет считывать события из журнала событий в соответствии с запросом события.События, считываемые данным объектом, возвращаются в качестве объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an event query.</summary>
      <param name="eventQuery">Запрос события, используемый для извлечения событий.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an event query and a bookmark that is used as starting position for the query.</summary>
      <param name="eventQuery">Запрос события, используемый для извлечения событий.</param>
      <param name="bookmark">Закладка (местозаполнитель), используемая в качестве начальной позиции в журнале событий или потоке событий.По запросу будут возвращены только события, зарегистрированные после события закладки.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />, указывая активный журнал событий, из которого следует извлечь события.</summary>
      <param name="path">Имя журнала событий, из которого следует извлечь события.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />, указывая имя журнала событий, из которого следует извлечь события, или путь к файлу журнала, из которого следует извлечь события.</summary>
      <param name="path">Имя журнала событий, из которого следует извлечь события или путь к файлу журнала событий, из которого следует извлечь события.</param>
      <param name="pathType">Указывает, что определяет строка в параметре path: имя журнала события или путь к файлу журнала события.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize">
      <summary>Получает или задает количество событий, извлекаемых из потока событий при каждой операции считывания.</summary>
      <returns>Возвращает целое значение.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading">
      <summary>Отменяет текущую операцию запроса.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose">
      <summary>Освобождает все ресурсы, используемые этим объектом.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые этим объектом. Кроме того, возможно освобождение управляемых ресурсов.</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые), или значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus">
      <summary>Получает состояние каждого журнала событий или файла журнала событий, связанного с запросом события в данном объекте.</summary>
      <returns>Возвращает список объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventLogStatus" />, каждый из которых содержит информацию состояния журнала событий, связанного с запросом события в данном объекте.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent">
      <summary>Считывает следующее событие, возвращенное из запроса события в данном объекте.</summary>
      <returns>Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)">
      <summary>Считывает следующее событие, возвращенное из запроса события в данном объекте.</summary>
      <returns>Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />.</returns>
      <param name="timeout">Максимальное время выполнения операции чтения до отмены операции.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>Путем указания события закладки изменяет позицию в потоке событий, из которого поступит следующее считываемое событие.События, зарегистрированные до события закладки, извлечены не будут.</summary>
      <param name="bookmark">Закладка (местозаполнитель), используемая в качестве начальной позиции в журнале событий или потоке событий.По запросу будут возвращены только события, зарегистрированные после события закладки.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)">
      <summary>Путем указания события закладки и числа смещения событий из закладки изменяет позицию в потоке событий, из которого поступит следующее считываемое событие.События, зарегистрированные до события закладки с учетом смещения, извлечены не будут.</summary>
      <param name="bookmark">Закладка (местозаполнитель), используемая в качестве начальной позиции в журнале событий или потоке событий.По запросу будут возвращены только события, зарегистрированные после события закладки.</param>
      <param name="offset">Число смещения событий для изменения позиции закладки.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)">
      <summary>Путем указания начальной позиции и смещения от начальной позиции изменяет позицию в потоке событий, из которого поступит следующее считываемое событие.События, зарегистрированные до начальной позиции с учетом смещения, извлечены не будут.</summary>
      <param name="origin">Значение из перечисления <see cref="T:System.IO.SeekOrigin" /> определяет начальную позицию запроса событий в потоке событий.</param>
      <param name="offset">Число смещения событий для добавления к началу координат.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReadingException">
      <summary>Представляет исключение, происходящее при возникновении ошибки в процессе чтения, запроса или подписки на события в журнале событий. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class with serialized data.</summary>
      <param name="serializationInfo">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта о выдаваемом исключении.</param>
      <param name="streamingContext">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">Сообщение об ошибке, описывающее текущее исключение.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class with an error message and inner exception.</summary>
      <param name="message">Сообщение об ошибке, описывающее текущее исключение.</param>
      <param name="innerException">Экземпляр класса Exception, вызвавший текущее исключение.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogRecord">
      <summary>Содержит свойства экземпляра событий для события, принятого от объекта <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />.Свойства события предоставляют информацию о событии (например, имя компьютера, на котором было зарегистрировано событие и время создания события).</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ActivityId">
      <summary>Получает глобальный уникальный идентификатор (GUID) для обрабатываемого действия, для которого задействуется событие.Это позволит потребителям группировать связанные действия.</summary>
      <returns>Возвращает значение GUID.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Bookmark">
      <summary>Получает местозаполнитель (закладку), соответствующий данному событию.Может использоваться в качестве местозаполнителя в потоке событий.</summary>
      <returns>Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ContainerLog">
      <summary>Получает имя журнала событий или файла журнала событий, в котором хранится событие.</summary>
      <returns>Возвращает строку, содержащую имя журнала событий или файла журнала событий, в котором хранится событие.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые этим объектом. Кроме того, возможно освобождение управляемых ресурсов.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription">
      <summary>Получает сообщение события в текущем языковом стандарте.</summary>
      <returns>Возвращает строку, содержащую сообщение события в текущем языковом стандарте.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>Получает сообщение события, замещая переменные в сообщении заданными значениями.</summary>
      <returns>Возвращает строку, содержащую сообщение события в текущем языковом стандарте.</returns>
      <param name="values">Значения, используемые для замещения переменных в сообщении события.Переменные представлены в виде %n, где n является числом.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.GetPropertyValues(System.Diagnostics.Eventing.Reader.EventLogPropertySelector)">
      <summary>Получает перечисление значений свойств определяемых пользователем событий или результаты данных на основе XPath, если событие имеет представление XML.</summary>
      <returns>Возвращает список объектов.</returns>
      <param name="propertySelector">Выбирает возвращаемые значения свойств.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Id">
      <summary>Получает идентификатор для данного события.Все события с данным идентификатором представляют один тип событий.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Keywords">
      <summary>Получает маску ключевого слова события.Get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames" /> property to get the name of the keywords used in this mask.</summary>
      <returns>Возвращает длинное значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames">
      <summary>Получает отображаемые имена ключевых слов, используемых в маске ключевых слов для данного события.</summary>
      <returns>Возвращает перечисляемую коллекцию строк, содержащих отображаемые имена ключевых слов, используемых в маске ключевых слов для данного события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Level">
      <summary>Получает уровень события.Данный уровень указывает серьезность события.Для имени уровня следует получить значение свойства <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName" />.</summary>
      <returns>Возвращает значение байта.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName">
      <summary>Получает отображаемое имя уровня для данного события.</summary>
      <returns>Возвращает строку, содержащую отображаемое имя уровня для данного события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LogName">
      <summary>Получает имя журнала события, в котором регистрируется данное событие.</summary>
      <returns>Возвращает строку, содержащую имя журнала, содержащего данное событие.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MachineName">
      <summary>Получает имя компьютера, на котором данное событие было зарегистрировано в журнале.</summary>
      <returns>Получает строку, содержащую имя компьютера, на котором данное событие было зарегистрировано.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MatchedQueryIds">
      <summary>Получает список идентификаторов запроса, которым соответствует данное событие.Данное событие соответствует запросу при возвращении запросом данного события.</summary>
      <returns>Возвращает перечисляемую коллекцию целых значений.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Opcode">
      <summary>Получает код операция события.Код операций определяет числовое значение, идентифицирующее действие или пункт действия, который выполнялся приложением при вызове события.Для имени кода операций следует получить значение свойства <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName" />.</summary>
      <returns>Возвращает короткое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName">
      <summary>Получает отображаемое имя кода операций для данного события.</summary>
      <returns>Возвращает строку, содержащую отображаемое имя кода операций для данного события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProcessId">
      <summary>Получает идентификатор процесса для поставщика событий, зарегистрировавшего данное событие.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Properties">
      <summary>Получает определяемые пользователем свойства события.</summary>
      <returns>Возвращает список объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderId">
      <summary>Получает глобальный уникальный идентификатор (GUID) поставщика событий, опубликовавшего данное событие.</summary>
      <returns>Возвращает значение GUID.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderName">
      <summary>Получает имя поставщика событий, опубликовавшего данное событие.</summary>
      <returns>Возвращает строку, содержащую имя поставщика событий, опубликовавшего данное событие.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Qualifiers">
      <summary>Получает номера квалификаторов, используемых для идентификации события.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RecordId">
      <summary>Получает идентификатор записи события в журнале.</summary>
      <returns>Возвращает длинное значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RelatedActivityId">
      <summary>Получает глобальный уникальный идентификатор (GUID) для связанного действия в процессе, для которого задействуется событие.</summary>
      <returns>Возвращает значение GUID.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Task">
      <summary>Получает идентификатор задачи для части приложения или компонента, публикующего событие.Задача является 16-разрядным значением, 16 верхних значений зарезервированы.Данный тип позволяет использовать любое значение между 0x0000 и 0xffef.Для имени задачи следует получить значение свойства <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName" />.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName">
      <summary>Получает отображаемое имя задачи для данного события.</summary>
      <returns>Возвращает строку, содержащую отображаемое имя задачи для события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ThreadId">
      <summary>Получает идентификатор потока для потока, в котором действует поставщик событий.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TimeCreated">
      <summary>Получает время создания события в формате <see cref="T:System.DateTime" />.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> value.Может иметь значение NULL.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.ToXml">
      <summary>Получает представление XML события.Все свойства события представлены в XML события.XML соответствует схеме событий.</summary>
      <returns>Возвращает строку, содержащую представление XML события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.UserId">
      <summary>Получает дескриптор безопасности пользователя, контекст которого используется для публикации события.</summary>
      <returns>Returns a <see cref="T:System.Security.Principal.SecurityIdentifier" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Version">
      <summary>Получает номер версии для события.</summary>
      <returns>Возвращает значение байта.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogSession">
      <summary>Используется для доступа к службе журнала событий на локальном компьютере или удаленном компьютере, что обеспечивает возможность управления и сбора информации о журналах событий и поставщиках событий на компьютере.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor">
      <summary>Инициализирует новый объект <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />, устанавливает соединение с локальной службой журнала событий.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String)">
      <summary>Инициализирует новый объект <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />, устанавливает соединение со службой журнала событий на указанном компьютере.Учетные данные (имя пользователя и пароль) пользователя, вызывающего данный метод, используются в качестве учетных данных для доступа к удаленному компьютеру.</summary>
      <param name="server">Имя компьютера, на котором необходимо выполнить подключение к службе журнала событий.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String,System.String,System.String,System.Security.SecureString,System.Diagnostics.Eventing.Reader.SessionAuthentication)">
      <summary>Инициализирует новый объект <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />, устанавливает соединение со службой журнала событий на указанном компьютере.Указанные учетные данные (имя пользователя и пароль) используются в качестве учетных данных для доступа к удаленному компьютеру.</summary>
      <param name="server">Имя компьютера, на котором необходимо выполнить подключение к службе журнала событий.</param>
      <param name="domain">Домен указанного пользователя.</param>
      <param name="user">Имя пользователя, используемое для подключения к удаленному компьютеру.</param>
      <param name="password">Пароль, используемый для подключения к удаленному компьютеру.</param>
      <param name="logOnType">Тип соединения, используемый для подключения к удаленному компьютеру.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.CancelCurrentOperations">
      <summary>Отменяет любые операции (например, чтение журнала событий или подписка на журнал событий), активные в настоящий период времени для службы журнала событий, к которой подключен данный объект.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String)">
      <summary>Удаляет события из указанного журнала событий.</summary>
      <param name="logName">Имя журнала событий, из которого необходимо удалить все события.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String,System.String)">
      <summary>Удаляет события из указанного журнала событий и сохраняет удаленные события в указанном файле.</summary>
      <param name="logName">Имя журнала событий, из которого необходимо удалить все события.</param>
      <param name="backupPath">Путь к файлу, в котором будут сохранены удаленные события.Файл должен иметь расширение .evtx.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose">
      <summary>Освобождает все ресурсы, используемые этим объектом.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые этим объектом. Кроме того, возможно освобождение управляемых ресурсов.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>Экспортирует события во внешний журнал событий.События хранятся без сообщений о событиях.</summary>
      <param name="path">Имя журнала событий, из которого следует произвести экспорт событий или путь к файлу журнала событий, из которого следует произвести экспорт событий.</param>
      <param name="pathType">Указывает, что определяет строка в параметре path: имя журнала события или путь к файлу журнала события.</param>
      <param name="query">Запрос, используемый для выбора экспортируемых событий.Будут экспортированы только события, возвращенные по запросу.</param>
      <param name="targetFilePath">Путь к файлу журнала (с расширением .evtx), в котором экспортированные события будут храниться после выполнения данного метода.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean)">
      <summary>Экспортирует события во внешний журнал событий.Для того, чтобы экспортирование событий не прекращалось даже в случае сбоя определенных запросов при обработке некоторых журналов, можно установить соответствующий флаг.События хранятся без сообщений о событиях.</summary>
      <param name="path">Имя журнала событий, из которого следует произвести экспорт событий или путь к файлу журнала событий, из которого следует произвести экспорт событий.</param>
      <param name="pathType">Указывает, что определяет строка в параметре path: имя журнала события или путь к файлу журнала события.</param>
      <param name="query">Запрос, используемый для выбора экспортируемых событий.Будут экспортированы только события, возвращенные по запросу.</param>
      <param name="targetFilePath">Путь к файлу журнала (с расширением .evtx), в котором экспортированные события будут храниться после выполнения данного метода.</param>
      <param name="tolerateQueryErrors">Значение true указывает, что метод продолжит экспортирование событий даже в случае сбоя при обработке определенных журналов; значение false указывает, что метод остановит экспортирование событий в случае сбоя определенного запроса.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>Экспортирует события и их сообщения в файл внешнего журнала.</summary>
      <param name="path">Имя журнала событий, из которого следует произвести экспорт событий или путь к файлу журнала событий, из которого следует произвести экспорт событий.</param>
      <param name="pathType">Указывает, что определяет строка в параметре path: имя журнала события или путь к файлу журнала события.</param>
      <param name="query">Запрос, используемый для выбора экспортируемых событий.Будут экспортированы только события, возвращенные по запросу.</param>
      <param name="targetFilePath">Путь к файлу журнала (с расширением .evtx), в котором экспортированные события будут храниться после выполнения данного метода.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Экспортирует события и их сообщения в файл внешнего журнала.Для того, чтобы экспортирование событий не прекращалось даже в случае сбоя определенных запросов при обработке некоторых журналов, можно установить соответствующий флаг.Сообщения событий экспортируются с использованием заданного языка.</summary>
      <param name="path">Имя журнала событий, из которого следует произвести экспорт событий или путь к файлу журнала событий, из которого следует произвести экспорт событий.</param>
      <param name="pathType">Указывает, что определяет строка в параметре path: имя журнала события или путь к файлу журнала события.</param>
      <param name="query">Запрос, используемый для выбора экспортируемых событий.Будут экспортированы только события, возвращенные по запросу.</param>
      <param name="targetFilePath">Путь к файлу журнала (с расширением .evtx), в котором экспортированные события будут храниться после выполнения данного метода.</param>
      <param name="tolerateQueryErrors">Значение true указывает, что метод продолжит экспортирование событий даже в случае сбоя при обработке определенных журналов; значение false указывает, что метод остановит экспортирование событий в случае сбоя определенного запроса.</param>
      <param name="targetCultureInfo">Язык и региональные параметры, определяющие язык, который будет использоваться при экспортировании сообщений событий.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogInformation(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>Получает объект, содержащий информацию выполнения для указанного журнала событий.</summary>
      <returns>Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInformation" />, содержащий информацию об указанном журнале.</returns>
      <param name="logName">Имя журнала событий, о котором следует получить информацию или путь к файлу журнала событий, о котором следует получить информацию.</param>
      <param name="pathType">Указывает, что определяет строка в параметре path: имя журнала события или путь к файлу журнала события.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogNames">
      <summary>Получает перечисляемую коллекцию всех имен журналов событий, зарегистрированных службой журнала событий.</summary>
      <returns>Возвращает перечисляемую коллекцию строк, содержащих имена журналов событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetProviderNames">
      <summary>Получает перечисляемую коллекцию всех имен поставщиков событий, зарегистрированных службой журнала событий.Поставщик событий является приложением, публикующим события в журнале событий.</summary>
      <returns>Возвращает перечисляемую коллекцию строк, содержащих имена поставщиков событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogSession.GlobalSession">
      <summary>Получает статический предопределенный объект сеанса, подключаемый к службе журнала событий на локальном компьютере.</summary>
      <returns>Возвращает <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> статический предопределенный объект сеанса, подключаемый к службе журнала событий на локальном компьютере.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogStatus">
      <summary>Содержит код состояния или код ошибки для определенного журнала событий.Данное состояние может использоваться для определения доступности журнала событий для операций.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.LogName">
      <summary>Получает имя журнала событий, для которого производится получение кода состояния.</summary>
      <returns>Возвращает строку, содержащую имя журнала событий, для которого производится получение кода состояния.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.StatusCode">
      <summary>Получает код состояния или код ошибки для определенного журнала событий.Данное состояние или ошибка являются результатом операции подписки или чтения журнала событий.</summary>
      <returns>Возвращает целое значение.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogType">
      <summary>Определяет тип событий, регистрируемых в журнале событий.Каждый журнал может содержать только один тип события.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Administrative">
      <summary>Эти события предназначены, в основном, для конечных пользователей, администраторов и службы поддержки.События в журналах административного типа указывают на неполадку с явно определенным решением, которую может устранить администратор.Примером административного события может служить событие, происходящее при отказе приложения подключиться к принтеру.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Operational">
      <summary>События в журнале событий операционного типа используются для анализа и диагностики проблемы или происхождения события.Они могут использоваться для запуска инструментальных средств или задач, исходя из проблемы или происхождения события.Примером события операционного типа может служить событие, происходящее при добавлении или удалении принтера из системы.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Analytical">
      <summary>События в журнале аналитических событий публикуются в больших объемах.Они описывают функционирование программы и указывают проблемы, которые не могут быть устранены вмешательством пользователя.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Debug">
      <summary>События в журнале событий отладочного типа используются только разработчиками для диагностики проблемы при отладке.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogWatcher">
      <summary>Позволяет подписаться на входящие события.Каждый раз при публикации требуемого события в журнале событий вызывается событие <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> и выполняется метод, обрабатывающий данное событие.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query.</summary>
      <param name="eventQuery">Указывает запрос для подписки на событие.Событие <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> вызывается при регистрации события, соответствующего критериям, выраженным в запросе.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query and a bookmark that is used as starting position for the query.</summary>
      <param name="eventQuery">Указывает запрос для подписки на событие.Событие <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> вызывается при регистрации события, соответствующего критериям, выраженным в запросе.</param>
      <param name="bookmark">Закладка (местозаполнитель), используемая в качестве начальной позиции в журнале событий или потоке событий.По запросу будут возвращены только события, зарегистрированные после события закладки.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />, указывая запрос события, закладку, используемую в качестве начальной позиции для запроса и логическое значение, определяющее, следует ли считывать события, уже зарегистрированные в журнале событий.</summary>
      <param name="eventQuery">Указывает запрос для подписки на событие.Событие <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> вызывается при регистрации события, соответствующего критериям, выраженным в запросе.</param>
      <param name="bookmark">Закладка (местозаполнитель), используемая в качестве начальной позиции в журнале событий или потоке событий.По запросу будут возвращены только события, зарегистрированные после события закладки.</param>
      <param name="readExistingEvents">Логическое значение, определяющее, следует ли считывать события, уже зарегистрированные в журнале событий.Если значение равно true, зарегистрированные события буду считываться; если значение равно false, зарегистрированные события считываться не будут.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" />, указывая имя или путь к журналу событий.</summary>
      <param name="path">Маршрут или имя монитора журнала событий.Если событие зарегистрировано в данном журнале событий, вызывается событие <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose">
      <summary>Освобождает все ресурсы, используемые этим объектом.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые этим объектом. Кроме того, возможно освобождение управляемых ресурсов.</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые), или значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled">
      <summary>Определяет, следует ли данному объекту начать доставку событий делегату событий.</summary>
      <returns>Возвращает значение true, если данный объект может начать доставку событий делегату событий; возвращает значение false, если данный объект остановил доставку.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten">
      <summary>Позволяет задать делегат (метод обработчика событий), который вызывается каждый раз при публикации события, соответствующего критериям, указанным в запросе события для данного объекта. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventMetadata">
      <summary>Содержит метаданные (свойства и параметры) для события, определенного в поставщике событий. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Description">
      <summary>Получает шаблон описания, связанный с событием, использующим язык текущего потока для языка описания.</summary>
      <returns>Возвращает строку, содержащую шаблон описания, связанный с событием.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Id">
      <summary>Получает идентификатор события, определенный в поставщике событий.</summary>
      <returns>Возвращает значение long, являющееся идентификатором события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Keywords">
      <summary>Получает ключевое слово, связанное с событием, определенным в поставщике событий.</summary>
      <returns>Возвращает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Level">
      <summary>Получает уровень, связанный с событием, определенным в поставщике событий.Уровень определяет серьезность события.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.LogLink">
      <summary>Получает ссылку на журнал событий, принимающий событие при публикации поставщиком данного события.</summary>
      <returns>Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Opcode">
      <summary>Получает код операций, связанный с данным событием, определенным поставщиком событий.Код операций определяет числовое значение, идентифицирующее действие или пункт действия, который выполнялся приложением при вызове события.</summary>
      <returns>Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Task">
      <summary>Получает задачу, связанную с событием.Задача, идентифицирующая часть приложения или компонента, публикующего событие.</summary>
      <returns>Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Template">
      <summary>Получает шаблонную строку для события.Шаблоны используются для описания данных, используемых поставщиком при публикации события.Шаблоны опционально указывают XML, предоставляющий структуру события.XML позволяет выполнять подстановку значений, предоставляемых издателем событий, в процессе отрисовки события.</summary>
      <returns>Возвращает строку, содержащую шаблон для события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Version">
      <summary>Получает версию события, квалифицирующую идентификатор события.</summary>
      <returns>Возвращает значение байта.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventOpcode">
      <summary>Содержит код операций события, определенный в поставщике событий.Код операций определяет числовое значение, идентифицирующее действие или пункт действия, который выполнялся приложением при вызове события.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.DisplayName">
      <summary>Получает локализованное имя для кода операций событий.</summary>
      <returns>Возвращает строку, содержащую локализованное имя кода операций события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Name">
      <summary>Получает нелокализованное имя для кода операций событий.</summary>
      <returns>Возвращает строку, содержащую нелокализованное имя кода операций события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Value">
      <summary>Получает числовое значение, связанное с кодом операций события.</summary>
      <returns>Возвращает целое значение.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventProperty">
      <summary>Содержит значение свойства события, указанное поставщиком событий при публикации события.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventProperty.Value">
      <summary>Получает значение свойства события, указанное поставщиком событий при публикации события.</summary>
      <returns>Возвращает объект.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecord">
      <summary>Определяет свойства экземпляра событий для события, принятого от объекта <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" />.Свойства события предоставляют информацию о событии (например, имя компьютера, на котором было зарегистрировано событие и время создания события).Этот класс является абстрактным классом.Класс <see cref="T:System.Diagnostics.Eventing.Reader.EventLogRecord" /> реализует данный класс.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> class.</summary>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ActivityId">
      <summary>Получает глобальный уникальный идентификатор (GUID) для обрабатываемого действия, для которого задействуется событие.Это позволит потребителям группировать связанные действия.</summary>
      <returns>Возвращает значение GUID.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Bookmark">
      <summary>Получает местозаполнитель (закладку), соответствующий данному событию.Может использоваться в качестве местозаполнителя в потоке событий.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose">
      <summary>Освобождает все ресурсы, используемые этим объектом.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые этим объектом. Кроме того, возможно освобождение управляемых ресурсов.</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые), или значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription">
      <summary>Получает сообщение события в текущем языковом стандарте.</summary>
      <returns>Возвращает строку, содержащую сообщение события в текущем языковом стандарте.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>Получает сообщение события, замещая переменные в сообщении заданными значениями.</summary>
      <returns>Возвращает строку, содержащую сообщение события в текущем языковом стандарте.</returns>
      <param name="values">Значения, используемые для замещения переменных в сообщении события.Переменные представлены в виде %n, где n является числом.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Id">
      <summary>Получает идентификатор для данного события.Все события с данным идентификатором представляют один тип событий.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Keywords">
      <summary>Получает маску ключевого слова события.Get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames" /> property to get the name of the keywords used in this mask.</summary>
      <returns>Возвращает длинное значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames">
      <summary>Получает отображаемые имена ключевых слов, используемых в маске ключевых слов для данного события. </summary>
      <returns>Возвращает перечисляемую коллекцию строк, содержащих отображаемые имена ключевых слов, используемых в маске ключевых слов для данного события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Level">
      <summary>Получает уровень события.Данный уровень указывает серьезность события.Для имени уровня следует получить значение свойства <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName" />.</summary>
      <returns>Возвращает значение байта.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName">
      <summary>Получает отображаемое имя уровня для данного события.</summary>
      <returns>Возвращает строку, содержащую отображаемое имя уровня для данного события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LogName">
      <summary>Получает имя журнала события, в котором регистрируется данное событие.</summary>
      <returns>Возвращает строку, содержащую имя журнала, содержащего данное событие.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.MachineName">
      <summary>Получает имя компьютера, на котором данное событие было зарегистрировано в журнале.</summary>
      <returns>Получает строку, содержащую имя компьютера, на котором данное событие было зарегистрировано.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Opcode">
      <summary>Получает код операция события.Код операций определяет числовое значение, идентифицирующее действие или пункт действия, который выполнялся приложением при вызове события.Для имени кода операций следует получить значение свойства <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName" />.</summary>
      <returns>Возвращает короткое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName">
      <summary>Получает отображаемое имя кода операций для данного события.</summary>
      <returns>Возвращает строку, содержащую отображаемое имя кода операций для данного события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProcessId">
      <summary>Получает идентификатор процесса для поставщика событий, зарегистрировавшего данное событие.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Properties">
      <summary>Получает определяемые пользователем свойства события.</summary>
      <returns>Возвращает список объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderId">
      <summary>Получает глобальный уникальный идентификатор (GUID) поставщика событий, опубликовавшего данное событие.</summary>
      <returns>Возвращает значение GUID.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderName">
      <summary>Получает имя поставщика событий, опубликовавшего данное событие.</summary>
      <returns>Возвращает строку, содержащую имя поставщика событий, опубликовавшего данное событие.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Qualifiers">
      <summary>Получает номера квалификаторов, используемых для идентификации события.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RecordId">
      <summary>Получает идентификатор записи события в журнале.</summary>
      <returns>Возвращает длинное значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RelatedActivityId">
      <summary>Получает глобальный уникальный идентификатор (GUID) для связанного действия в процессе, для которого задействуется событие.</summary>
      <returns>Возвращает значение GUID.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Task">
      <summary>Получает идентификатор задачи для части приложения или компонента, публикующего событие.Задача является 16-разрядным значением, 16 верхних значений зарезервированы.Данный тип позволяет использовать любое значение между 0x0000 и 0xffef.Для получения имени задачи следует получить значение свойства <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName" />.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName">
      <summary>Получает отображаемое имя задачи для данного события.</summary>
      <returns>Возвращает строку, содержащую отображаемое имя задачи для события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ThreadId">
      <summary>Получает идентификатор потока для потока, в котором действует поставщик событий.</summary>
      <returns>Возвращает целое значение.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TimeCreated">
      <summary>Получает время создания события в формате <see cref="T:System.DateTime" />.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> value.Может иметь значение NULL.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.ToXml">
      <summary>Получает представление XML события.Все свойства события представлены в XML события.XML соответствует схеме событий.</summary>
      <returns>Возвращает строку, содержащую представление XML события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.UserId">
      <summary>Получает дескриптор безопасности пользователя, контекст которого используется для публикации события.</summary>
      <returns>Returns a <see cref="T:System.Security.Principal.SecurityIdentifier" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Version">
      <summary>Получает номер версии для события.</summary>
      <returns>Возвращает значение байта.Это значение может быть равно null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs">
      <summary>При вызове события <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> экземпляр данного объекта передается методу делегата, обрабатывающему событие.Данный объект содержит событие, опубликованное в журнале событий или исключение, произошедшее при сбое подписки на событие.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventException">
      <summary>Получает исключение, произошедшее при сбое подписки на событие.Исключение имеет описание причин сбоя подписки.</summary>
      <returns>Returns an <see cref="T:System.Exception" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventRecord">
      <summary>Получает запись события, опубликованную в журнале событий.Данное событие соответствует критериям запроса, указанного в подписке на событие.</summary>
      <returns>Возвращает объект <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventTask">
      <summary>Содержит задачу события, определенную в поставщике событий.Задача идентифицирует часть приложения или компонента, публикующего событие.Задача является 16-разрядным значением, 16 верхних значений зарезервированы.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.DisplayName">
      <summary>Получает локализованное имя для задачи события.</summary>
      <returns>Возвращает строку, содержащую локализованное имя для задачи события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.EventGuid">
      <summary>Получает глобальный уникальный ИД (GUID), связанный с задачей. </summary>
      <returns>Возвращает значение GUID.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Name">
      <summary>Получает нелокализованное имя задачи события.</summary>
      <returns>Возвращает строку, содержащую нелокализованное имя задачи события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Value">
      <summary>Получает цифровое значение, связанное с задачей.</summary>
      <returns>Возвращает целое значение.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.PathType">
      <summary>Указывает, что строка содержит: имя журнала события или путь к файлу журнала события.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.LogName">
      <summary>Параметр пути содержит имя журнала события.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.FilePath">
      <summary>Параметр пути содержит путь к файлу журнала события.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.ProviderMetadata">
      <summary>Содержит статическую информацию о поставщике событий (например, имя и идентификатор поставщика), а также коллекцию событий, определенных в поставщике.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" />, указывая имя поставщика, о котором требуется извлечь информацию.</summary>
      <param name="providerName">Имя поставщика событий, о котором требуется извлечь информацию.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession,System.Globalization.CultureInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" />, указывая имя поставщика, о котором требуется извлечь информацию, службу журнала событий, с которой зарегистрирован поставщик, и язык, с использованием которого необходимо возвратить информацию.</summary>
      <param name="providerName">Имя поставщика событий, о котором требуется извлечь информацию.</param>
      <param name="session">Объект <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />, указывающий, следует ли получить информацию о поставщике от поставщика на локальном компьютере или от поставщика на удаленном компьютере.</param>
      <param name="targetCultureInfo">Язык и региональные параметры, указывающие язык, с использованием которого требуется возвратить информацию.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.DisplayName">
      <summary>Получает нелокализованное имя поставщика событий.</summary>
      <returns>Возвращает строку, содержащую локализованное имя поставщика событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose">
      <summary>Освобождает все ресурсы, используемые этим объектом.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые этим объектом. Кроме того, возможно освобождение управляемых ресурсов.</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые), или значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Events">
      <summary>Получает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" />, каждый из которых представляет событие, определенное в поставщике.</summary>
      <returns>Возвращает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.HelpLink">
      <summary>Получает базовый URL, используемый для формирования запросов справки для событий в данном поставщике событий.</summary>
      <returns>Возвращает значение <see cref="T:System.Uri" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Id">
      <summary>Получает глобальный идентификатор (GUID) для поставщика событий.</summary>
      <returns>Возвращает значение GUID для поставщика событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Keywords">
      <summary>Получает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />, каждый из которых представляет ключевое слово события, определенное в поставщике событий.</summary>
      <returns>Возвращает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Levels">
      <summary>Получает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />, каждый из которых представляет уровень, определенный в поставщике событий.</summary>
      <returns>Возвращает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.LogLinks">
      <summary>Получает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" />, каждый из которых представляет ссылку на журнал событий, используемый поставщиком событий.</summary>
      <returns>Возвращает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.MessageFilePath">
      <summary>Получает путь к файлу, содержащему ресурс таблицы сообщений, содержащий строки, связанные с метаданными поставщика.</summary>
      <returns>Возвращает строку, содержащую путь файла сообщения поставщика.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Name">
      <summary>Получает уникальное имя поставщика событий.</summary>
      <returns>Возвращает строку, содержащую уникальное имя поставщика событий.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Opcodes">
      <summary>Получает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />, каждый из которых представляет код операций, определенный в поставщике событий.</summary>
      <returns>Возвращает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ParameterFilePath">
      <summary>Получает путь файла, содержащего ресурс таблицы сообщений, содержащий строки, используемые для замены параметров в описаниях события.</summary>
      <returns>Возвращает строку, содержащую путь файла, содержащего ресурс таблицы сообщений, содержащий строки, используемые для замены параметров в описаниях события.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ResourceFilePath">
      <summary>Возвращает путь к файлу, содержащему метаданные, связанные с поставщиком.</summary>
      <returns>Возвращает строку, содержащую путь к файлу, содержащему метаданные, связанные с поставщиком.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Tasks">
      <summary>Получает перечисляемую коллекцию объектов <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />, каждый из которых представляет задачу, определенную в поставщике событий.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.SessionAuthentication">
      <summary>Определяет значения для типа проверки подлинности, используемого при удаленном вызове процедуры (RPC) входа на сервер.Вход в систему происходит таким образом при создании объекта <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" />, указывающего подключение к удаленному компьютеру.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Default">
      <summary>При удаленном вызове процедуры входа в систему следует использовать проверку подлинности по умолчанию.Метод проверки подлинности по умолчанию эквивалентен "Согласованию".</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Negotiate">
      <summary>При удаленном вызове процедуры входа в систему следует использовать проверку подлинности "Согласование".Это позволит клиентскому приложению выбрать наиболее подходящий для текущей ситуации метод проверки подлинности ("NTLM" или "Kerberos").</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Kerberos">
      <summary>Используйте проверку подлинности "Kerberos" при удаленном вызове процедуры входа в систему. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Ntlm">
      <summary>Используйте проверку подлинности "NTLM" (Windows NT LAN Manager) при удаленном вызове процедуры входа в систему.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventKeywords">
      <summary>Определяет стандартные ключевые слова, вложенные в событие поставщиком событий.Дополнительные сведения о ключевых словах см. в разделе <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.None">
      <summary>Данное значение указывает, что фильтрация по ключевому слову не выполняется при публикации события.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiContext">
      <summary>Вкладывается во все контекстные события инфраструктуры диагностики Windows (WDI).</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiDiagnostic">
      <summary>Вкладывается во все диагностические события инфраструктуры диагностики Windows (WDI).</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.Sqm">
      <summary>Вкладывается во все события механизма качества служб (SQM).</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditFailure">
      <summary>Вкладывается во все неудавшиеся события аудита безопасности.Данное ключевое слово следует использовать только для событий в журнале безопасности.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditSuccess">
      <summary>Вкладывается во все успешные события аудита безопасности.Данное ключевое слово следует использовать только для событий в журнале безопасности.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint">
      <summary>Вкладывается во все события перемещения, в которых идентификатор действия (корреляционный ИД) является вычисленным значениям; его уникальность не гарантируется (не является действительным GUID).</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.EventLogClassic">
      <summary>Вкладывается в события, вызываемые с использованием функции RaiseEvent.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventLevel">
      <summary>Определяет стандартные уровни событий, используемые службой журнала событий.Уровень определяет серьезность события.Пользовательские уровни события могут определяться вне зависимости от данных стандартных уровней.Дополнительные сведения об уровнях см. в разделе <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.LogAlways">
      <summary>Данное значение указывает, что фильтрация на данном уровне при публикации событий не выполняется.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Critical">
      <summary>Данный уровень соответствует критическим ошибкам (серьезным ошибкам, вызвавшим серьезную неисправность). </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Error">
      <summary>Данный уровень соответствует обычным сообщениям об ошибке, указывающим на наличие проблемы. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Warning">
      <summary>Данный уровень соответствует событиям-предупреждениям.Например, событие, публикуемое при уровне заполнения пространства диска, близком к максимальному, является событием-предупреждением.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Informational">
      <summary>Данный уровень соответствует информационным событиям или сообщениям, не являющимся ошибками.Данные события будут полезны при трассировке состояния или хода выполнения приложения.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Verbose">
      <summary>Данный уровень соответствует длительным событиям или сообщениям. </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventOpcode">
      <summary>Определяет стандартные коды операций, вложенные в событие поставщиком событий.Дополнительные сведения о кодах операций см. в разделе <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Info">
      <summary>Событие с данным кодом операций является информационным событием.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Start">
      <summary>Событие с данным кодом операций публикуется при запуске приложением новой транзакции или нового действия.Событие может внедряться в другую транзакцию или действие, если несколько событий с кодом операций Start следуют друг за другом без кода операций Stop.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Stop">
      <summary>Событие с данным кодом операций публикуется при завершении действия или транзакции в приложении.Событие соответствует последнему непарному событию с кодом операций Start.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStart">
      <summary>Событие с данным кодом операций является событием запуска коллекции трассировки.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStop">
      <summary>Событие с данным кодом операций является событием остановки коллекции трассировки.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Extension">
      <summary>Событие с данным кодом операций является событием расширения.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Reply">
      <summary>Событие с данным кодом операций публикуется после ответа действия в приложении на событие.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Resume">
      <summary>Событие с данным кодом операций публикуется после выхода действия в приложении из приостановленного состояния.За этим событием должно следовать событие с кодом операций Suspend.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Suspend">
      <summary>Событие с данным кодом операций публикуется при приостановке действия в приложении. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Send">
      <summary>Событие с данным кодом публикуется при передаче одним действием в приложении данных или системных ресурсов другому действию. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Receive">
      <summary>Событие с данным кодом операций публикуется при приеме одним действием данных в приложении.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventTask">
      <summary>Определяет стандартные задачи, вложенные в событие поставщиком событий.Дополнительные сведения о задачах см. в разделе <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventTask.None">
      <summary>Для идентификации части приложения, публикующего событие, не используется ни одна задача.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterData">
      <summary>Содержит необработанные данные для счетчика.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Decrement">
      <summary>Уменьшает значение счетчика на 1.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Increment">
      <summary>Увеличивает значение счетчика на 1.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)">
      <summary>Увеличивает значение счетчика на указанную величину.</summary>
      <param name="value">Величина, на которую увеличивается значение счетчика.Значение увеличения может быть положительным или отрицательным.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.RawValue">
      <summary>Задает или получает необработанные данные счетчиков.</summary>
      <returns>Необработанные данные счетчиков.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.Value">
      <summary>Задает или получает данные счетчика.</summary>
      <returns>Данные счетчиков.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSet">
      <summary>Идентифицирует набор логических счетчиков.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)">
      <summary>Выполняет инициализацию нового экземпляра класса<see cref="T:System.Diagnostics.PerformanceData.CounterSet" />.</summary>
      <param name="providerGuid">Идентификатор GUID, который уникально идентифицирует поставщика данных счетчика.Используйте идентификатор GUID, указанный в манифесте.</param>
      <param name="counterSetGuid">Идентификатор GUID, который уникально идентифицирует набор счетчиков поставщика.Используйте идентификатор GUID, указанный в манифесте.</param>
      <param name="instanceType">Идентифицирует тип набора счетчиков, например, является ли набор счетчиков набором для одного или нескольких экземпляров.</param>
      <exception cref="T:System.InsufficientMemoryException">Недостаточно памяти для выполнения операции.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Не поддерживается в версиях, предшествующих Windows Vista.</exception>
      <exception cref="T:System.ArgumentException">Один из параметров имеет значение NULL или недопустимое значение.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">Сбой вызова базовой функции Win32.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)">
      <summary>Добавляет в набор счетчиков счетчик с указанным идентификатором и типом. </summary>
      <param name="counterId">Идентифицирует счетчик.Для идентификации счетчика используйте значение, указанное в манифесте.</param>
      <param name="counterType">Идентифицирует тип счетчика.Тип счетчика определяет способ вычисления, усреднения и отображения данных счетчика.</param>
      <exception cref="T:System.ArgumentException">Идентификатор счетчика уже существует в наборе или имеет отрицательное значение, или тип счетчика имеет значение NULL или недопустимое значение.</exception>
      <exception cref="T:System.InvalidOperationException">После создания экземпляра набора счетчиков невозможно добавить счетчик в набор счетчиков.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)">
      <summary>Добавляет в набор счетчиков счетчик с указанным идентификатором, типом и отображаемым именем.</summary>
      <param name="counterId">Идентифицирует счетчик.Для идентификации счетчика используйте значение, указанное в манифесте.</param>
      <param name="counterType">Идентифицирует тип счетчика.Тип счетчика определяет способ вычисления, усреднения и отображения данных счетчика.</param>
      <param name="counterName">Имя счетчика.Это имя можно использовать для индексации счетчика в экземпляре набора счетчиков.(См. раздел <see cref="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)" />.)</param>
      <exception cref="T:System.ArgumentException">Идентификатор счетчика уже существует в наборе или имеет отрицательное значение, или тип счетчика имеет значение NULL или недопустимое значение.</exception>
      <exception cref="T:System.InvalidOperationException">После создания экземпляра набора счетчиков невозможно добавить счетчик в набор счетчиков.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)">
      <summary>Создает экземпляр набора счетчиков.</summary>
      <returns>Экземпляр набора счетчиков, в котором будут содержаться данные счетчиков.</returns>
      <param name="instanceName">Имя экземпляра.Это имя должно быть уникальным.</param>
      <exception cref="T:System.ArgumentException">Имя экземпляра имеет значение NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Добавлять счетчики в набор счетчиков следует перед созданием экземпляра набора счетчиков.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose">
      <summary>Освобождает все неуправляемые ресурсы, используемые этим объектом.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)">
      <summary>Освобождает все неуправляемые ресурсы, используемые этим объектом, а при необходимости освобождает и управляемые ресурсы.</summary>
      <param name="disposing">Значение True, если вызов был совершен из метода Dispose; значение False, если вызов был совершен из метода завершения.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Finalize">
      <summary>Освобождает ресурсы, перед тем как объект будет уничтожен во время сборки мусора.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstance">
      <summary>Создает экземпляр логических счетчиков, определенных в классе <see cref="T:System.Diagnostics.PerformanceData.CounterSet" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstance.Counters">
      <summary>Извлекает из экземпляра набора счетчиков коллекцию данных счетчиков.</summary>
      <returns>Коллекция данных счетчиков, содержащаяся в экземпляре набора счетчиков.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Dispose">
      <summary>Освобождает все неуправляемые ресурсы, используемые этим объектом.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet">
      <summary>Содержит набор значений счетчика.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Dispose">
      <summary>Освобождает все неуправляемые ресурсы, используемые этим объектом.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.Int32)">
      <summary>Осуществляет доступ к значению счетчика в наборе с помощью указанного идентификатора счетчика.</summary>
      <returns>Данные счетчиков.</returns>
      <param name="counterId">Идентификатор счетчика.Идентификатор счетчика, указанный при добавлении счетчика в набор счетчиков.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)">
      <summary>Осуществляет доступ к значению счетчика в наборе с помощью указанного имени счетчика.</summary>
      <returns>Данные счетчиков.</returns>
      <param name="counterName">Имя счетчика.Имя счетчика, указанное при добавлении счетчика в набор счетчиков.</param>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceType">
      <summary>Указывает, допустимо ли для набора счетчиков использование нескольких экземпляров, например, процессов или физических дисков, или одного экземпляра, например, памяти.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Single">
      <summary>Набор счетчиков содержит счетчики с единственным экземпляром, например, счетчик объема физической памяти.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple">
      <summary>Набор счетчиков содержит многоэкземплярные счетчики, например, счетчик для измерения среднего числа операций дискового ввода-вывода для процесса.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate">
      <summary>Набор счетчиков содержит счетчики с единственным экземпляром, статистические значения которых извлекаются из одного или более источников.Например, счетчик в наборе счетчиков данного типа может получать число операций чтения для каждого из трех жестких дисков компьютера и суммировать эти значения.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregateWithHistory">
      <summary>Данный тип аналогичен <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate" /> за исключением того, что в наборе счетчиков данного типа хранятся все значения счетчиков за время существования клиентского приложения (значение счетчика хранится в кэше после завершения времени существования счетчика).Например, если в примере глобальной статистики перестает быть доступным один из жестких дисков, общее число байт, считанных с данного диска, будет доступно и может использоваться при вычислении статистического значения.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate">
      <summary>Набор счетчиков содержит многоэкземплярные счетчики, статистические значения которых извлекаются из всех экземпляров счетчика.Например, счетчик в наборе счетчиков данного типа может получать значения общего времени выполнения потока для всех потоков многопоточного приложения и суммировать эти значения.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate">
      <summary>Данный тип аналогичен <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> за исключением того, что вместо статистической обработки данных всех экземпляров в одном статистическом экземпляре (_Total) выполняется статистическая обработка данных счетчиков экземпляров для одного имени.Например, если несколько процессов поставщика содержат экземпляры с именем IExplore, элементы <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple" /> и <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> CounterSet отобразят несколько экземпляров IExplore (IExplore, IExplore#1, IExplore#2 и так далее). Однако при использовании экземпляра типа <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate" /> опубликован будет только один экземпляр IExplore со статистическими данными счетчиков из всех экземпляров для имени IExplore.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterType">
      <summary>Определяет возможные типы счетчика.Каждому счетчику присваивается тип.Тип счетчика определяет способ вычисления, усреднения и отображения данных счетчиков.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength">
      <summary>Счетчик данного типа предназначен для отслеживания средней длины очереди на доступ к ресурсу за все время наблюдения.Он показывает разницу между длинами очередей, наблюдаемых в течение двух последних интервалов измерения, деленную на продолжительность интервала.(См. сведения о типе счетчика PERF_COUNTER_QUEUELEN_TYPE в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.LargeQueueLength">
      <summary>Счетчик данного типа отслеживает среднюю длину очереди к ресурсу за все время наблюдения.Счетчики этого типа отображают разницу между длинами очередей, наблюдаемых в течение двух последних интервалов измерения, деленную на продолжительность интервала.Данный тип аналогичен типу счетчика <see cref="F:System.Diagnostics.PerformanceData.CounterType.QueueLength" />, за исключением того, что используются большие поля для размещения больших значений.(См. сведения о типе счетчика PERF_COUNTER_LARGE_QUEUELEN_TYPE в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength100Ns">
      <summary>Счетчик данного типа вычисляет произведение пространства и времени для длины очереди на интервалах в 100 нс.(См. сведения о типе счетчика PERF_COUNTER_100NS_QUEUELEN_TYPE в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLengthObjectTime">
      <summary>Счетчик данного типа вычисляет произведение пространства и времени для длины очереди на интервалах времени, относящихся к определенному объекту.(См. сведения о типе счетчика PERF_COUNTER_OBJ_QUEUELEN_TYPE в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData32">
      <summary>Счетчик данного типа служит для отображения только последнего зафиксированного значения.Он не отображает среднее значение.(См. сведения о типе счетчика PERF_COUNTER_RAWCOUNT в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData64">
      <summary>Счетчик данного типа служит для отображения только последнего зафиксированного значения, а не среднего.Данный тип аналогичен типу счетчика <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawData32" />, за исключением того, что используются большие поля для размещения больших значений.(См. сведения о типе счетчика PERF_COUNTER_LARGE_RAWCOUNT в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32">
      <summary>Счетчик данного типа служит для отображения последнего измеренного значения в шестнадцатеричном формате.Он не отображает среднее значение.(См. сведения о типе счетчика PERF_COUNTER_RAWCOUNT_HEX в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex64">
      <summary>Счетчик данного типа служит для отображения последнего измеренного значения в шестнадцатеричном формате.Данный тип аналогичен типу счетчика <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32" />, за исключением того, что используются большие поля для размещения больших значений.(См. сведения о типе счетчика PERF_COUNTER_LARGE_RAWCOUNT_HEX в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32">
      <summary>Счетчик данного типа служит для отображения среднего числа операций, завершенных в течение каждой секунды интервала измерения.Счетчики этого типа измеряют время в тактах системных часов.(См. сведения о типе счетчика PERF_COUNTER_COUNTER в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond64">
      <summary>Счетчик данного типа служит для отображения среднего числа операций, завершенных в течение каждой секунды интервала измерения.Счетчики этого типа измеряют время в тактах системных часов.Данный тип аналогичен типу счетчика <see cref="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32" />, за исключением того, что используются большие поля для размещения больших значений.(См. сведения о типе счетчика PERF_COUNTER_BULK_COUNT в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32">
      <summary>Счетчик данного типа служит для отображения процентного соотношения подмножества и содержащего его множества.Например, он позволяет сравнить число байтов, используемых на диске, и общее число байтов на этом диске.Счетчики этого типа отображают только текущий процент, а не среднее значение за все время.(См. сведения о типе счетчика PERF_RAW_FRACTION в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64">
      <summary>Счетчик данного типа служит для отображения процентного соотношения подмножества и содержащего его множества.Например, он позволяет сравнить число байтов, используемых на диске, и общее число байтов на этом диске.Счетчики этого типа отображают только текущий процент, а не среднее значение за все время.Данный тип аналогичен типу счетчика <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" />, за исключением того, что используются большие поля для размещения больших значений.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase32">
      <summary>Счетчик данного типа хранит только последнее зафиксированное значение.Это значение выступает в роли знаменателя значения счетчика, представляющего собой обычную арифметическую дробь.Для данного типа поддерживается тип счетчика <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" />.(См. сведения о типе счетчика PERF_RAW_BASE в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase64">
      <summary>Счетчик данного типа хранит последнее зафиксированное значение.Он аналогичен типу счетчика <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawBase32" />, за исключением того, что используются большие поля для размещения больших значений.Для данного типа поддерживается тип счетчика <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64" />.(См. сведения о типе счетчика PERF_LARGE_RAW_BASE в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction">
      <summary>Счетчик данного типа служит для отображения среднего коэффициента обращения ко всем операциям за последние два интервала измерения.(См. сведения о типе счетчика PERF_SAMPLE_FRACTION в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleCounter">
      <summary>Счетчик данного типа служит для отображения среднего числа операций, завершенных за одну секунду.Он измеряет время в тактах системного таймера производительности.Переменная F означает количество тактов в одной секунде.Значение F добавляется в уравнение для того, чтобы результат отображался в секундах.(См. сведения о типе счетчика PERF_SAMPLE_COUNTER в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleBase">
      <summary>Данный счетчик хранит количество выполненных прерываний для измерения и используется в качестве знаменателя дробного значения.Для данного типа поддерживается тип счетчика <see cref="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction" />.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32">
      <summary>Счетчик данного типа измеряет время, которое в среднем займет завершение процесса или операции.Счетчики этого типа отображают отношение всего прошедшего интервала измерения к числу процессов или операций, завершенных за это время.Этот тип счетчика измеряет время в тактах системных часов.(См. сведения о типе счетчика PERF_AVERAGE_ TIMER в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageBase">
      <summary>Данный счетчик используется как базовые данные (знаменатель) при вычислении времени или усредненных значений счетчиков типа <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64" /> и <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32" />.Счетчик данного типа хранит только последнее зафиксированное значение.(См. сведения о типе счетчика PERF_AVERAGE_BASE в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64">
      <summary>Счетчик данного типа показывает, сколько элементов обработано в среднем за операцию.Счетчики этого типа отображают отношение обработанных элементов (например, отправленных байтов) к числу завершенных операций.Отношение вычисляется соотношением числа обработанных элементов в течение последнего интервала времени к числу завершенных операций за этот же интервал.(См. сведения о типе счетчика PERF_AVERAGE_BULK в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive">
      <summary>Счетчик данного типа служит для отображения среднего времени как процента отношения времени активности компонента к полному времени измерения.(См. сведения о типе счетчика PERF_COUNTER_TIMER в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive">
      <summary>Это обратный тип счетчика.Обратные счетчики измеряют время, в течение которого компонент не был активным, и таким образом получают значение времени активности.Счетчик данного типа служит для отображения среднего процента измеренного времени активности за интервал измерения.Значение этих счетчиков вычисляется за счет измерения процента времени, в течение которого служба была неактивна, и затем вычитанием этого значения из 100%.Этот тип счетчика аналогичен типу <see cref="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns" />, за тем исключением, что в нем вычисляется время в тактах системного таймера производительности, а не в единицах измерения, равных 100 нс.(См. сведения о типе счетчика PERF_COUNTER_TIMER_INV в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive100Ns">
      <summary>Счетчик данного типа служит для отображения процента времени активности компонента за все прошедшее время интервала измерения.Время измеряется в интервалах времени, равных 100 нс.Счетчики этого типа предназначены для измерения активности компонента в течение какого-либо времени.(См. сведения о типе счетчика PERF_100NSEC_TIMER в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns">
      <summary>Счетчик данного типа служит для отображения среднего процента измеренного времени активности за интервал измерения.Это обратный счетчик.Значение этих счетчиков вычисляется за счет измерения процента времени, в течение которого служба была неактивна, и затем вычитанием этого значения из 100%.(См. сведения о типе счетчика PERF_100NSEC_TIMER_INV в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ElapsedTime">
      <summary>Счетчик данного типа показывает полное время между началом работы компонента или процесса и вычислением значения.(См. сведения о типе счетчика PERF_ELAPSED_TIME в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive">
      <summary>Этот тип счетчика представляет собой мультитаймер.Мультитаймеры записывают данные более одного экземпляра компонента, например процессора или диска.Счетчики данного типа отображают процент отношения времени активности одного или более компонентов ко всему интервалу измерения.Поскольку числитель записывает время активности работающих компонентов одновременно, результат может превышать 100%.Этот тип счетчика отличается от <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" />, в нем вычисляется время в тактах системного таймера производительности, а не в единицах измерения, равных 100 нс.(См. сведения о типе счетчика PERF_COUNTER_MULTI_TIMER в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive">
      <summary>Счетчики данного типа отображают процент отношения времени активности одного или более компонентов ко всему интервалу измерения.Этот тип счетчика представляет собой обратный мультитаймер.Мультитаймеры исследуют более одного экземпляра компонента, например процессора или диска.Обратные счетчики измеряют время, в течение которого компонент не был активным, и таким образом получают значение времени активности.Этот счетчик отличается от <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />, в нем вычисляется время в тактах системного таймера производительности, а не в единицах измерения, равных 100 нс.(См. сведения о типе счетчика PERF_COUNTER_MULTI_TIMER_INV в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns">
      <summary>Счетчики данного типа отображают процент отношения времени активности одного или более компонентов ко всему интервалу измерения.Время измеряется в интервалах времени, равных 100 нс.Этот тип счетчика представляет собой мультитаймер.Мультитаймеры предназначены для исследования нескольких экземпляров компонента, например процессора или диска.(См. сведения о типе счетчика PERF_100NSEC_MULTI_TIMER в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns">
      <summary>Счетчики данного типа отображают процент отношения времени активности одного или более компонентов ко всему интервалу измерения.Такие счетчики вычисляют время в единицах времени, равных 100 нс.Этот тип счетчика представляет собой обратный мультитаймер.Мультитаймеры предназначены для исследования нескольких экземпляров компонента, например процессора или диска.Обратные счетчики измеряют время, в течение которого компонент не был активным, и таким образом вычисляется время активности компонента.(См. сведения о типе счетчика PERF_100NSEC_MULTI_TIMER_INV в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerBase">
      <summary>Указывает количество измеренных элементов.Используется как знаменатель в вычислениях для получения среднего значения среди измеренных элементов при измерении времени нескольких, но однотипных элементов.Данный тип поддерживает следующие типы счетчиков: <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive" />, <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive" />, <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" /> и <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta32">
      <summary>Счетчик этого типа показывает изменение в измеряемом атрибуте между двумя последними интервалами измерения.(См. сведения о типе счетчика PERF_ COUNTER_DELTA в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta64">
      <summary>Счетчик этого типа показывает изменение в измеряемом атрибуте между двумя последними интервалами измерения.Данный тип аналогичен типу счетчика <see cref="F:System.Diagnostics.PerformanceData.CounterType.Delta32" />, за исключением того, что используются большие поля для размещения больших значений.(См. сведения о типе счетчика PERF_COUNTER_LARGE_DELTA в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ObjectSpecificTimer">
      <summary>Данный 64-разрядный тип счетчика представляет собой таймер для отображения единиц измерения определенного объекта.(См. сведения о типе счетчика PERF_OBJ_TIME_TIMER в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionSystemTimer">
      <summary>Счетчик данного типа служит для отображения значения, которое состоит из значений двух счетчиков: количества времени, прошедшего с начала отслеживания события, и частоты системного таймера производительности.Данный тип счетчика отличается от других таймеров тем, что значение счетчика тактируется с помощью системных часов, что исключает погрешность из-за задержки вызова функции. Точные типы счетчиков используются в случаях, когда стандартный системный таймер не обеспечивает необходимую точность значений.(См. сведения о типе счетчика PERF_PRECISION_TIMER в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionTimer100Ns">
      <summary>Счетчик данного типа служит для отображения значения, которое состоит из значений двух счетчиков: количества времени, прошедшего с начала отслеживания события, и времени, измеренного частным таймером в тех же единицах измерения.Время измеряется в интервалах времени, равных 100 нс.Данный тип счетчика отличается от других таймеров тем, что значение счетчика тактируется с помощью системных часов, что исключает погрешность из-за задержки вызова функции. Точные типы счетчиков используются в случаях, когда стандартный системный таймер не обеспечивает необходимую точность значений.(См. сведения о типе счетчика PERF_PRECISION_100NS_TIMER в пакете развертывания).</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionObjectSpecificTimer">
      <summary>Счетчик данного типа служит для отображения значения, которое состоит из значений двух счетчиков: количества времени, прошедшего с начала отслеживания события, и частоты, указанной в поле PerfFreq заголовка объекта.Данный тип счетчика отличается от других таймеров тем, что значение счетчика тактируется с помощью системных часов, что исключает погрешность из-за задержки вызова функции. Точные типы счетчиков используются в случаях, когда стандартный системный таймер не обеспечивает необходимую точность значений.(См. сведения о типе счетчика PERF_PRECISION_OBJECT_TIMER в пакете развертывания).</summary>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>Представляет бинарную динамическую операцию в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.BinaryOperationBinder" />.</summary>
      <param name="operation">Вид бинарной операции.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку бинарной динамической операции, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической бинарной операции.</param>
      <param name="arg">Правый операнд динамической бинарной операции.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической бинарной операции, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической бинарной операции.</param>
      <param name="arg">Правый операнд динамической бинарной операции.</param>
      <param name="errorSuggestion">Результат привязки в случае ее неудачного завершения или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>Вид бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, который предоставляет вид бинарной операции.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>Представляет набор ограничений привязки <see cref="T:System.Dynamic.DynamicMetaObject" />, при соблюдении которых динамическая привязка является допустимой.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>Объединяет ограничения привязки из списка экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" /> в один набор ограничений.</summary>
      <returns>Новый набор ограничений привязки.</returns>
      <param name="contributingObjects">Список экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, ограничения которых объединяются в общий набор.</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>Представляет пустой набор ограничений привязки.Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>Создает ограничение привязки, которое проверяет выражение на наличие неизменяемых свойств.</summary>
      <returns>Новые ограничения привязки.</returns>
      <param name="expression">Выражение, представляющее ограничения.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>Создает ограничение привязки, которое проверяет удостоверения экземпляров объектов в выражении.</summary>
      <returns>Новые ограничения привязки.</returns>
      <param name="expression">Выражение для проверки.</param>
      <param name="instance">Точный экземпляр объекта для проверки.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает ограничение привязки, которое проверяет удостоверение типа среды выполнения в выражении.</summary>
      <returns>Новые ограничения привязки.</returns>
      <param name="expression">Выражение для проверки.</param>
      <param name="type">Точный тип для проверки.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>Объединяет набор ограничений привязки с текущими ограничениями привязки.</summary>
      <returns>Новый набор ограничений привязки.</returns>
      <param name="restrictions">Набор ограничений привязки, объединяемый с текущими ограничениями привязки.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий ограничения привязки.</summary>
      <returns>Дерево выражения, представляющее ограничения.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>Описывает аргументы в процессе динамической привязки.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Создает новый объект CallInfo, представляющий аргументы в процессе динамической привязки.</summary>
      <param name="argCount">Число аргументов.</param>
      <param name="argNames">Имена аргументов.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>Создает новый объект PositionalArgumentInfo.</summary>
      <param name="argCount">Число аргументов.</param>
      <param name="argNames">Имена аргументов.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>Число аргументов.</summary>
      <returns>Число аргументов.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>Имена аргументов.</summary>
      <returns>Доступная только для чтения коллекция имен аргументов.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>Определяет, равен ли указанный экземпляр CallInfo текущему экземпляру.</summary>
      <returns>Значение true, если указанный экземпляр равен текущему экземпляру; в противном случае — значение false.</returns>
      <param name="obj">Экземпляр <see cref="T:System.Dynamic.CallInfo" />, сравниваемый с текущим экземпляром.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>Служит в качестве хэш-функции для текущего экземпляра <see cref="T:System.Dynamic.CallInfo" />.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.Dynamic.CallInfo" />.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>Представляет динамическую операцию преобразования в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.ConvertBinder" />.</summary>
      <param name="type">Тип, в который выполняется преобразование.</param>
      <param name="explicit">Значение true, если преобразование должно быть явным; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции преобразования.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции преобразования.</param>
      <param name="args">Массив аргументов динамической операции преобразования.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>Получает значение, указывающее, должно ли преобразование быть явным.</summary>
      <returns>Значение True, если преобразование является явным; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции преобразования, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции преобразования.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции преобразования, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции преобразования.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>Тип, в который выполняется преобразование.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип, в который выполняется преобразование.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>Представляет динамическую операцию создания в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.CreateInstanceBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции создания.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции создания.</param>
      <param name="args">Массив аргументов динамической операции создания.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции создания, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции создания.</param>
      <param name="args">Аргументы динамической операции создания.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции создания, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции создания.</param>
      <param name="args">Аргументы динамической операции создания.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>Представляет динамическую операцию удаления индекса в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления индекса.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления индекса.</param>
      <param name="args">Массив аргументов динамической операции удаления индекса.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления индекса.</param>
      <param name="indexes">Аргументы динамической операции удаления индекса.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции удаления индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления индекса.</param>
      <param name="indexes">Аргументы динамической операции удаления индекса.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>Представляет динамическую операцию удаления члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="name">Имя члена, который требуется удалить.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления члена.</param>
      <param name="args">Массив аргументов динамической операции удаления члена.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции удаления члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления члена.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции удаления члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>Значение true, если строки должны сравниваться без учета регистра; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>Получает имя члена, который требуется удалить.</summary>
      <returns>Имя члена, который требуется удалить.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>Представляет динамическую привязку и логику привязки объекта, участвующего в динамической привязке.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <param name="expression">Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</param>
      <param name="restrictions">Набор ограничений привязки, при соблюдении которых привязка является допустимой.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <param name="expression">Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</param>
      <param name="restrictions">Набор ограничений привязки, при соблюдении которых привязка является допустимой.</param>
      <param name="value">Значение среды выполнения, представленное объектом <see cref="T:System.Dynamic.DynamicMetaObject" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической бинарной операции.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.BinaryOperationBinder" />, который представляет сведения о динамической операции.</param>
      <param name="arg">Экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />, который представляет правый операнд бинарной операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>Выполняет привязку динамической операции преобразования.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.ConvertBinder" />, который представляет сведения о динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции создания экземпляра.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.CreateInstanceBinder" />, который представляет сведения о динамической операции.</param>
      <param name="args">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются аргументами операции создания экземпляра.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления индекса.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.DeleteIndexBinder" />, который представляет сведения о динамической операции.</param>
      <param name="indexes">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются индексами для операции удаления индекса.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Выполняет привязку динамической операции удаления члена.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.DeleteMemberBinder" />, который представляет сведения о динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения индекса.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.GetIndexBinder" />, который представляет сведения о динамической операции.</param>
      <param name="indexes">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются индексами для операции получения индекса.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>Выполняет привязку динамической операции получения члена.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.GetMemberBinder" />, который представляет сведения о динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.InvokeBinder" />, который представляет сведения о динамической операции.</param>
      <param name="args">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются аргументами для операции вызова.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова члена.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.InvokeMemberBinder" />, который представляет сведения о динамической операции.</param>
      <param name="args">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются аргументами для операции вызова члена.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания индекса.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.SetIndexBinder" />, который представляет сведения о динамической операции.</param>
      <param name="indexes">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются индексами для операции задания индекса.</param>
      <param name="value">Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий значение операции задания индекса.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания члена.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.SetMemberBinder" />, который представляет сведения о динамической операции.</param>
      <param name="value">Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий значение операции задания члена.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>Выполняет привязку динамической унарной операции.</summary>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.UnaryOperationBinder" />, который представляет сведения о динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>Создает метаобъект для указанного объекта.</summary>
      <returns>Если заданный объект реализует интерфейс <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> и не является удаленным объектом из другого домена приложения, метод <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> возвращает метаобъект, относящийся к конкретному объекту.В противном случае создается и возвращается новый обычный метаобъект без ограничений.</returns>
      <param name="value">Объект, для которого создается метаобъект.</param>
      <param name="expression">Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>Представляет пустой массив типа <see cref="T:System.Dynamic.DynamicMetaObject" />.Это поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>Выражение, представляющее объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</summary>
      <returns>Выражение, представляющее объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>Возвращает перечисление имен всех динамических членов.</summary>
      <returns>Список имен динамических членов.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>Получает значение, показывающее, имеет ли объект <see cref="T:System.Dynamic.DynamicMetaObject" /> значение среды выполнения.</summary>
      <returns>Значение true, если объект <see cref="T:System.Dynamic.DynamicMetaObject" /> имеет значение среды выполнения; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>Получает тип ограничения <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>Значение <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />, если значение среды выполнения доступно; в противном случае — тип свойства <see cref="P:System.Dynamic.DynamicMetaObject.Expression" />.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>Набор ограничений привязки, при соблюдении которых привязка является допустимой.</summary>
      <returns>Набор ограничений привязки.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>Получает объект <see cref="T:System.Type" /> значения среды выполнения или NULL, если с объектом <see cref="T:System.Dynamic.DynamicMetaObject" /> не связано никакое значение.</summary>
      <returns>Объект <see cref="T:System.Type" /> значения среды выполнения или NULL.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>Значение среды выполнения, представленное объектом <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>Значение среды выполнения, представленное объектом <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>Связыватель динамического источника вызова, участвующий в протоколе привязки <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObjectBinder" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>При переопределении в производном классе выполняет привязку динамической операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Выполняет привязку динамической операции к набору аргументов в среде выполнения.</summary>
      <returns>Выражение, проверяющее аргументы динамической операции и выполняющее эту операцию, если проверки пройдены успешно.Если проверки не пройдены успешно при последующих выполнениях динамической операции, метод Bind вызывается еще раз, чтобы создать новый объект <see cref="T:System.Linq.Expressions.Expression" /> для новых типов аргументов.</returns>
      <param name="args">Массив аргументов динамической операции.</param>
      <param name="parameters">Массив экземпляров класса <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющих параметры источника вызова в процессе привязки.</param>
      <param name="returnLabel">Элемент LabelTarget, возвращающий результат динамической привязки.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Откладывает привязку операции до вычисления значений среды выполнения всех аргументов динамической операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>Откладывает привязку операции до вычисления значений среды выполнения всех аргументов динамической операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="args">Массив аргументов динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>Получает выражение, которое вызовет обновление привязки.Она указывает, что привязка выражения более недействительна.Обычно используется в случае изменения "версии" динамического объекта.</summary>
      <returns>Выражение обновления.</returns>
      <param name="type">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> итогового выражения; допустим любой тип.</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>Предоставляет базовый класс для указания динамического поведения во время выполнения.Этот класс должен наследоваться; непосредственно создавать его экземпляры нельзя.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>Позволяет производным типам инициализировать новый экземпляр типа <see cref="T:System.Dynamic.DynamicObject" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>Возвращает перечисление имен всех динамических членов. </summary>
      <returns>Последовательность, содержащая имена динамических членов.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Предоставляет объект <see cref="T:System.Dynamic.DynamicMetaObject" />, вызывающий динамические виртуальные методы.Объект можно инкапсулировать в другой объект <see cref="T:System.Dynamic.DynamicMetaObject" />, чтобы обеспечить пользовательское поведение для отдельных действий.Данный метод поддерживает инфраструктуру среды DLR для разработчиков языков и не предназначен для непосредственного использования из кода.</summary>
      <returns>Объект типа <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
      <param name="parameter">Выражение, представляющее объект <see cref="T:System.Dynamic.DynamicMetaObject" />, вызывающий динамические виртуальные методы.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>Предоставляет реализацию для двоичных операций.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как сложение и умножение.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения о двоичной операции.Свойство binder.Operation возвращает объект <see cref="T:System.Linq.Expressions.ExpressionType" />.Например, для оператора sum = first + second, где first и second являются производными класса DynamicObject, binder.Operation возвращает значение ExpressionType.Add.</param>
      <param name="arg">Правый операнд для двоичной операции.Например, для оператора sum = first + second, где first и second являются производными класса DynamicObject, <paramref name="arg" /> равен second.</param>
      <param name="result">Результат двоичной операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>Предоставляет реализацию для операций преобразования типа.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций, преобразующих объект из одного типа в другой.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об операции преобразования.Свойство binder.Type предоставляет тип, в который необходимо преобразовать объект.Например, для оператора (String)sampleObject в C# (CType(sampleObject, Type) в Visual Basic), где sampleObject — экземпляр класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, binder.Type возвращает тип <see cref="T:System.String" />.Свойство binder.Explicit предоставляет сведения о виде преобразования, который имеет место.Для явного преобразования возвращается значение true, для неявного — значение false.</param>
      <param name="result">Результат операции преобразования типа.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, инициализирующих новый экземпляр динамического объекта.Этот метод не предназначен для использования в C# или Visual Basic.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об операции инициализации.</param>
      <param name="args">Аргументы, переданные объекту во время инициализации.Например, для операции new SampleType(100), где SampleType — тип, производный от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="args[0]" /> равен 100.</param>
      <param name="result">Результат инициализации.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>Предоставляет реализацию для операций, удаляющих объект по индексу.Этот метод не предназначен для использования в C# или Visual Basic.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об удалении.</param>
      <param name="indexes">Удаляемые индексы.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Предоставляет реализацию для операций, удаляющих элемент объекта.Этот метод не предназначен для использования в C# или Visual Basic.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об удалении.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, получающих значение по индексу.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций индексации.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об операции. </param>
      <param name="indexes">Индексы, которые используются в операции.Например, для операции sampleObject[3] в C# (sampleObject(3) в Visual Basic), где sampleObject является производным от класса DynamicObject, <paramref name="indexes[0]" /> равно 3.</param>
      <param name="result">Результат операции индексации.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Предоставляет реализацию для операций, получающих значения членов.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как получение значения свойства.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об объекте, вызвавшем динамическую операцию.Свойство binder.Name предоставляет имя члена, с которым выполняется динамическая операция.Например, для оператора Console.WriteLine(sampleObject.SampleProperty), где sampleObject является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, binder.Name возвращает значение SampleProperty.Свойство binder.IgnoreCase задает, учитывается ли регистр в имени члена.</param>
      <param name="result">Результат операции получения.Например, если для свойства вызывается метод, можно присвоить свойству значение <paramref name="result" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, вызывающих объект.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вызов объекта или делегата.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об операции вызова.</param>
      <param name="args">Аргументы, переданные объекту во время операции вызова.Например, для операции sampleObject(100), где sampleObject является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="args[0]" /> равен 100.</param>
      <param name="result">Результат вызова объекта.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, вызывающих член.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вызов метода.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения о динамической операции.Свойство binder.Name предоставляет имя члена, с которым выполняется динамическая операция.Например, для оператора sampleObject.SampleMethod(100), где sampleObject является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, binder.Name возвращает значение SampleMethod.Свойство binder.IgnoreCase задает, учитывается ли регистр в имени члена.</param>
      <param name="args">Аргументы, переданные члену объекта во время операции вызова.Например, для оператора sampleObject.SampleMethod(100), где sampleObject является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="args[0]" /> равен 100.</param>
      <param name="result">Результат вызова члена.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Предоставляет реализацию для операций, задающих значение по индексу.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций, осуществляющих доступ к объектам по заданному индексу.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об операции. </param>
      <param name="indexes">Индексы, которые используются в операции.Например, для операции sampleObject[3] = 10 в C# (sampleObject(3) = 10 в Visual Basic), где sampleObject является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="indexes[0]" /> равно 3.</param>
      <param name="value">Значение, которое необходимо задать для объекта с заданным индексом.Например, для операции sampleObject[3] = 10 в C# (sampleObject(3) = 10 в Visual Basic), где sampleObject является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> равно 10.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Предоставляет реализацию для операций, задающих значения членов.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как задание значения свойства.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об объекте, вызвавшем динамическую операцию.Свойство binder.Name предоставляет имя члена, которому присваивается значение.Например, для оператора sampleObject.SampleProperty = "Test", где sampleObject является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, binder.Name возвращает значение SampleProperty.Свойство binder.IgnoreCase задает, учитывается ли регистр в имени члена.</param>
      <param name="value">Значение, задаваемое для члена.Например, для sampleObject.SampleProperty = "Test", где sampleObject является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> является Test.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>Предоставляет реализацию для унарных операций.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вычитание, увеличение или уменьшение.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об унарной операции.Свойство binder.Operation возвращает объект <see cref="T:System.Linq.Expressions.ExpressionType" />.Например, для оператора negativeNumber = -number, где number является производным от класса DynamicObject, binder.Operation возвращает значение Negate.</param>
      <param name="result">Результат унарной операции.</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>Представляет объект, члены которого можно динамически добавлять и удалять во время выполнения.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>Инициализирует новый ExpandoObject, не содержащий членов.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Добавляет указанное значение в <see cref="T:System.Collections.Generic.ICollection`1" /> с указанным ключом.</summary>
      <param name="item">Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, представляющая ключ и значение, которые требуется добавить в коллекцию.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Удаляет все элементы из коллекции.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Определяет, содержит ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> указанные ключ и значение.</summary>
      <returns>Значение true, если коллекция содержит указанные ключ и значение; в противном случае — значение false.</returns>
      <param name="item">Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, которую требуется найти в коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Копирует элементы коллекции <see cref="T:System.Collections.Generic.ICollection`1" /> в массив типа <see cref="T:System.Collections.Generic.KeyValuePair`2" />, начиная с указанного индекса массива.</summary>
      <param name="array">Одномерный массив типа <see cref="T:System.Collections.Generic.KeyValuePair`2" />, в который копируются элементы <see cref="T:System.Collections.Generic.KeyValuePair`2" /> из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.Индексация в массиве должна начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый с нуля индекс в массиве <paramref name="array" />, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>Получает количество элементов в наборе <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>Количество элементов в <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли <see cref="T:System.Collections.Generic.ICollection`1" /> только для чтения.</summary>
      <returns>Значение true, если <see cref="T:System.Collections.Generic.ICollection`1" /> доступна только для чтения; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Удаляет из коллекции ключ и значение.</summary>
      <returns>Значение true, если ключ и значение найдены и удалены; в противном случае — значение false.Этот метод возвращает значение false, если ключ и значение не найдены в коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, представляющая ключ и значение, которые требуется удалить из коллекции.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>Добавляет указанные ключ и значение в словарь.</summary>
      <param name="key">Объект, который используется в качестве ключа.</param>
      <param name="value">Объект, который используется в качестве значения.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>Определяет, содержится ли указанный ключ в словаре.</summary>
      <returns>true, если в словаре содержится элемент с указанным ключом; в противном случае — false.</returns>
      <param name="key">Ключ, который нужно найти в словаре.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>Получает или задает элемент, имеющий указанный ключ.</summary>
      <returns>Элемент, имеющий указанный ключ.</returns>
      <param name="key">Ключ элемента, который требуется получить или задать.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Получает <see cref="T:System.Collections.Generic.ICollection`1" />, который содержит ключи <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />, содержащая ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>Удаляет из <see cref="T:System.Collections.IDictionary" /> элемент, имеющий указанный ключ.</summary>
      <returns>Значение true, если элемент успешно удален, в противном случае — значение false.Этот метод также возвращает значение false, если параметр <paramref name="key" /> не найден в исходном объекте <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <param name="key">Ключ удаляемого элемента.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>Получает значение, связанное с указанным ключом.</summary>
      <returns>Значение true, если объект, который реализует интерфейс <see cref="T:System.Collections.Generic.IDictionary`2" />, содержит элемент, имеющий указанный ключ; в противном случае — значение false.</returns>
      <param name="key">Ключ значения, которое необходимо получить.</param>
      <param name="value">При возвращении метода содержит значение, связанное с указанном ключом, если он найден; в противном случае — значение по умолчанию для данного типа параметра <paramref name="value" />.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Получает <see cref="T:System.Collections.Generic.ICollection`1" />, которая содержит значения в <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />, содержащая значения в объекте, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора коллекции.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Происходит при изменении значения свойства.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Предоставленный объект MetaObject будет вызывать динамические виртуальные методы.Объект можно инкапсулировать внутри другого объекта MetaObject, чтобы обеспечить пользовательское поведение для отдельных действий.</summary>
      <returns>Объект типа <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
      <param name="parameter">Выражение, представляющее объект MetaObject, который будет вызывать динамические виртуальные методы.</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>Представляет динамическую операцию получения индекса в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Dynamic.GetIndexBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения индекса.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения индекса.</param>
      <param name="args">Массив аргументов динамической операции получения индекса.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения индекса.</param>
      <param name="indexes">Аргументы динамической операции получения индекса.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции получения индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения индекса.</param>
      <param name="indexes">Аргументы динамической операции получения индекса.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>Представляет динамическую операцию получения члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.GetMemberBinder" />.</summary>
      <param name="name">Имя члена, который необходимо получить.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения члена.</param>
      <param name="args">Массив аргументов динамической операции получения члена.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции получения члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения члена.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции получения члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>Значение true, если регистр знаков не учитывается; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>Получает имя члена, который требуется получить.</summary>
      <returns>Имя члена, который необходимо получить.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>Представляет динамический объект, операции которого могут привязываться во время выполнения.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Возвращает объект <see cref="T:System.Dynamic.DynamicMetaObject" />, который отвечает за выполняемые с данным объектом операции привязки.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, который необходимо привязать к данному объекту.</returns>
      <param name="parameter">Представление дерева выражений значения среды выполнения.</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>Представляет сведения о динамической операции получения члена, указывающие, должен ли метод получения члена вызывать свойства при выполнении операции получения.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>Получает значение, указывающее, должна ли данная операция получения члена вызывать свойства при выполнении операции получения.Значение по умолчанию при отсутствии данного интерфейса — true.</summary>
      <returns>Значение true, если данная операция получения члена должна вызывать свойства при выполнении операции получения; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>Представляет динамическую операцию вызова в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Dynamic.InvokeBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Массив аргументов динамической операции вызова.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Аргументы динамической операции вызова.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Аргументы динамической операции вызова.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>Представляет динамическую операцию вызова члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Dynamic.InvokeMemberBinder" />.</summary>
      <param name="name">Имя элемента, который предполагается вызвать.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова члена.</param>
      <param name="args">Массив аргументов динамической операции вызова члена.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Аргументы динамической операции вызова.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова члена.</param>
      <param name="args">Аргументы динамической операции вызова члена.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции вызова члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова члена.</param>
      <param name="args">Аргументы динамической операции вызова члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>Значение true, если регистр знаков не учитывается; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>Получает имя члена, который требуется вызвать.</summary>
      <returns>Имя элемента, который предполагается вызвать.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>Представляет динамическую операцию задания индекса в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Dynamic.SetIndexBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции задания индекса.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания индекса.</param>
      <param name="args">Массив аргументов динамической операции задания индекса.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания индекса.</param>
      <param name="indexes">Аргументы динамической операции задания индекса.</param>
      <param name="value">Значение, задаваемое для коллекции.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции задания индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания индекса.</param>
      <param name="indexes">Аргументы динамической операции задания индекса.</param>
      <param name="value">Значение, задаваемое для коллекции.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>Представляет динамическую операцию задания члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.SetMemberBinder" />.</summary>
      <param name="name">Имя члена, который необходимо получить.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции задания члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания члена.</param>
      <param name="args">Массив аргументов динамической операции задания члена.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания члена.</param>
      <param name="value">Значение, задаваемое для члена.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания члена.</param>
      <param name="value">Значение, задаваемое для члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>Значение true, если регистр знаков не учитывается; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>Получает имя члена, который требуется получить.</summary>
      <returns>Имя члена, который необходимо получить.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>Представляет унарную динамическую операцию в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.BinaryOperationBinder" />.</summary>
      <param name="operation">Вид унарной операции.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической унарной операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку унарной динамической операции, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической унарной операции.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку унарной динамической операции, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической унарной операции.</param>
      <param name="errorSuggestion">Результат привязки в случае ее неудачного завершения или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>Вид унарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, который предоставляет вид унарной операции.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.IO.HandleInheritability">
      <summary>Указывает, является ли основной дескриптор наследуемым дочерними процессами.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>Указывает, что дескриптор не является наследуемым дочерними процессами.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>Указывает, что дескриптор является наследуемым дочерними процессами.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFile">
      <summary>Представляет размещенный в памяти файл. </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)">
      <summary>Создает размещенный в памяти файл с указанными именем, емкостью, типом доступа, настройками безопасности, режимом наследования и требованием удаления из существующего файла. </summary>
      <returns>Размещенный в памяти файл с заданными характеристиками.</returns>
      <param name="fileStream">Потока <paramref name="fileStream" /> файла для размещения в памяти.</param>
      <param name="mapName">Имя, присваиваемое размещенному в памяти файлу.</param>
      <param name="capacity">Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.</param>
      <param name="access">Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <param name="memoryMappedFileSecurity">Разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами.Этот параметр может иметь значение null.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <param name="leaveOpen">Значение true, чтобы не удалять <paramref name="fileStream" /> после закрытия <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />; значение false, чтобы удалить <paramref name="fileStream" />.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="fileStream" /> является пустой строкой, содержащей только пробелы либо один или несколько недопустимых знаков, определенных методом <see cref="M:System.IO.Path.GetInvalidFileNameChars" />. — или —<paramref name="fileStream" /> ссылается на недопустимое устройство.— или —Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)— или —<paramref name="capacity" /> и длина файла равны нулю.— или —Значение параметра <paramref name="capacity" /> больше, чем размер файла.— или —Параметр <paramref name="access" /> доступен только на запись значением перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileStream" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="capacity" /> меньше или равно нулю.— или —Значение параметра <paramref name="capacity" /> меньше, чем размер файла.— или —<paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.— или —<paramref name="inheritability" /> не является допустимым значением перечисления <see cref="T:System.IO.HandleInheritability" />.</exception>
      <exception cref="T:System.UnauthorizedAccessException">В операционной системе запрещен указанный параметром <paramref name="access" /> доступ к файлу; например, для <paramref name="access" /> установлено значение <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> или <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, но файл или каталог доступен только для чтения. </exception>
      <exception cref="T:System.IO.IOException">Произошла ошибка ввода-вывода.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="fileStream" /> превышает максимальную длину, определенную операционной системой.В Windows пути должны содержать менее 248 символов, а имена файлов — менее 260 символов.</exception>
      <exception cref="T:System.Security.SecurityException">Вызывающая сторона не имеет необходимых разрешений для файла.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)">
      <summary>Создает размещенный в памяти файл из существующего файла.</summary>
      <returns>Размещенный в памяти файл.</returns>
      <param name="path">Путь к файлу для сопоставления.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="path" /> является пустой строкой, содержащей только пробелы либо один или несколько недопустимых знаков, определенных методом <see cref="M:System.IO.Path.GetInvalidFileNameChars" />. — или —<paramref name="path" /> ссылается на недопустимое устройство. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> имеет значение null;</exception>
      <exception cref="T:System.IO.IOException">Произошла ошибка ввода-вывода.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> превышает максимальную длину, определенную операционной системой.В Windows пути должны содержать менее 248 символов, а имена файлов — менее 260 символов.</exception>
      <exception cref="T:System.Security.SecurityException">Вызывающая сторона не имеет необходимых разрешений для файла.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)">
      <summary>Создает размещенный в памяти файл с заданным режимом доступа из существующего файла. </summary>
      <returns>Размещенный в памяти файл с заданным режимом доступа.</returns>
      <param name="path">Путь к файлу для сопоставления.</param>
      <param name="mode">Одно из значений перечисления, которое определяет, как следует использовать исходный файл на диске.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="path" /> является пустой строкой, содержащей только пробелы либо один или несколько недопустимых знаков, определенных методом <see cref="M:System.IO.Path.GetInvalidFileNameChars" />. — или —<paramref name="path" /> ссылается на недопустимое устройство.— или —Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)— или —<paramref name="mode" /> имеет значение <see cref="F:System.IO.FileMode.Append" />;</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> имеет значение null;</exception>
      <exception cref="T:System.IO.IOException">Значение параметра <paramref name="mode" /> ― <see cref="F:System.IO.FileMode.CreateNew" />.— или —Произошла ошибка ввода-вывода.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> превышает максимальную длину, определенную операционной системой.В Windows пути должны содержать менее 248 символов, а имена файлов — менее 260 символов.</exception>
      <exception cref="T:System.Security.SecurityException">Вызывающая сторона не имеет необходимых разрешений для файла.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)">
      <summary>Создает размещенный в памяти файл с заданными режимом доступа и именем из существующего файла.</summary>
      <returns>Размещенный в памяти файл с заданными именем и режимом доступа.</returns>
      <param name="path">Путь к файлу для сопоставления.</param>
      <param name="mode">Одно из значений перечисления, которое определяет, как следует использовать исходный файл на диске.</param>
      <param name="mapName">Имя, присваиваемое размещенному в памяти файлу. </param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="path" /> является пустой строкой, содержащей только пробелы либо один или несколько недопустимых знаков, определенных методом <see cref="M:System.IO.Path.GetInvalidFileNameChars" />. — или —<paramref name="path" /> ссылается на недопустимое устройство.— или —Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)— или —<paramref name="capacity" /> и длина файла равны нулю.— или —Значение параметра <paramref name="capacity" /> больше, чем размер файла.— или —<paramref name="mode" /> имеет значение <see cref="F:System.IO.FileMode.Append" />;</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> больше, чем размер логического адресного пространства.— или —Значение параметра <paramref name="capacity" /> меньше или равно нулю.— или —Значение параметра <paramref name="capacity" /> меньше, чем размер файла.</exception>
      <exception cref="T:System.IO.IOException">Значение параметра <paramref name="mode" /> ― <see cref="F:System.IO.FileMode.CreateNew" />.— или —Произошла ошибка ввода-вывода.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> превышает максимальную длину, определенную операционной системой.В Windows пути должны содержать менее 248 символов, а имена файлов — менее 260 символов.</exception>
      <exception cref="T:System.Security.SecurityException">Вызывающая сторона не имеет необходимых разрешений для файла.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)">
      <summary>Создает размещенный в памяти файл с заданными режимом доступа, именем и емкостью из существующего файла.</summary>
      <returns>Размещенный в памяти файл с заданными характеристиками.</returns>
      <param name="path">Путь к файлу для сопоставления.</param>
      <param name="mode">Одно из значений перечисления, которое определяет, как следует использовать исходный файл на диске.</param>
      <param name="mapName">Имя, присваиваемое размещенному в памяти файлу. </param>
      <param name="capacity">Максимальный размер, выделяемый размещенному в памяти файлу, в байтах. </param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="path" /> является пустой строкой, содержащей только пробелы либо один или несколько недопустимых знаков, определенных методом <see cref="M:System.IO.Path.GetInvalidFileNameChars" />. — или —<paramref name="path" /> ссылается на недопустимое устройство.— или —Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)— или —<paramref name="capacity" /> и длина файла равны нулю.— или —Значение параметра <paramref name="capacity" /> больше, чем размер файла.— или —<paramref name="mode" /> имеет значение <see cref="F:System.IO.FileMode.Append" />;</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> больше, чем размер логического адресного пространства.— или —Значение параметра <paramref name="capacity" /> меньше или равно нулю.— или —Значение параметра <paramref name="capacity" /> меньше, чем размер файла.</exception>
      <exception cref="T:System.IO.IOException">Значение параметра <paramref name="mode" /> ― <see cref="F:System.IO.FileMode.CreateNew" />.— или —Произошла ошибка ввода-вывода.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> превышает максимальную длину, определенную операционной системой.В Windows пути должны содержать менее 248 символов, а имена файлов — менее 260 символов.</exception>
      <exception cref="T:System.Security.SecurityException">Вызывающая сторона не имеет необходимых разрешений для файла.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Создает размещенный в памяти файл с указанными режимом доступа, именем, емкостью и типом доступа из существующего файла.</summary>
      <returns>Размещенный в памяти файл с заданными характеристиками.</returns>
      <param name="path">Путь к файлу для сопоставления.</param>
      <param name="mode">Одно из значений перечисления, которое определяет, как следует использовать исходный файл на диске.</param>
      <param name="mapName">Имя, присваиваемое размещенному в памяти файлу. </param>
      <param name="capacity">Максимальный размер, выделяемый размещенному в памяти файлу, в байтах. </param>
      <param name="access">Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mapName" /> содержит пустую строку.— или —<paramref name="mode" /> не является разрешенным значением.— или —<paramref name="access" /> не является разрешенным значением.— или —<paramref name="path" /> указывает пустой файл.— или —Значение <paramref name="capacity" /> равно 0 и размер файла, указанного параметром <paramref name="path" />, также равен 0.— или —Параметр <paramref name="access" /> указан как <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" />, а емкость превышает размер файла, указанного параметром <paramref name="path" />.— или —<paramref name="mode" /> имеет значение <see cref="F:System.IO.FileMode.Append" />;</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> имеет значение null; </exception>
      <exception cref="T:System.IO.IOException">Значение параметра <paramref name="mode" /> ― <see cref="F:System.IO.FileMode.CreateNew" />.— или —Произошла ошибка ввода-вывода.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> превышает максимальную длину, определенную операционной системой.В Windows пути должны содержать менее 248 символов, а имена файлов — менее 260 символов.</exception>
      <exception cref="T:System.Security.SecurityException">Вызывающая сторона не имеет необходимых разрешений для файла.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="capacity" /> меньше 0.— или —Параметр <paramref name="access" /> не является определенным значением <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.— или —Размер файла, указанный <paramref name="path" /> больше <paramref name="capacity" />.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)">
      <summary>Создает размещенный в памяти файл с заданной емкостью в системной памяти. </summary>
      <returns>Размещенный в памяти файл с заданными именем и емкостью.</returns>
      <param name="mapName">Имя, присваиваемое размещенному в памяти файлу.</param>
      <param name="capacity">Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="capacity" /> меньше или равно нулю.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Создает размещенный в памяти файл с заданной емкостью и типом доступа в системной памяти. </summary>
      <returns>Размещенный в памяти файл с заданными характеристиками.</returns>
      <param name="mapName">Имя, присваиваемое размещенному в памяти файлу.</param>
      <param name="capacity">Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.</param>
      <param name="access">Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)— или —Параметр <paramref name="access" /> доступен только на запись значением перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="capacity" /> меньше или равно нулю.— или —<paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>Создает размещенный в памяти файл с заданной емкостью, типом доступа, выделением памяти, настройками безопасности и режимом наследования в системной памяти.</summary>
      <returns>Размещенный в памяти файл с заданными характеристиками.</returns>
      <param name="mapName">Имя, присваиваемое размещенному в памяти файлу.</param>
      <param name="capacity">Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.</param>
      <param name="access">Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <param name="options">Побитовое сочетание значений перечисления, которое задает параметры выделения памяти для размещенного в памяти файла.</param>
      <param name="memoryMappedFileSecurity">Разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами.Этот параметр может иметь значение null.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)— или —Параметр <paramref name="access" /> доступен только на запись значением перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="capacity" /> меньше или равно нулю.— или —<paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.— или —<paramref name="inheritability" /> не является допустимым значением перечисления <see cref="T:System.IO.HandleInheritability" />.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)">
      <summary>Создает или открывает размещенный в памяти файл с заданной емкостью в системной памяти.</summary>
      <returns>Размещенный в памяти файл с заданным именем и размером.</returns>
      <param name="mapName">Имя, присваиваемое размещенному в памяти файлу.</param>
      <param name="capacity">Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> больше, чем размер логического адресного пространства.— или —Значение параметра <paramref name="capacity" /> меньше или равно нулю.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Создает или открывает размещенный в памяти файл с заданной емкостью и типом доступа в системной памяти. </summary>
      <returns>Размещенный в памяти файл с заданными характеристиками.</returns>
      <param name="mapName">Имя, присваиваемое размещенному в памяти файлу.</param>
      <param name="capacity">Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.</param>
      <param name="access">Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)— или —Параметр <paramref name="access" /> доступен только на запись значением перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> больше, чем размер логического адресного пространства.— или —Значение параметра <paramref name="capacity" /> меньше или равно нулю.— или —<paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.</exception>
      <exception cref="T:System.UnauthorizedAccessException">В операционной системе запрещен указанный доступ к файлу; например, доступ установлен как <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> или <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, но файл или каталог доступен только для чтения. </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>Создает или открывает размещенный в памяти файл с заданной емкостью, типом доступа, выделением памяти, настройками безопасности и режимом наследования в системной памяти.</summary>
      <returns>Размещенный в памяти файл с заданными характеристиками.</returns>
      <param name="mapName">Имя, присваиваемое размещенному в памяти файлу.</param>
      <param name="capacity">Максимальный размер, выделяемый размещенному в памяти файлу, в байтах.</param>
      <param name="access">Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <param name="options">Побитовое сочетание значений перечисления, которое задает параметры выделения памяти для размещенного в памяти файла.</param>
      <param name="memoryMappedFileSecurity">Разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами.Этот параметр может иметь значение null.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mapName" /> содержит пустую строку. — или —Параметр <paramref name="access" /> доступен только на запись значением перечисления <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> больше, чем размер логического адресного пространства.— или —Значение параметра <paramref name="capacity" /> меньше или равно нулю.— или —<paramref name="access" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.— или —<paramref name="inheritability" /> не является допустимым значением перечисления <see cref="T:System.IO.HandleInheritability" />.</exception>
      <exception cref="T:System.UnauthorizedAccessException">В операционной системе запрещен указанный параметром <paramref name="access" /> доступ к файлу; например, для <paramref name="access" /> установлено значение <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> или <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, но файл или каталог доступен только для чтения. </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor">
      <summary>Создает метод <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" />, который соответствует представлению размещенного в памяти файла.</summary>
      <returns>Блок оперативной памяти.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Доступ к сопоставленному в памяти файлу не авторизован.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)">
      <summary>Создает <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" />, который сопоставляется с представлением размещенного в памяти файла и имеет заданное смещение и размер.</summary>
      <returns>Блок оперативной памяти.</returns>
      <param name="offset">Байт, с которого должно начинаться представление.</param>
      <param name="size">Размер представления.Укажите 0 (нуль), чтобы создать представление, которое начинается с <paramref name="offset" /> и заканчивается в конце размещенного в памяти файла.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> или <paramref name="size" /> является отрицательным значением.— или —<paramref name="size" /> больше логического адресного пространства.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Доступ к сопоставленному в памяти файлу не авторизован.</exception>
      <exception cref="T:System.IO.IOException">Произошла ошибка ввода-вывода.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Создает <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" />, который сопоставляется с представлением размещенного в памяти файла и имеет заданное смещение, размер и ограничения по доступу.</summary>
      <returns>Блок оперативной памяти.</returns>
      <param name="offset">Байт, с которого должно начинаться представление.</param>
      <param name="size">Размер представления.Укажите 0 (нуль), чтобы создать представление, которое начинается с <paramref name="offset" /> и заканчивается в конце размещенного в памяти файла.</param>
      <param name="access">Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> или <paramref name="size" /> является отрицательным значением.— или —<paramref name="size" /> больше логического адресного пространства.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="access" /> недопустим для сопоставленного в памяти файла.</exception>
      <exception cref="T:System.IO.IOException">Произошла ошибка ввода-вывода.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream">
      <summary>Создает поток, который соответствует представлению размещенного в памяти файла.  </summary>
      <returns>Поток памяти.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Доступ к сопоставленному в памяти файлу не авторизован.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)">
      <summary>Создает поток, который сопоставляется с представлением размещенного в памяти файла и имеет заданное смещение и размер.</summary>
      <returns>Поток памяти с заданными смещением и размером.</returns>
      <param name="offset">Байт, с которого должно начинаться представление.</param>
      <param name="size">Размер представления.Укажите 0 (нуль), чтобы создать представление, которое начинается с <paramref name="offset" /> и заканчивается в конце размещенного в памяти файла.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> или <paramref name="size" /> является отрицательным значением.— или —<paramref name="size" /> больше логического адресного пространства.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Доступ к сопоставленному в памяти файлу не авторизован.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> больше, чем общая виртуальная память.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Создает поток, который сопоставляется с представлением размещенного в памяти файла и имеет заданное смещение, размер и тип доступа.</summary>
      <returns>Поток памяти с заданными характеристиками.</returns>
      <param name="offset">Байт, с которого должно начинаться представление.</param>
      <param name="size">Размер представления.Укажите 0 (нуль), чтобы создать представление, которое начинается с <paramref name="offset" /> и заканчивается в конце размещенного в памяти файла.</param>
      <param name="access">Одно из значений перечисления, определяющее разрешенный тип доступа к размещенному в памяти файлу.Значение по умолчанию — <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> или <paramref name="size" /> является отрицательным значением.— или —<paramref name="size" /> больше логического адресного пространства.— или —<paramref name="access " /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Параметр <paramref name="access" /> недопустим для сопоставленного в памяти файла.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> больше, чем общая виртуальная память.— или —Параметр <paramref name="access" /> недопустим для сопоставленного в памяти файла.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose">
      <summary>Освобождает все ресурсы, используемые <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />. </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />, а при необходимости освобождает также управляемые ресурсы. </summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые); значение false, чтобы освободить только неуправляемые ресурсы. </param>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl">
      <summary>Получает элемент управления доступом к ресурсу размещенного в памяти файла.</summary>
      <returns>Разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами.</returns>
      <exception cref="T:System.InvalidOperationException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
      <exception cref="T:System.NotSupportedException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
      <exception cref="T:System.ObjectDisposedException">Сопоставленный в памяти файл закрыт.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Текущей платформой является Windows 98 или более ранняя версия.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.— или —Сопоставленный в памяти файл был открыт только в режиме <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" />.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)">
      <summary>Открывает существующий размещенный в памяти файл с заданным именем в системной памяти.</summary>
      <returns>Размещенный в памяти файл с заданным именем. </returns>
      <param name="mapName">Имя размещенного в памяти файла, который необходимо открыть.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> имеет значение null;</exception>
      <exception cref="T:System.IO.FileNotFoundException">Файл, заданный для <paramref name="mapName" />, не существует.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)">
      <summary>Открывает существующий размещенный в памяти файл с заданными именем и правами доступа в системной памяти.</summary>
      <returns>Размещенный в памяти файл с заданными характеристиками.</returns>
      <param name="mapName">Имя размещенного в памяти файла, который необходимо открыть.</param>
      <param name="desiredAccessRights">Одно из значений перечисления, определяющее права доступа, применяемые к размещенному в памяти файлу.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Файл, заданный для <paramref name="mapName" />, не существует.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)">
      <summary>Открывает существующий размещенный в памяти файл с заданными именем, правами доступа и режимом наследования в системной памяти.</summary>
      <returns>Размещенный в памяти файл с заданными характеристиками.</returns>
      <param name="mapName">Имя размещенного в памяти файла, который необходимо открыть.</param>
      <param name="desiredAccessRights">Одно из значений перечисления, определяющее права доступа, применяемые к размещенному в памяти файлу.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, может ли дескриптор размещенного в памяти файла наследоваться дочерним процессом.Значение по умолчанию — <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mapName" /> содержит пустую строку.(Допустима пустая ссылка.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> не является допустимым значением перечисления <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" />.— или —<paramref name="inheritability" /> не является допустимым значением перечисления <see cref="T:System.IO.HandleInheritability" />.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Запрошенный доступ недопустимый для файла отображения памяти.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Файл, заданный для <paramref name="mapName" />, не существует.</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle">
      <summary>Получает дескриптор размещенного в памяти файла.</summary>
      <returns>Дескриптор размещенного в памяти файла.</returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)">
      <summary>Задает элемент управления доступом к ресурсу размещенного в памяти файла.</summary>
      <param name="memoryMappedFileSecurity">Разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memoryMappedFileSecurity" /> имеет значение null;</exception>
      <exception cref="T:System.InvalidOperationException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
      <exception cref="T:System.NotSupportedException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess">
      <summary>Задает возможности доступа и ограничения для размещенного в памяти файла или представления. </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite">
      <summary>Доступ для чтения и записи файла.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read">
      <summary>Доступ к файлу только для чтения.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write">
      <summary>Доступ к файлу только на запись.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.CopyOnWrite">
      <summary>Доступ на чтение и запись к файлу с тем ограничением, что все операции записи не будут видны другим процессам. </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadExecute">
      <summary>Доступ на чтение к файлу, который может хранить и запускать выполняемый код.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWriteExecute">
      <summary>Доступ на чтение и запись к файлу, который может хранить и запускать выполняемый код.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileOptions">
      <summary>Предоставляет параметры выделения памяти для размещенных в памяти файлов.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.None">
      <summary>Никакие параметры выделения памяти не применяются.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages">
      <summary>Выделение памяти откладывается до создания представления с помощью метода <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor" /> или <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream" />.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights">
      <summary>Задает права доступа к размещенному в памяти файлу, который не связан с файлом на диске.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.CopyOnWrite">
      <summary>Право на чтение и запись файла с тем ограничением, что все операции записи не будут видны другим процессам.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Write">
      <summary>Право добавлять данные в файлы и удалять данные из файлов.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read">
      <summary>Право открывать и копировать файл в качестве файла, доступного только для чтения.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute">
      <summary>Право на запуск файла приложения.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Delete">
      <summary>Право на удаление файла.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadPermissions">
      <summary>Право открывать и копировать правила доступа и аудита, связанные с файлом.Оно не включает в себя право на чтение данных, атрибутов файловой системы или дополнительных атрибутов файловой системы.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ChangePermissions">
      <summary>Право на изменение правил безопасности и аудита, связанных с файлом.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.TakeOwnership">
      <summary>Право изменять владельца файла.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWrite">
      <summary>Право открывать и копировать файлы и право добавлять данные в файлы или удалять данные из файлов.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadExecute">
      <summary>Право открывать и копировать папки и файлы с разрешением только для чтения, а также запускать файлы приложений.Это право включает права <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read" /> и <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute" />.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWriteExecute">
      <summary>Право открывать и копировать файлы и право добавлять данные в файлы или удалять данные из файлов, а также право запускать файлы приложений.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.FullControl">
      <summary>Право на полный контроль над файлом, а также на изменение правил доступа и аудита.Это значение представляет право выполнять над файлом любые операции и является объединением всех входящих в перечисление прав.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.AccessSystemSecurity">
      <summary>Право на получение или задание разрешений для файла.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity">
      <summary>Представляет разрешения, которые могут быть предоставлены для доступа к файлам и операций с размещенными в памяти файлами. </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity.#ctor">
      <summary>Инициализация нового экземпляра класса <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" />. </summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
      <summary>Представление размещенного в памяти файла с произвольным доступом.</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush">
      <summary>Очищает все буферы для этого представления и вызывает запись всех буферизованных данных в базовый файл.</summary>
      <exception cref="T:System.ObjectDisposedException">Методы были вызваны после закрытия метода доступа.</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle">
      <summary>Получает дескриптор для просмотра размещенного в памяти файла.</summary>
      <returns>Программа-оболочка дескриптора операционной системы для просмотра файла. </returns>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewStream">
      <summary>Представление размещенного в памяти файла в виде потока с последовательным доступом.</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.Flush">
      <summary>Очищает все буферы для этого потока и вызывает запись всех буферизованных данных в базовый файл.</summary>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SafeMemoryMappedViewHandle">
      <summary>Получает дескриптор для просмотра размещенного в памяти файла.</summary>
      <returns>Программа-оболочка дескриптора операционной системы для просмотра файла. </returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SetLength(System.Int64)">
      <summary>Задает длину текущего потока.</summary>
      <param name="value">Необходимая длина текущего потока в байтах.</param>
      <exception cref="T:System.NotSupportedException">Данный метод не поддерживается.</exception>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeClientStream">
      <summary>Предоставляет сторону клиента в потоке анонимного канала, поддерживающем синхронные и асинхронные операции чтения и записи.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> из указанного дескриптора.</summary>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.Данные в анонимных каналах могут передаваться только в одном направлении, поэтому для параметра <paramref name="direction" /> нельзя задать значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="safePipeHandle">Безопасный дескриптор для канала, который будет инкапсулироваться данным объектом <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle " /> не является допустимым дескриптором.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="safePipeHandle" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">Свойству <paramref name="direction" /> присвоено значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
      <exception cref="T:System.IO.IOException">Произошла ошибка ввода-вывода, например ошибка диска.–либо–Поток закрыт.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> с использованием указанного направления канала и строкового представления дескриптора канала.</summary>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.Данные в анонимных каналах могут передаваться только в одном направлении, поэтому для параметра <paramref name="direction" /> нельзя задать значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="pipeHandleAsString">Строка, представляющая дескриптор канала.</param>
      <exception cref="T:System.ArgumentException">Дескриптор <paramref name="pipeHandleAsString" /> не является допустимым.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="pipeHandleAsString" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">Свойству <paramref name="direction" /> присвоено значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> с использованием указанного дескриптора канала в строковом представлении.</summary>
      <param name="pipeHandleAsString">Строка, представляющая дескриптор канала.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="pipeHandleAsString" /> не является допустимым дескриптором канала.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
      <summary>Задает режим чтения для объекта <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />.</summary>
      <returns>Всегда <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимый режим передачи.Для анонимных каналов поддерживается только <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</exception>
      <exception cref="T:System.NotSupportedException">Режим передачи <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />.</exception>
      <exception cref="T:System.IO.IOException">Соединение прерывается или возникает иная ошибка ввода/вывода.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
      <summary>Получает режим передачи, поддерживаемый текущим каналом.</summary>
      <returns>Всегда <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</returns>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeServerStream">
      <summary>Предоставляет поток для анонимного канала, поддерживающий синхронные и асинхронные операции чтения и записи.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> с указанным направлением канала.</summary>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.Данные в анонимных каналах могут передаваться только в одном направлении, поэтому для параметра <paramref name="direction" /> нельзя задать значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <exception cref="T:System.NotSupportedException">Свойству <paramref name="direction" /> присвоено значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> на основе указанного дескриптора канала.</summary>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.Данные в анонимных каналах могут передаваться только в одном направлении, поэтому для параметра <paramref name="direction" /> нельзя задать значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="serverSafePipeHandle">Безопасный дескриптор для канала, который будет инкапсулироваться данным объектом <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />.</param>
      <param name="clientSafePipeHandle">Безопасный дескриптор для объекта <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="serverSafePipeHandle" /> или <paramref name="clientSafePipeHandle" /> является недействительным дескриптором.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="serverSafePipeHandle" /> или <paramref name="clientSafePipeHandle" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">Свойству <paramref name="direction" /> присвоено значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
      <exception cref="T:System.IO.IOException">Произошла ошибка ввода-вывода, например ошибка диска.— или —Поток закрыт.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> с указанным направлением канала и режимом наследования.</summary>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.Данные в анонимных каналах могут передаваться только в одном направлении, поэтому для параметра <paramref name="direction" /> нельзя задать значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, может ли базовый дескриптор наследоваться дочерними процессами.Возможные значения: <see cref="F:System.IO.HandleInheritability.None" /> и <see cref="F:System.IO.HandleInheritability.Inheritable" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Свойству <paramref name="inheritability" /> не присвоено значение <see cref="F:System.IO.HandleInheritability.None" /> или <see cref="F:System.IO.HandleInheritability.Inheritable" />.</exception>
      <exception cref="T:System.NotSupportedException">Свойству <paramref name="direction" /> присвоено значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> с указанным направлением канала, режимом наследования и размером буфера.</summary>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.Данные в анонимных каналах могут передаваться только в одном направлении, поэтому для параметра <paramref name="direction" /> нельзя задать значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, может ли базовый дескриптор наследоваться дочерними процессами.Возможные значения: <see cref="F:System.IO.HandleInheritability.None" /> и <see cref="F:System.IO.HandleInheritability.Inheritable" />.</param>
      <param name="bufferSize">Размер буфера.Данное значение должно быть больше или равно 0.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Свойству <paramref name="inheritability" /> не присвоено значение <see cref="F:System.IO.HandleInheritability.None" /> или <see cref="F:System.IO.HandleInheritability.Inheritable" />.— или —Значение параметра <paramref name="bufferSize" /> меньше 0.</exception>
      <exception cref="T:System.NotSupportedException">Свойству <paramref name="direction" /> присвоено значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> с указанным направлением канала, режимом наследования, размером буфера и режимом безопасности канала.</summary>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.Данные в анонимных каналах могут передаваться только в одном направлении, поэтому для параметра <paramref name="direction" /> нельзя задать значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, может ли базовый дескриптор наследоваться дочерними процессами.</param>
      <param name="bufferSize">Размер буфера.Данное значение должно быть больше или равно 0.</param>
      <param name="pipeSecurity">Объект, определяющий правила управления доступом и аудита безопасности для канала.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Свойству <paramref name="inheritability" /> не присвоено значение <see cref="F:System.IO.HandleInheritability.None" /> или <see cref="F:System.IO.HandleInheritability.Inheritable" />.— или —Значение параметра <paramref name="bufferSize" /> меньше 0.</exception>
      <exception cref="T:System.NotSupportedException">Свойству <paramref name="direction" /> присвоено значение <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
      <summary>Получает безопасный дескриптор для объекта <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />, который в данный момент подключен к объекту <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />.</summary>
      <returns>Дескриптор для объекта <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />, который в данный момент подключен к объекту <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />.</returns>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
      <summary>Закрывает локальную копию дескриптора объекта <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
      <summary>Получает дескриптор подключенного объекта <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> в виде строки.</summary>
      <returns>Строка, представляющая дескриптор подключенного объекта <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" />.</returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
      <summary>Задает режим чтения для объекта <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" />.Для анонимных каналов режим передачи должен иметь значение <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</summary>
      <returns>Всегда <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимый режим передачи.Для анонимных каналов поддерживается только <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</exception>
      <exception cref="T:System.NotSupportedException">Свойство имеет значение <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />, которое не поддерживается для анонимных каналов.</exception>
      <exception cref="T:System.IO.IOException">Соединение прерывается или возникает иная ошибка ввода/вывода.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
      <summary>Получает режим передачи, поддерживаемый текущим каналом.</summary>
      <returns>Всегда <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</returns>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeClientStream">
      <summary>Предоставляет объект <see cref="T:System.IO.Stream" /> для именованного канала, поддерживающий синхронные и асинхронные операции чтения и записи.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> для заданного дескриптора канала с указанным направлением канала.</summary>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="isAsync">true, если дескриптор открыт асинхронно, в противном случае — false.</param>
      <param name="isConnected">true, если канал подключен, в противном случае — false.</param>
      <param name="safePipeHandle">Безопасный дескриптор для канала, который будет инкапсулироваться данным объектом <see cref="T:System.IO.Pipes.NamedPipeClientStream" />.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> не является допустимым дескриптором.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> не является допустимым дескриптором.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.</exception>
      <exception cref="T:System.IO.IOException">Поток закрыт. </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> с указанным именем канала.</summary>
      <param name="pipeName">Имя канала.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> с заданными именами канала и сервера.</summary>
      <param name="serverName">Имя удаленного компьютера, к которому выполняется подключение, или "." для указания локального компьютера.</param>
      <param name="pipeName">Имя канала.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> или параметр <paramref name="serverName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeAccessRights,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> с заданными именами канала и сервера, параметрами канала, уровнем олицетворения безопасности и режимом наследования.</summary>
      <param name="serverName">Имя удаленного компьютера, к которому выполняется подключение, или "." для указания локального компьютера.</param>
      <param name="pipeName">Имя канала.</param>
      <param name="desiredAccessRights">Одно из значений перечисления, задающее требуемые права доступа для канала.</param>
      <param name="options">Одно из значений перечисления, определяющее способ открытия или создания канала.</param>
      <param name="impersonationLevel">Одно из значений перечисления, определяющее уровень олицетворения безопасности.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, будет ли базовый дескриптор наследоваться дочерними процессами.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> или параметр <paramref name="serverName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.— или —Параметр <paramref name="impersonationLevel" /> не является допустимым значением <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.— или —Параметр <paramref name="inheritability" /> не является допустимым значением <see cref="T:System.IO.HandleInheritability" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> с заданными именами канала и сервера и указанным направлением канала.</summary>
      <param name="serverName">Имя удаленного компьютера, к которому выполняется подключение, или "." для указания локального компьютера.</param>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> или параметр <paramref name="serverName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> с заданными именами канала и сервера, направлением канала и параметрами канала.</summary>
      <param name="serverName">Имя удаленного компьютера, к которому выполняется подключение, или "." для указания локального компьютера.</param>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="options">Одно из значений перечисления, определяющее способ открытия или создания канала.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> или параметр <paramref name="serverName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Параметр <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> с заданными именами канала и сервера, направлением канала, параметрами канала и уровнем олицетворения безопасности.</summary>
      <param name="serverName">Имя удаленного компьютера, к которому выполняется подключение, или "." для указания локального компьютера.</param>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="options">Одно из значений перечисления, определяющее способ открытия или создания канала.</param>
      <param name="impersonationLevel">Одно из значений перечисления, определяющее уровень олицетворения безопасности.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> или параметр <paramref name="serverName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Параметр <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.— или —Параметр <paramref name="impersonationLevel" /> не является допустимым значением <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> с заданными именами канала и сервера, направлением канала, параметрами канала, уровнем олицетворения безопасности и режимом наследования.</summary>
      <param name="serverName">Имя удаленного компьютера, к которому выполняется подключение, или "." для указания локального компьютера.</param>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="options">Одно из значений перечисления, определяющее способ открытия или создания канала.</param>
      <param name="impersonationLevel">Одно из значений перечисления, определяющее уровень олицетворения безопасности.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, будет ли базовый дескриптор наследоваться дочерними процессами.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="pipeName" /> или <paramref name="serverName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> или параметр <paramref name="serverName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Параметр <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.— или —Параметр <paramref name="impersonationLevel" /> не является допустимым значением <see cref="T:System.Security.Principal.TokenImpersonationLevel" />.— или —Параметр <paramref name="inheritability" /> не является допустимым значением <see cref="T:System.IO.HandleInheritability" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect">
      <summary>Подключается к ждущему серверу.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)">
      <summary>Устанавливает подключение к ожидающему серверу в рамках заданного периода ожидания.</summary>
      <param name="timeout">Количество миллисекунд, задающее время ожидания соединения с сервером.</param>
      <exception cref="T:System.TimeoutException">Не удалось подключиться к серверу в течение указанного периода времени <paramref name="timeout" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> меньше 0.</exception>
    </member>
    <member name="P:System.IO.Pipes.NamedPipeClientStream.NumberOfServerInstances">
      <summary>Получает число экземпляров сервера с одинаковым именем канала.</summary>
      <returns>Число экземпляров сервера с одинаковым именем канала.</returns>
      <exception cref="T:System.InvalidOperationException">Дескриптор канала не задан.— или —Текущий объект <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> еще не подключен к объекту <see cref="T:System.IO.Pipes.NamedPipeServerStream" />.</exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла ошибка ввода/вывода.</exception>
      <exception cref="T:System.ObjectDisposedException">Основной дескриптор канала закрыт.</exception>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeServerStream">
      <summary>Предоставляет <see cref="T:System.IO.Stream" /> в именованном канале, поддерживая синхронные и асинхронные операции чтения и записи.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> на основе указанного дескриптора канала.</summary>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="isAsync">true, если дескриптор открыт асинхронно, в противном случае — false.</param>
      <param name="isConnected">true, если канал подключен, в противном случае — false.</param>
      <param name="safePipeHandle">Безопасный дескриптор для канала, который будет инкапсулироваться данным объектом <see cref="T:System.IO.Pipes.NamedPipeClientStream" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Дескриптор <paramref name="safePipeHandle" /> не является допустимым.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> не является допустимым дескриптором канала.— или —Превышено максимальное количество экземпляров сервера.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> с указанным именем канала.</summary>
      <param name="pipeName">Имя канала.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".</exception>
      <exception cref="T:System.PlatformNotSupportedException">Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95, которые не поддерживаются. </exception>
      <exception cref="T:System.IO.IOException">Превышено максимальное количество экземпляров сервера.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> с указанным именем канала и направлением канала.</summary>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95, которые не поддерживаются.</exception>
      <exception cref="T:System.IO.IOException">Превышено максимальное количество экземпляров сервера.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> с заданным именем канала, направлением и максимальным количеством экземпляров сервера.</summary>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="maxNumberOfServerInstances">Максимальное число экземпляров сервера с одинаковыми именами.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Требуется неотрицательное число. — или —Значение параметра <paramref name="maxNumberofServerInstances" /> меньше единицы или больше 254.— или —Требуется <see cref="F:System.IO.HandleInheritability.None" /> или <see cref="F:System.IO.HandleInheritability.Inheritable" />.— или —Права доступа ограничены флагами <see cref="F:System.IO.Pipes.PipeAccessRights.ChangePermissions" />, <see cref="F:System.IO.Pipes.PipeAccessRights.TakeOwnership" /> и <see cref="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95, которые не поддерживаются.</exception>
      <exception cref="T:System.IO.IOException">Превышено максимальное количество экземпляров сервера.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> с заданным именем канала, направлением канала, максимальным количеством экземпляров сервера и режимом передачи.</summary>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="maxNumberOfServerInstances">Максимальное число экземпляров сервера с одинаковыми именами.</param>
      <param name="transmissionMode">Одно из значений перечисления, определяющее режим передачи канала.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Значение параметра <paramref name="maxNumberofServerInstances" /> меньше единицы или больше 254.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95, которые не поддерживаются.</exception>
      <exception cref="T:System.IO.IOException">Превышено максимальное количество экземпляров сервера.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> с заданным именем канала, направлением канала, максимальным количеством экземпляров сервера, режимом передачи и параметрами канала.</summary>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="maxNumberOfServerInstances">Максимальное число экземпляров сервера с одинаковыми именами.</param>
      <param name="transmissionMode">Одно из значений перечисления, определяющее режим передачи канала.</param>
      <param name="options">Одно из значений перечисления, определяющее способ открытия или создания канала.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Значение параметра <paramref name="maxNumberofServerInstances" /> меньше единицы или больше 254.— или —Параметр <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95, которые не поддерживаются.</exception>
      <exception cref="T:System.IO.IOException">Превышено максимальное количество экземпляров сервера.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> с заданным именем канала, направлением канала, максимальным количеством экземпляров сервера, режимом передачи, параметрами канала и рекомендуемыми размерами входного и выходного буферов.</summary>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="maxNumberOfServerInstances">Максимальное число экземпляров сервера с одинаковыми именами.</param>
      <param name="transmissionMode">Одно из значений перечисления, определяющее режим передачи канала.</param>
      <param name="options">Одно из значений перечисления, определяющее способ открытия или создания канала.</param>
      <param name="inBufferSize">Положительное значение больше 0, указывающее размер входного буфера.</param>
      <param name="outBufferSize">Положительное значение больше 0, указывающее размер выходного буфера.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Значение параметра <paramref name="maxNumberofServerInstances" /> меньше единицы или больше 254.— или —Параметр <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.— или —Значение <paramref name="inBufferSize" /> отрицательно.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95, которые не поддерживаются.</exception>
      <exception cref="T:System.IO.IOException">Превышено максимальное количество экземпляров сервера.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> с заданным именем канала, направлением канала, максимальным количеством экземпляров сервера, режимом передачи, параметрами канала, рекомендуемыми размерами входного и выходного буферов и режимом безопасности канала.</summary>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="maxNumberOfServerInstances">Максимальное число экземпляров сервера с одинаковыми именами.</param>
      <param name="transmissionMode">Одно из значений перечисления, определяющее режим передачи канала.</param>
      <param name="options">Одно из значений перечисления, определяющее способ открытия или создания канала.</param>
      <param name="inBufferSize">Положительное значение больше 0, указывающее размер входного буфера.</param>
      <param name="outBufferSize">Положительное значение больше 0, указывающее размер выходного буфера.</param>
      <param name="pipeSecurity">Объект, определяющий правила управления доступом и аудита безопасности для канала.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Значение параметра <paramref name="maxNumberofServerInstances" /> меньше единицы или больше 254.— или —Параметр <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.— или —Значение <paramref name="inBufferSize" /> отрицательно.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95, которые не поддерживаются.</exception>
      <exception cref="T:System.IO.IOException">Превышено максимальное количество экземпляров сервера.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> с заданным именем канала, направлением канала, максимальным количеством экземпляров сервера, режимом передачи, параметрами канала, рекомендуемыми размерами входного и выходного буферов, режимом безопасности канала и режимом наследования.</summary>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="maxNumberOfServerInstances">Максимальное число экземпляров сервера с одинаковыми именами.</param>
      <param name="transmissionMode">Одно из значений перечисления, определяющее режим передачи канала.</param>
      <param name="options">Одно из значений перечисления, определяющее способ открытия или создания канала.</param>
      <param name="inBufferSize">Положительное значение больше 0, указывающее размер входного буфера.</param>
      <param name="outBufferSize">Положительное значение больше 0, указывающее размер выходного буфера.</param>
      <param name="pipeSecurity">Объект, определяющий правила управления доступом и аудита безопасности для канала.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, может ли базовый дескриптор наследоваться дочерними процессами.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Значение параметра <paramref name="maxNumberofServerInstances" /> меньше единицы или больше 254.— или —Параметр <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.— или —Значение <paramref name="inBufferSize" /> отрицательно.— или —Параметр <paramref name="inheritability" /> не является допустимым значением <see cref="T:System.IO.HandleInheritability" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95, которые не поддерживаются.</exception>
      <exception cref="T:System.IO.IOException">Превышено максимальное количество экземпляров сервера.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability,System.IO.Pipes.PipeAccessRights)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> с заданным именем канала, направлением канала, максимальным количеством экземпляров сервера, режимом передачи, параметрами канала, рекомендуемыми размерами входного и выходного буферов, режимом безопасности канала, режимом наследования и правами доступа к каналу.</summary>
      <param name="pipeName">Имя канала.</param>
      <param name="direction">Одно из значений перечисления, определяющее направление канала.</param>
      <param name="maxNumberOfServerInstances">Максимальное число экземпляров сервера с одинаковыми именами.</param>
      <param name="transmissionMode">Одно из значений перечисления, определяющее режим передачи канала.</param>
      <param name="options">Одно из значений перечисления, определяющее способ открытия или создания канала.</param>
      <param name="inBufferSize">Размер входного буфера.</param>
      <param name="outBufferSize">Размер выходного буфера.</param>
      <param name="pipeSecurity">Объект, определяющий правила управления доступом и аудита безопасности для канала.</param>
      <param name="inheritability">Одно из значений перечисления, определяющее, может ли базовый дескриптор наследоваться дочерними процессами.</param>
      <param name="additionalAccessRights">Одно из значений перечисления, задающее права доступа для канала.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="pipeName" /> является строкой нулевой длины.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В качестве <paramref name="pipeName" /> задано "anonymous".— или —Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Значение параметра <paramref name="maxNumberofServerInstances" /> меньше единицы или больше 254.— или —Параметр <paramref name="options" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeOptions" />.— или —Значение <paramref name="inBufferSize" /> отрицательно.— или —Параметр <paramref name="inheritability" /> не является допустимым значением <see cref="T:System.IO.HandleInheritability" />.— или —Параметр <paramref name="additionalAccessRights" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeAccessRights" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Операционной системой является Windows Millennium Edition, Windows 98 или Windows 95, которые не поддерживаются.</exception>
      <exception cref="T:System.IO.IOException">Превышено максимальное количество экземпляров сервера.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.BeginWaitForConnection(System.AsyncCallback,System.Object)">
      <summary>Начинает асинхронную операцию ожидания подключения клиента.</summary>
      <returns>Объект, ссылающийся на асинхронный запрос.</returns>
      <param name="callback">Метод, который нужно вызывать, когда клиент подключается к объекту <see cref="T:System.IO.Pipes.NamedPipeServerStream" />.</param>
      <param name="state">Предоставляемый пользователем объект, являющийся отличительным признаком данного конкретного асинхронного запроса от других запросов.</param>
      <exception cref="T:System.InvalidOperationException">Канал не был открыт асинхронно.— или —Подключение канала уже установлено.— или —Дескриптор канала не задан.</exception>
      <exception cref="T:System.IO.IOException">Подключение канала разорвано.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.Disconnect">
      <summary>Отсоединяет текущее подключение.</summary>
      <exception cref="T:System.InvalidOperationException">Подключения канала еще не установлены.— или —Подключенный канал уже отсоединен.— или —Дескриптор канала не задан.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.EndWaitForConnection(System.IAsyncResult)">
      <summary>Заканчивает асинхронную операцию, чтобы ждать подключения клиента.</summary>
      <param name="asyncResult">Отложенный асинхронный запрос.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> имеет значение null;</exception>
      <exception cref="T:System.InvalidOperationException">Канал не был открыт асинхронно.— или —Дескриптор канала не задан.</exception>
      <exception cref="T:System.IO.IOException">Подключение канала разорвано.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.GetImpersonationUserName">
      <summary>Получает имя пользователя клиента на другом конце канала.</summary>
      <returns>Имя пользователя клиента на другом конце канала.</returns>
      <exception cref="T:System.InvalidOperationException">Подключения канала еще не установлены.— или —Подключенный канал уже отсоединен.— или —Дескриптор канала не задан.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.IO.IOException">Подключение канала разорвано.</exception>
    </member>
    <member name="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances">
      <summary>Представляет максимальное число экземпляров сервера, допускаемое системными ресурсами.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.RunAsClient(System.IO.Pipes.PipeStreamImpersonationWorker)">
      <summary>Вызывает делегата во время выполнения олицетворения клиента.</summary>
      <param name="impersonationWorker">Делегат, определяющий метод, который необходимо вызвать.</param>
      <exception cref="T:System.InvalidOperationException">Подключения канала еще не установлены.— или —Подключенный канал уже отсоединен.— или —Дескриптор канала не задан.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.IO.IOException">Подключение канала разорвано.— или —Произошла ошибка ввода-вывода.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnection">
      <summary>Ожидает подключения клиента к данному объекту <see cref="T:System.IO.Pipes.NamedPipeServerStream" />.</summary>
      <exception cref="T:System.InvalidOperationException">Подключение канала уже установлено.— или —Дескриптор канала не задан.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.IO.IOException">Подключение канала разорвано.</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRights">
      <summary>Определяет права доступа, которые используются при создании правил доступа и аудита.Это перечисление имеет атрибут <see cref="T:System.FlagsAttribute" />, поддерживающий битовую комбинацию составляющих его значений.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadData">
      <summary>Право на чтение данных из канала.Оно не включает в себя право на чтение атрибутов файловой системы, дополнительных атрибутов файловой системы или правил доступа и аудита.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteData">
      <summary>Право на запись данных в канал.Оно не включает в себя право на запись атрибутов файловой системы или дополнительных атрибутов файловой системы.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadAttributes">
      <summary>Указывает право на чтение атрибутов файловой системы из канала.Оно не включает в себя право на чтение данных, дополнительных атрибутов файловой системы или правил доступа и аудита.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteAttributes">
      <summary>Указывает право на запись атрибутов файловой системы в канал.Оно не включает в себя право на запись данных или дополнительных атрибутов файловой системы.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes">
      <summary>Право на чтение дополнительных атрибутов файловой системы из канала.Оно не включает в себя право на чтение данных, атрибутов файловой системы или правил доступа и аудита.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes">
      <summary>Право на запись дополнительных атрибутов файловой системы в канал.Оно не включает в себя право на запись данных или атрибутов файловой системы.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.CreateNewInstance">
      <summary>Указывает право на создание нового канала.При задании этого права также устанавливается право <see cref="F:System.IO.Pipes.PipeAccessRights.Synchronize" />.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Delete">
      <summary>Указывает право на удаление канала.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadPermissions">
      <summary>Право на чтение правил доступа и аудита из канала.Оно не включает в себя право на чтение данных, атрибутов файловой системы или дополнительных атрибутов файловой системы.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ChangePermissions">
      <summary>Указывает право на изменение правил безопасности и аудита, связанных с каналом.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.TakeOwnership">
      <summary>Указывает право на смену владельца канала.Обратите внимание, что владельцы канала имеют полный доступ к этому ресурсу.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Synchronize">
      <summary>Указывает, может ли приложение ждать синхронизации дескриптора канала с завершением операции ввода-вывода.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.FullControl">
      <summary>Указывает право на полный контроль над каналом, а также на изменение правил управления доступом и аудита.Это значение представляет комбинацию всех прав, определяемых данным перечислением.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Read">
      <summary>Указывает право на чтение из канала.Это право включает в себя права <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" /> и <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" />.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Write">
      <summary>Указывает право на запись в канал.Это право включает в себя права <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" /> и <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" />.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadWrite">
      <summary>Указывает право на чтение из канала и запись в канал.Это право включает в себя права <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" /> и <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" />.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity">
      <summary>Указывает право на внесение изменений в системный список управления доступом (SACL).</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRule">
      <summary>Представляет абстракцию записи управления доступом (ACE), определяющей правило доступа для канала.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.PipeAccessRule" /> с указанным удостоверением, правами доступа для канала и типом управления доступом.</summary>
      <param name="identity">Объект <see cref="T:System.Security.Principal.IdentityReference" />, инкапсулирующий ссылку на учетную запись пользователя.</param>
      <param name="rights">Одно из значений <see cref="T:System.IO.Pipes.PipeAccessRights" />, задающих тип операции, связанной с правилом доступа.</param>
      <param name="type">Одно из значений перечисления <see cref="T:System.Security.AccessControl.AccessControlType" />, с помощью которого можно задать запрет или разрешение на выполнение операции.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.PipeAccessRule" /> с указанным удостоверением, правами доступа для канала и типом управления доступом.</summary>
      <param name="identity">Имя учетной записи пользователя.</param>
      <param name="rights">Одно из значений <see cref="T:System.IO.Pipes.PipeAccessRights" />, задающих тип операции, связанной с правилом доступа.</param>
      <param name="type">Одно из значений перечисления <see cref="T:System.Security.AccessControl.AccessControlType" />, с помощью которого можно задать запрет или разрешение на выполнение операции.</param>
    </member>
    <member name="P:System.IO.Pipes.PipeAccessRule.PipeAccessRights">
      <summary>Получает флаги <see cref="T:System.IO.Pipes.PipeAccessRights" />, связанные с текущим объектом <see cref="T:System.IO.Pipes.PipeAccessRule" />.</summary>
      <returns>Битовая комбинация значений <see cref="T:System.IO.Pipes.PipeAccessRights" />.</returns>
    </member>
    <member name="T:System.IO.Pipes.PipeAuditRule">
      <summary>Представляет абстракцию записи управления доступом (ACE), определяющей правило аудита для канала.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.PipeAuditRule" /> для учетной записи пользователя, указанной в объекте <see cref="T:System.Security.Principal.IdentityReference" />.</summary>
      <param name="identity">Объект <see cref="T:System.Security.Principal.IdentityReference" />, инкапсулирующий ссылку на учетную запись пользователя.</param>
      <param name="rights">Одно из значений <see cref="T:System.IO.Pipes.PipeAccessRights" />, задающих тип операции, связанной с правилом доступа.</param>
      <param name="flags">Одно из значений <see cref="T:System.Security.AccessControl.AuditFlags" />, задающих, когда следует проводить аудит.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.PipeAuditRule" /> для заданной учетной записи пользователя.</summary>
      <param name="identity">Имя учетной записи пользователя.</param>
      <param name="rights">Одно из значений <see cref="T:System.IO.Pipes.PipeAccessRights" />, задающих тип операции, связанной с правилом доступа.</param>
      <param name="flags">Одно из значений <see cref="T:System.Security.AccessControl.AuditFlags" />, задающих, когда следует проводить аудит.</param>
    </member>
    <member name="P:System.IO.Pipes.PipeAuditRule.PipeAccessRights">
      <summary>Получает флаги <see cref="T:System.IO.Pipes.PipeAccessRights" />, связанные с текущим объектом <see cref="T:System.IO.Pipes.PipeAuditRule" />.</summary>
      <returns>Битовая комбинация значений <see cref="T:System.IO.Pipes.PipeAccessRights" />. </returns>
    </member>
    <member name="T:System.IO.Pipes.PipeDirection">
      <summary>Задает направление канала.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.In">
      <summary>Указывает, что канал входящий.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.Out">
      <summary>Указывает, что канал исходящий.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.InOut">
      <summary>Указывает, что канал двусторонний.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeOptions">
      <summary>Предоставляет параметры для создания объекта <see cref="T:System.IO.Pipes.PipeStream" />.This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.None">
      <summary>Указывает, что дополнительных параметров не предусмотрено.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.WriteThrough">
      <summary>Указывает, что запись в системе должна выполняться через любой промежуточный кэш с переходом непосредственно в канал.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.Asynchronous">
      <summary>Указывает, что канал может использоваться для асинхронного чтения и записи.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeSecurity">
      <summary>Представляет правила управления доступом и аудита безопасности для канала.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRightType">
      <summary>Возвращает защищаемый объект <see cref="T:System.Type" />, связанный с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <returns>Тип защищаемого объекта, связанного с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AccessRule" /> class with the specified values.</summary>
      <returns>The <see cref="T:System.Security.AccessControl.AccessRule" /> object that this method creates.</returns>
      <param name="identityReference">Удостоверение, к которому применяется правило доступа.Это должен быть объект, который можно привести к типу объекта <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
      <param name="accessMask">Маска доступа данного правила.Маска доступа представляет собой группу из 32 битов, значение каждого из которых определяется отдельными интеграторами.</param>
      <param name="isInherited">true, если данное правило наследуется из родительского контейнера, в противном случае — false.</param>
      <param name="inheritanceFlags">Одно из значений <see cref="T:System.Security.AccessControl.InheritanceFlags" />, задающих свойства наследования правила доступа.</param>
      <param name="propagationFlags">Одно из значений <see cref="T:System.Security.AccessControl.PropagationFlags" />, задающих возможность автоматического распространения наследуемых правил доступа.Флаги распространения игнорируются, если параметр <paramref name="inheritanceFlags" /> имеет значение <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
      <param name="type">Указывает допустимый тип управления доступом.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="type" /> specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="identityReference" /> равно null. –или–<paramref name="accessMask" /> is zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> не принадлежит к типу <see cref="T:System.Security.Principal.SecurityIdentifier" /> или к типу (такому, как <see cref="T:System.Security.Principal.NTAccount" />), допускающему преобразование в тип <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRuleType">
      <summary>Возвращает объект <see cref="T:System.Type" />, связанный с правилами доступа для текущего объекта <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <returns>Тип объекта, связанного с правилами доступа для текущего объекта <see cref="T:System.IO.Pipes.PipeSecurity" />.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Добавляет правило доступа в список управления доступом на уровне пользователей (DACL), связанный с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <param name="rule">Добавляемое правило доступа.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="rule" /> — null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>Добавляет правило аудита в системный список управления доступом (SACL), связанный с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <param name="rule">Добавляемое правило аудита.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="rule" /> — null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.AuditRule" /> с использованием указанных значений.</summary>
      <returns>Объект <see cref="T:System.Security.AccessControl.AuditRule" />, созданный данным методом.</returns>
      <param name="identityReference">Удостоверение, к которому применяется правило доступа.Это должен быть объект, который можно привести к типу объекта <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
      <param name="accessMask">Маска доступа данного правила.Маска доступа представляет собой группу из 32 битов, значение каждого из которых определяется отдельными интеграторами.</param>
      <param name="isInherited">true, если данное правило наследуется из родительского контейнера, в противном случае — false.</param>
      <param name="inheritanceFlags">Одно из значений <see cref="T:System.Security.AccessControl.InheritanceFlags" />, задающих свойства наследования правила доступа.</param>
      <param name="propagationFlags">Одно из значений <see cref="T:System.Security.AccessControl.PropagationFlags" />, задающих возможность автоматического распространения наследуемых правил доступа.Флаги распространения игнорируются, если параметр <paramref name="inheritanceFlags" /> имеет значение <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
      <param name="flags">Одно из значений <see cref="T:System.Security.AccessControl.AuditFlags" />, задающих допустимый тип управления доступом.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Свойство <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" /> или <paramref name="flags" /> задает недопустимое значение.</exception>
      <exception cref="T:System.ArgumentNullException">Значение свойства <paramref name="identityReference" /> равно null. –или–Значение свойства <paramref name="accessMask" /> равно нулю.</exception>
      <exception cref="T:System.ArgumentException">Свойство <paramref name="identityReference" /> не принадлежит к типу <see cref="T:System.Security.Principal.SecurityIdentifier" /> или к типу (такому, как <see cref="T:System.Security.Principal.NTAccount" />), допускающему преобразование в тип <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AuditRuleType">
      <summary>Возвращает объект <see cref="T:System.Type" />, связанный с правилами аудита для текущего объекта <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <returns>Тип объекта, связанного с правилами аудита для текущего объекта <see cref="T:System.IO.Pipes.PipeSecurity" />.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)">
      <summary>Сохраняет указанные разделы дескриптора безопасности, связанного с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />, в постоянном хранилище.</summary>
      <param name="handle">Дескриптор защищаемого объекта, с которым связан текущий объект <see cref="T:System.IO.Pipes.PipeSecurity" />.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.String)">
      <summary>Сохраняет указанные разделы дескриптора безопасности, связанного с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />, в постоянном хранилище.</summary>
      <param name="name">Имя защищаемого объекта, с которым связан текущий объект <see cref="T:System.IO.Pipes.PipeSecurity" />.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Удаляет правило доступа из списка управления доступом на уровне пользователей (DACL), связанного с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <returns>true, если операция выполнена успешно, в противном случае — false.</returns>
      <param name="rule">Удаляемое правило доступа.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="rule" /> — null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)">
      <summary>Удаляет указанное правило доступа из списка управления доступом на уровне пользователей (DACL), связанного с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <param name="rule">Удаляемое правило доступа.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="rule" /> — null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>Удаляет правило аудита из системного списка управления доступом (SACL), связанного с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <returns>true, если правило аудита удалено, в противном случае — false</returns>
      <param name="rule">Удаляемое правило аудита.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="rule" /> — null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)">
      <summary>Удаляет все правила аудита с тем же идентификатором безопасности, что и у заданного правила аудита, из системного списка управления доступом (SACL), связанного с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <param name="rule">Удаляемое правило аудита.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="rule" /> — null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)">
      <summary>Удаляет указанное правило аудита из системного списка управления доступом (SACL), связанного с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <param name="rule">Удаляемое правило аудита.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="rule" /> — null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Удаляет все правила доступа из списка управления доступом на уровне пользователей (DACL), связанного с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />, а затем добавляет указанное правило доступа.</summary>
      <param name="rule">Добавляемое правило доступа.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="rule" /> — null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Задает правило доступа в списке управления доступом на уровне пользователей (DACL), связанном с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <param name="rule">Задаваемое правило.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="rule" /> — null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>Задает правило аудита в системном списке управления доступом (SACL), связанном с текущим объектом <see cref="T:System.IO.Pipes.PipeSecurity" />.</summary>
      <param name="rule">Задаваемое правило.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="rule" /> — null.</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeStream">
      <summary>Предоставляет объект <see cref="T:System.IO.Stream" /> для канала, поддерживающий анонимные и именованные каналы.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.PipeStream" /> с использованием указанного значения <see cref="T:System.IO.Pipes.PipeDirection" /> и размера буфера.</summary>
      <param name="direction">Одно из значений <see cref="T:System.IO.Pipes.PipeDirection" />, указывающих направление объекта канала.</param>
      <param name="bufferSize">Положительное значение типа <see cref="T:System.Int32" /> (большее или равное 0), соответствующее размеру буфера.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Значение параметра <paramref name="bufferSize" /> меньше 0.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.IO.Pipes.PipeStream" /> с использованием указанных значений <see cref="T:System.IO.Pipes.PipeDirection" />, <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> и размера буфера.</summary>
      <param name="direction">Одно из значений <see cref="T:System.IO.Pipes.PipeDirection" />, указывающих направление объекта канала.</param>
      <param name="transmissionMode">Одно из значений <see cref="T:System.IO.Pipes.PipeTransmissionMode" />, указывающих режим передачи для объекта канала.</param>
      <param name="outBufferSize">Положительное значение типа <see cref="T:System.Int32" /> (большее или равное 0), соответствующее размеру буфера.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="direction" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeDirection" />.— или —Параметр <paramref name="transmissionMode" /> не является допустимым значением <see cref="T:System.IO.Pipes.PipeTransmissionMode" />.— или —Значение параметра <paramref name="bufferSize" /> меньше 0.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Начинает операцию асинхронного чтения.</summary>
      <returns>Объект <see cref="T:System.IAsyncResult" />, который ссылается на асинхронное чтение.</returns>
      <param name="buffer">Буфер, в который необходимо считать данные.</param>
      <param name="offset">Смещение в <paramref name="buffer" /> (в байтах), с которого начинается чтение.</param>
      <param name="count">Максимальное число байтов, предназначенных для чтения.</param>
      <param name="callback">Метод, вызываемый после завершения операции асинхронного чтения.</param>
      <param name="state">Предоставляемый пользователем объект, являющийся отличительным признаком данного конкретного запроса на асинхронное чтение от других запросов.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше 0.— или —Значение параметра <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="count" /> больше числа байтов в буфере <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.NotSupportedException">Канал не поддерживает операции чтения.</exception>
      <exception cref="T:System.InvalidOperationException">Канал разорван, ожидает соединения, либо дескриптор не был установлен.</exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла иная ошибка ввода/вывода.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Начинает операцию асинхронной записи.</summary>
      <returns>Объект <see cref="T:System.IAsyncResult" />, который ссылается на операцию асинхронной записи.</returns>
      <param name="buffer">Буфер, содержащий данные для записи в текущий поток.</param>
      <param name="offset">Отсчитываемое от нуля смещение в <paramref name="buffer" /> (в байтах), с которого начинается копирование байтов в текущий поток.</param>
      <param name="count">Максимальное число байтов для записи.</param>
      <param name="callback">Метод, вызываемый после завершения операции асинхронной записи.</param>
      <param name="state">Предоставляемый пользователем объект, являющийся отличительным признаком данного конкретного запроса на асинхронную запись от других запросов.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше 0.— или —Значение параметра <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="count" /> больше числа байтов в буфере <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.NotSupportedException">Канал не поддерживает операции записи.</exception>
      <exception cref="T:System.InvalidOperationException">Канал разорван, ожидает соединения, либо дескриптор не был установлен.</exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла иная ошибка ввода/вывода.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanRead">
      <summary>Получает значение, определяющее в текущем потоке наличие поддержки операций чтения.</summary>
      <returns>true, если поток поддерживает операции чтения, в противном случае — false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanSeek">
      <summary>Получает значение, показывающее, поддерживаются ли в текущем потоке операции поиска.</summary>
      <returns>Значение false во всех случаях.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanWrite">
      <summary>Получает значение, показывающее, поддерживаются ли в текущем потоке операции записи.</summary>
      <returns>true, если поток поддерживает операции записи, в противном случае — false.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckPipePropertyOperations">
      <summary>Проверяет, допускает ли состояние канала получение или установку свойств.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckReadOperations">
      <summary>Проверяет, находится ли канал в подключенном состоянии для выполнения операций чтения.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckWriteOperations">
      <summary>Проверяет, находится ли канал в подключенном состоянии для выполнения операций записи.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.IO.Pipes.PipeStream" /> (при необходимости освобождает и управляемые ресурсы).</summary>
      <param name="disposing">Значение true, чтобы освободить все ресурсы (управляемые и неуправляемые); значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
      <summary>Завершает отложенный запрос асинхронного чтения.</summary>
      <returns>Количество прочитанных байтов.Возвращаемое значение, равное нулю, обозначает конец потока (канал был закрыт).</returns>
      <param name="asyncResult">Ссылка на отложенный асинхронный запрос.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> имеет значение null; </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> не был возвращен методом <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> текущего потока. </exception>
      <exception cref="T:System.IO.IOException">Поток закрылся или произошла внутренняя ошибка.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
      <summary>Завершает отложенный запрос асинхронной записи.</summary>
      <param name="asyncResult">Ссылка на отложенный асинхронный запрос.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> имеет значение null; </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> не был возвращен методом <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> текущего потока. </exception>
      <exception cref="T:System.IO.IOException">Поток закрылся или произошла внутренняя ошибка.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Flush">
      <summary>Очищает буфер для текущего потока и вызывает запись всех буферизованных данных в соответствующее устройство.</summary>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.NotSupportedException">Канал не поддерживает операции записи.</exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла иная ошибка ввода/вывода.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.GetAccessControl">
      <summary>Получает объект <see cref="T:System.IO.Pipes.PipeSecurity" />, который инкапсулирует записи списка управления доступом (ACL) для канала, описываемого текущим объектом <see cref="T:System.IO.Pipes.PipeStream" />.</summary>
      <returns>Объект <see cref="T:System.IO.Pipes.PipeSecurity" />, который инкапсулирует записи списка управления доступом (ACL) для канала, описываемого текущим объектом <see cref="T:System.IO.Pipes.PipeStream" />.</returns>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
      <exception cref="T:System.InvalidOperationException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
      <exception cref="T:System.NotSupportedException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.InBufferSize">
      <summary>Получает размер (в байтах) входящего буфера для канала.</summary>
      <returns>Целочисленное значение, представляющее размер входящего буфера (в байтах).</returns>
      <exception cref="T:System.NotSupportedException">Поток недоступен для чтения.</exception>
      <exception cref="T:System.InvalidOperationException">Канал ожидает соединения.</exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла иная ошибка ввода/вывода.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
      <summary>Инициализирует объект <see cref="T:System.IO.Pipes.PipeStream" /> на основе указанного объекта <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" />.</summary>
      <param name="handle">Объект <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> для инициализируемого канала.</param>
      <param name="isExposed">Значение true для предоставления дескриптора, в противном случае — false.</param>
      <param name="isAsync">true, если дескриптор открыт асинхронно, в противном случае — false.</param>
      <exception cref="T:System.IO.IOException">Дескриптор не может быть привязан к каналу.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsAsync">
      <summary>Получает значение, показывающее, как был открыт объект <see cref="T:System.IO.Pipes.PipeStream" /> — синхронно или асинхронно.</summary>
      <returns>true, если объект <see cref="T:System.IO.Pipes.PipeStream" /> был открыт асинхронно, в противном случае — false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsConnected">
      <summary>Возвращает или задает значение, показывающее, подключен ли объект <see cref="T:System.IO.Pipes.PipeStream" />.</summary>
      <returns>Значение true, если объект <see cref="T:System.IO.Pipes.PipeStream" /> подключен, в противном случае — false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsHandleExposed">
      <summary>Получает значение, показывающее, предоставлен ли дескриптор объекта <see cref="T:System.IO.Pipes.PipeStream" />.</summary>
      <returns>Значение true, если дескриптор объекта <see cref="T:System.IO.Pipes.PipeStream" /> предоставлен; в противном случае — false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsMessageComplete">
      <summary>Получает значение, указывающее, содержатся ли еще данные в сообщении, возвращенном из последней операции чтения.</summary>
      <returns>true, если в сообщении больше нет символов для чтения, в противном случае — false.</returns>
      <exception cref="T:System.InvalidOperationException">Канал не подключен.— или —Дескриптор канала не задан.— или —Значение свойства <see cref="P:System.IO.Pipes.PipeStream.ReadMode" /> канала отлично от <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Length">
      <summary>Получает длину потока в байтах.</summary>
      <returns>0 во всех случаях.</returns>
      <exception cref="T:System.NotSupportedException">Возникает всегда.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.OutBufferSize">
      <summary>Получает размер (в байтах) исходящего буфера для канала.</summary>
      <returns>Размер исходящего буфера в байтах.</returns>
      <exception cref="T:System.NotSupportedException">Поток недоступен для записи.</exception>
      <exception cref="T:System.InvalidOperationException">Канал ожидает соединения.</exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла иная ошибка ввода/вывода.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Position">
      <summary>Возвращает или задает текущую позицию в текущем потоке.</summary>
      <returns>0 во всех случаях.</returns>
      <exception cref="T:System.NotSupportedException">Возникает всегда.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Чтение блока байтов из потока и запись данных в заданный буфер.</summary>
      <returns>Общее число байтов, считанных в <paramref name="buffer" />.Это число может быть меньше количества запрошенных байтов, если это количество байтов в настоящее время недоступно, а также равняться нулю, если достигнут конец потока.</returns>
      <param name="buffer">При возвращении управления данным методом содержит указанный массив байтов, в котором значения между <paramref name="offset" /> и (<paramref name="offset" /> + <paramref name="count" /> - 1) заменены байтами, считанными из текущего источника.</param>
      <param name="offset">Смещение в массиве <paramref name="buffer" /> (в байтах), начиная с которого будут размещаться считанные байты.</param>
      <param name="count">Максимальное число байтов, предназначенных для чтения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше 0.— или —Значение параметра <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="count" /> больше числа байтов в буфере <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.NotSupportedException">Канал не поддерживает операции чтения.</exception>
      <exception cref="T:System.InvalidOperationException">Канал разорван, ожидает соединения, либо дескриптор не был установлен.</exception>
      <exception cref="T:System.IO.IOException">Произошла какая-либо ошибка ввода-вывода.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.ReadByte">
      <summary>Считывает байт из канала.</summary>
      <returns>Байт, приведенный к типу <see cref="T:System.Int32" />, или -1, если достигнут конец потока (канал закрыт).</returns>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.NotSupportedException">Канал не поддерживает операции чтения.</exception>
      <exception cref="T:System.InvalidOperationException">Канал разорван, ожидает соединения, либо дескриптор не был установлен.</exception>
      <exception cref="T:System.IO.IOException">Произошла какая-либо ошибка ввода-вывода.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.ReadMode">
      <summary>Возвращает или задает режим чтения для объекта <see cref="T:System.IO.Pipes.PipeStream" />.</summary>
      <returns>Одно из значений <see cref="T:System.IO.Pipes.PipeTransmissionMode" />, которое указывает, как объект <see cref="T:System.IO.Pipes.PipeStream" /> читает данные из канала.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Заданное значение не является допустимым значением <see cref="T:System.IO.Pipes.PipeTransmissionMode" />.</exception>
      <exception cref="T:System.NotSupportedException">Заданное значение не поддерживается значением <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> для этого потока канала.</exception>
      <exception cref="T:System.InvalidOperationException">Дескриптор не установлен.— или —Канал ожидает соединения с именованным клиентом.</exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла ошибка ввода/вывода с именованным клиентом.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.SafePipeHandle">
      <summary>Получает безопасный дескриптор для локального конца канала, инкапсулируемого текущим объектом <see cref="T:System.IO.Pipes.PipeStream" />.</summary>
      <returns>Объект <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> для канала, инкапсулируемого текущим объектом <see cref="T:System.IO.Pipes.PipeStream" />.</returns>
      <exception cref="T:System.InvalidOperationException">Дескриптор канала не задан.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Устанавливает заданное значение в качестве текущей позиции в текущем потоке.</summary>
      <returns>Новая позиция в потоке.</returns>
      <param name="offset">Смещение относительно <paramref name="origin" />, задающее место, с которого начинается поиск.</param>
      <param name="origin">Описывает начальную, конечную или текущую позицию как опорную точку для <paramref name="offset" />, используя значение типа <see cref="T:System.IO.SeekOrigin" />.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
      <summary>Применяет записи списка управления доступом (ACL), заданные объектом <see cref="T:System.IO.Pipes.PipeSecurity" />, к каналу, заданному объектом <see cref="T:System.IO.Pipes.PipeStream" />.</summary>
      <param name="pipeSecurity">Объект <see cref="T:System.IO.Pipes.PipeSecurity" />, задающий запись списка управления доступом (ACL), которую необходимо применить к текущему каналу.</param>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeSecurity" /> имеет значение null;</exception>
      <exception cref="T:System.UnauthorizedAccessException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
      <exception cref="T:System.InvalidOperationException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
      <exception cref="T:System.NotSupportedException">Внутренний вызов для установки информации о безопасности произошел с ошибкой.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
      <summary>Задает указанное значение для длины текущего потока.</summary>
      <param name="value">Новая длина потока.</param>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.TransmissionMode">
      <summary>Получает режим передачи, поддерживаемый текущим каналом.</summary>
      <returns>Одно из значений <see cref="T:System.IO.Pipes.PipeTransmissionMode" />, указывающих режим передачи, поддерживаемый текущим каналом.</returns>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.InvalidOperationException">Дескриптор не установлен.— или —Канал ожидает соединения в процессе анонимной клиент-серверной операции или с именованным клиентом. </exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла иная ошибка ввода/вывода.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
      <summary>Ожидает завершения считывания всех отправленных байтов на противоположном конце канала.</summary>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.NotSupportedException">Канал не поддерживает операции записи.</exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла иная ошибка ввода/вывода.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Записывает в текущий поток блок байтов, используя данные из буфера.</summary>
      <param name="buffer">Буфер, содержащий данные для записи в канал.</param>
      <param name="offset">Отсчитываемое от нуля смещение в <paramref name="buffer" /> (в байтах), с которого начинается копирование байтов в текущий поток.</param>
      <param name="count">Максимальное число байтов для записи в текущий поток.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше 0.— или —Значение параметра <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="count" /> больше числа байтов в буфере <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.NotSupportedException">Канал не поддерживает операции записи.</exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла иная ошибка ввода/вывода.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
      <summary>Выполняет запись байта в текущий поток.</summary>
      <param name="value">Байт, записываемый в поток.</param>
      <exception cref="T:System.ObjectDisposedException">Канал закрыт.</exception>
      <exception cref="T:System.NotSupportedException">Канал не поддерживает операции записи.</exception>
      <exception cref="T:System.InvalidOperationException">Канал разорван, ожидает соединения, либо дескриптор не был установлен.</exception>
      <exception cref="T:System.IO.IOException">Канал разорван или возникла иная ошибка ввода/вывода.</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeStreamImpersonationWorker">
      <summary>Представляет метод, который необходимо вызвать как клиент.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeTransmissionMode">
      <summary>Задает режим передачи для канала.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Byte">
      <summary>Указывает, что данные в канале передаются и считываются как поток байтов.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Message">
      <summary>Указывает, что данные в канале передаются и считываются как поток сообщений.</summary>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>Предоставляет набор методов типа static (Shared в Visual Basic) для выполнения запросов к объектам, реализующим интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>Применяет к последовательности агрегатную функцию.</summary>
      <returns>Конечное агрегатное значение.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, для которого выполняется статистическая операция.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="func" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>Применяет к последовательности агрегатную функцию.Указанное начальное значение используется в качестве исходного значения агрегатной операции.</summary>
      <returns>Конечное агрегатное значение.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, для которого выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="func" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Применяет к последовательности агрегатную функцию.Указанное начальное значение служит исходным значением для агрегатной операции, а указанная функция используется для выбора результирующего значения.</summary>
      <returns>Преобразованное конечное агрегатное значение.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, для которого выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <param name="resultSelector">Функция, преобразующая конечное агрегатное значение в результирующее значение.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <typeparam name="TResult">Тип результирующего значения.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="func" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Проверяет, все ли элементы последовательности удовлетворяют условию.</summary>
      <returns>true, если каждый элемент исходной последовательности проходит проверку, определяемую указанным предикатом, или если последовательность пуста; в противном случае — false.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы, к которым применяется предикат.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Проверяет, содержит ли последовательность какие-либо элементы.</summary>
      <returns>true, если исходная последовательность содержит какие-либо элементы, в противном случае — false.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, проверяемый на наличие элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Проверяет, удовлетворяет ли какой-либо элемент последовательности заданному условию.</summary>
      <returns>true, если какие-либо элементы исходной последовательности проходят проверку, определяемую указанным предикатом; в противном случае — false.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, к элементам которого применяется предикат.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает входные данные, приведенные к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Входная последовательность, приведенная к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Последовательность, которая приводится к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Decimal" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Double" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int32" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int64" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" /> обнуляемого типа, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" /> обнуляемого типа, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />обнуляемого типа, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" /> обнуляемого типа, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" /> обнуляемого типа, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Single" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Decimal" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Double" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int32" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int64" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов исходной последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Double" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int32" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int64" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Single" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Single" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>Преобразовывает элементы объекта <see cref="T:System.Collections.IEnumerable" /> в заданный тип.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит все элементы исходной последовательности, преобразованные в заданный тип.</returns>
      <param name="source">Объект <see cref="T:System.Collections.IEnumerable" />, содержащий преобразуемые элементы.</param>
      <typeparam name="TResult">Тип, в который преобразуются элементы объекта <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidCastException">Элемент последовательности не может быть приведен к типу <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Объединяет две последовательности.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объединенные элементы двух входных последовательностей.</returns>
      <param name="first">Первая из объединяемых последовательностей.</param>
      <param name="second">Последовательность, объединяемая с первой последовательностью.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Определяет, содержится ли указанный элемент в последовательности, используя компаратор проверки на равенство по умолчанию.</summary>
      <returns>true, если исходная последовательность содержит элемент с указанным значением, в противном случае — false.</returns>
      <param name="source">Последовательность, в которой требуется найти данное значение.</param>
      <param name="value">Значение, которое требуется найти в последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Определяет, содержит ли последовательность заданный элемент, используя указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true, если исходная последовательность содержит элемент с указанным значением, в противном случае — false.</returns>
      <param name="source">Последовательность, в которой требуется найти данное значение.</param>
      <param name="value">Значение, которое требуется найти в последовательности.</param>
      <param name="comparer">Компаратор проверки на равенство, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает количество элементов в последовательности.</summary>
      <returns>Число элементов во входной последовательности.</returns>
      <param name="source">Последовательность, элементы которой требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает число, представляющее количество элементов последовательности, удовлетворяющих заданному условию.</summary>
      <returns>Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.</returns>
      <param name="source">Последовательность, элементы которой требуется проверить и подсчитать.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает элементы указанной последовательности или одноэлементную коллекцию, содержащую значение параметра типа по умолчанию, если последовательность пуста.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий значение по умолчанию для типа <paramref name="TSource" />, если параметр <paramref name="source" /> пуст; в противном случае — значение <paramref name="source" />.</returns>
      <param name="source">Последовательность, для которой возвращается значение по умолчанию, если она пуста.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Возвращает элементы указанной последовательности или одноэлементную коллекцию, содержащую указанное значение, если последовательность пуста.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий значение <paramref name="defaultValue" />, если последовательность <paramref name="source" /> пуста; в противном случае возвращается <paramref name="source" />.</returns>
      <param name="source">Последовательность, для которой возвращается указанное значение, если она пуста.</param>
      <param name="defaultValue">Значение, возвращаемое в случае пустой последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий различающиеся элементы из исходной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется удалить дубликаты элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Возвращает различающиеся элементы последовательности, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий различающиеся элементы из исходной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется удалить дубликаты элементов.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Возвращает элемент по указанному индексу в последовательности.</summary>
      <returns>Элемент, находящийся в указанной позиции в исходной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется извлечь.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="index" /> меньше 0 либо больше или равно числу элементов последовательности <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Возвращает элемент по указанному индексу в последовательности или значение по умолчанию, если индекс вне допустимого диапазона.</summary>
      <returns>default(<paramref name="TSource" />), если индекс указывает позицию вне исходной последовательности, в противном случае — элемент, находящийся в указанной позиции в исходной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется извлечь.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>Возвращает пустую коллекцию <see cref="T:System.Collections.Generic.IEnumerable`1" /> с указанным аргументом типа.</summary>
      <returns>Пустая коллекция <see cref="T:System.Collections.Generic.IEnumerable`1" /> с аргументом типа <paramref name="TResult" />.</returns>
      <typeparam name="TResult">Тип, присваиваемый параметру типа возвращаемого универсального интерфейса <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность, представляющая собой разность двух последовательностей как множеств.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется извлечь элементы, отсутствующие в последовательности <paramref name="second" />.</param>
      <param name="second">Последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которой, входящие также в первую последовательность, должны быть исключены из возвращаемой последовательности.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Последовательность, представляющая собой разность двух последовательностей как множеств.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется извлечь элементы, отсутствующие в последовательности <paramref name="second" />.</param>
      <param name="second">Последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которой, входящие также в первую последовательность, должны быть исключены из возвращаемой последовательности.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает первый элемент последовательности.</summary>
      <returns>Первый элемент указанной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, первый элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает первый элемент последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Первый элемент последовательности, который прошел проверку, определенную указанной функцией предиката.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию предиката <paramref name="predicate" />.–либо–Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>default(<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста, в противном случае — первый элемент последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, первый элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает первый удовлетворяющий условию элемент последовательности или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <returns>default(<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста или ни один ее элемент не прошел проверку, определенную предикатом <paramref name="predicate" />; в противном случае — первый элемент последовательности <paramref name="source" />, прошедший проверку, определенную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Объект IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; в C# или IEnumerable(Of IGrouping(Of TKey, TSource)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и сравнивает ключи с помощью указанного компаратора.</summary>
      <returns>Объект IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; в C# или IEnumerable(Of IGrouping(Of TKey, TSource)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит коллекцию объектов и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и проецирует элементы каждой группы с помощью указанной функции.</summary>
      <returns>Объект IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; в C# или IEnumerable(Of IGrouping(Of TKey, TElement)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит коллекцию объектов типа <paramref name="TElement" /> и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с функцией селектора ключа.Ключи сравниваются с помощью компаратора, элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Объект IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; в C# или IEnumerable(Of IGrouping(Of TKey, TElement)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит коллекцию объектов типа <paramref name="TElement" /> и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов каждого объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Значения ключей сравниваются с помощью указанного компаратора, элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов каждого объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.</summary>
      <returns>Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Ключи сравниваются с использованием заданного компаратора.</summary>
      <returns>Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате соединения двух последовательностей с группировкой.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.Для сравнения ключей используется указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате соединения двух последовательностей с группировкой.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит пересечение множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в последовательность <paramref name="second" />.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в первую последовательность.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит пересечение множеств, представленных двумя последовательностями, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в последовательность <paramref name="second" />.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в первую последовательность.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате внутреннего соединения двух последовательностей.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.Для сравнения ключей используется указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате внутреннего соединения двух последовательностей.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает последний элемент последовательности.</summary>
      <returns>Значение, находящееся в последней позиции исходной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, последний элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает последний элемент последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Последний элемент последовательности, который прошел проверку, определенную указанной функцией предиката.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию предиката <paramref name="predicate" />.–либо–Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>default(<paramref name="TSource" />), если исходная последовательность пуста, в противном случае — последний элемент коллекции <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, последний элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает последний элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <returns>default(<paramref name="TSource" />), если последовательность пуста или ни один ее элемент не прошел проверку функцией предиката, в противном случае — последний элемент, прошедший проверку функцией предиката.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает значение типа <see cref="T:System.Int64" />, представляющее общее число элементов в последовательности.</summary>
      <returns>Число элементов в исходной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Число элементов больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает значение типа <see cref="T:System.Int64" />, представляющее число элементов последовательности, удовлетворяющих заданному условию.</summary>
      <returns>Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Число найденных элементов больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Decimal" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений типа <see cref="T:System.Decimal" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Double" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений типа <see cref="T:System.Double" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Int32" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений типа <see cref="T:System.Int32" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Int64" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений типа <see cref="T:System.Int64" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Возвращает максимальное значение в последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic, соответствующее максимальному значению последовательности. </returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" /> обнуляемого типа, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Возвращает максимальное значение в последовательности значений <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" /> обнуляемого типа, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Возвращает максимальное значение в последовательности значений <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic, соответствующее максимальному значению последовательности. </returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" /> обнуляемого типа, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Возвращает максимальное значение в последовательности значений <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic, соответствующее максимальному значению последовательности. </returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" /> обнуляемого типа, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Возвращает максимальное значение в последовательности значений <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" /> обнуляемого типа, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Single" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений типа <see cref="T:System.Single" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает максимальное значение, содержащееся в универсальной последовательности.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение типа <see cref="T:System.Decimal" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение типа <see cref="T:System.Double" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение типа <see cref="T:System.Int32" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение типа <see cref="T:System.Int64" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение типа <see cref="T:System.Single" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Вызывает функцию преобразования для каждого элемента универсальной последовательности и возвращает максимальное результирующее значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Decimal" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений типа <see cref="T:System.Decimal" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Double" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений типа <see cref="T:System.Double" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Int32" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений типа <see cref="T:System.Int32" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Int64" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений типа <see cref="T:System.Int64" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Возвращает минимальное значение в последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" /> обнуляемого типа, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Возвращает минимальное значение в последовательности значений <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" /> обнуляемого типа, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Возвращает минимальное значение в последовательности значений <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" /> обнуляемого типа, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Возвращает минимальное значение в последовательности значений <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" /> обнуляемого типа, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Возвращает минимальное значение в последовательности значений <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" /> обнуляемого типа, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений типа <see cref="T:System.Single" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений типа <see cref="T:System.Single" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает минимальное значение, содержащееся в универсальной последовательности.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение типа <see cref="T:System.Decimal" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение типа <see cref="T:System.Double" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение типа <see cref="T:System.Int32" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение типа <see cref="T:System.Int64" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <returns>Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение типа <see cref="T:System.Single" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Вызывает функцию преобразования для каждого элемента универсальной последовательности и возвращает минимальное результирующее значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>Выполняет фильтрацию элементов объекта <see cref="T:System.Collections.IEnumerable" /> по заданному типу.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности типа <paramref name="TResult" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.IEnumerable" />, элементы которого следует фильтровать.</param>
      <typeparam name="TResult">Тип, по которому фильтруются элементы последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Сортирует элементы последовательности в порядке возрастания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Сортирует элементы последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Сортирует элементы последовательности в порядке убывания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Сортирует элементы последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>Генерирует последовательность целых чисел в заданном диапазоне.</summary>
      <returns>Объект IEnumerable&lt;Int32&gt; в C# или IEnumerable(Of Int32) в Visual Basic, содержащий диапазон последовательных целых чисел.</returns>
      <param name="start">Значение первого целого числа для последовательности.</param>
      <param name="count">Количество генерируемых последовательных целых чисел.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="count" /> меньше 0.–либо–<paramref name="start" /> + <paramref name="count" /> -1 больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>Генерирует последовательность, содержащую одно повторяющееся значение.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий повторяющееся значение.</returns>
      <param name="element">Повторяемое значение.</param>
      <param name="count">Требуемое число повторений данного значения в создаваемой последовательности.</param>
      <typeparam name="TResult">Тип значения, которое будет повторяться в результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="count" /> меньше 0.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Изменяет порядок элементов последовательности на противоположный.</summary>
      <returns>Последовательность, элементы которой соответствуют элементам входной последовательности, но следуют в противоположном порядке.</returns>
      <param name="source">Последовательность значений, которые следует расставить в обратном порядке.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Проецирует каждый элемент последовательности в новую форму.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования для каждого элемента последовательности <paramref name="source" />.</returns>
      <param name="source">Последовательность значений, для которых вызывается функция преобразования.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>Проецирует каждый элемент последовательности в новую форму, добавляя индекс элемента.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования для каждого элемента последовательности <paramref name="source" />.</returns>
      <param name="source">Последовательность значений, для которых вызывается функция преобразования.</param>
      <param name="selector">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с результирующим элементом.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector">Функция преобразования, применяемая к каждому элементу входной последовательности.</param>
      <param name="resultSelector">Функция преобразования, применяемая к каждому элементу промежуточной последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных функцией <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" для каждого элемента входной последовательности.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов последовательности, возвращаемых функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.Индекс каждого элемента исходной последовательности используется в промежуточной проецированной форме этого элемента.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с результирующим элементом.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <param name="resultSelector">Функция преобразования, применяемая к каждому элементу промежуточной последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных функцией <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.Индекс каждого элемента исходной последовательности используется в проецированной форме этого элемента.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" для каждого элемента входной последовательности.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов последовательности, возвращаемых функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Определяет, совпадают ли две последовательности, используя для сравнения элементов компаратор проверки на равенство по умолчанию, предназначенный для их типа.</summary>
      <returns>true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают, согласно компаратору проверки на равенство по умолчанию для этого типа элементов, в противном случае — false.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, сравниваемый с последовательностью <paramref name="second" />.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, сравниваемый с первой последовательностью.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Определяет, совпадают ли две последовательности, используя для сравнения элементов указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают согласно компаратору <paramref name="comparer" />, в противном случае — false.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, сравниваемый с последовательностью <paramref name="second" />.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, сравниваемый с первой последовательностью.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения элементов.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> имеет более одного элемента.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает единственный элемент последовательности и генерирует исключение, если число элементов последовательности отлично от 1.</summary>
      <returns>Единственный элемент входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, единственный элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Во входной последовательности больше одного элемента.–либо–Входная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает единственный элемент последовательности, удовлетворяющий заданному условию, и генерирует исключение, если таких элементов больше одного.</summary>
      <returns>Единственный элемент входной последовательности, удовлетворяющий условию.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить единственный элемент.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию предиката <paramref name="predicate" />.–либо–Условию предиката <paramref name="predicate" /> удовлетворяет более одного элемента.–либо–Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает единственный элемент последовательности или значение по умолчанию, если последовательность пуста; если в последовательности более одного элемента, генерируется исключение.</summary>
      <returns>Единственный элемент входной последовательности или default(<paramref name="TSource" />), если в последовательности нет элементов.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, единственный элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Во входной последовательности больше одного элемента.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает единственный элемент последовательности, удовлетворяющий заданному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, генерируется исключение.</summary>
      <returns>Единственный элемент входной последовательности, удовлетворяющий условию, или default(<paramref name="TSource" />), если такой элемент не найден.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить единственный элемент.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Условию предиката <paramref name="predicate" /> удовлетворяет более одного элемента.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Пропускает заданное число элементов в последовательности и возвращает остальные элементы.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы из входной последовательности, начиная с указанного индекса.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элементы.</param>
      <param name="count">Число элементов, пропускаемых перед возвращением остальных элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий цепочку элементов входной последовательности, начиная с первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элементы.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.Индекс элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий цепочку элементов входной последовательности, начиная с первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элементы.</param>
      <param name="predicate">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Decimal" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Double" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Int32" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Int64" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Single" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Decimal" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Double" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Int32" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Int64" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Double" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Int32" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Int64" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Single" /> обнуляемого типа, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Single" />, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Возвращает указанное число подряд идущих элементов с начала последовательности.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий заданное число элементов с начала входной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="count">Число возвращаемых элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает цепочку элементов последовательности, удовлетворяющих указанному условию.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности до первого элемента, который не прошел проверку.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Возвращает цепочку элементов последовательности, удовлетворяющих указанному условию.Индекс элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности до первого элемента, который не прошел проверку.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке убывания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает массив из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Массив, содержащий элементы из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается массив.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Создает словарь <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.Dictionary`2" />, содержащий ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.–либо–Функция <paramref name="keySelector" /> возвращает null в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException">Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает словарь <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа и компаратором ключей.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.Dictionary`2" />, содержащий ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.–либо–Функция <paramref name="keySelector" /> возвращает null в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException">Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Создает словарь <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданными функциями селектора ключа и селектора элемента.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.Dictionary`2" />, содержащий элементы входной последовательности типа <paramref name="TElement" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение null.–либо–Функция <paramref name="keySelector" /> возвращает null в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException">Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает словарь <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданным компаратором и функциями селектора ключа и селектора элемента.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.Dictionary`2" />, содержащий элементы входной последовательности типа <paramref name="TElement" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение null.–либо–Функция <paramref name="keySelector" /> возвращает null в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException">Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает список <see cref="T:System.Collections.Generic.List`1" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.List`1" />, содержащий элементы из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается список <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Создает объект <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.Lookup`2" />, содержащий ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается объект <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает объект <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа и компаратором ключей.</summary>
      <returns>Объект <see cref="T:System.Linq.Lookup`2" />, содержащий ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается объект <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Создает объект <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданными функциями селектора ключа и селектора элемента.</summary>
      <returns>Объект <see cref="T:System.Linq.Lookup`2" />, содержащий элементы входной последовательности типа <paramref name="TElement" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается объект <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает объект <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданным компаратором и функциями селектора ключа и селектора элемента.</summary>
      <returns>Объект <see cref="T:System.Linq.Lookup`2" />, содержащий элементы входной последовательности типа <paramref name="TElement" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается объект <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит объединение множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют первое множество для объединения.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют второе множество для объединения.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит объединение множеств, представленных двумя последовательностями, используя указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют первое множество для объединения.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют второе множество для объединения.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="first" /> или <paramref name="second" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Выполняет фильтрацию последовательности значений на основе заданного предиката.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности, которые удовлетворяют условию.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, подлежащий фильтрации.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Выполняет фильтрацию последовательности значений на основе заданного предиката.Индекс каждого элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности, которые удовлетворяют условию.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, подлежащий фильтрации.</param>
      <param name="predicate">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Объединяет две последовательности, используя указанную функцию предиката.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объединенные элементы двух входных последовательностей.</returns>
      <param name="first">Первая последовательность для объединения.</param>
      <param name="second">Вторая последовательность для объединения.</param>
      <param name="resultSelector">Функция, которая определяет, как объединить элементы двух последовательностей.</param>
      <typeparam name="TFirst">Тип элементов первой входной последовательности.</typeparam>
      <typeparam name="TSecond">Тип элементов второй входной последовательности.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>Представляет дерево выражения и обеспечивает функциональность для выполнения дерева выражения после его перезаписи.</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableExecutor" />.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>Представляет дерево выражения и обеспечивает функциональность для выполнения дерева выражения после его перезаписи.</summary>
      <typeparam name="T">Тип данных значения, получаемого в результате выполнения дерева выражения.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableExecutor`1" />.</summary>
      <param name="expression">Дерево выражения, которое должно быть связано с новым экземпляром.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>Представляет <see cref="T:System.Collections.IEnumerable" /> в виде источника данных <see cref="T:System.Linq.EnumerableQuery" />. </summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableQuery" />.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>Представляет коллекцию <see cref="T:System.Collections.Generic.IEnumerable`1" /> в виде источника данных <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <typeparam name="T">Тип данных в коллекции.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableQuery`1" /> и связывает его с указанной коллекцией <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="enumerable">Коллекция, которую необходимо связать с новым экземпляром.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Инициализирует новый экземпляр класса<see cref="T:System.Linq.EnumerableQuery`1" /> и связывает его с деревом выражения.</summary>
      <param name="expression">Дерево выражения, которое должно быть связано с новым экземпляром.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, который позволяет выполнять перебор элементов связанной коллекции <see cref="T:System.Collections.Generic.IEnumerable`1" /> или, если коллекция имеет значение NULL, коллекции, получаемой в результате перезаписи связанного дерева выражения в виде запроса к источнику данных <see cref="T:System.Collections.Generic.IEnumerable`1" /> и его выполнения.</summary>
      <returns>Перечислитель, с помощью которого можно осуществлять перебор по связанному источнику данных.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который позволяет выполнять перебор элементов связанной коллекции <see cref="T:System.Collections.Generic.IEnumerable`1" /> или, если коллекция имеет значение NULL, коллекции, получаемой в результате перезаписи связанного дерева выражения в виде запроса к источнику данных <see cref="T:System.Collections.Generic.IEnumerable`1" /> и его выполнения.</summary>
      <returns>Перечислитель, с помощью которого можно осуществлять перебор по связанному источнику данных.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Получает тип данных в коллекции, представленной данным экземпляром.</summary>
      <returns>Тип данных в коллекции, представленной данным экземпляром.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>Получает дерево выражения, связанное с данным экземпляром или представляющее его.</summary>
      <returns>Дерево выражения, связанное с данным экземпляром или представляющее его.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>Получает объект поставщика запросов, связанного с данным экземпляром.</summary>
      <returns>Поставщик запросов, связанный с данным экземпляром.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Создает новый объект <see cref="T:System.Linq.EnumerableQuery`1" /> и связывает его с указанным деревом выражения, которое представляет коллекцию данных <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Объект EnumerableQuery, связанный с данным выражением <paramref name="expression" />.</returns>
      <param name="expression">Дерево выражения, которое требуется выполнить.</param>
      <typeparam name="S">Тип данных в коллекции, представленной выражением <paramref name="expression" />.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Создает новый объект <see cref="T:System.Linq.EnumerableQuery`1" /> и связывает его с указанным деревом выражения, которое представляет коллекцию данных <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Объект <see cref="T:System.Linq.EnumerableQuery`1" />, связанный с этим выражением <paramref name="expression" />.</returns>
      <param name="expression">Дерево выражения, которое представляет коллекцию данных <see cref="T:System.Linq.IQueryable" />.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Выполняет выражение после его перезаписи, чтобы вместо методов <see cref="T:System.Linq.Queryable" /> для все перечислимых источников данных, к которым нельзя создать запрос с помощью методов <see cref="T:System.Linq.Queryable" />, вызывались методы <see cref="T:System.Linq.Enumerable" />.</summary>
      <returns>Значение, получаемое в результате выполнения <paramref name="expression" />.</returns>
      <param name="expression">Дерево выражения, которое требуется выполнить.</param>
      <typeparam name="S">Тип данных в коллекции, представленной выражением <paramref name="expression" />.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Выполняет выражение после его перезаписи, чтобы вместо методов <see cref="T:System.Linq.Queryable" /> для все перечислимых источников данных, к которым нельзя создать запрос с помощью методов <see cref="T:System.Linq.Queryable" />, вызывались методы <see cref="T:System.Linq.Enumerable" />.</summary>
      <returns>Значение, получаемое в результате выполнения <paramref name="expression" />.</returns>
      <param name="expression">Дерево выражения, которое требуется выполнить.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>Возвращает текстовое представление перечислимой коллекции или, если она имеет значение NULL, дерева выражения, связанного с данным экземпляром.</summary>
      <returns>Текстовое представление перечислимой коллекции или, если она имеет значение NULL, дерева выражения, связанного с данным экземпляром.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>Представляет коллекцию объектов, имеющих общий ключ.</summary>
      <typeparam name="TKey">Тип ключа объекта <see cref="T:System.Linq.IGrouping`2" />.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
      <typeparam name="TElement">Тип значений объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>Возвращает ключ объекта <see cref="T:System.Linq.IGrouping`2" />.</summary>
      <returns>Ключ объекта <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>Определяет индексатор, свойство размера и метод логического поиска для структур данных, сопоставляющих ключи с последовательностями <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <typeparam name="TKey">Тип ключей объекта <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement">Тип элементов в последовательностях <see cref="T:System.Collections.Generic.IEnumerable`1" />, представляющих значения объекта <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>Определяет, существует ли указанный ключ в объекте <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>true, если ключ <paramref name="key" /> содержится в объекте <see cref="T:System.Linq.ILookup`2" />, в противном случае — false.</returns>
      <param name="key">Ключ, который требуется найти в объекте <see cref="T:System.Linq.ILookup`2" />.</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>Gets the number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>The number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>Получает последовательность значений <see cref="T:System.Collections.Generic.IEnumerable`1" /> по индексу, определенному указанным ключом.</summary>
      <returns>Последовательность значений <see cref="T:System.Collections.Generic.IEnumerable`1" /> с индексом, определенным указанным ключом.</returns>
      <param name="key">Ключ требуемой последовательности значений.</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>Представляет отсортированную последовательность.</summary>
      <typeparam name="TElement">Тип элементов последовательности.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>Выполняет дополнительное упорядочение элементов объекта <see cref="T:System.Linq.IOrderedEnumerable`1" /> по ключу.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="keySelector">Функция <see cref="T:System.Func`2" />, используемая для извлечения ключа для каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей при формировании возвращаемой последовательности.</param>
      <param name="descending">true, если элементы требуется сортировать в порядке убывания; false, чтобы сортировать элементы в порядке возрастания.</param>
      <typeparam name="TKey">Тип ключа, созданного функцией <paramref name="keySelector" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Представляет результат операции сортировки.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Представляет результат операции сортировки.</summary>
      <typeparam name="T">Тип содержимого источника данных.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Предоставляет функциональные возможности расчета запросов к конкретному источнику данных, для которого не указан тип данных.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Получает тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным экземпляром класса <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Получает выражение, связанное с экземпляром класса <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression" />, связанное с данным экземпляром класса <see cref="T:System.Linq.IQueryable" />.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Возвращает объект поставщика запросов, связанного с указанным источником данных.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryProvider" />, связанный с указанным источником данных.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Предоставляет функциональные возможности расчета запросов к конкретному источнику данных с известным типом данных.</summary>
      <typeparam name="T">Тип данных в источнике данных.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе Ковариация и контравариация в универсальных шаблонах.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Определяет методы создания и выполнения запросов, описываемых объектом <see cref="T:System.Linq.IQueryable" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.IQueryable`1" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</returns>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
      <typeparam name="TElement">Тип элементов возвращаемого объекта <see cref="T:System.Linq.IQueryable`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</returns>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Выполняет строго типизированный запрос, представленный заданным деревом выражения.</summary>
      <returns>Значение, получаемое в результате выполнения указанного запроса.</returns>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
      <typeparam name="TResult">Тип значения, получаемого в результате выполнения запроса.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Выполняет запрос, представленный заданным деревом выражения.</summary>
      <returns>Значение, получаемое в результате выполнения указанного запроса.</returns>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>Представляет коллекцию ключей, каждый из которых сопоставлен с одним или несколькими значениями.</summary>
      <typeparam name="TKey">Тип ключей объекта <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement">Тип элементов для каждого значения <see cref="T:System.Collections.Generic.IEnumerable`1" /> в составе объекта <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>Применяет функцию преобразования к каждому ключу и связанным с ним значениям и возвращает результаты.</summary>
      <returns>Коллекция, содержащая одно значение для каждой пары "ключ/коллекция значений", содержащейся в объекте <see cref="T:System.Linq.Lookup`2" />.</returns>
      <param name="resultSelector">Функция, проецирующая результирующее значение из каждого ключа и связанных с ним значений.</param>
      <typeparam name="TResult">Тип результирующих значений, возвращаемых функцией <paramref name="resultSelector" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>Определяет, содержится ли указанный ключ в объекте <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>true, если ключ <paramref name="key" /> содержится в объекте <see cref="T:System.Linq.Lookup`2" />, в противном случае — false.</returns>
      <param name="key">Ключ, который требуется найти в объекте <see cref="T:System.Linq.Lookup`2" />.</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>Получает число пар "ключ/коллекция значений", содержащихся в объекте <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>Число пар "ключ/коллекция значений", содержащихся в объекте <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>Возвращает универсальный перечислитель, осуществляющий итерацию элементов объекта <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>Перечислитель для объекта <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>Получает коллекцию значений по индексу, определенному указанным ключом.</summary>
      <returns>Коллекция значений по индексу, определенному указанным ключом.</returns>
      <param name="key">Ключ требуемой коллекции значений.</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий итерацию элементов массива <see cref="T:System.Linq.Lookup`2" />.Этот класс не может быть унаследован.</summary>
      <returns>Перечислитель для объекта <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>Представляет отсортированную параллельную последовательность.</summary>
      <typeparam name="TSource">Тип элементов в исходной коллекции.</typeparam>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов последовательности.</summary>
      <returns>Перечислитель, выполняющий перебор элементов последовательности.</returns>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>Предоставляет набор методов для выполнения запросов к объектам, реализующим ParallelQuery{TSource}.Это параллельный эквивалент объекта <see cref="T:System.Linq.Enumerable" />.</summary>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Параллельно применяет к последовательности агрегатную функцию.Эта перегрузка недоступна в последовательной реализации.</summary>
      <returns>Преобразованное конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="seedFactory">Функция, возвращающая начальное агрегатное значение. </param>
      <param name="updateAccumulatorFunc">Агрегатная функция, вызываемая для каждого элемента в разделе. </param>
      <param name="combineAccumulatorsFunc">Агрегатная функция, вызываемая для выданного элемента из каждого раздела.  </param>
      <param name="resultSelector">Функция, преобразующая конечное агрегатное значение в результирующее значение. </param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <typeparam name="TResult">Тип результирующего значения.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="seedFactory" /> или <paramref name="updateAccumulatorFunc" /> или <paramref name="combineAccumulatorsFunc" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>Параллельно применяет к последовательности агрегатную функцию.</summary>
      <returns>Конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="func" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>Параллельно применяет к последовательности агрегатную функцию.Указанное начальное значение используется в качестве исходного значения агрегатной операции.</summary>
      <returns>Конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="func" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Параллельно применяет к последовательности агрегатную функцию.Указанное начальное значение служит исходным значением для агрегатной операции, а указанная функция используется для выбора результирующего значения.</summary>
      <returns>Преобразованное конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <param name="resultSelector">Функция, преобразующая конечное агрегатное значение в результирующее значение.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <typeparam name="TResult">Тип результирующего значения.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="func" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Параллельно применяет к последовательности агрегатную функцию.Эта перегрузка недоступна в последовательной реализации.</summary>
      <returns>Преобразованное конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="updateAccumulatorFunc">Агрегатная функция, вызываемая для каждого элемента в разделе. </param>
      <param name="combineAccumulatorsFunc">Агрегатная функция, вызываемая для выданного элемента из каждого раздела. </param>
      <param name="resultSelector">Функция, преобразующая конечное агрегатное значение в результирующее значение. </param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <typeparam name="TResult">Тип результирующего значения.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="updateAccumulatorFunc" /> или <paramref name="combineAccumulatorsFunc" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Параллельно проверяет, все ли элементы последовательности удовлетворяют условию.</summary>
      <returns>Значение true, если все элементы исходной последовательности проходят проверку, определяемую указанным предикатом; в противном случае — значение false.</returns>
      <param name="source">Последовательность, к элементам которой применяется предикат.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>Проверяет, содержит ли параллельная последовательность какие-либо элементы.</summary>
      <returns>Значение true, если исходная последовательность содержит какие-либо элементы; в противном случае — значение false.</returns>
      <param name="source">IEnumerable, проверяемый на наличие элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Параллельно проверяет, удовлетворяет ли условию хотя бы один элемент в последовательности.</summary>
      <returns>Значение true, если хотя бы один элемент исходной последовательности проходит проверку, определяемую указанным предикатом; в противном случае — значение false.</returns>
      <param name="source">IEnumerable, к элементам которого применяется предикат.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>Преобразует <see cref="T:System.Linq.ParallelQuery`1" /> в интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" /> для обязательной последовательной проверки запроса.</summary>
      <returns>Входная последовательность, приведенная к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Последовательность, которая приводится к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>Позволяет обрабатывать источник данных как упорядоченный независимо от отсутствия упорядоченности по умолчанию.AsOrdered можно вызывать только для последовательностей, возвращаемых AsParallel, ParallelEnumerable.Range и ParallelEnumerable.Repeat.</summary>
      <returns>Исходная последовательность, поддерживающая сортировку в запросе.</returns>
      <param name="source">Входная последовательность.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Создается, если <paramref name="source" /> не равен одному из значений: AsParallel, ParallelEnumerable.Range или ParallelEnumerable.Repeat.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>Позволяет обрабатывать источник данных как упорядоченный независимо от отсутствия упорядоченности по умолчанию.AsOrdered можно вызывать только для последовательностей, возвращаемых AsParallel, ParallelEnumerable.Range и ParallelEnumerable.Repeat.</summary>
      <returns>Исходная последовательность, поддерживающая сортировку в запросе.</returns>
      <param name="source">Входная последовательность.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Создается, если <paramref name="source" /> не равен одному из значений: AsParallel, ParallelEnumerable.Range или ParallelEnumerable.Repeat.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>Позволяет осуществлять параллельный запрос, производимый модулем разделения, ответственным за разделение входной последовательности на разделы.</summary>
      <returns>Значение источника <paramref name="source" /> в форме ParallelQuery для привязки к методам расширения ParallelEnumerable.</returns>
      <param name="source">Модуль разделения входной последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Позволяет осуществлять параллельный запрос.</summary>
      <returns>Источник как <see cref="T:System.Linq.ParallelQuery`1" /> для привязки к методам расширения ParallelEnumerable.</returns>
      <param name="source">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" /> для преобразования в <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>Позволяет осуществлять параллельный запрос.</summary>
      <returns>Значение источника source в форме ParallelQuery для привязки к методам расширения ParallelEnumerable.</returns>
      <param name="source">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" /> для преобразования в <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>Преобразует <see cref="T:System.Linq.ParallelQuery`1" /> в интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" /> для обязательной последовательной проверки запроса.</summary>
      <returns>Источник как <see cref="T:System.Collections.Generic.IEnumerable`1" /> для привязки к последовательным методам расширения.</returns>
      <param name="source">
        <see cref="T:System.Linq.ParallelQuery`1" /> для преобразования в интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>Позволяет обрабатывать промежуточный запрос как содержащий неупорядоченные элементы.</summary>
      <returns>Исходная последовательность со случайным порядком.</returns>
      <param name="source">Входная последовательность.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма или число элементов последовательности больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма или число элементов последовательности больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений.</summary>
      <returns>Возвращает среднее для последовательности значений.</returns>
      <param name="source">Исходная последовательность.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">Последовательность значений, которые используются для расчета среднего. Среднее последовательности значений. <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма или число элементов последовательности больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма или число элементов последовательности больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма или число элементов последовательности больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма или число элементов последовательности больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма или число элементов последовательности больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма или число элементов последовательности больше, чем <see cref="M:System.Int64.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Параллельно вычисляет среднее значение для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>Преобразует элементы запроса ParallelQuery в заданный тип.</summary>
      <returns>Последовательность, которая содержит все элементы исходной последовательности, преобразованные в заданный тип.</returns>
      <param name="source">Последовательность, содержащая преобразуемые элементы.</param>
      <typeparam name="TResult">Тип, в который преобразуются элементы объекта <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Эту перегрузку Concat вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Этот параметр не используется.</param>
      <param name="second">Этот параметр не используется.</param>
      <typeparam name="TSource">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Сцепляет две параллельные последовательности.</summary>
      <returns>Последовательность, содержащая сцепленные элементы двух входных последовательностей.</returns>
      <param name="first">Первая из объединяемых последовательностей.</param>
      <param name="second">Последовательность, объединяемая с первой последовательностью.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Параллельно определяет, содержится ли указанный элемент в последовательности, используя компаратор проверки на равенство по умолчанию.</summary>
      <returns>Значение true, если исходная последовательность содержит элемент с указанным значением; в противном случае — значение false.</returns>
      <param name="source">Последовательность, в которой требуется найти данное значение.</param>
      <param name="value">Значение, которое требуется найти в последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Параллельно определяет, содержится ли указанный элемент в последовательности, используя указанный компаратор IEqualityComparer{T}.</summary>
      <returns>Значение true, если исходная последовательность содержит элемент с указанным значением; в противном случае — значение false.</returns>
      <param name="source">Последовательность, в которой требуется найти данное значение.</param>
      <param name="value">Значение, которое требуется найти в последовательности.</param>
      <param name="comparer">Компаратор проверки на равенство, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает количество элементов в параллельной последовательности.</summary>
      <returns>Число элементов во входной последовательности.</returns>
      <param name="source">Последовательность, элементы которой требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Число элементов в исходном объекте больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает число, представляющее количество элементов параллельной последовательности, удовлетворяющих заданному условию.</summary>
      <returns>Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.</returns>
      <param name="source">Последовательность, элементы которой требуется подсчитать.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Число элементов в исходном объекте больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает элементы указанной параллельной последовательности или одноэлементную коллекцию, содержащую значение параметра типа по умолчанию, если последовательность пуста.</summary>
      <returns>Последовательность, содержащая default(TSource), если последовательность <paramref name="source" /> пуста; в противном случае — <paramref name="source" />.</returns>
      <param name="source">Последовательность, для которой возвращается значение по умолчанию, если она пуста.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Возвращает элементы указанной параллельной последовательности или одноэлементную коллекцию, содержащую указанное значение, если последовательность пуста.</summary>
      <returns>Последовательность, содержащая defaultValue, если последовательность <paramref name="source" /> пуста; в противном случае — <paramref name="source" />.</returns>
      <param name="source">Последовательность, для которой возвращается указанное значение, если она пуста.</param>
      <param name="defaultValue">Значение, возвращаемое в случае пустой последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает различающиеся элементы параллельной последовательности, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность, содержащая различающиеся элементы из исходной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется удалить дубликаты элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Возвращает различающиеся элементы параллельной последовательности, используя для сравнения значений указанный компаратор IEqualityComparer{T}.</summary>
      <returns>Последовательность, содержащая различающиеся элементы из исходной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется удалить дубликаты элементов.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Возвращает элемент по указанному индексу в параллельной последовательности.</summary>
      <returns>Элемент, находящийся в указанной позиции в исходной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элемент.</param>
      <param name="index">Отсчитываемый от нуля индекс извлекаемого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="index" /> меньше 0 либо больше или равно числу элементов последовательности <paramref name="source" />.</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Возвращает элемент по указанному индексу в параллельной последовательности или значение по умолчанию, если индекс вне допустимого диапазона.</summary>
      <returns>default(TSource), если индекс указывает позицию вне исходной последовательности; в противном случае — элемент, находящийся в указанной позиции в исходной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элемент.</param>
      <param name="index">Отсчитываемый от нуля индекс извлекаемого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>Возвращает пустой набор ParallelQuery{TResult} с указанным аргументом типа.</summary>
      <returns>Пустая последовательность с аргументом типа.</returns>
      <typeparam name="TResult">Тип, присваиваемый параметру типа возвращаемой универсальной последовательности.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Эту перегрузку Except вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Этот параметр не используется.</param>
      <param name="second">Этот параметр не используется.</param>
      <typeparam name="TSource">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Эту перегрузку Except вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Этот параметр не используется.</param>
      <param name="second">Этот параметр не используется.</param>
      <param name="comparer">Этот параметр не используется.</param>
      <typeparam name="TSource">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Находит разность множеств, представленных двумя параллельными последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность, представляющая собой разность двух последовательностей как множеств.</returns>
      <param name="first">Последовательность, элементы которой, отсутствующие в последовательности <paramref name="second" />, будут возвращены.</param>
      <param name="second">Последовательность, элементы которой, входящие также в первую последовательность, должны быть исключены из возвращаемой последовательности.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит разность множеств, представленных двумя параллельными последовательностями, используя для сравнения значений указанный компаратор IEqualityComparer{T}.</summary>
      <returns>Последовательность, представляющая собой разность двух последовательностей как множеств.</returns>
      <param name="first">Последовательность, элементы которой, отсутствующие в последовательности <paramref name="second" />, будут возвращены.</param>
      <param name="second">Последовательность, элементы которой, входящие также в первую последовательность, должны быть исключены из возвращаемой последовательности. </param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает первый элемент параллельной последовательности.</summary>
      <returns>Первый элемент указанной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется возвратить первый элемент.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает первый элемент параллельной последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Первый элемент последовательности, который прошел проверку, определенную указанной функцией предиката.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент <paramref name="source" /> не удовлетворяет условию предиката <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает первый элемент параллельной последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>default(TSource), если последовательность <paramref name="source" /> пуста; в противном случае — первый элемент последовательности <paramref name="source" />.</returns>
      <param name="source">Последовательность, из которой требуется возвратить первый элемент.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает первый удовлетворяющий условию элемент параллельной последовательности или значение по умолчанию, если таких элементов не найдено.</summary>
      <returns>default(TSource), если последовательность <paramref name="source" /> пуста или ни один ее элемент не прошел проверку, определенную предикатом; в противном случае — первый элемент последовательности <paramref name="source" />, прошедший проверку, определенную предикатом.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>Параллельно вызывает указанные действия для всех элементов в последовательности <paramref name="source" />.</summary>
      <param name="source">Объект <see cref="T:System.Linq.ParallelQuery`1" />, элементы которого обрабатываются <paramref name="action" />.</param>
      <param name="action">Действие, вызываемое для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="action" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа и сравнивает ключи с помощью указанного компаратора.</summary>
      <returns>Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор IComparer{TSource}, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />&gt;.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа и проецирует элементы каждой группы с помощью указанной функции.</summary>
      <returns>ParallelQuery&lt;IGrouping&lt;TKey, TElement&gt;&gt; в C# или ParallelQuery(Of IGrouping(Of TKey, TElement)) в Visual Basic, где каждый универсальный объект IGrouping содержит коллекцию объектов типа и ключ.</returns>
      <param name="source">Объект OrderedParallelQuery&lt;(Of &lt;(TElement&gt;)&gt;), который содержит элементы для сортировки.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в IGrouping.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов в IGrouping.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы параллельной последовательности в соответствии с функцией селектора ключа.Ключи сравниваются с помощью компаратора, элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>ParallelQuery{IGrouping{TKey, TElement}} в C# или ParallelQuery(Of IGrouping(Of TKey, TElement)) в Visual Basic, где каждый универсальный объект IGrouping содержит коллекцию объектов типа и ключ.</returns>
      <param name="source">Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в IGrouping.</param>
      <param name="comparer">Компаратор IComparer{TSource}, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов в IGrouping.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Коллекция элементов типа , в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Последовательность, элементы которой требуется сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в IGrouping&lt;TKey, TElement&gt;.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов в каждом IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Значения ключей сравниваются с помощью указанного компаратора, элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Коллекция элементов типа , в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Последовательность, элементы которой требуется сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в IGrouping{Key, TElement}.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer{TKey}, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов в каждом IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.</summary>
      <returns>Коллекция элементов типа , в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Последовательность, элементы которой требуется сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы параллельной последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Ключи сравниваются с использованием заданного компаратора.</summary>
      <returns>ParallelQuery&lt;IGrouping&lt;TKey, TResult&gt;&gt; в C# или ParallelQuery(Of IGrouping(Of TKey, TResult)) в Visual Basic, где каждый объект IGrouping&lt;(Of &lt;(TKey, TResult&gt;)&gt;) содержит коллекцию объектов типа и ключ.</returns>
      <param name="source">Последовательность, элементы которой требуется сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer{TKey}, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Эту перегрузку GroupJoin вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Этот параметр не используется.</param>
      <param name="inner">Этот параметр не используется.</param>
      <param name="outerKeySelector">Этот параметр не используется.</param>
      <param name="innerKeySelector">Этот параметр не используется.</param>
      <param name="resultSelector">Этот параметр не используется.</param>
      <typeparam name="TOuter">Этот параметр типа не используется.</typeparam>
      <typeparam name="TInner">Этот параметр типа не используется.</typeparam>
      <typeparam name="TKey">Этот параметр типа не используется.</typeparam>
      <typeparam name="TResult">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Эту перегрузку GroupJoin вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Этот параметр не используется.</param>
      <param name="inner">Этот параметр не используется.</param>
      <param name="outerKeySelector">Этот параметр не используется.</param>
      <param name="innerKeySelector">Этот параметр не используется.</param>
      <param name="resultSelector">Этот параметр не используется.</param>
      <param name="comparer">Этот параметр не используется.</param>
      <typeparam name="TOuter">Этот параметр типа не используется.</typeparam>
      <typeparam name="TInner">Этот параметр типа не используется.</typeparam>
      <typeparam name="TKey">Этот параметр типа не используется.</typeparam>
      <typeparam name="TResult">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Устанавливает параллельную корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность, которая содержит элементы типа, полученные в результате соединения двух последовательностей с группировкой.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Устанавливает параллельную корреляцию между элементами двух последовательностей на основе равенства ключа и группирует результаты.Для сравнения ключей используется указанный компаратор IEqualityComparer{T}.</summary>
      <returns>Последовательность, которая содержит элементы типа, полученные в результате соединения двух последовательностей с группировкой.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Эту перегрузку Intersect вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Этот параметр не используется.</param>
      <param name="second">Этот параметр не используется.</param>
      <typeparam name="TSource">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Эту перегрузку Intersect вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Этот параметр не используется.</param>
      <param name="second">Этот параметр не используется.</param>
      <param name="comparer">Этот параметр не используется.</param>
      <typeparam name="TSource">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Находит пересечение множеств, представленных двумя параллельными последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.</returns>
      <param name="first">Последовательность, из которой возвращаются различающиеся элементы, входящие также в <paramref name="second" />.</param>
      <param name="second">Последовательность, из которой возвращаются различающиеся элементы, входящие также в первую последовательность.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит пересечение множеств, представленных двумя параллельными последовательностями, используя для сравнения значений указанный компаратор IEqualityComparer{T}.</summary>
      <returns>Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.</returns>
      <param name="first">Последовательность, из которой возвращаются различающиеся элементы, входящие также в <paramref name="second" />.</param>
      <param name="second">Последовательность, из которой возвращаются различающиеся элементы, входящие также в первую последовательность.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Эту перегрузку Join вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Этот параметр не используется.</param>
      <param name="inner">Этот параметр не используется.</param>
      <param name="outerKeySelector">Этот параметр не используется.</param>
      <param name="innerKeySelector">Этот параметр не используется.</param>
      <param name="resultSelector">Этот параметр не используется.</param>
      <typeparam name="TOuter">Этот параметр типа не используется.</typeparam>
      <typeparam name="TInner">Этот параметр типа не используется.</typeparam>
      <typeparam name="TKey">Этот параметр типа не используется.</typeparam>
      <typeparam name="TResult">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Эту перегрузку Join вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">Этот параметр не используется.</param>
      <param name="inner">Этот параметр не используется.</param>
      <param name="outerKeySelector">Этот параметр не используется.</param>
      <param name="innerKeySelector">Этот параметр не используется.</param>
      <param name="resultSelector">Этот параметр не используется.</param>
      <param name="comparer">Этот параметр не используется.</param>
      <typeparam name="TOuter">Этот параметр типа не используется.</typeparam>
      <typeparam name="TInner">Этот параметр типа не используется.</typeparam>
      <typeparam name="TKey">Этот параметр типа не используется.</typeparam>
      <typeparam name="TResult">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Устанавливает параллельную корреляцию между элементами двух последовательностей на основе сопоставления ключей.Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность, которая содержит элементы типа, полученные в результате внутреннего соединения двух последовательностей.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Устанавливает параллельную корреляцию между элементами двух последовательностей на основе сопоставления ключей.Для сравнения ключей используется указанный компаратор IEqualityComparer{T}.</summary>
      <returns>Последовательность, которая содержит элементы типа, полученные в результате внутреннего соединения двух последовательностей.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> или <paramref name="inner" /> или <paramref name="outerKeySelector" /> или <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает последний элемент параллельной последовательности.</summary>
      <returns>Значение, находящееся в последней позиции исходной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется возвратить последний элемент.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает последний элемент параллельной последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Последний элемент последовательности, который прошел проверку, определенную указанной функцией предиката.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент <paramref name="source" /> не удовлетворяет условию предиката <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает последний элемент параллельной последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>default(), если исходная последовательность пуста; в противном случае — последний элемент последовательности.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элемент.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает последний элемент параллельной последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <returns>default(), если последовательность пуста или ни один ее элемент не прошел проверку функцией предиката; в противном случае — последний элемент, прошедший проверку функцией предиката.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает значение типа Int64, представляющее общее число элементов в параллельной последовательности.</summary>
      <returns>Число элементов во входной последовательности.</returns>
      <param name="source">Последовательность, элементы которой требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Число элементов в исходном объекте больше, чем <see cref="M:System.Int64.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает значение типа Int64, представляющее число элементов параллельной последовательности, удовлетворяющих заданному условию.</summary>
      <returns>Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.</returns>
      <param name="source">Последовательность, элементы которой требуется подсчитать.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Число элементов в исходном объекте больше, чем <see cref="M:System.Int64.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает максимальное значение, которое содержится в параллельно обрабатываемой последовательности значений.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <typeparam name="TSource">Тип элементов исходной последовательности.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов и является типом, не поддерживающий значение NULL.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов и является типом, не поддерживающий значение NULL.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает минимальное значение, которое содержится в параллельной последовательности значений.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов и является типом, не поддерживающий значение NULL.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Параллельно вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов и является типом, не поддерживающий значение NULL.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>Выполняет фильтрацию элементов ParallelQuery по заданному типу.</summary>
      <returns>Последовательность, содержащая элементы входной последовательности типа.</returns>
      <param name="source">Последовательность, элементы которого следует фильтровать.</param>
      <typeparam name="TResult">Тип, по которому фильтруются элементы последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Параллельно сортирует элементы последовательности в порядке возрастания ключа.</summary>
      <returns>Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Параллельно сортирует элементы последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <returns>Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор IComparer{TKey}, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Параллельно сортирует элементы последовательности в порядке убывания ключа.</summary>
      <returns>Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Сортирует элементы последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <returns>Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор IComparer{TKey}, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>Генерирует параллельную последовательность целых чисел в заданном диапазоне.</summary>
      <returns>IEnumerable&lt;Int32&gt; в C# или IEnumerable(Of Int32) в Visual Basic, содержащий диапазон последовательных целых чисел.</returns>
      <param name="start">Значение первого целого числа для последовательности.</param>
      <param name="count">Количество генерируемых последовательных целых чисел.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> меньше 0 -или- <paramref name="start" /> + <paramref name="count" /> - 1 больше <see cref="M:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>Создает параллельную последовательность, содержащую одно повторяющееся значение.</summary>
      <returns>Последовательность, содержащая повторяющееся значение.</returns>
      <param name="element">Повторяемое значение.</param>
      <param name="count">Требуемое число повторений данного значения в создаваемой последовательности.</param>
      <typeparam name="TResult">Тип значения, которое будет повторяться в результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="count" /> меньше 0.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>Изменяет порядок элементов параллельной последовательности на противоположный.</summary>
      <returns>Последовательность, элементы которой соответствуют элементам входной последовательности, но следуют в противоположном порядке.</returns>
      <param name="source">Последовательность значений, которые следует расставить в обратном порядке.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Параллельно проецирует каждый элемент последовательности в новую форму.</summary>
      <returns>Последовательность, элементы которой получены в результате вызова функции преобразования для каждого элемента последовательности <paramref name="source" />.</returns>
      <param name="source">Последовательность значений, для которых вызывается функция преобразования.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов, возвращаемых селектором.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>Параллельно проецирует каждый элемент последовательности в новую форму, добавляя индекс элемента.</summary>
      <returns>Последовательность, элементы которой получены в результате вызова функции преобразования для каждого элемента последовательности <paramref name="source" />.</returns>
      <param name="source">Последовательность значений, для которых вызывается функция преобразования.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов, возвращаемых селектором.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Проецирует каждый элемент последовательности в объект IEnumerable{T}, объединяет полученные последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.</summary>
      <returns>Последовательность, элементы которой получены в результате вызова функции преобразования "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с полученным элементом.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных функцией <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип элементов полученной последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Параллельно проецирует каждый элемент последовательности в объект IEnumerable{T} и объединяет полученные последовательности в одну последовательность.</summary>
      <returns>Последовательность, элементы которой получены в результате вызова функции преобразования "один ко многим" для каждого элемента входной последовательности.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов последовательности, возвращаемой селектором.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Проецирует каждый элемент последовательности в объект IEnumerable{T}, объединяет полученные последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.Индекс каждого элемента исходной последовательности используется в промежуточной проецированной форме этого элемента.</summary>
      <returns>Последовательность, элементы которой получены в результате вызова функции преобразования "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с полученным элементом.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных функцией <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип возвращаемых элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Параллельно проецирует каждый элемент последовательности в объект IEnumerable{T} и объединяет полученные последовательности в одну последовательность.Индекс каждого элемента исходной последовательности используется в проецированной форме этого элемента.</summary>
      <returns>Последовательность, элементы которой получены в результате вызова функции преобразования "один ко многим" для каждого элемента входной последовательности.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов последовательности, возвращаемой селектором.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Эту перегрузку SequenceEqual вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Этот параметр не используется.</param>
      <param name="second">Этот параметр не используется.</param>
      <typeparam name="TSource">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Создается при каждом вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Эту перегрузку SequenceEqual вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Этот параметр не используется.</param>
      <param name="second">Этот параметр не используется.</param>
      <param name="comparer">Этот параметр не используется.</param>
      <typeparam name="TSource">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Создается при каждом вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Определяет, совпадают ли две параллельные последовательности, используя для сравнения элементов компаратор проверки на равенство по умолчанию, предназначенный для их типа.</summary>
      <returns>Значение true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают, согласно компаратору проверки на равенство по умолчанию для этого типа элементов, в противном случае — значение false.</returns>
      <param name="first">Последовательность для сравнения с последовательностью second.</param>
      <param name="second">Последовательность, сравниваемая с первой входной последовательностью.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Определяет, совпадают ли две параллельные последовательности, используя для сравнения элементов указанный компаратор проверки на равенство IEqualityComparer{T}.</summary>
      <returns>Значение true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают, согласно компаратору проверки на равенство по умолчанию для этого типа элементов, в противном случае — значение false.</returns>
      <param name="first">Последовательность для сравнения с последовательностью <paramref name="second" />.</param>
      <param name="second">Последовательность, сравниваемая с первой входной последовательностью.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для сравнения элементов.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает единственный элемент параллельной последовательности и генерирует исключение, если число элементов последовательности отлично от 1.</summary>
      <returns>Единственный элемент входной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется возвратить единственный элемент.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Во входной последовательности больше одного элемента.-или- Входная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает единственный элемент параллельной последовательности, удовлетворяющий заданному условию, и генерирует исключение, если таких элементов больше одного.</summary>
      <returns>Единственный элемент входной последовательности, удовлетворяющий условию.</returns>
      <param name="source">Последовательность, из которой требуется возвратить единственный элемент.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию предиката <paramref name="predicate" />.-или- Условию предиката <paramref name="predicate" /> удовлетворяет более одного элемента.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Возвращает единственный элемент параллельной последовательности или значение по умолчанию, если последовательность пуста; если в последовательности более одного элемента, создается исключение.</summary>
      <returns>Единственный элемент входной последовательности или default(), если в последовательности нет элементов.</returns>
      <param name="source">Последовательность, из которой требуется возвратить единственный элемент.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает единственный элемент параллельной последовательности, удовлетворяющий заданному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, создается исключение.</summary>
      <returns>Единственный элемент входной последовательности, удовлетворяющий условию, или default(), если такой элемент не найден.</returns>
      <param name="source">Последовательность, из которой требуется возвратить единственный элемент.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Пропускает заданное число элементов в параллельной последовательности и возвращает остальные элементы.</summary>
      <returns>Последовательность, содержащая элементы из входной последовательности, начиная с указанного индекса.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="count">Число элементов, пропускаемых перед возвращением остальных элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Пропускает элементы в параллельной последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.</summary>
      <returns>Последовательность, содержащая цепочку элементов входной последовательности, начиная с первого элемента, который не прошел проверку, заданную предикатом.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Пропускает элементы в параллельной последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.Индекс элемента используется в логике функции предиката.</summary>
      <returns>Последовательность, содержащая цепочку элементов входной последовательности, начиная с первого элемента, который не прошел проверку, заданную предикатом.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента. </param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Параллельно вычисляет сумму для последовательности значений.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Decimal.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>Параллельно вычисляет сумму для последовательности значений.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>Параллельно вычисляет сумму для последовательности значений.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>Параллельно вычисляет сумму для последовательности значений.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Int64.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Параллельно вычисляет сумму для последовательности значений.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Decimal.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Параллельно вычисляет сумму для последовательности значений.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Параллельно вычисляет сумму для последовательности значений.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Параллельно вычисляет сумму для последовательности значений.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Int64.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Параллельно вычисляет сумму для последовательности значений.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>Параллельно вычисляет сумму для последовательности значений.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Decimal.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов исходной последовательности.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Int64.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Decimal.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Int32.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Сумма больше, чем <see cref="M:System.Int64.MaxValue" />.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Параллельно вычисляет сумму для последовательности значений, получаемой в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений, сумму которых требуется вычислить.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Возвращает указанное число идущих подряд элементов с начала параллельной последовательности.</summary>
      <returns>Последовательность, содержащая заданное число элементов с начала входной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="count">Число возвращаемых элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает цепочку элементов параллельной последовательности, удовлетворяющих указанному условию.</summary>
      <returns>Последовательность, содержащая элементы входной последовательности до первого элемента, который не прошел проверку.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Возвращает цепочку элементов параллельной последовательности, удовлетворяющих указанному условию.Индекс элемента используется в логике функции предиката.</summary>
      <returns>Последовательность, содержащая элементы входной последовательности до первого элемента, который не прошел проверку.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента. </param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Параллельно выполняет дополнительное упорядочение элементов последовательности в порядке возрастания ключа.</summary>
      <returns>Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу.</returns>
      <param name="source">Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Параллельно выполняет дополнительное упорядочение элементов последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <returns>Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу.</returns>
      <param name="source">Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор IComparer{TKey}, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Параллельно выполняет дополнительное упорядочение элементов последовательности в порядке убывания ключа.</summary>
      <returns>Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Параллельно выполняет дополнительное упорядочение элементов последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <returns>Объект OrderedParallelQuery{TSource}, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект OrderedParallelQuery{TSource}, который содержит элементы для сортировки.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор IComparer{TKey}, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>Создает массив из объекта ParallelQuery{T}.</summary>
      <returns>Массив, содержащий элементы из входной последовательности.</returns>
      <param name="source">Последовательность, из которой создается массив.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Создает словарь Dictionary{TKey,TValue} из ParallelQuery{T} в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Словарь Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;), который содержит ключи и значения.</returns>
      <param name="source">Последовательность, из которой необходимо создать словарь Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;).</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> создает ключ, который представляет собой пустую ссылку (Nothing в Visual Basic).-или- Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает словарь Dictionary{TKey,TValue} из ParallelQuery{T} в соответствии с заданной функцией селектора ключа и компаратором ключей.</summary>
      <returns>Словарь Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;), который содержит ключи и значения.</returns>
      <param name="source">Последовательность, из которой необходимо создать словарь Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;).</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> создает ключ, который представляет собой пустую ссылку (Nothing в Visual Basic).-или- Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Создает словарь Dictionary{TKey,TValue} из ParallelQuery{T} в соответствии с заданными функциями селектора ключа и селектора элемента.</summary>
      <returns>Словарь Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;), содержащий элементы входной последовательности типа</returns>
      <param name="source">Последовательность, из которой необходимо создать словарь Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;).</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента. </param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> создает ключ, который представляет собой пустую ссылку (Nothing в Visual Basic).-или- Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает словарь Dictionary{TKey,TValue из ParallelQuery{T} в соответствии с заданной функцией селектора ключа, компаратором и функцией селектора элемента.</summary>
      <returns>Словарь Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;), содержащий элементы входной последовательности типа</returns>
      <param name="source">Последовательность, из которой необходимо создать словарь Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;).</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> создает ключ, который представляет собой пустую ссылку (Nothing в Visual Basic).-или- Функция <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.-или- Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>Создает List{T} из объекта ParallelQuery{T}.</summary>
      <returns>Список List&lt;(Of &lt;(T&gt;)&gt;), содержащий элементы входной последовательности.</returns>
      <param name="source">Последовательность, из которой нужно создать List&lt;(Of &lt;(T&gt;)&gt;).</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Создает ILookup{TKey,T} из ParallelQuery{T} в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Словарь поиска Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;), который содержит ключи и значения.</returns>
      <param name="source">Последовательность, из которой создается словарь поиска Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;).</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает словарь поиска ILookup{TKey,T} из ParallelQuery{T} в соответствии с заданной функцией селектора ключа и компаратором ключей.</summary>
      <returns>Словарь поиска Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;), который содержит ключи и значения.</returns>
      <param name="source">Последовательность, из которой создается словарь поиска Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;).</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Создает словарь поиска ILookup{TKey,TElement} из ParallelQuery{T} в соответствии с заданными функциями селектора ключа и селектора элемента.</summary>
      <returns>Словарь поиска Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;), содержащий элементы входной последовательности типа TElement.</returns>
      <param name="source">Последовательность, из которой создается словарь поиска Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;).</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента. </param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает словарь поиска ILookup{TKey,TElement} из ParallelQuery{T} в соответствии с заданной функцией селектора ключа, компаратором и функцией селектора элемента.</summary>
      <returns>Словарь поиска Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;), содержащий элементы входной последовательности типа TElement.</returns>
      <param name="source">Последовательность, из которой создается словарь поиска Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;).</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента. </param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого функцией <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">Запрос был отменен.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> или <paramref name="elementSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.AggregateException">Одно или несколько исключений возникло во время оценки запроса.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Эту перегрузку Union вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Этот параметр не используется.</param>
      <param name="second">Этот параметр не используется.</param>
      <typeparam name="TSource">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Эту перегрузку Union вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Этот параметр не используется.</param>
      <param name="second">Этот параметр не используется.</param>
      <param name="comparer">Этот параметр не используется.</param>
      <typeparam name="TSource">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Находит объединение множеств, представленных двумя параллельными последовательностями, используя компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность, которая содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
      <param name="first">Последовательность, различающиеся элементы которой образуют первое множество для объединения.</param>
      <param name="second">Последовательность, различающиеся элементы которой образуют второе множество для объединения.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит объединение множеств, представленных двумя параллельными последовательностями, используя указанный компаратор IEqualityComparer{T}.</summary>
      <returns>Последовательность, которая содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
      <param name="first">Последовательность, различающиеся элементы которой образуют первое множество для объединения.</param>
      <param name="second">Последовательность, различающиеся элементы которой образуют второе множество для объединения.</param>
      <param name="comparer">Компаратор проверки на равенство IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;), используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Выполняет фильтрацию параллельной последовательности значений на основе предиката.</summary>
      <returns>Последовательность, содержащая элементы входной последовательности, которые удовлетворяют условию.</returns>
      <param name="source">Последовательность для фильтрации.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов исходной последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Выполняет фильтрацию параллельной последовательности значений на основе предиката.Индекс каждого элемента используется в логике функции предиката.</summary>
      <returns>Последовательность, содержащая элементы входной последовательности, которые удовлетворяют условию.</returns>
      <param name="source">Последовательность для фильтрации.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов исходной последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>Задает объект <see cref="T:System.Threading.CancellationToken" /> для связи с запросом.</summary>
      <returns>Объект ParallelQuery, представляющий такой же запрос, как исходный, но с зарегистрированным токеном отмены.</returns>
      <param name="source">Объект ParallelQuery, свойство которого нужно установить.</param>
      <param name="cancellationToken">Токен отмены.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.CancellationTokenSource" />, связанный с <paramref name="cancellationToken" />, был удален.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">WithCancellation используется в запросе несколько раз.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Задает степень параллельности для использования в запросе.Степень параллельности — это максимальное число задач, выполняемых одновременно для обработки запроса.</summary>
      <returns>Объект ParallelQuery, представляющий такой же запрос, как исходный, с установленным пределом степени параллельности.</returns>
      <param name="source">Объект ParallelQuery, для которого нужно установить предел степени параллельности.</param>
      <param name="degreeOfParallelism">Степень параллельности для запроса.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> меньше 1 или больше 64.</exception>
      <exception cref="T:System.InvalidOperationException">WithDegreeOfParallelism используется в запросе несколько раз.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>Задает режим выполнения запроса.</summary>
      <returns>Объект ParallelQuery, представляющий такой же запрос, как исходный, но с зарегистрированным режимом выполнения.</returns>
      <param name="source">Объект ParallelQuery, свойство которого нужно установить.</param>
      <param name="executionMode">Режим, в котором следует выполнять запрос.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="executionMode" /> не является допустимым значением <see cref="T:System.Linq.ParallelExecutionMode" />.</exception>
      <exception cref="T:System.InvalidOperationException">WithExecutionMode используется в запросе несколько раз.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>Задает параметры слияния для данного запроса, определяющие буферизацию вывода запросом.</summary>
      <returns>Объект ParallelQuery, представляющий такой же запрос, как исходный, но с зарегистрированными параметрами слияния.</returns>
      <param name="source">Объект ParallelQuery, свойство которого нужно установить.</param>
      <param name="mergeOptions">Параметры слияния, устанавливаемые для данного запроса.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="mergeOptions" /> не является допустимым значением <see cref="T:System.Linq.ParallelMergeOptions" />.</exception>
      <exception cref="T:System.InvalidOperationException">WithMergeOptions используется в запросе несколько раз.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Эту перегрузку Zip вызывать не следует.Данный метод помечен как устаревший, при попытке его вызова всегда создается исключение <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Данная перегрузка всегда создает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">Этот параметр не используется.</param>
      <param name="second">Этот параметр не используется.</param>
      <param name="resultSelector">Этот параметр не используется.</param>
      <typeparam name="TFirst">Этот параметр типа не используется.</typeparam>
      <typeparam name="TSecond">Этот параметр типа не используется.</typeparam>
      <typeparam name="TResult">Этот параметр типа не используется.</typeparam>
      <exception cref="T:System.NotSupportedException">Исключение, которое возникает при вызове этого метода.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>Параллельно объединяет две последовательности, используя указанную функцию предиката.</summary>
      <returns>Последовательность, которая содержит элементы типа, полученные в результате попарного выполнения resultSelector с двумя последовательностями.Если длины последовательностей различаются, длина ограничивается более короткой последовательностью.</returns>
      <param name="first">Первая последовательность для сворачивания.</param>
      <param name="second">Вторая последовательность для сворачивания.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <typeparam name="TFirst">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TSecond">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TResult">Тип возвращаемых элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> или <paramref name="resultSelector" /> является пустой ссылкой (Nothing в Visual Basic).</exception>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>Режим выполнения запроса дает системе информацию, как обрабатывать компромиссные ситуации в отношении производительности при осуществлении параллельных запросов.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>По умолчанию система использует для запросов алгоритмы, оптимизированные для параллельного выполнения и избегает алгоритмов, затрачивающих много ресурсов, чтобы не допустить замедления при параллельном выполнении.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>Выполнять весь запрос параллельно, даже если для этого понадобится использовать алгоритмы, требующие много ресурсов.</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>Указывает предпочтительный тип слияния вывода для использования в запросе.Это только рекомендация, которая может не соблюдаться системой при выполнении всех запросов параллельно.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>Используется тип слияния по умолчанию, то есть AutoBuffered.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>Используется режим слияния без буферов вывода.Элементы результатов передаются потребителю запроса сразу же после вычисления.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>Для слияния используются буферы вывода, размер которых определяется системой.Результаты накапливаются в буфере вывода, прежде чем попасть к потребителю запроса.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>Используется режим слияния с полными буферами вывода.Система будет накапливать все результаты до их передачи потребителю запроса.</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>Представляет параллельную последовательность.</summary>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов последовательности.</summary>
      <returns>Перечислитель, выполняющий перебор элементов последовательности.</returns>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>Представляет параллельную последовательность.</summary>
      <typeparam name="TSource">Тип элемента исходной последовательности.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов последовательности.</summary>
      <returns>Перечислитель, выполняющий перебор элементов последовательности.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>Предоставляет набор методов типа static (Shared в Visual Basic) для выполнения запросов к структурам данных, реализующим объект <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>Применяет к последовательности агрегатную функцию.</summary>
      <returns>Конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="func">Агрегатная функция, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="func" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>Применяет к последовательности агрегатную функцию.Указанное начальное значение используется в качестве исходного значения агрегатной операции.</summary>
      <returns>Конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="func" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>Применяет к последовательности агрегатную функцию.Указанное начальное значение служит исходным значением для агрегатной операции, а указанная функция используется для выбора результирующего значения.</summary>
      <returns>Преобразованное конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <param name="selector">Функция, преобразующая конечное агрегатное значение в результирующее значение.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <typeparam name="TResult">Тип результирующего значения.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="func" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Проверяет, все ли элементы последовательности удовлетворяют условию.</summary>
      <returns>true, если каждый элемент исходной последовательности проходит проверку, определяемую указанным предикатом, или если последовательность пуста; в противном случае — false.</returns>
      <param name="source">Последовательность, элементы которой проверяются на соответствие условию.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>Проверяет, содержит ли последовательность какие-либо элементы.</summary>
      <returns>true, если исходная последовательность содержит какие-либо элементы, в противном случае — false.</returns>
      <param name="source">Последовательность, проверяемая на наличие элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Проверяет, удовлетворяет ли какой-либо элемент последовательности заданному условию.</summary>
      <returns>true, если какие-либо элементы исходной последовательности проходят проверку, определяемую указанным предикатом; в противном случае — false.</returns>
      <param name="source">Последовательность, элементы которой проверяются на соответствие условию.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Преобразовывает универсальный объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> в универсальный объект <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, представляющий входную последовательность.</returns>
      <param name="source">Последовательность, подлежащая преобразованию.</param>
      <typeparam name="TElement">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>Преобразовывает объект <see cref="T:System.Collections.IEnumerable" /> в <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable" />, представляющий входную последовательность.</returns>
      <param name="source">Последовательность, подлежащая преобразованию.</param>
      <exception cref="T:System.ArgumentException">Последовательность <paramref name="source" /> не реализует объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> для некоторых типов <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Decimal" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Double" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int32" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int64" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" /> обнуляемого типа, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" /> обнуляемого типа, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />обнуляемого типа, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" /> обнуляемого типа, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" /> обнуляемого типа, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Single" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Decimal" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Double" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int32" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int64" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа, которая получается в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если последовательность <paramref name="source" /> пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Double" /> обнуляемого типа, которая получается в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если последовательность <paramref name="source" /> пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int32" /> обнуляемого типа, которая получается в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если последовательность <paramref name="source" /> пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int64" /> обнуляемого типа, которая получается в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если последовательность <paramref name="source" /> пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Single" /> обнуляемого типа, которая получается в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности, или null, если последовательность <paramref name="source" /> пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Single" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>Преобразовывает элементы объекта <see cref="T:System.Linq.IQueryable" /> в заданный тип.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит все элементы исходной последовательности, преобразованные в заданный тип.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable" />, содержащий преобразуемые элементы.</param>
      <typeparam name="TResult">Тип, в который преобразуются элементы объекта <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Объединяет две последовательности.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий объединенные элементы двух входных последовательностей.</returns>
      <param name="source1">Первая из объединяемых последовательностей.</param>
      <param name="source2">Последовательность, объединяемая с первой последовательностью.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>Определяет, содержится ли указанный элемент в последовательности, используя компаратор проверки на равенство по умолчанию.</summary>
      <returns>true, если входная последовательность содержит элемент с указанным значением, в противном случае — false.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, в котором требуется найти элемент <paramref name="item" />.</param>
      <param name="item">Объект, который требуется найти в последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Определяет, содержит ли последовательность заданный элемент, используя указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true, если входная последовательность содержит элемент с указанным значением, в противном случае — false.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, в котором требуется найти элемент <paramref name="item" />.</param>
      <param name="item">Объект, который требуется найти в последовательности.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает количество элементов в последовательности.</summary>
      <returns>Число элементов во входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает количество элементов указанной последовательности, удовлетворяющих определенному условию.</summary>
      <returns>Число элементов последовательности, удовлетворяющих условию функции предиката.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает элементы указанной последовательности или одноэлементную коллекцию, содержащую значение параметра типа по умолчанию, если последовательность пуста.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий значение default(<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста; в противном случае возвращается <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, для которого возвращается значение по умолчанию, если последовательность пуста.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>Возвращает элементы указанной последовательности или одноэлементную коллекцию, содержащую указанное значение, если последовательность пуста.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий значение <paramref name="defaultValue" />, если последовательность <paramref name="source" /> пуста; в противном случае возвращается <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, для которого возвращается указанное значение, если последовательность пуста.</param>
      <param name="defaultValue">Значение, возвращаемое в случае пустой последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий различающиеся элементы из последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется удалить дубликаты.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Возвращает различающиеся элементы последовательности, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий различающиеся элементы из последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется удалить дубликаты.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="comparer" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Возвращает элемент по указанному индексу в последовательности.</summary>
      <returns>Элемент, находящийся в указанной позиции в последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="index">Отсчитываемый от нуля индекс извлекаемого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Возвращает элемент по указанному индексу в последовательности или значение по умолчанию, если индекс вне допустимого диапазона.</summary>
      <returns>default(<paramref name="TSource" />), если позиция <paramref name="index" /> находится вне последовательности <paramref name="source" />; в противном случае — элемент, находящийся в указанной позиции в последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="index">Отсчитываемый от нуля индекс извлекаемого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, являющийся разностью двух последовательностей как множеств.</returns>
      <param name="source1">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется извлечь элементы, отсутствующие в последовательности <paramref name="source2" />.</param>
      <param name="source2">Последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которой, входящие также в первую последовательность, не будут включены в возвращаемую последовательность.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, являющийся разностью двух последовательностей как множеств.</returns>
      <param name="source1">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется извлечь элементы, отсутствующие в последовательности <paramref name="source2" />.</param>
      <param name="source2">Последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которой, входящие также в первую последовательность, не будут включены в возвращаемую последовательность.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает первый элемент последовательности.</summary>
      <returns>Первый элемент последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает первый элемент последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Первый элемент последовательности <paramref name="source" />, прошедший проверку с помощью предиката <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>default(<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста, в противном случае — первый элемент последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает первый элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <returns>default(<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста или если ни один ее элемент не прошел проверку, определенную предикатом <paramref name="predicate" />; в противном случае — первый элемент последовательности <paramref name="source" />, прошедший проверку, определенную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Объект IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; в C# или IQueryable(Of IGrouping(Of TKey, TSource)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и сравнивает ключи с помощью указанного компаратора.</summary>
      <returns>Объект IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; в C# или IQueryable(Of IGrouping(Of TKey, TSource)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и проецирует элементы каждой группы с помощью указанной функции.</summary>
      <returns>Объект IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; в C# или IQueryable(Of IGrouping(Of TKey, TElement)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов типа <paramref name="TElement" /> и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов каждого объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности и проецирует элементы каждой группы с помощью указанной функции.Значения ключей сравниваются с использованием заданного компаратора.</summary>
      <returns>Объект IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; в C# или IQueryable(Of IGrouping(Of TKey, TElement)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов типа <paramref name="TElement" /> и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов каждого объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" /> или <paramref name="comparer" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Объект T:System.Linq.IQueryable`1 с аргументом типа <paramref name="TResult" />, каждый элемент которого представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов каждого объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Ключи сравниваются с помощью указанного компаратора, элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Объект T:System.Linq.IQueryable`1 с аргументом типа <paramref name="TResult" />, каждый элемент которого представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом объекта <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов каждого объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" />, <paramref name="resultSelector" /> или <paramref name="comparer" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.</summary>
      <returns>Объект T:System.Linq.IQueryable`1 с аргументом типа <paramref name="TResult" />, каждый элемент которого представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Ключи сравниваются с использованием заданного компаратора.</summary>
      <returns>Объект T:System.Linq.IQueryable`1 с аргументом типа <paramref name="TResult" />, каждый элемент которого представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого функцией <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" />, <paramref name="resultSelector" /> или <paramref name="comparer" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате соединения двух последовательностей с группировкой.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.Для сравнения ключей используется указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате соединения двух последовательностей с группировкой.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <param name="comparer">Компаратор, используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит пересечение множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность, представляющая собой пересечение двух заданных последовательностей как множеств.</returns>
      <param name="source1">Последовательность, из которой возвращаются различающиеся элементы, входящие также в <paramref name="source2" />.</param>
      <param name="source2">Последовательность, из которой возвращаются различающиеся элементы, входящие также в первую последовательность.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит пересечение множеств, представленных двумя последовательностями, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, являющийся пересечением двух последовательностей как множеств.</returns>
      <param name="source1">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется извлечь различающиеся элементы, входящие также в последовательность <paramref name="source2" />.</param>
      <param name="source2">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в первую последовательность.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате внутреннего соединения двух последовательностей.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.Для сравнения ключей используется указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате внутреннего соединения двух последовательностей.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает последний элемент последовательности.</summary>
      <returns>Значение, находящееся в последней позиции последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, последний элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает последний элемент последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Последний элемент последовательности <paramref name="source" />, прошедший проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>default(<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста, в противном случае — последний элемент последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, последний элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает последний элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <returns>default(<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста или ни один ее элемент не прошел проверку функцией предиката, в противном случае — последний элемент последовательности <paramref name="source" />, прошедший проверку функцией предиката.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает значение типа <see cref="T:System.Int64" />, представляющее общее число элементов в последовательности.</summary>
      <returns>Число элементов в последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает значение типа <see cref="T:System.Int64" />, представляющее число элементов последовательности, удовлетворяющих заданному условию.</summary>
      <returns>Число элементов последовательности <paramref name="source" />, удовлетворяющих условию функции предиката.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает максимальное значение для универсального интерфейса <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимум.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Вызывает функцию проекции для каждого элемента универсального интерфейса <see cref="T:System.Linq.IQueryable`1" /> и возвращает максимальное результирующее значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимум.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает минимальное значение для универсального интерфейса <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимум.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Вызывает функцию проекции для каждого элемента универсального интерфейса <see cref="T:System.Linq.IQueryable`1" /> и возвращает минимальное результирующее значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимум.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>Выполняет фильтрацию элементов объекта <see cref="T:System.Linq.IQueryable" /> по заданному типу.</summary>
      <returns>Коллекция элементов последовательности <paramref name="source" />, имеющих тип <paramref name="TResult" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable" />, элементы которого следует фильтровать.</param>
      <typeparam name="TResult">Тип, по которому фильтруются элементы последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Сортирует элементы последовательности в порядке возрастания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Сортирует элементы последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Сортирует элементы последовательности в порядке убывания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Сортирует элементы последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>Изменяет порядок элементов последовательности на противоположный.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого соответствуют элементам входной последовательности, но следуют в противоположном порядке.</returns>
      <param name="source">Последовательность значений, которые следует расставить в обратном порядке.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Проецирует каждый элемент последовательности в новую форму.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции для каждого элемента последовательности <paramref name="source" />.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>Проецирует каждый элемент последовательности в новую форму, добавляя индекс элемента.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции для каждого элемента последовательности <paramref name="source" />.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и вызывает функцию селектора результата для каждого элемента.Результирующие значения из всех промежуточных последовательностей возвращаются объединенными в одну одномерную последовательность.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему элемента последовательности <paramref name="source" /> с результирующим элементом.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector">Функция проекции, применяемая к каждому элементу входной последовательности.</param>
      <param name="resultSelector">Функция проекции, применяемая к каждому элементу каждой промежуточной последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных функцией, заданной параметром <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции "один ко многим" для каждого элемента входной последовательности.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов последовательности, возвращаемых функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, включающий индекс исходного элемента, на основе которого он был создан.Для каждого элемента каждой промежуточной последовательности вызывается функция селектора результата, и результирующие значения возвращаются объединенными в одну одномерную последовательность.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему элемента последовательности <paramref name="source" /> с результирующим элементом.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector">Функция проекции, применяемая к каждому элементу входной последовательности; второй параметр этой функции представляет индекс исходного элемента.</param>
      <param name="resultSelector">Функция проекции, применяемая к каждому элементу каждой промежуточной последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных функцией, заданной параметром <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.Индекс каждого элемента исходной последовательности используется в проецированной форме этого элемента.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции "один ко многим" для каждого элемента входной последовательности.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу; второй параметр этой функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов последовательности, возвращаемых функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Определяет, совпадают ли две последовательности, используя для сравнения элементов компаратор проверки на равенство по умолчанию.</summary>
      <returns>true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают, в противном случае — false.</returns>
      <param name="source1">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого сравниваются с элементами последовательности <paramref name="source2" />.</param>
      <param name="source2">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого сравниваются с элементами первой последовательности.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Определяет, совпадают ли две последовательности, используя для сравнения элементов указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают, в противном случае — false.</returns>
      <param name="source1">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого сравниваются с элементами последовательности <paramref name="source2" />.</param>
      <param name="source2">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого сравниваются с элементами первой последовательности.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения элементов.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает единственный элемент последовательности и генерирует исключение, если число элементов последовательности отлично от 1.</summary>
      <returns>Единственный элемент входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> имеет более одного элемента.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает единственный элемент последовательности, удовлетворяющий заданному условию, и генерирует исключение, если таких элементов больше одного.</summary>
      <returns>Единственный элемент входной последовательности, удовлетворяющий условию предиката <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить единственный элемент.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию предиката <paramref name="predicate" />.— или —Условию предиката <paramref name="predicate" /> удовлетворяет более одного элемента.— или —Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает единственный элемент последовательности или значение по умолчанию, если последовательность пуста; если в последовательности более одного элемента, генерируется исключение.</summary>
      <returns>Единственный элемент входной последовательности или default(<paramref name="TSource" />), если в последовательности нет элементов.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает единственный элемент последовательности, удовлетворяющий заданному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, генерируется исключение.</summary>
      <returns>Единственный элемент входной последовательности, удовлетворяющий условию предиката <paramref name="predicate" />, или default(<paramref name="TSource" />), если такой элемент не найден.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить единственный элемент.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Пропускает заданное число элементов в последовательности и возвращает остальные элементы.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы из входной последовательности, начиная с указанного индекса.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элементы.</param>
      <param name="count">Число элементов, пропускаемых перед возвращением остальных элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий цепочку элементов последовательности <paramref name="source" />, начиная с первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элементы.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.Индекс элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий цепочку элементов последовательности <paramref name="source" />, начиная с первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элементы.</param>
      <param name="predicate">Функция, применяемая к каждому элементу для проверки условия; второй параметр этой функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Decimal" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Double" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Int32" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Int64" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Decimal" /> обнуляемого типа.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Double" /> обнуляемого типа.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Int32" /> обнуляемого типа.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Int64" /> обнуляемого типа.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Single" /> обнуляемого типа.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" /> обнуляемого типа, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Single" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Decimal" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Double" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Int32" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Int64" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Decimal" /> (допускающей значения NULL), получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Double" /> (допускающей значения NULL), получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Int32" /> (допускающей значения NULL), получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Вычисляет сумму последовательности значений <see cref="T:System.Int64" /> обнуляемого типа, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Single" /> (допускающей значения NULL), получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Вычисляет сумму последовательности значений типа <see cref="T:System.Single" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Возвращает указанное число подряд идущих элементов с начала последовательности.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий заданное число элементов с начала последовательности <paramref name="source" />.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="count">Число возвращаемых элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает цепочку элементов последовательности, удовлетворяющих указанному условию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы входной последовательности до первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Возвращает цепочку элементов последовательности, удовлетворяющих указанному условию.Индекс элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы входной последовательности до первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция, применяемая к каждому элементу для проверки условия; второй параметр этой функции представляет индекс элемента в исходной последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке убывания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="keySelector" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <returns>Коллекция, элементы которой отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит объединение множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
      <param name="source1">Последовательность, различающиеся элементы которой образуют первое множество для операции объединения.</param>
      <param name="source2">Последовательность, различающиеся элементы которой образуют второе множество для операции объединения.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит объединение множеств, представленных двумя последовательностями, используя указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
      <param name="source1">Последовательность, различающиеся элементы которой образуют первое множество для операции объединения.</param>
      <param name="source2">Последовательность, различающиеся элементы которой образуют второе множество для операции объединения.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source1" /> или <paramref name="source2" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Выполняет фильтрацию последовательности значений на основе заданного предиката.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы входной последовательности, которые удовлетворяют условию, заданному предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, подлежащий фильтрации.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Выполняет фильтрацию последовательности значений на основе заданного предиката.Индекс каждого элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы входной последовательности, которые удовлетворяют условию, заданному предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, подлежащий фильтрации.</param>
      <param name="predicate">Функция, применяемая к каждому элементу для проверки условия; второй параметр этой функции представляет индекс элемента в исходной последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Объединяет две последовательности, используя указанную функцию предиката.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий объединенные элементы двух входных последовательностей.</returns>
      <param name="source1">Первая последовательность для объединения.</param>
      <param name="source2">Вторая последовательность для объединения.</param>
      <param name="resultSelector">Функция, которая определяет, как объединить элементы двух последовательностей.</param>
      <typeparam name="TFirst">Тип элементов первой входной последовательности.</typeparam>
      <typeparam name="TSecond">Тип элементов второй входной последовательности.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Представляет выражение, содержащее бинарный оператор.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Получает значение, которое указывает, можно ли сократить узел дерева выражений.</summary>
      <returns>Значение true, если узел дерева выражений можно сократить; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Получает функцию преобразования типа, используемую операцией преобразования или составного присваивания.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, представляющий тип функции преобразования.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора.</summary>
      <returns>true, если узел представляет удаленный вызов; в противном случае — false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора, тип возврата которого удален для типа со значением NULL.</summary>
      <returns>true, если тип возврата оператора удален до типа со значением NULL, иначе возвращается значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Получает левый операнд бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет левый операнд бинарной операции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Получает реализацию метода для бинарной операции.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Сокращает узел бинарных выражений до более простого выражения.</summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Получает правый операнд бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет правый операнд бинарной операции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="left">Свойство <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> результата. </param>
      <param name="conversion">Свойство <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> результата.</param>
      <param name="right">Свойство <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> результата. </param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Представляет блок, содержащий последовательность выражений, в которых могут быть определены переменные.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Получает выражения в этом блоке.</summary>
      <returns>Доступная только для чтения коллекция, содержащая все выражения данного блока.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Получает последнее выражение в этом блоке.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий последнее выражение в этом блоке.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.BlockExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="variables">Свойство <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> результата. </param>
      <param name="expressions">Свойство <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> результата. </param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Получает переменные, определенные в данном блоке.</summary>
      <returns>Доступная только для чтения коллекция, содержащая все переменные данного блока.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Представляет оператор catch в блоке try.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Получает тело блока catch.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока catch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Получает тело фильтра <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело фильтра <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Получает тип исключений <see cref="T:System.Exception" />, перехватываемых этим обработчиком.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип исключений <see cref="T:System.Exception" />, перехватываемых этим обработчиком.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Возвращает объект <see cref="T:System.String" />, который представляет текущий объект <see cref="T:System.Object" />.</summary>
      <returns>Объект <see cref="T:System.String" />, представляющий текущий объект <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="variable">Свойство <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> результата.</param>
      <param name="filter">Свойство <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> результата.</param>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> результата.</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Получает ссылку на объект <see cref="T:System.Exception" />, перехватываемый этим обработчиком.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, который представляет ссылку на объект <see cref="T:System.Exception" />, перехватываемый этим обработчиком.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Представляет выражение, содержащее условный оператор.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Получает выражение для выполнения, если проверка имеет значение false.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.Expression" />, представляющее выражение для выполнения, если значение проверки вычислено как false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Получает выражение для выполнения, если проверка имеет значение true.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.Expression" />, представляющее выражение для выполнения, если значение проверки вычислено как true.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Получает проверку условной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет проверку условной операции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="test">Свойство <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> результата.</param>
      <param name="ifTrue">Свойство <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> результата.</param>
      <param name="ifFalse">Свойство <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Представляет выражение, содержащее постоянное значение.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Возвращает значение постоянного выражения.</summary>
      <returns>Значение <see cref="T:System.Object" /> значению представленного выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Выпускает или очищает точку следования для сведений отладки.Это позволяет отладчику выделять при отладке правильный исходный код.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Получает конечный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер конечного столбца кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Получает конечную строку данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер конечной строки кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Получает значение, указывающее, предназначено ли выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки следования.</summary>
      <returns>Значение true, если выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> предназначено для очистки точки следования; в противном случае — выражение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Получает начальный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер начального столбца кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Получает начальную строку данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер начальной строки кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Представляет значение по умолчанию для типа или пустое выражение.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Представляет динамическую операцию.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Получает аргументы для динамической операции.</summary>
      <returns>Доступная только для чтения коллекция, содержащая аргументы динамической операции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Получает объект <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, который определят поведение динамического сайта во время выполнения.</summary>
      <returns>Объект <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, который определят поведение динамического сайта во время выполнения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Получает тип делегата, используемого объектом <see cref="T:System.Runtime.CompilerServices.CallSite" />.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип делегата, используемого объектом <see cref="T:System.Runtime.CompilerServices.CallSite" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Представляет инициализатор отдельного элемента коллекции <see cref="T:System.Collections.IEnumerable" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Получает метод экземпляра, который используется для добавления элемента в коллекцию <see cref="T:System.Collections.IEnumerable" />.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />, который представляет метод экземпляра, который добавляет элемент в коллекцию.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Получает коллекцию аргументов, которые передаются методу, которые добавляет элемент в коллекцию <see cref="T:System.Collections.IEnumerable" />.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы для метода, добавляющего элемент к коллекции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Возвращает текстовое представление объекта <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>Текстовое представление объекта <see cref="T:System.Linq.Expressions.ElementInit" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Предоставляет базовый класс, производными от которого являются классы, представляющие узлы дерева выражения.Также содержит заводские методы static (Shared в Visual Basic) для создания различных типов узлов.Это класс abstract.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Создает новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <param name="nodeType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, чтобы установить в качестве типа узла.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> данного объекта <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания сложения, не содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания сложения, содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, содержащую проверку переполнения.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию AND.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.And" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Побитовый оператор AND не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию AND.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.And" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и побитовый операторAND не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию AND, вычисляющую второй операнд, только если первый операнд имеет значение true.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Побитовый оператор AND не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.— или —Типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию AND, вычисляющую второй операнд, только если первый операнд имеет значение true.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и побитовый операторAND не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.— или —Метод <paramref name="method" /> равен null, а типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания AND.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к многомерному массиву.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">Выражение, представляющее многомерный массив.</param>
      <param name="indexes">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий выражения для индексации массива.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к массиву.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">Выражение, представляющее индексируемый массив.</param>
      <param name="indexes">Массив, содержащий выражения для индексации массива.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее применение оператора индекса массива к массиву с рангом более одного.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="array">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />.</param>
      <param name="indexes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> или <paramref name="indexes" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="array" />.Type не представляет тип массива.— или —Ранг типа <paramref name="array" />.Type не соответствует количеству элементов в <paramref name="indexes" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="indexes" /> не представляет тип <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее применение оператора индекса массива к массиву ранга один.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="array">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="index">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> или <paramref name="index" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="array" />.Type не представляет тип массива.— или —Тип <paramref name="array" />.Type представляет тип массива, ранг которого не равен 1.— или —Тип <paramref name="index" />.Type не представляет тип <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее применение оператора индекса массива к многомерному массиву.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="array">Массив экземпляров <see cref="T:System.Linq.Expressions.Expression" />, которые являются индексами для операции индекса массива.</param>
      <param name="indexes">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> или <paramref name="indexes" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="array" />.Type не представляет тип массива.— или —Ранг типа <paramref name="array" />.Type не соответствует количеству элементов в <paramref name="indexes" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="indexes" /> не представляет тип <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> для получения длины одномерного массива.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />, и свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, равное <paramref name="array" />.</returns>
      <param name="array">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="array" />.Type не представляет тип массива.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию поля или свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberAssignment" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> и <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, и свойства <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />, для которых заданы указанные значения.</returns>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="member" /> или <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.— или —Свойство, представленное <paramref name="member" />, не обладает доступа set.— или —Тип <paramref name="expression" />.Type не может быть назначен типу поля или свойства, который представляет <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию элемента с помощью метода доступа свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberAssignment" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, доступ к которому осуществляется в <paramref name="propertyAccessor" />, и свойство <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />, для которого задано значение <paramref name="expression" />.</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyAccessor" /> или <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа свойства.— или —Свойство, с доступом <paramref name="propertyAccessor" />, не обладает доступом set.— или —Тип <paramref name="expression" />.Type не может быть назначен типу поля или свойства, который представляет <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий заданные выражения и не содержащий переменных.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее два выражения и не содержащее переменных.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее три выражения и не содержащее переменных.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
      <param name="arg2">Третье выражение в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее четыре выражения и не содержащее переменных.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
      <param name="arg2">Третье выражение в блоке.</param>
      <param name="arg3">Четвертое выражение в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее пять выражений и не содержащее переменных.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
      <param name="arg2">Третье выражение в блоке.</param>
      <param name="arg3">Четвертое выражение в блоке.</param>
      <param name="arg4">Пятое выражение в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий заданные выражения и не содержащий переменных.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее данные выражения, не содержащее переменных и имеющее конкретный тип результатов.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Тип результата блока.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Тип результата блока.</param>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Тип результата блока.</param>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее данные выражения, не содержащее переменных и имеющее конкретный тип результатов.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Тип результата блока.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break с указанным типом.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break с указанным типом.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода экземпляра без аргументов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="instance">Выражение <see cref="T:System.Linq.Expressions.Expression" />, задающее экземпляр для вызова метода экземпляра(для метода static (Shared в Visual Basic) передается null).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> имеет значение null;— или —Параметр <paramref name="instance" /> является типом null, и <paramref name="method" /> представляет метод экземпляра.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="instance" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода, принимающего аргументы.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />, чтобы задать свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, равное (передать null для метода static (Shared в Visual Basic)).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> имеет значение null;— или —Параметр <paramref name="instance" /> является типом null, и <paramref name="method" /> представляет метод экземпляра.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="instance" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="method" />.— или —Количество элементов в <paramref name="arguments" /> не равно количеству параметров для метода, представленного <paramref name="method" />.— или —Один или несколько элементов <paramref name="arguments" /> нельзя назначить для соответствующего параметра для метода, представленного параметром <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего два аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="instance">Выражение <see cref="T:System.Linq.Expressions.Expression" />, указывающее экземпляр для вызова экземпляра.(для статического метода (Shared в Visual Basic) передается NULL).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода без аргументов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="instance">Выражение <see cref="T:System.Linq.Expressions.Expression" />, указывающее экземпляр для вызова экземпляра.(для статического метода (Shared в Visual Basic) передается NULL).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего аргументы.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="instance">Выражение <see cref="T:System.Linq.Expressions.Expression" />, задающее экземпляр для вызова метода экземпляра(для метода static (Shared в Visual Basic) передается null).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> имеет значение null;— или —Параметр <paramref name="instance" /> является типом null, и <paramref name="method" /> представляет метод экземпляра.— или —<paramref name="arguments" /> не равно null, а один или несколько элементов равно null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="instance" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="method" />.— или —Количество элементов в <paramref name="arguments" /> не равно количеству параметров для метода, представленного <paramref name="method" />.— или —Один или несколько элементов <paramref name="arguments" /> нельзя назначить для соответствующего параметра для метода, представленного параметром <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов для метода экземпляра, вызывая соответствующий заводской метод.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, равное <paramref name="instance" />, для <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, задано значение <see cref="T:System.Reflection.MethodInfo" />, представляющее указанный метод экземпляра, а для указанных аргументов заданы значения <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</returns>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />, для значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" /> которого будет выполнен поиск определенного метода</param>
      <param name="methodName">Имя метода.</param>
      <param name="typeArguments">Массив объектов <see cref="T:System.Type" />, указывающий тип параметров универсального метода.Если methodName задает неуниверсальный метод, данный аргумент должен иметь значение NULL.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, который представляет аргументы для метода.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="instance" /> или <paramref name="methodName" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Отсутствует метод с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" /> и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="instance" />.Type или его базовых типах.— или —Больше одного метода с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" />, и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="instance" />.Type или его базовых типах.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода (Shared в Visual Basic).</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</param>
      <param name="arguments">Коллекция выражений <see cref="T:System.Linq.Expressions.Expression" />, представляющая аргументы вызова.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода static (Shared в Visual Basic), принимающего один аргумент.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего два аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего три аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего четыре аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
      <param name="arg3">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий четвертый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего пять аргументов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
      <param name="arg3">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий четвертый аргумент.</param>
      <param name="arg4">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий пятый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода static (Shared в Visual Basic), принимающего аргументы.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод static (Shared в Visual Basic), чтобы задать значение <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> для свойства.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в <paramref name="arguments" /> не равно количеству параметров для метода, представленного <paramref name="method" />.— или —Один или несколько элементов <paramref name="arguments" /> нельзя назначить для соответствующего параметра для метода, представленного параметром <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов для метода static (Shared в Visual Basic), вызывая соответствующий заводской метод.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, для свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> задано значение <see cref="T:System.Reflection.MethodInfo" />, представляющее указанный метод static (Shared в Visual Basic), а для свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />  заданы указанные аргументы.</returns>
      <param name="type">Объект <see cref="T:System.Type" />, указывающий тип, который содержит указанный метод static (Shared в Visual Basic).</param>
      <param name="methodName">Имя метода.</param>
      <param name="typeArguments">Массив объектов <see cref="T:System.Type" />, указывающий тип параметров универсального метода.Если methodName задает неуниверсальный метод, данный аргумент должен иметь значение NULL.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, которые представляют аргументы для метода.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> или <paramref name="methodName" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Отсутствует метод с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" /> и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="type" /> или его базовых типах.— или —Больше одного метода с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" />, и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="type" /> или его базовых типах.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Указывает, что узел можно сократить до более простого.Если возвращается значение true, для получения сокращенной формы можно вызвать Reduce().</summary>
      <returns>Значение true, если узел можно сократить; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch со ссылкой на перехваченный объект <see cref="T:System.Exception" />, который используется в теле обработчика.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">Выражение <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющее ссылку на объект <see cref="T:System.Exception" />, перехваченный этим обработчиком.</param>
      <param name="body">Тело оператора catch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с фильтром <see cref="T:System.Exception" /> и ссылкой на перехваченный объект <see cref="T:System.Exception" />.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">Выражение <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющее ссылку на объект <see cref="T:System.Exception" />, перехваченный этим обработчиком.</param>
      <param name="body">Тело оператора catch.</param>
      <param name="filter">Тело фильтра <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатываться этим объектом <see cref="T:System.Linq.Expressions.CatchBlock" />.</param>
      <param name="body">Тело оператора catch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с фильтром <see cref="T:System.Exception" />, но без ссылки на перехваченный объект <see cref="T:System.Exception" />.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> исключения <see cref="T:System.Exception" />, которое будет обрабатывать этот объект <see cref="T:System.Linq.Expressions.CatchBlock" />.</param>
      <param name="body">Тело оператора catch.</param>
      <param name="filter">Тело фильтра <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки следования.</summary>
      <returns>Экземпляр объекта <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки следования.</returns>
      <param name="document">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> параметра <paramref name="left" /> не представляет тип ссылки или тип, поддерживающий значение null.</exception>
      <exception cref="T:System.ArgumentException">Типы <paramref name="left" />.Type и <paramref name="right" />.Type не преобразовываются друг в друга.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию, заданную функции преобразования.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Типы <paramref name="left" />.Type и <paramref name="right" />.Type не преобразовываются друг в друга.— или —<paramref name="conversion" /> не является null, а тип <paramref name="conversion" />.Type является типом делегата, не принимающим ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> параметра <paramref name="left" /> не представляет тип ссылки или тип, поддерживающий значение null.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /><paramref name="left" /> представляет тип, который не назначается для типа параметра типа делегата <paramref name="conversion" />.Type.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /><paramref name="right" /> не равно типу возврата типа делегата <paramref name="conversion" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.</returns>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="test" />, <paramref name="ifTrue" /> или <paramref name="ifFalse" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="test" />.Type не является типом <see cref="T:System.Boolean" />.— или —Тип <paramref name="ifTrue" />.Type не равен типу <paramref name="ifFalse" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, и свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.</returns>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Создает <see cref="T:System.Linq.Expressions.ConstantExpression" />, для свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> которого задано указанное значение.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConstantExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />, и свойством <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />, для которого задано указанное значение.</returns>
      <param name="value">Объект <see cref="T:System.Object" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.ConstantExpression" />, содержащее свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConstantExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />, и свойствами <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</returns>
      <param name="value">Объект <see cref="T:System.Object" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="value" /> не имеет значение null, а <paramref name="type" /> не может быть назначен из динамического типа <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue с указанным типом.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования типа.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, который представляет операцию преобразования, для которой указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не обладает ровно одним аргументом.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.— или —Параметр <paramref name="expression" />.Type не назначается типу аргумента метода, представленному параметром <paramref name="method" />.— или —Тип возврата метода, представленный <paramref name="method" />, не назначается для <paramref name="type" />.— или —Тип <paramref name="expression" />.Type или <paramref name="type" /> поддерживает тип значения, а соответствующий тип, не поддерживающий значение null, не равен типу аргумента и типу возврата, соответственно метода, представленного <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Найдено более одного метода, соответствующего описанию <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования, создающую исключение, если целевой тип переполнен.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию преобразования, создающую исключение, если целевой тип переполнен, и для которой указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не обладает ровно одним аргументом.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.— или —Параметр <paramref name="expression" />.Type не назначается типу аргумента метода, представленному параметром <paramref name="method" />.— или —Тип возврата метода, представленный <paramref name="method" />, не назначается для <paramref name="type" />.— или —Тип <paramref name="expression" />.Type или <paramref name="type" /> поддерживает тип значения, а соответствующий тип, не поддерживающий значение null, не равен типу аргумента и типу возврата, соответственно метода, представленного <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Найдено более одного метода, соответствующего описанию <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> с заданным диапазоном.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</returns>
      <param name="document">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</param>
      <param name="startLine">Начальная строка данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Должно быть больше 0.</param>
      <param name="startColumn">Начальный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Должно быть больше 0.</param>
      <param name="endLine">Конечная строка данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Значение должно быть больше или равно значению начальной строки.</param>
      <param name="endColumn">Конечный столбец данного объекта <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Если конечная строка совпадает с начальной строкой, это значение должно быть больше или равно значению начального столбца.В любом случае оно должно быть больше 0.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшенное выражение.</returns>
      <param name="expression">Уменьшаемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшенное выражение.</returns>
      <param name="expression">Уменьшаемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DefaultExpression" />, для свойства <see cref="P:System.Linq.Expressions.Expression.Type" /> которого задан указанный тип.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DefaultExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Default" />, и свойством <see cref="P:System.Linq.Expressions.Expression.Type" />, для которого задан указанный тип.</returns>
      <param name="type">Свойству <see cref="P:System.Linq.Expressions.Expression.Type" /> необходимо задать значение, равное объекту <see cref="T:System.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического деления.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор деления не определен для типов <paramref name="left" /> и <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического деления.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор деления не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания деления, не содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arguments">Аргументы динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <param name="arg3">Четвертый аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arguments">Аргументы динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.ElementInit" />, присвоенный <see cref="T:System.Collections.Generic.IEnumerable`1" /> в качестве второго аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ElementInit" />, содержащее свойства  <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> и <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="addMethod">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</param>
      <param name="arguments">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит объекты <see cref="T:System.Linq.Expressions.Expression" />, которые следует задать для свойства <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="addMethod" /> или <paramref name="arguments" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Метод, представленный параметром <paramref name="addMethod" />, не назван "Add" (без учета регистра).— или —Метод, представленный параметром <paramref name="addMethod" />, не является методом экземпляра.— или —<paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для метода, представленного <paramref name="addMethod" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра метода, представленного параметром <paramref name="addMethod" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.ElementInit" />, присвоенный массиву значений в качестве второго аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ElementInit" /> со свойствами <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> и <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="addMethod">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, которые следует задать для свойства <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="addMethod" /> или <paramref name="arguments" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Название метода, представленного параметром addMethod, отлично от "Add" (без учета регистра).— или —Метод, представленный параметром addMethod, не является методом экземпляра.— или —Число элементов, содержащихся в параметре arguments, отличается от числа параметров для метода, представленного параметром addMethod.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра метода, представленного параметром <paramref name="addMethod" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Создает пустое выражение типа <see cref="T:System.Void" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DefaultExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Default" />, и свойством <see cref="P:System.Linq.Expressions.Expression.Type" />, для которого задано значение <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение равенства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор равенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение равенства.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение true; false, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, а оператор равенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию XOR с использованием op_ExclusiveOr для пользовательских типов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">ОператорXOR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию XOR с использованием op_ExclusiveOr для пользовательских типов.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а оператор XOR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием op_ExclusiveOr для пользовательских типов.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием op_ExclusiveOr для пользовательских типов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания XOR с использованием op_ExclusiveOr для пользовательских типов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, и свойствами <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> и <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.Для static (Shared в Visual Basic), <paramref name="expression" /> должен иметь значение null.</param>
      <param name="field">Объект <see cref="T:System.Reflection.FieldInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> имеет значение null;— или —Поле, представленное параметром <paramref name="field" />, не является static (Shared в Visual Basic), и <paramref name="expression" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="expression" />.Type не назначается объявляемому типу поля, представленному параметром <paramref name="field" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к полю, которому предоставлено имя поля.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоено значение <see cref="T:System.Reflection.FieldInfo" />, представляющее поле, обозначенное с помощью параметра <paramref name="fieldName" />.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> где <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит поле с именем <paramref name="fieldName" />.Для статических полей допускается значение NULL.</param>
      <param name="fieldName">Имя поля для доступа.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="fieldName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Не определено поле с именем <paramref name="fieldName" /> для параметра <paramref name="expression" />.Type или его базовых типов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">Объект, содержащий поле.Для статических полей допускается значение NULL.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, содержащий поле.</param>
      <param name="fieldName">Поле для доступа.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Создает объект <see cref="T:System.Type" />, представляющий универсальный тип делегата System.Action с заданными аргументами типа.</summary>
      <returns>Тип делегатаSystem.Action с определенными аргументами типа.</returns>
      <param name="typeArgs">Массив объектов <see cref="T:System.Type" />, задающих тип аргументов для типа делегата System.Action.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> содержит более четырех элементов.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Получает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func или System.Action с определенным типом аргументов.</summary>
      <returns>Тип делегата.</returns>
      <param name="typeArgs">Тип аргументов делегата.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func с определенным типом аргументов.Аргумент последнего типа задает тип возврата созданного делегата.</summary>
      <returns>Тип делегатаSystem.Func с определенными аргументами типа.</returns>
      <param name="typeArgs">Массив от одного до пяти объектов <see cref="T:System.Type" />, указывающих тип аргументов для типа делегата System.Func.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> содержит менее одного или более пяти элементов.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — указанное значение, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор goto с указанным типом.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение в параметре <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор goto с указанным типом.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — указанное значение, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее числовое сравнение объектов "больше, чем".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "больше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее числовое сравнение объектов "больше, чем".Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение true; false, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null, а оператор "больше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "больше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение true; false, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, а оператор "больше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный блок с оператором if.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, для которых заданы указанные значения.Свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> присваивается значение выражения по умолчанию, тип получаемого выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />, возвращаемого этим методом, — <see cref="T:System.Void" />.</returns>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный блок с операторами if и else.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, и свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.Тип выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />, возвращаемого этим методом, — <see cref="T:System.Void" />.</returns>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличение значения выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличенное выражение.</returns>
      <param name="expression">Увеличиваемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличение выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличенное выражение.</returns>
      <param name="expression">Увеличиваемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, применяющее делегат или лямбда-выражение к списку выражений аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, которое применяет заданный делегат или лямбда-выражение к предоставленным аргументам.</returns>
      <param name="expression">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат или лямбда-выражение для применения.</param>
      <param name="arguments">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, представляющие аргументы, к которым применяется делегат или лямбда-выражение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не представляет тип делегата или <see cref="T:System.Linq.Expressions.Expression`1" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> не содержит количество элементов, равное количеству списка параметров для делегата, представленного <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, применяющее делегат или лямбда-выражение к списку выражений аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, которое применяет заданный делегат или лямбда-выражение к предоставленным аргументам.</returns>
      <param name="expression">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат или лямбда-выражение для применения.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы, к которым применяется делегат или лямбда-выражение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не представляет тип делегата или <see cref="T:System.Linq.Expressions.Expression`1" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> не содержит количество элементов, равное количеству списка параметров для делегата, представленного <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение false.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение false.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение true.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение true.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void и без имени.</summary>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelExpression" />, представляющий метку без значения по умолчанию.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LabelExpression" /> без значения по умолчанию.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым будет связано данное выражение <see cref="T:System.Linq.Expressions.LabelExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.LabelExpression" />, представляющее метку с данным значением по умолчанию.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LabelExpression" /> с данным значением по умолчанию.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым будет связано данное выражение <see cref="T:System.Linq.Expressions.LabelExpression" />.</param>
      <param name="defaultValue">Значение данного выражения <see cref="T:System.Linq.Expressions.LabelExpression" /> после достижения метки через стандартный поток управления.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void и данным именем.</summary>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="name">Имя метки.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с данным типом.</summary>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="type">Тип значения, которое передается при переходе к метке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с данными типом и именем.</summary>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
      <param name="type">Тип значения, которое передается при переходе к метке.</param>
      <param name="name">Имя метки.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression`1.NodeType" />, равное <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> и <see cref="P:System.Linq.Expressions.Expression`1.Body" />, и свойства <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression`1.NodeType" />, равное <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> и <see cref="P:System.Linq.Expressions.Expression`1.Body" />, и свойства <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> имеет значение null;— или —Один или несколько элементов в <paramref name="parameters" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="TDelegate" /> не является типом делегата.— или —Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата параметра <paramref name="TDelegate" />.— или —<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для <paramref name="TDelegate" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить из типа соответствующего параметра <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, и свойствами <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> имеет значение null;— или —Один или несколько элементов в <paramref name="parameters" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> содержит более шестнадцати элементов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> имеет значение null;— или —Один или несколько элементов в <paramref name="parameters" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="TDelegate" /> не является типом делегата.— или —Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата параметра <paramref name="TDelegate" />.— или —<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для <paramref name="TDelegate" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить из типа соответствующего параметра <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression`1.NodeType" />, равное <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> и <see cref="P:System.Linq.Expressions.Expression`1.Body" />, и свойства <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="name">Имя лямбда-выражения.Используется для создания сведений об отладке.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя для лямбда-функции.Используется для выпуска сведений об отладке.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя для лямбда-функции.Используется для выпуска сведений об отладке.</param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression`1" /> со свойством <see cref="P:System.Linq.Expressions.Expression`1.NodeType" />, равным <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />, и свойствами <see cref="P:System.Linq.Expressions.Expression`1.Body" /> и <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="name">Имя лямбда-выражения.Используется для создания сведений об отладке.</param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.Он может использоваться, если тип делегата неизвестен в момент компиляции.</summary>
      <returns>Объект, представляющий лямбда-выражение со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип <see cref="T:System.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="delegateType" /> или <paramref name="body" /> имеет значение null.— или —Один или несколько элементов в <paramref name="parameters" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="delegateType" /> не представляет тип делегата.— или —Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата типа делегата, представленного <paramref name="delegateType" />.— или —<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для типа делегата, представленного <paramref name="delegateType" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить от типа соответствующего типа параметра типа делегата, представленного через <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.Он может использоваться, если тип делегата неизвестен в момент компиляции.</summary>
      <returns>Объект, представляющий лямбда-выражение со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип <see cref="T:System.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="delegateType" /> или <paramref name="body" /> имеет значение null.— или —Один или несколько элементов в <paramref name="parameters" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="delegateType" /> не представляет тип делегата.— или —Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата типа делегата, представленного <paramref name="delegateType" />.— или —<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для типа делегата, представленного <paramref name="delegateType" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить от типа соответствующего типа параметра типа делегата, представленного через <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />. </param>
      <param name="name">Имя для лямбда-функции.Используется для выпуска сведений об отладке.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения. </param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />. </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя для лямбда-функции.Используется для выпуска сведений об отладке.</param>
      <param name="parameters">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию со сдвигом влево.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сдвига влево не определен для типов <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию со сдвигом влево.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, а оператор сдвига влево не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "меньше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение true; false, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, а оператор "меньше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше или равно".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "меньше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее числовое сравнение "меньше или равно".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение true; false, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, а оператор "меньше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberListBinding" />, где элемент является полем или свойством.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" /> со свойством <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, для которых заданы указанные значения.</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство, чтобы задать для свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> имеет значение null; — или —Один или несколько элементов в <paramref name="initializers" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.— или —Тип <see cref="P:System.Reflection.FieldInfo.FieldType" /> или <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> поля или свойства, которые представляет <paramref name="member" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberListBinding" />, где элемент является полем или свойством.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" /> со свойством <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, для которых заданы указанные значения.</returns>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство, чтобы задать для свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> имеет значение null; — или —Один или несколько элементов в <paramref name="initializers" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.— или —Тип <see cref="P:System.Reflection.FieldInfo.FieldType" /> или <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> поля или свойства, которые представляет <paramref name="member" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberListBinding" /> на основе указанного метода доступа к свойству.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, равное <see cref="T:System.Reflection.MemberInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, заполненные элементами <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> имеет значение null; — или —Один или несколько элементов в <paramref name="initializers" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа свойства.— или —Тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> свойства, представленного методом с помощью доступа <paramref name="propertyAccessor" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" /> на основе указанного метода доступа к свойству.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, равное <see cref="T:System.Reflection.MemberInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, заполненные элементами <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> имеет значение null; — или —Один или несколько элементов в <paramref name="initializers" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа свойства.— или —Тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> свойства, представленного методом с помощью доступа <paramref name="propertyAccessor" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанные объекты <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации коллекции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойствами <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />, для которых заданы указанные значения.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение null.— или —Один или несколько элементов в <paramref name="initializers" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий метод с именем "Добавить" для добавления элементов в коллекцию.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение null.— или —Один или несколько элементов в <paramref name="initializers" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">Не существует метод экземпляра с именем "Add" (без учета регистра), объявленного в <paramref name="newExpression" />.Type или его базовом типе.— или —Метод сложения для типа <paramref name="newExpression" />.Type или его базового типа не принимает точно один аргумент.— или —Тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> первого элемента <paramref name="initializers" /> не назначается для типа метода добавления для <paramref name="newExpression" />.Type или его базового типа.— или —Метод, совместимый более чем с одним аргументом, с именем "Add" (без учета регистра), существует для типа <paramref name="newExpression" />.Type или его базового типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанные объекты <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации коллекции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойствами <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />, для которых заданы указанные значения.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение null.— или —Один или несколько элементов в <paramref name="initializers" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий метод с именем "Добавить" для добавления элементов в коллекцию.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение null.— или —Один или несколько элементов в <paramref name="initializers" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">Не существует метод экземпляра с именем "Add" (без учета регистра), объявленного в <paramref name="newExpression" />.Type или его базовом типе.— или —Метод сложения для типа <paramref name="newExpression" />.Type или его базового типа не принимает точно один аргумент.— или —Тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> первого элемента <paramref name="initializers" /> не назначается для типа метода добавления для <paramref name="newExpression" />.Type или его базового типа.— или —Метод, совместимый более чем с одним аргументом, с именем "Add" (без учета регистра), существует для типа <paramref name="newExpression" />.Type или его базового типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанный метод, чтобы добавить элементы к коллекции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="addMethod">Параметр <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра с именем "Add" (без учета регистра), добавляющий элемент к коллекции.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение null.— или —Один или несколько элементов в <paramref name="initializers" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.— или —Значение <paramref name="addMethod" /> не равно null и не представляет метод экземпляра с именем "Add" (без учета регистра), принимающий точно один аргумент.— или —Значение <paramref name="addMethod" /> не равно null, а тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов параметра <paramref name="initializers" />, нельзя назначить для типа аргумента метода, представленного <paramref name="addMethod" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> не равен null, и отсутствует метод экземпляра с именем "Add", принимающий один аргумент, совместимый с типом, для параметра <paramref name="newExpression" />.Type или его базового типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанный метод, чтобы добавить элементы к коллекции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="addMethod">Параметр <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра с одним аргументом, добавляющий элемент к коллекции.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение null.— или —Один или несколько элементов в <paramref name="initializers" /> являются null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.— или —Значение <paramref name="addMethod" /> не равно null и не представляет метод экземпляра с именем "Add" (без учета регистра), принимающий точно один аргумент.— или —Значение <paramref name="addMethod" /> не равно null, а тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов параметра <paramref name="initializers" />, нельзя назначить для типа аргумента метода, представленного <paramref name="addMethod" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> не равен null, и отсутствует метод экземпляра с именем "Add", принимающий один аргумент, совместимый с типом, для параметра <paramref name="newExpression" />.Type или его базового типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">Тело цикла.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом и целью оператора break.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">Тело цикла.</param>
      <param name="break">Цель оператора break, используемая телом цикла.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.LoopExpression" /> с данным телом.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">Тело цикла.</param>
      <param name="break">Цель оператора break, используемая телом цикла.</param>
      <param name="continue">Цель оператора continue, используемая телом цикла.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенные левый и правый операнды с помощью вызова соответствующего заводского метода.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</param>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенный левый операнд, правый операнд и метод реализации с помощью вызова соответствующего заводского метода.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</param>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.</param>
      <param name="liftToNull">true, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение true; false, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение false.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />, указывающий метод реализации.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенный левый операнд, правый операнд, метод реализации и функция преобразования метода с помощью вызова соответствующего заводского метода.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученное в результате вызова соответствующего заводского метода.</returns>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</param>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.</param>
      <param name="liftToNull">true, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение true; false, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение false.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />, указывающий метод реализации.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, представляющий тип функции преобразования.Этот параметр используется только, если <paramref name="binaryType" /> имеет значение <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> или составного присваивания.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с указанными элементами.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> исключения <see cref="T:System.Exception" />, которое будет обрабатывать этот объект <see cref="T:System.Linq.Expressions.CatchBlock" />.</param>
      <param name="variable">Выражение <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющее ссылку на объект <see cref="T:System.Exception" />, перехваченный этим обработчиком.</param>
      <param name="body">Тело оператора catch.</param>
      <param name="filter">Тело фильтра <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arguments">Аргументы динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и одним аргументом.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и двумя аргументами.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и тремя аргументами.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и четырьмя аргументами.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <param name="arg3">Четвертый аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arguments">Аргументы динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее переход указанного типа <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.Также можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение <paramref name="kind" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> объекта <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющий доступ к индексированному свойству объекта.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Объект, которому принадлежит это свойство.Должно равняться NULL, если свойство имеет значение static (shared в Visual Basic).</param>
      <param name="indexer">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее индексируемое свойство.</param>
      <param name="arguments">Коллекция IEnumerable&lt;Expression&gt; (IEnumerable (Of Expression) в Visual Basic), содержащая аргументы, которые будут использоваться для индексации свойства.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к полю или свойству.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, полученное в результате вызова соответствующего заводского метода.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" /> представляет объект, к которому принадлежит элемент.Для статических членов допускается значение NULL.</param>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />, описывающий поле или свойство, к которому следует осуществить доступ.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="member" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.TryExpression" />, представляющее блок try с указанными элементами.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="type">Тип результата выражения try.Если он имеет значение NULL, bodh и все обработчики должны иметь одинаковый тип.</param>
      <param name="body">Тело блока try.</param>
      <param name="finally">Тело блока finally.Если с блоком try не связан ни один блок finally, передается NULL.</param>
      <param name="fault">Тело блока t.Если с блоком try не связан ни один блок fault, передается NULL.</param>
      <param name="handlers">Коллекция объектов <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, присвоенный операнду с помощью вызова соответствующего заводского метода.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, полученное в результате вызова соответствующего заводского метода.</returns>
      <param name="unaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип унарной операции.</param>
      <param name="operand">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет операнд.</param>
      <param name="type">Тип <see cref="T:System.Type" />, указывающий тип для преобразования в (передать null, если не применяется).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="unaryType" /> не соответствует унарному узлу выражения.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, присвоенный операнд и метод реализации с помощью вызова соответствующего заводского метода.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, полученное в результате вызова соответствующего заводского метода.</returns>
      <param name="unaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип унарной операции.</param>
      <param name="operand">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет операнд.</param>
      <param name="type">Тип <see cref="T:System.Type" />, указывающий тип для преобразования в (передать null, если не применяется).</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="unaryType" /> не соответствует унарному узлу выражения.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов поля или свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> со свойством <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</returns>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="member" /> или <paramref name="bindings" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.— или —Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, представленного <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов поля или свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> со свойством <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</returns>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="bindings">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="member" /> или <paramref name="bindings" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.— или —Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, представленного <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента, доступ к которому осуществляется с помощью метода доступа свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и свойства <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyAccessor" /> или <paramref name="bindings" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа свойства.— или —Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа свойства, доступ к которому осуществляется методом, который представляет <paramref name="propertyAccessor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента, доступ к которому осуществляется с помощью метода доступа свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и свойства <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</returns>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.</param>
      <param name="bindings">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyAccessor" /> или <paramref name="bindings" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа свойства.— или —Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа свойства, доступ к которому осуществляется методом, который представляет <paramref name="propertyAccessor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Представляет выражение, создающее новый объект и инициализирующее свойство объекта.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />, и свойствами <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />, для которых заданы указанные значения.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</param>
      <param name="bindings">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="bindings" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, который представляет <paramref name="newExpression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />, и свойствами <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />, для которых заданы указанные значения.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</param>
      <param name="bindings">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="bindings" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, который представляет <paramref name="newExpression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического остатка.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор модуля не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического остатка.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">Значение <paramref name="method" /> равно null, а оператор модуля не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания остатка.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">Значение <paramref name="method" /> равно null, а оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания умножения, не содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания умножения, содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">Значение <paramref name="method" /> равно null, а оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
      <exception cref="T:System.InvalidOperationException">Унарный минус-оператор не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, и свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не обладает ровно одним аргументом.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а унарный минус-оператор не определен для типа <paramref name="expression" />.Type.— или —Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
      <exception cref="T:System.InvalidOperationException">Унарный минус-оператор не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания, содержащую проверку переполнения.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, и свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не обладает ровно одним аргументом.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а унарный минус-оператор не определен для типа <paramref name="expression" />.Type.— или —Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора без аргументов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойством <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, для которого задано указанное значение.</returns>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Конструктор, который представляет <paramref name="constructor" />, содержит не менее одного параметра.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> и <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> имеет значение null;— или —Элемент массива <paramref name="arguments" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра конструктора, который представляет <paramref name="constructor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.Указаны элементы с доступом к полям, инициализированным конструктором.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.New" /> и<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> и свойства <see cref="P:System.Linq.Expressions.NewExpression.Members" />, для которых заданы указанные значения.</returns>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <param name="members">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Reflection.MemberInfo" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> имеет значение null;— или —Элемент массива <paramref name="arguments" /> равен null.— или —Элемент массива <paramref name="members" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра конструктора, который представляет <paramref name="constructor" />.— или —Параметр <paramref name="members" /> не содержит то же количество элементов, что и параметр <paramref name="arguments" />.— или —Элемент свойства <paramref name="arguments" /> содержит <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий тип, который нельзя назначить для типа элемента, представленного соответствующим элементом <paramref name="members" />.— или —Элемент массива members представляет свойство, у которого отсутствует метод доступа get.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.Указаны элементы с доступом к полям, инициализированным в качестве массива.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.New" /> и<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> и свойства <see cref="P:System.Linq.Expressions.NewExpression.Members" />, для которых заданы указанные значения.</returns>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <param name="members">Массив объектов <see cref="T:System.Reflection.MemberInfo" /> для использования с целью заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> имеет значение null;— или —Элемент массива <paramref name="arguments" /> равен null.— или —Элемент массива <paramref name="members" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра конструктора, который представляет <paramref name="constructor" />.— или —Параметр <paramref name="members" /> не содержит то же количество элементов, что и параметр <paramref name="arguments" />.— или —Элемент свойства <paramref name="arguments" /> содержит <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий тип, который нельзя назначить для типа элемента, представленного соответствующим элементом <paramref name="members" />.— или —Элемент <paramref name="members" /> представляет свойство, которое не обладает доступом get.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> и <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> имеет значение null;— или —Элемент массива <paramref name="arguments" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Длина <paramref name="arguments" /> не соответствует количеству для конструктора, который представляет <paramref name="constructor" />.— или —Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра конструктора, который представляет <paramref name="constructor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов конструктора указанного типа без параметров.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойство<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, для которого задано значение <see cref="T:System.Reflection.ConstructorInfo" />, представляющее конструктор указанного типа без параметров.</returns>
      <param name="type">
        <see cref="T:System.Type" /> содержит конструктор без аргументов.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">Тип, который представляет <paramref name="type" />, не содержит конструктор без параметров.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющее создание массива с указанным рангом.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</returns>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="bounds">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> или <paramref name="bounds" /> имеет значение null.— или —Элемент массива <paramref name="bounds" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="bounds" /> не представляет целочисленный тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющее создание массива с указанным рангом.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</returns>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="bounds">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для использования с целью заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> или <paramref name="bounds" /> имеет значение null.— или —Элемент массива <paramref name="bounds" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="bounds" /> не представляет целочисленный тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</returns>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> или <paramref name="initializers" /> имеет значение null.— или —Элемент массива <paramref name="initializers" /> равен null.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="initializers" /> представляет тип, который не назначается для типа, который представляет <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</returns>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для использования с целью заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> или <paramref name="initializers" /> имеет значение null.— или —Элемент массива <paramref name="initializers" /> равен null.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="initializers" /> представляет тип, который не назначается для типа <paramref name="type" />.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Возвращает тип узла этого выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Одно из значений <see cref="T:System.Linq.Expressions.ExpressionType" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий побитовую операцию дополнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Not" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
      <exception cref="T:System.InvalidOperationException">Унарный  оператор Not не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий побитовую операцию дополнения.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, и свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не обладает ровно одним аргументом.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а унарный оператор Not не определен для типа <paramref name="expression" />.Type.— или —Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение неравенства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор неравенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение неравенства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение true; false, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а оператор неравенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Возвращает выражение, представляющее дополнение до единицы.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Возвращает выражение, представляющее дополнение до единицы.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию OR.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Побитовый оператор OR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию OR.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и побитовый операторOR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания OR.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию OR, вычисляющую второй операнд, только если первый операнд имеет значение false.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Побитовый оператор OR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.— или —Типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию OR, вычисляющую второй операнд, только если первый операнд имеет значение false.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и побитовый операторOR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.— или —Метод <paramref name="method" /> равен null, а типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</summary>
      <returns>Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</returns>
      <param name="type">Тип параметра или переменной.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который используется для определения параметра или переменной в дереве выражения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ParameterExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />, и свойствами <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />, для которых заданы указанные значения.</returns>
      <param name="type">Тип параметра или переменной.</param>
      <param name="name">Имя параметра или переменной только для целей отладки и печати.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор потенцирования не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.— или —Типы <paramref name="left" />.Type и <paramref name="right" />.Type не являются <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, а оператор потенцирования не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.— или —Значение <paramref name="method" /> равно null, а типы <paramref name="left" />.Type и <paramref name="right" />.Type не равны <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее возведение выражения в степень и назначение результата исходному выражению.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к свойству с помощью метода доступа свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, доступ к которому осуществляется в <paramref name="propertyAccessor" />.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.Для статических свойств допускается значение NULL.</param>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> имеет значение null;— или —Метод, который представляет <paramref name="propertyAccessor" />, не является static (Shared в Visual Basic), и <paramref name="expression" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="expression" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="propertyAccessor" />.— или —Метод, который представляет <paramref name="propertyAccessor" />, не является методом доступа к свойству.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, и свойствами <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> и <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.Для статических свойств допускается значение NULL.</param>
      <param name="property">Объект <see cref="T:System.Reflection.PropertyInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> имеет значение null;— или —Свойство, которое представляет <paramref name="property" />, не является static (Shared в Visual Basic), и <paramref name="expression" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не может быть назначен объявляемому типу, который представляет <paramref name="property" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Объект, которому принадлежит это свойство.Если свойство статическое или общее, оно должно иметь значение NULL.</param>
      <param name="indexer">Объект <see cref="T:System.Reflection.PropertyInfo" />, представляющий индексируемое свойство.</param>
      <param name="arguments">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, которые используются для индексации свойства.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Объект, которому принадлежит это свойство.Если свойство статическое или общее, оно должно иметь значение NULL.</param>
      <param name="indexer">Объект <see cref="T:System.Reflection.PropertyInfo" />, представляющий индексируемое свойство.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для индексации свойства.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, обозначенное с помощью параметра <paramref name="propertyName" />.</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> где <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит свойство с именем <paramref name="propertyName" />.Может принимать значение null для статических свойств.</param>
      <param name="propertyName">Имя свойства для доступа.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="propertyName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Не определено свойство с именем <paramref name="propertyName" /> для типа <paramref name="expression" />.Type или его базовых типов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющий доступ к индексированному свойству.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Объект, которому принадлежит это свойство.Если свойство статическое или общее, оно должно иметь значение NULL.</param>
      <param name="propertyName">Имя индексатора.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для индексации свойства.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющее доступ к свойству.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">Объект, в котором содержится свойство.Для статических свойств допускается значение NULL.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, содержащий свойство.</param>
      <param name="propertyName">Свойство для доступа.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству или полю.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоены значения <see cref="T:System.Reflection.PropertyInfo" /> или <see cref="T:System.Reflection.FieldInfo" />, представляющие свойство или поле, обозначенное с помощью параметра <paramref name="propertyOrFieldName" />.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, в свойстве <see cref="P:System.Linq.Expressions.Expression.Type" /> которого содержится свойство или поле с именем, заданным параметром <paramref name="propertyOrFieldName" />.Для статических членов допускается значение NULL.</param>
      <param name="propertyOrFieldName">Имя свойства или поля для доступа.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="propertyOrFieldName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Не определено свойство или поле с именем <paramref name="propertyOrFieldName" /> для типа <paramref name="expression" />.Type или его базовых типов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий выражение, которое содержит постоянное значение типа <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />, и свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Сокращает данный узел до более простого выражения.Если CanReduce возвращает значение true, данный метод должен вернуть допустимое выражение.Данный метод может вернуть другой узел, который нужно будет уменьшать еще раз.</summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Сокращает данный узел до более простого выражения.Если CanReduce возвращает значение true, данный метод должен вернуть допустимое выражение.Данный метод может вернуть другой узел, который нужно будет уменьшать еще раз.</summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Сокращает выражение до известного типа узла (не являющегося узлом Extension) или возвращает выражение, если оно имеет известный тип.</summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее проверку равенства ссылок.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее проверку неравенства ссылок.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения с заданным типом.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</returns>
      <param name="type">Новый тип <see cref="T:System.Type" /> выражения.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Return, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор return с указанным типом.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение в параметре <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return с указанным типом.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Return, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию сдвига вправо.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сдвига вправо не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию сдвига вправо.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">Значение <paramref name="method" /> равно null, а оператор сдвига вправо не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />, и свойством <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />, для которого задано указанное значение.</returns>
      <param name="variables">Коллекция объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />, и свойством <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />, для которого задано указанное значение.</returns>
      <param name="variables">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания вычитания, не содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания вычитания, содержащую проверку переполнения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch с вариантом по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch с вариантом по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch с вариантом по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий switch без варианта по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch с вариантом по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">Тип результата оператора switch.</param>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch с вариантом по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">Тип результата оператора switch.</param>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в объекте <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">Тело варианта case.</param>
      <param name="testValues">Тестовые значения варианта case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в выражении <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">Тело варианта case.</param>
      <param name="testValues">Тестовые значения варианта case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, для свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> которого задано указанное значение.</returns>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> со свойствами <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />, для которых задано указанное значение.</returns>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> со свойствами <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />, для которых задано указанное значение.</returns>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
      <param name="languageVendor">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> со свойствами <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />, для которых задано указанное значение.</returns>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
      <param name="languageVendor">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</param>
      <param name="documentType">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий создание исключения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий исключение.</returns>
      <param name="value">Объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий создание исключения с заданным типом.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее исключение.</returns>
      <param name="value">Выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">Новый тип <see cref="T:System.Type" /> выражения.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Возвращает текстовое представление выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Текстовое представление выражения <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.TryExpression" />, представляющее блок try с произвольным числом операторов catch и без блоков fault и finally.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Тело блока try.</param>
      <param name="handlers">Массив из нуля или более выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с произвольным числом операторов catch и блоком finally.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Тело блока try.</param>
      <param name="finally">Тело блока finally.</param>
      <param name="handlers">Массив из нуля или более выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с блоком fault и без операторов catch.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Тело блока try.</param>
      <param name="fault">Тело блока fault.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.TryExpression" />, представляющее блок try с блоком finally и без операторов catch.</summary>
      <returns>Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Тело блока try.</param>
      <param name="finally">Тело блока finally.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Action с определенным типом аргументов.</summary>
      <returns>Значение true, если тип делегата System.Action создан для определенного <paramref name="typeArgs" />; в противном случае — значение false.</returns>
      <param name="typeArgs">Массив от объектов Type, указывающих аргументы типа для типа делегата System.Action.</param>
      <param name="actionType">После выполнения возврата этим методом содержит универсальный тип делегата System.Action с определенным типом аргументов.Содержит NULL, если ни один универсальный делегат System.Action не соответствует <paramref name="typeArgs" />.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func с определенным типом аргументов.Аргумент последнего типа задает тип возврата созданного делегата.</summary>
      <returns>Значение true, если для заданных аргументов <paramref name="typeArgs" /> был создан универсальный тип-делегат System.Func; в противном случае — значение false.</returns>
      <param name="typeArgs">Массив объектов Type, указывающих аргументы типа для типа делегата System.Func.</param>
      <param name="funcType">После выполнения возврата этим методом содержит универсальный тип делегата System.Func с определенным типом аргументов.Содержит NULL, если ни один универсальный делегат System.Func не соответствует <paramref name="typeArgs" />.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий преобразование явной ссылки или упаковки, где null поддерживается в случае неудачного преобразования.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, сравнивающее идентификацию типов времени выполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />, и свойствами <see cref="T:System.Linq.Expressions.Expression" /> и <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" />, и свойствами <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> и <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию "унарный плюс".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />, и свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "унарный плюс" не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию "унарный плюс".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, и свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> имеет значение null;</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не равно null, и метод, который оно представляет, возвращает void, не является static (Shared в Visual Basic) и не обладает ровно одним аргументом.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а оператор "Унарный плюс" не определен для типа <paramref name="expression" />.— или —Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее явную распаковку-преобразование.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Выражение <see cref="T:System.Linq.Expressions.Expression" /> для распаковки-преобразования.</param>
      <param name="type">Новый тип <see cref="T:System.Type" /> выражения.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</summary>
      <returns>Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</returns>
      <param name="type">Тип параметра или переменной.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который используется для определения параметра или переменной в дереве выражения.</summary>
      <returns>Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</returns>
      <param name="type">Тип параметра или переменной.</param>
      <param name="name">Имя параметра или переменной.Это имя используется только для целей отладки и печати.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Сокращает узел и вызывает делегат-посетитель для сокращенного выражения.Данный метод создает исключение, если узел невозможно сократить.</summary>
      <returns>Просмотренное выражение или выражение, которое должно заменить его в дереве.</returns>
      <param name="visitor">Экземпляр класса <see cref="T:System.Func`2" />.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Представляет строго типизированное лямбда-выражение в виде структуры данные в форме дерева выражений.Этот класс не может быть унаследован.</summary>
      <typeparam name="TDelegate">Тип делегата, который представляет <see cref="T:System.Linq.Expressions.Expression`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Компилирует лямбда-выражение, описанное с помощью дерева выражений в исполняемый код и создает делегат, представляющий лямбда-выражение.</summary>
      <returns>Делегат типа <paramref name="TDelegate" />, который представляет скомпилированное лямбда-выражение, описанное с помощью <see cref="T:System.Linq.Expressions.Expression`1" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Производит делегата, который представляет лямбда-выражение.</summary>
      <returns>Делегат, содержащий скомпилированную версию лямбда-выражения.</returns>
      <param name="debugInfoGenerator">Генератор отладочной информации, используемый компилятором для пометки точек следования и создания заметок для локальных переменных.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> результата.</param>
      <param name="parameters">Свойство <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> результата. </param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Описывает типы узлов для узлов дерева выражений.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>Операция арифметического сложения, например a + b, без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>Операция арифметического сложения, например (a + b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>Побитовая или логическая операция AND, например (a &amp; b) в C# и (a And b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>Условная операция AND, вычисляющая второй операнд, только если первый операнд имеет значение true.Она соответствует (a &amp;&amp; b) в C# и (a AndAlso b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>Операция получения длины одномерного массива, например array.Length.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>Операция индексации в одномерном массиве, например array[index] в C# или array(index) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>Вызов метода, например выражение obj.sampleMethod().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>Узел, представляющий операцию объединения null, например (a ?? b) в C# или If(a, b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>Условная операция, например a &gt; b ? a : b в C# или If(a &gt; b, a, b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>Константа.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>Операция приведения или преобразования, например (SampleType)obj в C# или CType(obj, SampleType) в Visual Basic.Если преобразованное значение слишком велико для целевого типа, в ходе числового преобразования не создается исключение.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>Операция приведения или преобразования, например (SampleType)obj в C# или CType(obj, SampleType) в Visual Basic.Если преобразованное значение не соответствует целевому типу, в ходе числового преобразования создается исключение.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>Операция деления, например (a / b), для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>Узел, представляющий сравнение для определения равенства, например (a == b) в C# или (a = b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>Побитовая или логическая операция XOR, например (a ^ b) в C# и (a Xor b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>Числовое сравнение "больше, чем", например (a &gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>Сравнение "больше или равно", например (a &gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>Операция, вызывающая делегат или лямбда-выражение, например sampleDelegate.Invoke().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>Лямбда-выражение, например a =&gt; a + a в C# или Function(a) a + a в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>Побитовая операция сдвига влево, например (a &lt;&lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>Числовое сравнение "меньше, чем", например (a &lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>Числовое сравнение "меньше или равно", например (a &lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>Операция создания нового объекта <see cref="T:System.Collections.IEnumerable" /> и его инициализации из списка элементов, например new List&lt;SampleType&gt;(){ a, b, c } в C# или Dim sampleList = { a, b, c } в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>Операция чтения из поля или свойства, например obj.SampleProperty.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>Операция создания нового объекта и инициализации одного или нескольких его членов из списка элементов, например new Point { X = 1, Y = 2 } в C# или New Point With {.X = 1, .Y = 2} в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>Операция получения арифметического остатка, например (a % b) в C# или (a Mod b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>Операция арифметического умножения, например (a * b), без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>Операция арифметического умножения, например (a * b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>Операция арифметического изменения знака, например (-a).Сам объект a не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>Унарная операция "плюс", например (+a).Результатом заранее определенной унарной операции "плюс" является просто значение операнда, но определенные пользователем реализации могут иметь нетривиальные результаты.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>Операция арифметического изменения знака, например (-a), с проверкой переполнения.Сам объект a не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>Операция вызова конструктора для создания нового объекта, например new SampleType().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>Операция создания нового одномерного массива и его инициализации из списка элементов, например new SampleType[]{a, b, c} в C# или New SampleType(){a, b, c} в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>Операция создания нового массива, где указаны границы всех измерений, например new SampleType[dim1, dim2] в C# или New SampleType(dim1, dim2) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>Побитовая операция дополнения или логического отрицания.В C# она эквивалентна операциям (~a) для целочисленных типов и (!a) для логических значений.В Visual Basic она эквивалентна операции (Not a).Сам объект a не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>Операция определения неравенства, например (a != b) в C# или (a &lt;&gt; b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>Побитовая или логическая операция OR, например (a | b) в C# и (a Or b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>Сокращенная условная операция OR, например (a || b) в C# или (a OrElse b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>Ссылка на параметр или переменную, определенную в контексте выражения.Дополнительные сведения см. в разделе <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>Математическая операция возведения числа в степень, например (a ^ b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>Выражение, содержащее постоянное значение типа <see cref="T:System.Linq.Expressions.Expression" />.узел <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> может содержать ссылку на параметры, определенные в контексте представленного выражения.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>Битовая операция сдвига вправо, например (a &gt;&gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>Операция арифметического вычитания, например (a - b), без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>Операция арифметического вычитания, например (a - b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>Преобразование явной ссылки или упаковки, где в случае неудачного преобразования предоставляется null, например (obj as SampleType) в C# или TryCast(obj, SampleType) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>Проверка типа, например obj is SampleType в C# или TypeOf obj is SampleType в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>Операция присваивания, например (a = b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>Блок выражений.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Сведения для отладки.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>Унарная операция декремента, такая как (a - 1) в C# и Visual Basic.Сам объект a не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>Динамическая операция.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>Значение по умолчанию.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>Выражение расширения.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>Выражение "перейти к", например goto Label в C# или GoTo Label в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>Унарная операция инкремента, такая как (a + 1) в C# и Visual Basic.Сам объект a не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>Операция индекса или операция, осуществляющая доступ к свойству, которое принимает аргументы. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>Метка.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>Список переменных времени выполнения.Дополнительные сведения см. в разделе <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>Цикл, например for или while.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>Операция выбора, например switch в C# или Select Case в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>Операция создания исключения, например throw new Exception().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>Выражение try-catch.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>Операция распаковки-преобразования типа значения, например инструкции unbox и unbox.any в MSIL. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>Операция составного присваивания арифметического сложения, например (a += b), без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>Побитовая или логическая операция составного присваивания AND, например (a &amp;= b) в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>Операция составного присваивания арифметического деления, например (a /= b), для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>Побитовая или логическая операция составного присваивания XOR, например (a ^= b) в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>Побитовая операция составного присваивания сдвига влево, например (a &lt;&lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>Операция составного присваивания арифметического остатка, например (a %= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>Операция составного присваивания арифметического умножения, например (a *= b), без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>Побитовое или логическое составное присваивание OR, например (a |= b) в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>Операция составного присваивания возведения числа в степень, например (a ^= b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>Битовая операция составного присваивания сдвига вправо, например (a &gt;&gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>Операция составного присваивания арифметического вычитания, например (a -= b), без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>Операция составного присваивания арифметического сложения, например (a += b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>Операция составного присваивания арифметического умножения, например (a *= b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>Операция составного присваивания арифметического вычитания, например (a -= b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>Унарное префиксное увеличение, например (++a).Должен быть изменен сам объект a.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>Унарное префиксное уменьшение, например (--a).Должен быть изменен сам объект a.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>Унарное постфиксное увеличение, например (a++).Должен быть изменен сам объект a.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>Унарное постфиксное уменьшение, например (a--).Должен быть изменен сам объект a.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>Проверка совпадения типа.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>Операция дополнения до единицы, например (~a) в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>Значение условия true.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>Значение условия false.</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Представляет метод просмотра или перезаписи деревьев выражений.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Распределяет список выражений среди одного или нескольких более узких методов просмотра в классе.</summary>
      <returns>Измененный список выражений в случае изменения любого из его элементов; в противном случае возвращается исходный список выражений.</returns>
      <param name="nodes">Выражения, которые необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Просматривает все узлы в коллекции, используя указанный метод просмотра элементов.</summary>
      <returns>Измененный список узлов в случае изменения любого из его элементов; в противном случае возвращается исходный список узлов.</returns>
      <param name="nodes">Узлы, которое необходимо просмотреть.</param>
      <param name="elementVisitor">Делегат, который просматривает отдельный элемент, при необходимости заменяя его новым элементом.</param>
      <typeparam name="T">Тип узлов.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Распределяет выражение среди одного или нескольких более узких методов просмотра в классе.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Просматривает выражение, приводя результат к типу исходного выражения.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="nodes">Выражение, которое необходимо просмотреть.</param>
      <param name="callerName">Имя метода вызова; используется для создания более подробного сообщения об ошибке.</param>
      <typeparam name="T">Тип выражения.</typeparam>
      <exception cref="T:System.InvalidOperationException">Метод посещения данного узла вернул другой тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Просматривает выражение, приводя результат к типу исходного выражения.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <param name="callerName">Имя метода вызова; используется для создания более подробного сообщения об ошибке.</param>
      <typeparam name="T">Тип выражения.</typeparam>
      <exception cref="T:System.InvalidOperationException">Метод посещения данного узла вернул другой тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.BlockExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.ConstantExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.DefaultExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Просматривает дочерний элемент выражения расширения.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.IndexExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.InvocationExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.LabelExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.LabelTarget" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <typeparam name="T">Тип данного делегата.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.ListInitExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.LoopExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberAssignment" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.NewExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.TryExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.UnaryExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Представляет безусловный переход.Включает инструкции return, break и continue, а также другие переходы.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>Вид выражения "go to".Используется только в информационных целях.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpressionKind" />, представляющий вид выражения "go to".</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>Целевая метка, к которой нужно перейти из данного узла.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий целевую метку для данного узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.GotoExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="target">Свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> результата. </param>
      <param name="value">Свойство <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> результата. </param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>Значение, передаваемое целевому выражению, или NULL, если целевой тип — System.Void.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий значение, переданное целевому выражению, или NULL.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Задает тип перехода, представляемый этим выражением <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее переход в некоторую позицию.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор return.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор continue.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Представляет индексацию свойства или массива.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Получает аргументы, которые будут использоваться для индексации свойства или массива.</summary>
      <returns>Доступная только для чтения коллекция, содержащая аргументы, которые будут использоваться для индексации свойства или массива.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Получает объект <see cref="T:System.Reflection.PropertyInfo" /> для свойства, если выражение представляет индексированное свойство; в противном случае возвращает значение NULL.</summary>
      <returns>Объект <see cref="T:System.Reflection.PropertyInfo" /> для свойства, если выражение представляет индексированное свойство; в противном случае — значение NULL.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>Объект для индексации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее индексируемый объект.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.IndexExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="object">Свойство <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> результата.</param>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Представляет выражение, применяющее делегата или лямбда-выражения к списку выражений аргумента.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Получает аргументы, к которым применяется делегат или лямбда-выражение.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы, к которым применяется делегат.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Получает делегата или лямбда-выражение для применения.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> представляющий делегата для применения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> результата.</param>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Представляет метку, которую можно поместить в контекст любого выражения <see cref="T:System.Linq.Expressions.Expression" />.При перемещении к этой метке будет получено значение соответствующего выражения <see cref="T:System.Linq.Expressions.GotoExpression" />.В противном случае будет получено значение <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />.Если тип <see cref="T:System.Type" /> имеет значение System.Void, никакое значение не предоставляется.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>Значение выражения <see cref="T:System.Linq.Expressions.LabelExpression" />, если метка была достигнута с помощью стандартного потока управления (например, без применения оператора goto).</summary>
      <returns>Объект выражения, представляющий значение объекта <see cref="T:System.Linq.Expressions.LabelExpression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым связана данная метка.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым связана данная метка.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.LabelExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="target">Свойство <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> результата.</param>
      <param name="defaultValue">Свойство <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Служит для представления целевой точки выражения <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Получает имя метки.</summary>
      <returns>Имя метки.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Возвращает объект <see cref="T:System.String" />, который представляет текущий объект <see cref="T:System.Object" />.</summary>
      <returns>Объект <see cref="T:System.String" />, представляющий текущий объект <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>Тип значения, которое передается при переходе к метке (или <see cref="T:System.Void" />, если значение передавать не нужно).</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип значения, которое передается при переходе к метке, или <see cref="T:System.Void" />, если значение передавать не нужно.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Описывает лямбда-выражение.Оно захватывает блок кода, сходный с телом метода .NET.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Возвращает тело лямбда-выражения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет тело лямбда-выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Производит делегата, который представляет лямбда-выражение.</summary>
      <returns>Объект <see cref="T:System.Delegate" />, содержащий скомпилированную версию лямбда-выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Производит делегата, который представляет лямбда-выражение.</summary>
      <returns>Делегат, содержащий скомпилированную версию лямбда-выражения.</returns>
      <param name="debugInfoGenerator">Генератор отладочной информации, используемый компилятором для пометки точек следования и создания заметок для локальных переменных.</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Компилирует лямбда-выражение в определение метода.</summary>
      <param name="method">Объект <see cref="T:System.Reflection.Emit.MethodBuilder" />, который будет использоваться для хранения лямбда-выражения на промежуточном языке.</param>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.CompileToMethod(System.Reflection.Emit.MethodBuilder,System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Копирует лямбда-выражение в определение метода и пользовательскую отладочную информацию.</summary>
      <param name="method">Объект <see cref="T:System.Reflection.Emit.MethodBuilder" />, который будет использоваться для хранения лямбда-выражения на промежуточном языке.</param>
      <param name="debugInfoGenerator">Генератор отладочной информации, используемый компилятором для пометки точек следования и создания заметок для локальных переменных.</param>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Получает имя лямбда-выражения.</summary>
      <returns>Имя лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Возвращает параметры лямбда-выражения.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.ParameterExpression" />, предоставляющих параметры лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Получает возвращаемый тип лямбда-выражения.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Получает значение, которое определяет, можно ли компилировать лямбда-выражение с оптимизацией с помощью вызова с префиксом tail.</summary>
      <returns>Значение true, если лямбда-выражение будет компилироваться с оптимизацией с помощью вызова с префиксом tail; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Представляет вызов конструктора, который содержит инициализатор коллекции.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Получает значение, которое указывает, можно ли сократить узел дерева выражений.</summary>
      <returns>Значение true, если узел можно сократить; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Получает инициализаторы элементов, которые используются для инициализации коллекции.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.ElementInit" />, представляющих элементы, которые используются для инициализации коллекции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Возвращает выражение содержащее вызов в конструктор типа коллекции.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов в конструктор типа коллекции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Сокращает узел бинарных выражений до более простого выражения.</summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="newExpression">Свойство <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> результата.</param>
      <param name="initializers">Свойство <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Представляет бесконечный цикл.Может быть прерван с помощью оператора break.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, являющийся телом цикла.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, являющийся телом цикла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора break.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора break.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора continue.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора continue.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.LoopExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="breakLabel">Свойство <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> результата.</param>
      <param name="continueLabel">Свойство <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> результата.</param>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Представляет операцию присваивания для поля или свойства объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Получает выражение для назначения полю или свойству.</summary>
      <returns>Тип <see cref="T:System.Linq.Expressions.Expression" />, представляющий значение для назначения полю или свойству.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Обеспечивает базовый класс, производными от которого являются классы, представляющие привязки, используемые для инициализации элементов созданных производных объекта.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <param name="type">Тип <see cref="T:System.Linq.Expressions.MemberBindingType" />, дискриминирующий тип представленной привязки.</param>
      <param name="member">Тип <see cref="T:System.Reflection.MemberInfo" />, представляющие поле или свойство для инициализации.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Получает представленный тип привязки.</summary>
      <returns>One of the <see cref="T:System.Linq.Expressions.MemberBindingType" /> values.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Получает поле или свойство для инициализации.</summary>
      <returns>Тип <see cref="T:System.Reflection.MemberInfo" />, представляющие поле или свойство для инициализации.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Возвращает текстовое представление <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.MemberBinding" />.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Описывает типы привязки, которые используются в объектах <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>Привязка, представляющая инициализацию элемента со значением выражения.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>Привязка, представляющаяся рекуррентную инициализацию элементов элемента.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>Привязка, представляющая инициализацию элемента типа <see cref="T:System.Collections.IList" /> or <see cref="T:System.Collections.Generic.ICollection`1" /> из списка элементов.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Представляет доступ к полю или свойству.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Получает содержащийся объект поля или свойства.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />, который представляет содержащийся объект поля или свойства.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Получает поле или свойство для доступа.</summary>
      <returns>Тип <see cref="T:System.Reflection.MemberInfo" />, представляющие поле или свойство для доступа.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Представляет вызов конструктора и инициализацию одного или нескольких членов нового объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Получает привязки, описывающие способы инициализации членов созданного объекта.</summary>
      <returns>Объекты <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" />, описывающие способы инициализации членов.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Получает значение, которое указывает, можно ли сократить узел дерева выражений.</summary>
      <returns>Значение true, если узел можно сократить; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Возвращает выражение, представляющее вызов конструктора.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />, представляющее вызов конструктора.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>Сокращает выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> до более простого выражения. </summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="newExpression">Свойство <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> результата.</param>
      <param name="bindings">Свойство <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Предоставляет инициализацию элементов коллекции созданного объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Предоставляет инициализаторы элементов для инициализации коллекции элементов созданного объекта.</summary>
      <returns>Объекты <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации элемента коллекции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="initializers">Свойство <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Предоставляет инициализацию элементов элемента созданного объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Получает привязки, описывающие способы инициализации элементов элемента.</summary>
      <returns>Объекты <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" />, описывающие способы инициализации элементов элемента.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="bindings">Свойство <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Представляет вызов к статическому методу или методу экземпляра.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Получает коллекцию выражений, представляющих аргументы вызванного метода.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы вызванному методу.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Получает <see cref="T:System.Reflection.MethodInfo" /> для вызываемого метода.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />, представляющий вызванный метод.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Получает выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее экземпляр для вызовов методов экземпляра или NULL для вызовов статических методов.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />, предоставляющий получающий объект метода.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="object">Свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> результата.</param>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Представляет создание нового массива и возможную инициализацию элемента нового массива.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Получает границы массива, если значение свойства <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равно <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> или если значения используются для инициализации элементов нового массива, если значение свойства <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равно <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих границы массива или значения инициализации.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="expressions">Свойство <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Представляет вызов конструктора.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Получает аргументы для конструктора.</summary>
      <returns>Коллекция объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы конструктору.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Получает вызванный конструктор.</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" />, представляющий вызванный конструктор.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Получает элементы, которые могут извлечь значения полей, инициализированных с помощью аргументов конструктора.</summary>
      <returns>Коллекция объектов <see cref="T:System.Reflection.MemberInfo" />, представляющих элементы, которые могут извлечь значения полей, инициализированных с помощью аргументов конструктора.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.NewExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Представляет именованное выражение параметра.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Указывает, что данное выражение ParameterExpression должно рассматриваться в качестве параметра ByRef.</summary>
      <returns>Значение true, если данный параметр ParameterExpression является параметром ByRef; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Получает имя параметра или переменной.</summary>
      <returns>
        <see cref="T:System.String" />, где содержится имя параметра.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>Выражение, которое предоставляет разрешения среды выполнения на чтение и запись переменных.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="variables">Свойство <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> результата.</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>Переменные или параметры, к которым среда выполнения предоставляет доступ.</summary>
      <returns>Доступная только для чтения коллекция, содержащая параметры, к которым средой выполнения будет предоставлен доступ.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Представляет один из вариантов для выражения <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Получает тело блока case.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока case.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Получает значение для данного блока case.Блока case для выполнения выбирается, когда свойство <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> совпадает с одним из этих значений.</summary>
      <returns>Доступная только для чтения коллекция значений данного блока case.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Возвращает объект <see cref="T:System.String" />, который представляет текущий объект <see cref="T:System.Object" />.</summary>
      <returns>Объект <see cref="T:System.String" />, представляющий текущий объект <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="testValues">Свойство <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> результата.</param>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Представляет выражение управления, которое обрабатывает выбор из нескольких вариантов путем передачи управления выражению <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Получает коллекцию объектов <see cref="T:System.Linq.Expressions.SwitchCase" /> для выбора.</summary>
      <returns>Коллекция объектов <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Получает метод проверки равенства, если он существует.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод проверки равенства.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Получает процедуру проверки для выбора варианта.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий процедуру проверки для выбора варианта.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Получает процедуру проверки для выбора варианта.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий процедуру проверки для выбора варианта.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="switchValue">Свойство <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> результата.</param>
      <param name="cases">Свойство <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> результата.</param>
      <param name="defaultBody">Свойство <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Сохраняет информацию, необходимую для создания информации отладочных символов для исходного файла, в частности имени файла и уникального идентификатора языка.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Возвращает уникальный идентификатор типа документа, если он существует.Для текстовых файлов по умолчанию принимает значение GUID.</summary>
      <returns>Уникальный идентификатор типа документа.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>Имя исходного файла.</summary>
      <returns>Строковое представление имени исходного файла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Возвращает уникальный идентификатор языка, если он существует.</summary>
      <returns>Уникальный идентификатор языка.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Возвращает уникальный идентификатор поставщика языка, если он существует.</summary>
      <returns>Уникальный идентификатор поставщика языка.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Представляет блок try/catch/finally/fault.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока try.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока try.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока fault.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока fault.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока finally.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока finally.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Получает коллекцию выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, связанных с блоком try.</summary>
      <returns>Коллекция выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, связанных с блоком try.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.TryExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Body" /> результата.</param>
      <param name="handlers">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> результата.</param>
      <param name="finally">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> результата.</param>
      <param name="fault">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Представляет операцию между выражением и типом.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Получает операнд выражения операции проверки типа.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет операнд выражения операции проверки типа.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Получает операнд типа операции проверки типа.</summary>
      <returns>Объект <see cref="T:System.Type" />, который предоставляет операнд типа операции проверки типа.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Представляет выражение, содержащее унарный оператор.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Получает значение, которое указывает, можно ли сократить узел дерева выражений.</summary>
      <returns>Значение true, если узел можно сократить; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора.</summary>
      <returns>true, если узел представляет удаленный вызов; в противном случае — false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора, тип возврата которого удален для типа со значением NULL.</summary>
      <returns>true, если тип возврата оператора удален до типа со значением NULL, иначе возвращается значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Получает реализацию метода для унарной операции.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Получает операнд унарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет операнд унарной операции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Сокращает узел выражений до более простого выражения. </summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="operand">Свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> результата.</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstanceNotFoundException">
      <summary>Возникшее исключение означает, что поставщик не вернул ни одного экземпляра.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor">
      <summary>Выполняет инициализацию нового экземпляра класса InstanceNotFoundException.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса InstanceNotFoundException с указанными сведениями о сериализации и параметрами контекста потока.</summary>
      <param name="info">Класс SerializationInfo содержит все данные, необходимые для сериализации исключения.</param>
      <param name="context">Класс StreamingContext задает источник и назначение потока.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String)">
      <summary>Выполняет инициализацию нового экземпляра класса InstanceNotFoundException с заданной строкой сообщения.</summary>
      <param name="message">Строка, содержащая сообщение об ошибке с объяснением причин исключения.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstanceNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Выполняет инициализацию нового экземпляра класса InstanceNotFoundException с заданным сообщением об ошибке и внутренним исключением.</summary>
      <param name="message">Строка, содержащая сообщение об ошибке с объяснением причин исключения.</param>
      <param name="innerException">Класс Exception, вызвавший текущее исключение.</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationBaseException">
      <summary>Представляет базовое исключение поставщика.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" />.класс.Этот конструктор используется по умолчанию.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> class with serialization information.</summary>
      <param name="info">Данные, необходимые для выполнения сериализации или десериализации объекта.</param>
      <param name="context">Описание источника и назначения заданного сериализованного потока.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> class with a message that describes the exception.</summary>
      <param name="message">Сообщение с описанием исключения.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationBaseException.#ctor(System.String,System.Exception)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.Instrumentation.InstrumentationBaseException" /> с заданной строкой и исключением.</summary>
      <param name="message">Сообщение с описанием исключения.</param>
      <param name="innerException">Экземпляр класса Exception, вызвавший текущее исключение.</param>
    </member>
    <member name="T:System.Management.Instrumentation.InstrumentationException">
      <summary>Представляет исключение поставщика.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.Instrumentation.InstrumentationException" />.Этот конструктор используется по умолчанию.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Exception)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.Instrumentation.InstrumentationException" /> с использованием System.Exception, вызвавшего текущее исключение.</summary>
      <param name="innerException">Экземпляр класса Exception, вызвавший текущее исключение.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class with serialization information.</summary>
      <param name="info">Данные, необходимые для выполнения сериализации или десериализации объекта.</param>
      <param name="context">Описание источника и назначения заданного сериализованного потока.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.InstrumentationException" /> class with a message that describes the exception.</summary>
      <param name="message">Сообщение с описанием исключения.</param>
    </member>
    <member name="M:System.Management.Instrumentation.InstrumentationException.#ctor(System.String,System.Exception)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.Instrumentation.InstrumentationException" /> с заданной строкой и исключением.</summary>
      <param name="message">Сообщение с описанием исключения.</param>
      <param name="innerException">Экземпляр класса Exception, вызвавший текущее исключение.</param>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementBindAttribute">
      <summary>Атрибут ManagementBind указывает, что метод используется для возвращения экземпляра класса WMI, который связан с определенным ключевым значением.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementBindAttribute.#ctor">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.ManagementBindAttribute" />.Этот конструктор используется по умолчанию.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementBindAttribute.Schema">
      <summary>Возвращает или устанавливает значение, определяющее тип вывода, который возвращает метод, помеченный атрибутом ManagementEnumerator.</summary>
      <returns>Значение <see cref="T:System.Type" /> указывает тип вывода, который возвращает метод, помеченный атрибутом <see cref="ManagementBind" />.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCommitAttribute">
      <summary>Атрибут ManagementCommit указывает метод, который вызывается для обновления набора свойств чтения и записи в рамках одной атомарной операции.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCommitAttribute.#ctor">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.ManagementCommitAttribute" />.Этот конструктор используется по умолчанию.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationAttribute">
      <summary>Атрибут ManagementConfiguration указывает, что свойство или поле представляет свойство WMI, доступное для чтения и записи.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementConfigurationAttribute.#ctor">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.ManagementConfigurationAttribute" />.This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Mode">
      <summary>Возвращает или устанавливает режим свойства, который определяет, будут ли изменения свойства применяться немедленно или только при вызове метода Commit.</summary>
      <returns>Возвращает значение <see cref="T:System.Management.Instrumentation.ManagementConfigurationType" />, которое указывает, какой режим использует свойство WMI: <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.Apply" /> или <see cref="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit" />.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementConfigurationAttribute.Schema">
      <summary>Возвращает или устанавливает значение, определяющее тип вывода, который возвращает свойство, помеченное атрибутом ManagementConfiguration.</summary>
      <returns>Значение <see cref="T:System.Type" /> представляет собой тип вывода, который возвращает свойство, помеченное атрибутом ManagementConfiguration.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementConfigurationType">
      <summary>Представляет возможное поведение свойства чтения и записи после операции фиксации.Используется как значение параметра для атрибута <see cref="T:System.Management.Instrumentation.ManagementConfigurationAttribute" />.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.Apply">
      <summary>Установленные значения вступают в силу только после вызова метода Commit.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementConfigurationType.OnCommit">
      <summary>Установленные значения применяются немедленно.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementCreateAttribute">
      <summary>Атрибут ManagementCreateAttribute указывает, что метод создает новый экземпляр управляемой сущности.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementCreateAttribute.#ctor">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.ManagementCreateAttribute" />.Этот конструктор используется по умолчанию.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEntityAttribute">
      <summary>Атрибут ManagementEntity указывает, что класс предоставляет управляющую информацию через поставщик WMI.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementEntityAttribute" /> class.This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.External">
      <summary>Возвращает или устанавливает значение, которое определяет, является ли класс для текущей сборки классом WMI с внешней реализацией в поставщике.</summary>
      <returns>Логическое значение равно "true", если класс представляет внешний класс WMI, и "false" в противном случае.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Name">
      <summary>Возвращает или задает имя класса WMI.</summary>
      <returns>Строка, содержащая имя класса WMI.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton">
      <summary>Указывает, является ли связанный класс Singleton-классом WMI.</summary>
      <returns>Логическое значение равно "true", если класс представляет Singleton-класс WMI, и "false" в противном случае.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementEnumeratorAttribute">
      <summary>Атрибутом ManagementEnumerator помечается метод, возвращающий все экземпляры класса WMI.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementEnumeratorAttribute" /> class.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema">
      <summary>Возвращает или устанавливает значение, определяющее тип вывода, который возвращает метод, помеченный атрибутом ManagementEnumerator.</summary>
      <returns>Значение <see cref="T:System.Type" /> указывает тип вывода, который возвращает метод, помеченный атрибутом <see cref="ManagementEnumerator" />.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementHostingModel">
      <summary>Определяет значения для модели размещения поставщика.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.Decoupled">
      <summary>Активирует поставщик как отделенный поставщик.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.NetworkService">
      <summary>Активирует поставщик в процессе размещения поставщика, который выполняется под учетной записью NetworkService.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalService">
      <summary>Активирует поставщик в процессе размещения поставщика, который выполняется под учетной записью LocalService.</summary>
    </member>
    <member name="F:System.Management.Instrumentation.ManagementHostingModel.LocalSystem">
      <summary>Активирует поставщик в процессе размещения поставщика, который выполняется под учетной записью LocalSystem.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementKeyAttribute">
      <summary>Атрибут ManagementKey задает ключевые свойства класса WMI.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementKeyAttribute.#ctor">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.ManagementKeyAttribute" />.Этот конструктор используется по умолчанию.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementMemberAttribute">
      <summary>Данный класс используется для расширений поставщиков данных WMI .NET Framework.Это базовый класс для всех управляющих атрибутов, которые применяются к элементам.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementMemberAttribute.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Management.ManagementMemberAttribute" /> the class.This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementMemberAttribute.Name">
      <summary>Возвращает или задает имя управляющего атрибута.</summary>
      <returns>Возвращает сроку с именем управляющего атрибута.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNameAttribute">
      <summary>Атрибут ManagementName используется для переопределения имен, предоставляемых посредством класса WMI.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNameAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Management.ManagementNameAttribute" /> и задает значение свойства класса <see cref="P:System.Management.ManagementNameAttribute.Name" />.</summary>
      <param name="name">Понятное имя объекта.</param>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementNameAttribute.Name">
      <summary>Возвращает или задает понятное имя объекта.Объектом может выступать параметр или свойство метода с атрибутом ManagementProbe, ManagementKey или ManagementConfiguration.</summary>
      <returns>Значение <see cref="T:System.String" /> указывает, что объект использует понятное имя.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementNewInstanceAttribute">
      <summary>Базовый класс для управляющих атрибутов, которые используются только во время выполнения и не используют представление схемы.Классы атрибутов управления ManagementBindAttribute, ManagementCreateAttribute и ManagementEnumeratorAttribute являются производными данного класса.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementNewInstanceAttribute.#ctor">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.ManagementNewInstanceAttribute" />.Этот конструктор используется по умолчанию.</summary>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementProbeAttribute">
      <summary>Атрибут ManagementProbe указывает, что свойство или поле представляет собой свойство WMI, доступное только для чтения.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementProbeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementProbeAttribute" /> class.Этот конструктор используется по умолчанию для класса.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementProbeAttribute.Schema">
      <summary>Возвращает или устанавливает значение, определяющее тип вывода, который возвращает свойство, помеченное атрибутом ManagementProbe.</summary>
      <returns>Значение <see cref="T:System.Type" /> указывает тип вывода, который возвращает свойство, помеченное атрибутом ManagementProbe.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementReferenceAttribute">
      <summary>Атрибутом ManagementReferenceAttribute помечается параметр элемента, свойства или метода класса, если этот параметр является ссылкой на другой управляющий объект или класс.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementReferenceAttribute.#ctor">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.ManagementReferenceAttribute" />.This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementReferenceAttribute.Type">
      <summary>Возвращает или задает имя типа, на который происходит ссылка.</summary>
      <returns>Строка, содержащая имя типа, на который происходит ссылка.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementRemoveAttribute">
      <summary>Атрибут ManagementRemoveAttribute указывает, что метод очищает экземпляр управляемой сущности.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementRemoveAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementRemoveAttribute" /> class.This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementRemoveAttribute.Schema">
      <summary>Возвращает или устанавливает значение, определяющее тип вывода, который возвращает объект, помеченный атрибутом ManagementRemove.</summary>
      <returns>Значение <see cref="T:System.Type" /> указывает тип вывода, который возвращает объект, помеченный атрибутом Remove.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.ManagementTaskAttribute">
      <summary>Атрибут ManagementTask указывает, что метод целевого объекта реализует метод WMI.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.ManagementTaskAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Management.ManagementTaskAttribute" /> class.This is the default constructor.</summary>
    </member>
    <member name="P:System.Management.Instrumentation.ManagementTaskAttribute.Schema">
      <summary>Возвращает или устанавливает значение, определяющее тип вывода, который возвращает метод, помеченный атрибутом ManagementTask.</summary>
      <returns>Значение <see cref="T:System.Type" /> указывает тип вывода, который возвращает метод, помеченный атрибутом ManagementTask.</returns>
    </member>
    <member name="T:System.Management.Instrumentation.WmiConfigurationAttribute">
      <summary>Атрибут WmiConfiguration указывает, что сборка содержит код реализации поставщика WMI с использованием модели расширений поставщиков данных WMI.NET.Данный атрибут принимает параметры для обеспечения конфигурации высокого уровня для реализованного поставщика WMI.</summary>
    </member>
    <member name="M:System.Management.Instrumentation.WmiConfigurationAttribute.#ctor(System.String)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Management.WmiConfigurationAttribute" />, который задает пространство имен WMI для предоставления классов поставщиком WMI.</summary>
      <param name="scope">Пространство имен WMI, в котором поставщик будет предоставлять классы.Например, "root\MyProviderNamespace".</param>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingGroup">
      <summary>Возвращает или устанавливает группу размещения для поставщика WMI.</summary>
      <returns>Значение <see cref="T:System.String" />, указывающее группу размещения для поставщика WMI.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.HostingModel">
      <summary>Возвращает или устанавливает модель размещения для поставщика WMI.</summary>
      <returns>Значение <see cref="T:System.Management.Instrumentation.ManagementHostingModel" />, указывающее модель размещения для поставщика WMI.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.IdentifyLevel">
      <summary>Возвращает или устанавливает значение, которое определяет, может ли поставщик WMI олицетворять собственный вызывающий объект.Если значение равно "false", поставщик не может олицетворять вызывающий объект, а если "true", то может.</summary>
      <returns>Логическое значение, которое указывает, может ли поставщик олицетворять собственные вызывающие объекты.Если значение равно "false", поставщик не может олицетворять вызывающий объект, а если "true", то может.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.NamespaceSecurity">
      <summary>Возвращает или устанавливает строку идентификатора безопасности на языке SDDL, которая определяет дескриптор безопасности пространства имен, в котором поставщик предоставляет управляющие объекты.</summary>
      <returns>Строка на языке SDDL, представляющая дескриптор безопасности пространства имен, в котором поставщик предоставляет управляющие объекты.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.Scope">
      <summary>Возвращает или устанавливает пространство имен WMI, в котором поставщик WMI предоставляет классы.</summary>
      <returns>Значение <see cref="T:System.String" />, указывающее пространство имен, в котором поставщик WMI предоставляет классы.</returns>
    </member>
    <member name="P:System.Management.Instrumentation.WmiConfigurationAttribute.SecurityRestriction">
      <summary>Возвращает или устанавливает дескриптор безопасности для поставщика WMI.Дополнительные сведения см. в описании свойства SecurityDescriptor в разделе "__Win32Provider", который находится в библиотеке MSDN в Интернете по адресу: http://www.msdn.com.</summary>
      <returns>Значение <see cref="T:System.String" />, содержащее дескриптор безопасности для поставщика WMI.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>Базовый класс динамического источника вызова.Этот тип используется в качестве типа параметра для целей динамического источника вызова.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Класс, предназначенный для привязки динамических операций к динамическому сайту.</summary>
      <returns>Объект <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, предназначенный для привязки динамических операций.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Создает источник вызова с данными типом делегата и построителем.</summary>
      <returns>Новый источник вызова.</returns>
      <param name="delegateType">Тип делегата источника вызова.</param>
      <param name="binder">Привязчик источника вызова.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Тип динамического сайта.</summary>
      <typeparam name="T">Тип делегата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Создает экземпляр динамического источника вызова, инициализированного с помощью привязчика, ответственного за привязку среды выполнения динамических операций этого источника вызова.</summary>
      <returns>Новый экземпляр динамического источника вызова.</returns>
      <param name="binder">Привязчик, предназначенный для привязки среды выполнения динамических операций этого источника вызова.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>Кэш уровня 0 — специальный делегат на основе журнала сайта.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>Делегат обновления.Вызывается при отсутствии на динамическом сайте совпадений в кэше.</summary>
      <returns>Делегат обновления.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Класс, предназначенный для привязки динамических операций к динамическому источнику вызова в среде выполнения.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Выполняет привязку динамической операции к набору аргументов в среде выполнения.</summary>
      <returns>Выражение, проверяющее аргументы динамической операции и выполняющее эту операцию, если проверки пройдены успешно.Если проверки не пройдены успешно при последующих выполнениях динамической операции, метод Bind вызывается еще раз, чтобы создать новый объект <see cref="T:System.Linq.Expressions.Expression" /> для новых типов аргументов.</returns>
      <param name="args">Массив аргументов динамической операции.</param>
      <param name="parameters">Массив экземпляров класса <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющих параметры источника вызова в процессе привязки.</param>
      <param name="returnLabel">Элемент LabelTarget, возвращающий результат динамической привязки.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Обеспечивает низкоуровневую поддержку привязки в среде выполнения.Этот метод можно переопределять в классах, обеспечивая прямой делегат для реализации правила.Это позволяет сохранять правила на диск, обеспечивать специализированные правила в среде выполнения и предоставлять альтернативную политику кэширования.</summary>
      <returns>Новый делегат, заменяющий целевой элемент источника вызова.</returns>
      <param name="site">Источник вызова, для которого выполняется привязка.</param>
      <param name="args">Аргументы для привязки.</param>
      <typeparam name="T">Тип целевого элемента источника вызова.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Добавляет целевой элемент в кэш известных целевых элементов.Целевые элементы в кэше сканируются перед вызовом метода BindDelegate для получения нового правила.</summary>
      <param name="target">Целевой делегат, добавляемый в кэш.</param>
      <typeparam name="T">Тип добавляемого целевого элемента.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Получает метку, с помощью которой можно обеспечить обновление привязки.Она указывает, что привязка выражения более недействительна.Обычно используется в случае изменения "версии" динамического объекта.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку, с помощью которой можно обеспечить обновление привязки.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Класс, содержащий вспомогательные методы для источников вызова динамической среды выполнения (DLR).</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Проверяет, используется ли объект <see cref="T:System.Reflection.MethodBase" /> в качестве внутреннего объекта среды DLR (в этом случае он не должен отображаться в стеке кода языка).</summary>
      <returns>Значение true, если вводимый объект <see cref="T:System.Reflection.MethodBase" /> используется в качестве внутреннего объекта среды DLR (в этом случае он не должен отображаться в стеке кода языка).В противном случае — значение false.</returns>
      <param name="mb">Вводимый объект <see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteOps">
      <summary>Создает и кэширует правила привязки.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.AddRule``1(System.Runtime.CompilerServices.CallSite{``0},``0)">
      <summary>Добавляет правило в кэш, поддерживаемый на динамическом источнике вызова.</summary>
      <param name="site">Экземпляр динамического источника вызова.</param>
      <param name="rule">Экземпляр правила источника вызова.</param>
      <typeparam name="T">Тип делегата класса <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.Bind``1(System.Runtime.CompilerServices.CallSiteBinder,System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Обновляет цель сайта вызова новым правилом на основании аргументов.</summary>
      <returns>Новая цель сайта вызова.</returns>
      <param name="binder">Привязчик источника вызова.</param>
      <param name="site">Экземпляр динамического источника вызова.</param>
      <param name="args">Аргументы для сайта вызова.</param>
      <typeparam name="T">Тип делегата класса <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.ClearMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>Снимает флажок соответствия на источнике вызова, проверяющем соответствие.</summary>
      <param name="site">Экземпляр динамического источника вызова.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Создает экземпляр динамического источника вызова, используемый для поиска в кэше.</summary>
      <returns>Новый источник вызова.</returns>
      <param name="site">Экземпляр динамического источника вызова.</param>
      <typeparam name="T">Тип делегата класса <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetCachedRules``1(System.Runtime.CompilerServices.RuleCache{``0})">
      <summary>Выполняет поиск правил, применимых к динамической операции, в кэше динамических правил.</summary>
      <returns>Коллекция применимых правил.</returns>
      <param name="cache">Кэш.</param>
      <typeparam name="T">Тип делегата класса <see cref="T:System.Runtime.CompilerServices.CallSite" />. </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetMatch(System.Runtime.CompilerServices.CallSite)">
      <summary>Проверяет соответствие выполненного правила</summary>
      <returns>значение true, если правило соответствует, в противном случае — значение false.</returns>
      <param name="site">Экземпляр динамического источника вызова.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRuleCache``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Извлекает кэш правил привязки.</summary>
      <returns>Кэш.</returns>
      <param name="site">Экземпляр динамического источника вызова.</param>
      <typeparam name="T">Тип делегата класса <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.GetRules``1(System.Runtime.CompilerServices.CallSite{``0})">
      <summary>Получает динамические правила привязки от источника вызова.</summary>
      <returns>Массив динамических правил привязки.</returns>
      <param name="site">Экземпляр динамического источника вызова.</param>
      <typeparam name="T">Тип делегата класса <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.MoveRule``1(System.Runtime.CompilerServices.RuleCache{``0},``0,System.Int32)">
      <summary>Перемещает правило привязки в пределах кэша.</summary>
      <param name="cache">Кэш правил источника вызова.</param>
      <param name="rule">Экземпляр правила источника вызова.</param>
      <param name="i">Индекс правила источника вызова.</param>
      <typeparam name="T">Тип делегата класса <see cref="T:System.Runtime.CompilerServices.CallSite" />. </typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.SetNotMatched(System.Runtime.CompilerServices.CallSite)">
      <summary>Проверяет, требует ли обновления динамический источник вызова.</summary>
      <returns>значение true, если обновление правила не требуется, в противном случае — значение false.</returns>
      <param name="site">Экземпляр динамического источника вызова.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteOps.UpdateRules``1(System.Runtime.CompilerServices.CallSite{``0},System.Int32)">
      <summary>Обновляет правила в кэше.</summary>
      <param name="this">Экземпляр динамического источника вызова.</param>
      <param name="matched">Индекс правила, для которого найдено соответствие.</param>
      <typeparam name="T">Тип делегата класса <see cref="T:System.Runtime.CompilerServices.CallSite" />.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.Closure">
      <summary>Представляет состояние динамически создаваемого метода во время выполнения.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Closure.#ctor(System.Object[],System.Object[])">
      <summary>Создает объект, содержащий состояние динамически создаваемого метода.</summary>
      <param name="constants">Константы, используемые методом.</param>
      <param name="locals">Поднятые локальные переменные из родительского контекста.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Constants">
      <summary>Представляет нетривиальные константы и локально выполняемые выражения, на которые ссылается динамически создаваемый метод.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.Closure.Locals">
      <summary>Представляет поднятые локальные переменные из родительского контекста.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>Создает сведения отладки для лямбда-выражений в дереве выражений.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>Создает генератор символов базы данных программы (PDB).</summary>
      <returns>Генератор символов PDB.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>Задает точку следования в коде инструкций языка MSIL.</summary>
      <param name="method">Создаваемое лямбда-выражение.</param>
      <param name="ilOffset">Смещение внутри кода MSIL, на котором следует отметить точку следования.</param>
      <param name="sequencePoint">Сведения отладки, связанные с точкой следования.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Означает, что использование объекта <see cref="T:System.Object" /> с элементом следует рассматривать как динамически выполняемый тип.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />.</summary>
      <param name="transformFlags">Указывает с помощью префикса обхода конструкции типа, какие экземпляры <see cref="T:System.Object" /> следует считать динамически выполняемыми типами.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Указывает с помощью префикса обхода конструкции типа, какие экземпляры <see cref="T:System.Object" /> следует считать динамически выполняемыми типами.</summary>
      <returns>Список объектов <see cref="T:System.Object" />, которые следует рассматривать как динамически выполняемые типы.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>Представляет состояние динамически создаваемого метода во время выполнения.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>Создает делегат, который может использоваться для выполнения динамически создаваемого метода.</summary>
      <returns>
        <see cref="T:System.Delegate" />, который может выполнять динамически создаваемый метод.</returns>
      <param name="indexLambda">Индекс объекта, в котором хранится информация о связанном лямбда-выражении динамического метода.</param>
      <param name="locals">Массив, содержащий поднятые локальные переменные из родительского контекста.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>Создает массив для хранения поднятых локальных переменных.</summary>
      <returns>Массив для хранения поднятых локальных переменных.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>Представляет нетривиальные константы и локально выполняемые выражения, на которые ссылается динамически создаваемый метод.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>Освобождает указанное дерево выражений от ссылок на внешние параметры, заменяя параметр его текущим значением.</summary>
      <returns>Дерево выражений, которое не содержит ссылок на внешние параметры.</returns>
      <param name="expression">Дерево выражений, которое требуется освободить от ссылок на внешние параметры.</param>
      <param name="locals">Массив, содержащий поднятые локальные переменные.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>Представляет поднятые локальные переменные из родительского контекста.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>Представляет область выполнения вызывающего делегата.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>Указывает, что метод является методом расширения или что класс или сборка содержат методы расширения.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" />. </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>Представляет значения переменных среды выполнения.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>Получает количество переменных среды выполнения.</summary>
      <returns>Количество переменных среды выполнения.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>Получает значение переменной среды выполнения по указанному индексу.</summary>
      <returns>Значение переменной среды выполнения.</returns>
      <param name="index">Начинающийся с нуля индекс переменной среды выполнения, значение которого следует вернуть.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>Определяет свойство для доступа к значению, на которое ссылается объект.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>Получает или задает значение, на которое ссылается объект.</summary>
      <returns>Значение, на которое ссылается объект.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>Построитель для коллекции, доступной только для чтения.</summary>
      <typeparam name="T">Тип элемента коллекции.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>Конструирует ReadOnlyCollectionBuilder.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Собирает построитель ReadOnlyCollectionBuilder, копируя содержимое данной коллекции.</summary>
      <param name="collection">Коллекция, из которой требуется скопировать элементы.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>Создает построитель ReadOnlyCollectionBuilder с данной начальной емкостью.Содержимого нет, но построитель резервирует пространство для данного числа элементов, доступное без перераспределений.</summary>
      <param name="capacity">Начальная емкость.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>Добавляет элемент в коллекцию <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <param name="item">Объект, добавляемый в коллекцию <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>Получает или задает емкость данного построителя ReadOnlyCollectionBuilder.</summary>
      <returns>Емкость данного построителя ReadOnlyCollectionBuilder..</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>Удаляет все элементы из коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>Определяет, содержит ли коллекция <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> указанное значение.</summary>
      <returns>Имеет значение "true", если элемент находится в <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; в противном случае — "false".</returns>
      <param name="item">Объект, который требуется найти в <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> в массив <see cref="T:System.Array" /> начиная с конкретного индекса <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный <see cref="T:System.Array" />, в который копируются элементы <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
      <param name="arrayIndex">Индекс в массиве, с которого начинается копирование (индексация ведется с нуля).</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>Возвращает количество элементов построителя ReadOnlyCollectionBuilder.</summary>
      <returns>Количество элементов построителя ReadOnlyCollectionBuilder.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.IEnumerator`1" />, который может использоваться для перебора элементов коллекции.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>Возвращает индекс первого вхождения заданного значения в построитель.</summary>
      <returns>Индекс первого вхождения элемента.</returns>
      <param name="item">Искомый элемент.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>Вставляет элемент в коллекцию <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент.</param>
      <param name="item">Объект, вставляемый в <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>Возвращает или задает элемент по указанному индексу.</summary>
      <returns>Элемент с указанным индексом.</returns>
      <param name="index">Индекс (с нуля) элемента, который требуется получить или задать.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>Удаляет первое вхождение указанного объекта из коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <returns>"true", если элемент успешно удален из <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; в противном случае — "false".Этот метод также возвращает значение false, если элемент не найден в исходном объекте <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
      <param name="item">Объект, который необходимо удалить из коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>Удаляет элемент списка <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, расположенный по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента, который необходимо удалить.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>Изменяет порядок элементов во всем списке <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> на обратный.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>Изменяет порядок элементов в указанном диапазоне.</summary>
      <param name="index">Отсчитываемый от нуля индекс начала диапазона, порядок элементов которого требуется изменить.</param>
      <param name="count">Число элементов в диапазоне, порядок сортировки в котором требуется изменить.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли <see cref="T:System.Collections.Generic.ICollection`1" /> только для чтения.</summary>
      <returns>Значение true, если коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступна только для чтения; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы коллекции <see cref="T:System.Collections.Generic.ICollection`1" /> в массив, начиная с указанного индекса массива.</summary>
      <param name="array">Одномерный массив, в который копируются элементы из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.Индексация в массиве должна начинаться с нуля.</param>
      <param name="index">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>Значение true, если доступ к <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным), в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>Добавляет элемент в список <see cref="T:System.Collections.IList" />.</summary>
      <returns>Позиция, в которую вставлен новый элемент.</returns>
      <param name="value">Объект <see cref="T:System.Object" />, добавляемый в список <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>Определяет, содержится ли указанное значение в списке <see cref="T:System.Collections.IList" />.</summary>
      <returns>Значение true, если элемент <paramref name="item" /> найден в списке <see cref="T:System.Collections.IList" />, в противном случае — значение false.</returns>
      <param name="value">Объект <see cref="T:System.Object" />, который требуется найти в списке <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Определяет индекс заданного элемента в списке <see cref="T:System.Collections.IList" />.</summary>
      <returns>Индекс элемента <paramref name="item" />, если элемент найден в списке, в противном случае — значение –1.</returns>
      <param name="value">Объект, который требуется найти в <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Вставляет элемент в коллекцию <see cref="T:System.Collections.IList" /> с заданным индексом.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить параметр <paramref name="item" />.</param>
      <param name="value">Объект, вставляемый в список <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>Получает значение, показывающее, имеет ли список <see cref="T:System.Collections.IList" /> фиксированный размер.</summary>
      <returns>Значение true, если список <see cref="T:System.Collections.IList" /> имеет фиксированный размер, в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>Получает значение, указывающее, доступен ли список <see cref="T:System.Collections.IList" /> только для чтения.</summary>
      <returns>Значение true, если список <see cref="T:System.Collections.IList" /> доступен только для чтения, в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает или задает элемент по указанному индексу.</summary>
      <returns>Элемент с указанным индексом.</returns>
      <param name="index">Индекс (с нуля) элемента, который требуется получить или задать.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>Удаляет первое вхождение указанного объекта из списка <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Объект, который необходимо удалить из списка <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>Копирует элементы списка <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> в новый массив.</summary>
      <returns>Массив, содержащий копии элементов списка <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>Создает объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащий все элементы <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, при возможности не копируя элементы в новый массив.Сбрасывает объект <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> после создания коллекции <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>Представляет кэш правил привязки времени выполнения.</summary>
      <typeparam name="T">Тип делегата.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeOps">
      <summary>Содержит вспомогательные методы, вызываемые из динамически создаваемых методов.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables">
      <summary>Создает интерфейс, с помощью которого можно изменять закрытые переменные в среде выполнения.</summary>
      <returns>Интерфейс для доступа к переменным.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables(System.Object[],System.Int64[])">
      <summary>Создает интерфейс, с помощью которого можно изменять закрытые переменные в среде выполнения.</summary>
      <returns>Интерфейс для доступа к переменным.</returns>
      <param name="data">Массив закрытия.</param>
      <param name="indexes">Массив индексов массива закрытия, содержащего переменные.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoCheckVersion(System.Dynamic.ExpandoObject,System.Object)">
      <summary>Проверяет версию объекта expando.</summary>
      <returns>Возвращает значение true, если версия совпадает; в противном случае — значение false.</returns>
      <param name="expando">Объект expando.</param>
      <param name="version">Проверяемая версия.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoPromoteClass(System.Dynamic.ExpandoObject,System.Object,System.Object)">
      <summary>Переводит объект expando из одного класса в другой.</summary>
      <param name="expando">Объект expando.</param>
      <param name="oldClass">Старый класс объекта expando.</param>
      <param name="newClass">Новый класс объекта expando.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryDeleteValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean)">
      <summary>Удаляет значение элемента в объекте expando.</summary>
      <returns>Возвращает значение true, если элемент успешно удален; в противном случае — значение false.</returns>
      <param name="expando">Объект expando.</param>
      <param name="indexClass">Класс объекта expando.</param>
      <param name="index">Индекс элемента.</param>
      <param name="name">Имя элемента.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTryGetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.String,System.Boolean,System.Object@)">
      <summary>Получает значение элемента в объекте expando.</summary>
      <returns>Значение true, если элемент существует в объекте expando; в противном случае — значение false.</returns>
      <param name="expando">Объект expando.</param>
      <param name="indexClass">Класс объекта expando.</param>
      <param name="index">Индекс элемента.</param>
      <param name="name">Имя элемента.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
      <param name="value">Выходной параметр, содержащий значение элемента.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.ExpandoTrySetValue(System.Dynamic.ExpandoObject,System.Object,System.Int32,System.Object,System.String,System.Boolean)">
      <summary>Задает значение элемента в объекте expando.</summary>
      <returns>Возвращает индекс для элемента набора.</returns>
      <param name="expando">Объект expando.</param>
      <param name="indexClass">Класс объекта expando.</param>
      <param name="index">Индекс элемента.</param>
      <param name="value">Значение элемента.</param>
      <param name="name">Имя элемента.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.MergeRuntimeVariables(System.Runtime.CompilerServices.IRuntimeVariables,System.Runtime.CompilerServices.IRuntimeVariables,System.Int32[])">
      <summary>Совмещает два списка переменных среды выполнения и возвращает новый список.</summary>
      <returns>Объединенные переменные среды выполнения.</returns>
      <param name="first">Первый список.</param>
      <param name="second">Второй список.</param>
      <param name="indexes">Массив индексов, указывающий, из какого списка получать переменные.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeOps.Quote(System.Linq.Expressions.Expression,System.Object,System.Object[])">
      <summary>Указывает предоставленное дерево выражения.</summary>
      <returns>Указываемое выражение.</returns>
      <param name="expression">Указываемое выражение.</param>
      <param name="hoistedLocals">Поднятое локальное состояние, предоставленное компилятором.</param>
      <param name="locals">Фактические местные поднятые значения.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>Содержит ссылку на значение.</summary>
      <typeparam name="T">Тип значения, на которое ссылается <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>Инициализирует новый объект StrongBox, которому можно передать значение при ссылочном вызове.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />, используя указанное значение. </summary>
      <param name="value">Значение, на которое будет ссылаться <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>Получает или задает значение, на которое ссылается <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</summary>
      <returns>Значение, на которое ссылается <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>Представляет значение, на которое ссылается <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>Позволяет выполнять регистрацию обработчика событий с поздней привязкой.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />, используя указанные тип и имя события в типе.</summary>
      <param name="type">Тип объекта. </param>
      <param name="eventName">Имя события в <paramref name="type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Присоединяет обработчик событий к объекту модели COM.</summary>
      <param name="target">Целевой объект, к которому должен привязываться делегат события.</param>
      <param name="handler">Делегат события.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>Получает атрибуты этого события.</summary>
      <returns>Атрибуты этого события, доступные только для чтения.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>Возвращает класс, объявивший этот член.</summary>
      <returns>Объект <see cref="T:System.Type" /> для класса, объявляющего данный член.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>Получает метод, использованный для добавления делегата обработчика событий в источник событий.</summary>
      <returns>Метод, использованный для добавления делегата обработчика событий в источник событий.</returns>
      <param name="nonPublic">Значение true, чтобы возвратить методы, не являющиеся открытыми, в противном случае — значение false.</param>
      <exception cref="T:System.MethodAccessException">Параметр <paramref name="nonPublic" /> имеет значение true, а метод, используемый для добавления делегата обработчика событий, не является открытым, однако вызывающий оператор не обладает разрешением на отражение для методов, не являющихся открытыми.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>При переопределении в производном классе получает массив всех настраиваемых атрибутов, применяемых к этому члену.</summary>
      <returns>Массив, содержащий все настраиваемые атрибуты, или массив, не содержащий элементов, если атрибуты не определены.</returns>
      <param name="inherit">Значение true, с целью поиска цепочки наследования этого члена для поиска атрибутов, в противном случае — значение false.</param>
      <exception cref="T:System.InvalidOperationException">Этот член относится к типу, который загружается в контекст, используемый только для отражения.См. раздел Практическое руководство. Загрузка сборок в контекст, предназначенный только для отражения.</exception>
      <exception cref="T:System.TypeLoadException">Невозможно загрузить тип настраиваемого атрибута.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>При переопределении в производном классе получает массив всех настраиваемых атрибутов указанного типа, применяемых к этому члену.</summary>
      <returns>Массив, содержащий все настраиваемые атрибуты указанного типа, или массив, не содержащий элементов, если атрибуты не определены.</returns>
      <param name="attributeType">Искомый тип атрибута.Возвращаются только атрибуты, которые могут быть присвоены этому типу.</param>
      <param name="inherit">Значение true, с целью поиска цепочки наследования этого члена для поиска атрибутов, в противном случае — значение false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> имеет значение null;</exception>
      <exception cref="T:System.InvalidOperationException">Этот член относится к типу, который загружается в контекст, используемый только для отражения.См. раздел Практическое руководство. Загрузка сборок в контекст, предназначенный только для отражения.</exception>
      <exception cref="T:System.TypeLoadException">Невозможно загрузить тип настраиваемого атрибута.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>При переопределении в производном классе, возвращает метод, который вызывался при возникновении события. </summary>
      <returns>Объект, вызванный при возникновении события.</returns>
      <param name="nonPublic">Значение true, чтобы возвратить методы, не являющиеся открытыми, в противном случае — значение false. </param>
      <exception cref="T:System.MethodAccessException">Параметр <paramref name="nonPublic" /> имеет значение true, а метод, используемый для добавления делегата обработчика событий, не является открытым, однако вызывающий оператор не обладает разрешением на отражение для методов, не являющихся открытыми. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>При переопределении в производном классе получает объект <see cref="T:System.Reflection.MethodInfo" /> для удаления метода события.</summary>
      <returns>Метод, который использовался для удаления делегата обработчика событий из списка вызова источника событий.</returns>
      <param name="nonPublic">Значение true, чтобы возвратить методы, не являющиеся открытыми, в противном случае — значение false. </param>
      <exception cref="T:System.MethodAccessException">Параметр <paramref name="nonPublic" /> имеет значение true, а метод, используемый для добавления делегата обработчика событий, не является открытым, однако вызывающий оператор не обладает разрешением на отражение для методов, не являющихся открытыми. </exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Указывает, применяется ли к этому члену один или несколько экземпляров указанного атрибута.</summary>
      <returns>Значение true, если указанный атрибут применен к этому члену; в противном случае — значение false.</returns>
      <param name="attributeType">Искомый тип атрибута.</param>
      <param name="inherit">Значение true, с целью поиска цепочки наследования этого члена для поиска атрибутов, в противном случае — значение false.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>Возвращает имя текущего члена.</summary>
      <returns>Имя данного элемента.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>Получает объект класса, который использовался для инициализации данного экземпляра.</summary>
      <returns>Объект <see cref="T:System.Type" />, который использовался для инициализации текущего объекта.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Отсоединяет обработчик событий от объекта модели COM.</summary>
      <param name="target">Целевой объект, к которому привязан делегат события.</param>
      <param name="handler">Делегат события.</param>
      <exception cref="T:System.InvalidOperationException">Для этого события не предусмотрен открытый метод доступа remove.</exception>
      <exception cref="T:System.ArgumentException">Переданный обработчик нельзя использовать.</exception>
      <exception cref="T:System.Reflection.TargetException">Параметр <paramref name="target" /> имеет значение null и событие не является статическим.— или — Объект <see cref="T:System.Reflection.EventInfo" /> не объявлен для целевого объекта.</exception>
      <exception cref="T:System.MethodAccessException">Вызывающий оператор не имеет разрешения на доступ к данному члену.</exception>
    </member>
    <member name="T:System.Security.ManifestKinds">
      <summary>Представляет тип манифеста, к которому применяется информация подписи.</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.None">
      <summary>Манифест без конкретного типа. </summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Deployment">
      <summary>Манифест только для развертывания.</summary>
    </member>
    <member name="F:System.Security.ManifestKinds.Application">
      <summary>Манифест для приложения. </summary>
    </member>
    <member name="F:System.Security.ManifestKinds.ApplicationAndDeployment">
      <summary>Манифест для развертывания и приложения.Это значение по умолчанию для проверки сигнатур.</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesCryptoServiceProvider">
      <summary>Выполняет симметричное шифрование и дешифрование с помощью реализации CAPI алгоритма симметричного шифрования AES. </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesCryptoServiceProvider" />. </summary>
      <exception cref="T:System.PlatformNotSupportedException">Нет поддерживаемого размера ключа для текущей платформы.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor">
      <summary>Создает объект-дешифратор для алгоритма симметричного шифрования AES, используя текущий ключ и вектор инициализации.</summary>
      <returns>Объект-дешифратор для алгоритма симметричного шифрования AES.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Текущий ключ является недопустимым или отсутствует.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Создает объект-дешифратор для алгоритма симметричного шифрования AES, используя заданный ключ и вектор инициализации.</summary>
      <returns>Объект-дешифратор для алгоритма симметричного шифрования AES.</returns>
      <param name="key">Секретный ключ, используемый в алгоритме симметричного шифрования.</param>
      <param name="iv">Вектор инициализации, используемый в алгоритме симметричного шифрования.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> или <paramref name="iv" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Недопустимое значение параметра <paramref name="key" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor">
      <summary>Создает объект-шифратор для алгоритма симметричного шифрования AES, используя текущий ключ и вектор инициализации.</summary>
      <returns>Объект-шифратор для алгоритма симметричного шифрования AES.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Создает объект-шифратор для алгоритма симметричного шифрования, используя заданный ключ и вектор инициализации.</summary>
      <returns>Объект-шифратор для алгоритма симметричного шифрования AES.</returns>
      <param name="key">Секретный ключ, используемый в алгоритме симметричного шифрования.</param>
      <param name="iv">Вектор инициализации, используемый в алгоритме симметричного шифрования.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> или <paramref name="iv" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Недопустимое значение параметра <paramref name="key" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateIV">
      <summary>Генерирует случайный вектор инициализации для использования данным алгоритмом.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Невозможно сгенерировать вектор инициализации. </exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCryptoServiceProvider.GenerateKey">
      <summary>Генерирует случайный ключ для использования данным алгоритмом. </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Невозможно сгенерировать ключ.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.Key">
      <summary>Возвращает или задает симметричный ключ, используемый для зашифрования и расшифрования.</summary>
      <returns>Симметричный ключ, используемый для зашифрования и расшифрования.</returns>
      <exception cref="T:System.ArgumentNullException">Значение ключа — null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимый размер ключа.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCryptoServiceProvider.KeySize">
      <summary>Возвращает или задает размер секретного ключа в битах. </summary>
      <returns>Размер ключа в битах.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Предоставляет управляемую реализацию алгоритма симметричного шифрования AES. </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesManaged" />. </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Параметр политики безопасности Windows для FIPS-совместимых алгоритмов включен.</exception>
      <exception cref="T:System.InvalidOperationException">Эта реализация не входит в состав криптографических алгоритмов, утвержденных в стандартах FIPS для платформы Windows.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Создает объект-дешифратор для алгоритма симметричного шифрования, используя текущий ключ и вектор инициализации.</summary>
      <returns>Объект-дешифратор для алгоритма симметричного шифрования.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Создает объект-дешифратор для алгоритма симметричного шифрования, используя заданный ключ и вектор инициализации.</summary>
      <returns>Объект-дешифратор для алгоритма симметричного шифрования.</returns>
      <param name="key">Секретный ключ, используемый в алгоритме симметричного шифрования.</param>
      <param name="iv">Вектор инициализации, используемый в алгоритме симметричного шифрования.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> или <paramref name="iv" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Недопустимое значение параметра <paramref name="key" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Создает объект-шифратор для алгоритма симметричного шифрования, используя текущий ключ и вектор инициализации.</summary>
      <returns>Объект-шифратор для алгоритма симметричного шифрования.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Создает объект-шифратор для алгоритма симметричного шифрования, используя заданный ключ и вектор инициализации.</summary>
      <returns>Объект-шифратор для алгоритма симметричного шифрования.</returns>
      <param name="key">Секретный ключ, используемый в алгоритме симметричного шифрования.</param>
      <param name="iv">Вектор инициализации, используемый в алгоритме симметричного шифрования.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> или <paramref name="iv" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Недопустимое значение параметра <paramref name="key" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>Получает или задает число бит для обратной связи. </summary>
      <returns>Размер порции данных обратной связи в битах.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Генерирует случайный вектор инициализации для использования в алгоритме симметричного шифрования.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Генерирует случайный ключ для использования в алгоритме симметричного шифрования. </summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Получает или задает вектор инициализации для алгоритма симметричного шифрования. </summary>
      <returns>Вектор инициализации, используемый в алгоритме симметричного шифрования.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Получает или задает секретный ключ для алгоритма симметричного шифрования.</summary>
      <returns>Секретный ключ для алгоритма симметричного шифрования.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Получает или задает размер секретного ключа (в битах), используемого алгоритмом симметричного шифрования. </summary>
      <returns>Размер ключа (в битах), используемого алгоритмом симметричного шифрования.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>Получает или задает режим работы алгоритма симметричного шифрования.</summary>
      <returns>Одно из значений перечисления, указывающее, какой режим блочного шифрования требуется использовать.Значение по умолчанию — <see cref="F:System.Security.Cryptography.CipherMode.CBC" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Для свойства <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> устанавливается значение <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> или <see cref="F:System.Security.Cryptography.CipherMode.OFB" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>Получает или задает режим заполнения, используемый в алгоритме симметричного шифрования. </summary>
      <returns>Одно из значений перечисления, указывающее тип применяемого заполнения.Значение по умолчанию — <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithm">
      <summary>Инкапсулирует имя алгоритма шифрования. </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngAlgorithm" />.</summary>
      <param name="algorithm">Имя алгоритма для инициализации.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="algorithm" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Длина значения параметра <paramref name="algorithm" /> равна 0.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Algorithm">
      <summary>Получает имя алгоритма, заданного текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.</summary>
      <returns>Внедренное имя алгоритма.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256">
      <summary>Gets a <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-256 curve.</summary>
      <returns>Объект, задающий алгоритм ECDH, в котором используется кривая P-256.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм обмена ключами Диффи-Хеллмана на эллиптических кривых (Elliptic Curve Diffie-Hellman, ECDH), в котором используется кривая P-384.</summary>
      <returns>Объект, задающий алгоритм ECDH, в котором используется кривая P-384.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм обмена ключами Диффи-Хеллмана на эллиптических кривых (Elliptic Curve Diffie-Hellman, ECDH), в котором используется кривая P-521.</summary>
      <returns>Объект, задающий алгоритм ECDH, в котором используется кривая P-521.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP256">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм цифровой подписи DSA на эллиптических кривых (Elliptic Curve Digital Signature Algorithm, ECDSA), в котором используется кривая P-256.</summary>
      <returns>Объект, задающий алгоритм ECDSA, в котором используется кривая P-256.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP384">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм цифровой подписи DSA на эллиптических кривых (Elliptic Curve Digital Signature Algorithm, ECDSA), в котором используется кривая P-384.</summary>
      <returns>Объект, задающий алгоритм ECDSA, в котором используется кривая P-384.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP521">
      <summary>Получает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий алгоритм цифровой подписи DSA на эллиптических кривых (Elliptic Curve Digital Signature Algorithm, ECDSA), в котором используется кривая P-521.</summary>
      <returns>Объект, задающий алгоритм ECDSA, в котором используется кривая P-521.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object.</summary>
      <returns>Значение true, если параметр <paramref name="obj" /> является объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающим тот же самый алгоритм, что и текущий объект; в противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object to the current <see cref="T:System.Security.Cryptography.CngAlgorithm" /> object. </summary>
      <returns>Значение true, если параметр <paramref name="other" /> задает тот же самый алгоритм, что и текущий объект; в противном случае — значение false.</returns>
      <param name="other">Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.GetHashCode">
      <summary>Формирует хэш-значение имени алгоритма, внедренного в текущий объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />.</summary>
      <returns>Хэш-значение внедренного имени алгоритма.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.MD5">
      <summary>Получает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий хэш-алгоритм MD5.</summary>
      <returns>Объект, задающий алгоритм MD5.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngAlgorithm" /> один и тот же алгоритм.</summary>
      <returns>Значение true, если два объекта задают один и тот же алгоритм, в противном случае — значение false.</returns>
      <param name="left">Объект, задающий имя алгоритма.</param>
      <param name="right">Второй объект, подлежащий сравнению с объектом, идентифицируемым параметром <paramref name="left" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngAlgorithm" /> разные алгоритмы.</summary>
      <returns>Значение true, если два объекта задают разные алгоритмы, в противном случае — значение false.</returns>
      <param name="left">Объект, задающий имя алгоритма.</param>
      <param name="right">Второй объект, подлежащий сравнению с объектом, идентифицируемым параметром <paramref name="left" />.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha1">
      <summary>Получает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий хэш-алгоритм SHA-1.</summary>
      <returns>Объект, задающий алгоритм SHA-1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha256">
      <summary>Получает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий хэш-алгоритм SHA-256.</summary>
      <returns>Объект, задающий алгоритм SHA-256.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha384">
      <summary>Получает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий хэш-алгоритм SHA-384.</summary>
      <returns>Объект, задающий алгоритм SHA-384.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha512">
      <summary>Получает новый объект <see cref="T:System.Security.Cryptography.CngAlgorithm" />, задающий хэш-алгоритм SHA-512.</summary>
      <returns>Объект, задающий алгоритм SHA-512.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.ToString">
      <summary>Получает имя алгоритма, заданного текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.</summary>
      <returns>Внедренное имя алгоритма.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithmGroup">
      <summary>Инкапсулирует имя группы алгоритмов шифрования. </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />.</summary>
      <param name="algorithmGroup">Имя группы алгоритмов для инициализации.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="algorithmGroup" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Длина значения параметра <paramref name="algorithmGroup" /> равна 0.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup">
      <summary>Получает имя группы алгоритмов, заданной текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.</summary>
      <returns>Внедренное имя группы алгоритмов.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />, задающий семейство алгоритмов, основанных на алгоритме Диффи-Хеллмана.</summary>
      <returns>Объект, задающий семейство алгоритмов, основанных на алгоритме Диффи-Хеллмана.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Dsa">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />, задающий семейство алгоритмов, основанных на алгоритме цифровой подписи DSA.</summary>
      <returns>Объект, задающий семейство алгоритмов, основанных на алгоритме DSA.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />, задающий семейство алгоритмов, основанных на алгоритме Диффи-Хеллмана на эллиптических кривых (Elliptic Curve Diffie-Hellman, ECDH).</summary>
      <returns>Объект, задающий семейство алгоритмов, основанных на алгоритме ECDH.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />, задающий семейство алгоритмов, основанных на алгоритме цифровой подписи DSA на эллиптических кривых (Elliptic Curve Digital Signature Algorithm, ECDSA).</summary>
      <returns>Объект, задающий семейство алгоритмов, основанных на алгоритме ECDSA.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <returns>Значение true, если параметр <paramref name="obj" /> является объектом <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />, задающим ту же самую группу алгоритмов, что и текущий объект; в противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object to the current <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> object.</summary>
      <returns>Значение true, если параметр <paramref name="other" /> задает ту же самую группу алгоритмов, что и текущий объект; в противном случае — значение false.</returns>
      <param name="other">Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode">
      <summary>Формирует хэш-значение имени группы алгоритмов, внедренного в текущий объект <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />.</summary>
      <returns>Хэш-значение внедренного имени группы алгоритмов.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> одну и ту же группу алгоритмов.</summary>
      <returns>Значение true, если два объекта задают одну и ту же группу алгоритмов, в противном случае — значение false.</returns>
      <param name="left">Объект, задающий группу алгоритмов.</param>
      <param name="right">Второй объект, подлежащий сравнению с объектом, идентифицируемым параметром <paramref name="left" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> разные группы алгоритмов.</summary>
      <returns>Значение true, если два объекта задают разные группы алгоритмов, в противном случае — значение false. </returns>
      <param name="left">Объект, задающий группу алгоритмов.</param>
      <param name="right">Второй объект, подлежащий сравнению с объектом, идентифицируемым параметром <paramref name="left" />.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Rsa">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />, задающий семейство алгоритмов, основанных на алгоритме RSA.</summary>
      <returns>Объект, задающий семейство алгоритмов, основанных на алгоритме RSA.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.ToString">
      <summary>Получает имя группы алгоритмов, заданной текущим объектом <see cref="T:System.Security.Cryptography.CngAlgorithm" />.</summary>
      <returns>Внедренное имя группы алгоритмов.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngExportPolicies">
      <summary>Задает политики экспорта для ключа. </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.None">
      <summary>Политики экспорта не заданы.Экспорт ключа разрешен без ограничений.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowExport">
      <summary>Закрытый ключ может быть экспортирован несколько раз.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextExport">
      <summary>Закрытый ключ может быть экспортирован несколько раз в виде открытого текста.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowArchiving">
      <summary>Закрытый ключ может быть экспортирован один раз в целях архивирования.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextArchiving">
      <summary>Закрытый ключ может быть экспортирован один раз в виде открытого текста.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKey">
      <summary>Определяет базовую функциональность для ключей, используемых объектами криптографии следующего поколения (CNG).</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Algorithm">
      <summary>Получает алгоритм, используемый ключом.</summary>
      <returns>Объект, определяющий имя алгоритма шифрования.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.AlgorithmGroup">
      <summary>Получает группу алгоритмов, используемую ключом.</summary>
      <returns>Объект, определяющий имя группы алгоритмов шифрования.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)">
      <summary>Создает объект <see cref="T:System.Security.Cryptography.CngKey" />, который может использоваться в заданном алгоритме.</summary>
      <returns>Эфемерный ключ.</returns>
      <param name="algorithm">Алгоритм, в котором будет использоваться ключ.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="algorithm" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)">
      <summary>Создает именованный объект <see cref="T:System.Security.Cryptography.CngKey" />, обеспечивающий работу заданного алгоритма.</summary>
      <returns>Постоянный или эфемерный ключ, обеспечивающий работу заданного алгоритма.</returns>
      <param name="algorithm">Алгоритм, в котором будет использоваться ключ.</param>
      <param name="keyName">Имя ключа.Если имя не задано, ключ не будет сохранен.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="algorithm" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)">
      <summary>Создает именованный объект <see cref="T:System.Security.Cryptography.CngKey" />, обеспечивающий работу заданного алгоритма, используя предоставленные параметры создания ключа.</summary>
      <returns>Постоянный или эфемерный ключ, обеспечивающий работу заданного алгоритма.</returns>
      <param name="algorithm">Алгоритм, в котором будет использоваться ключ.</param>
      <param name="keyName">Имя ключа.Если имя не задано, ключ не будет сохранен.</param>
      <param name="creationParameters">Объект, задающий дополнительные параметры для данного метода, включая <see cref="T:System.Security.Cryptography.CngProvider" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="algorithm" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Delete">
      <summary>Удаляет ключ, связанный с объектом.</summary>
      <exception cref="T:System.ObjectDisposedException">Предпринята попытка доступа к ключу, который был удален.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Dispose">
      <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Security.Cryptography.CngKey" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String)">
      <summary>Проверяет наличие именованного ключа в поставщике хранилища ключей (KSP) по умолчанию.</summary>
      <returns>Значение true, если именованный ключ существует в KSP по умолчанию; в противном случае — значение false.</returns>
      <param name="keyName">Имя ключа.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keyName" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)">
      <summary>Проверяет наличие именованного ключа в заданном поставщике хранилища ключей (KSP).</summary>
      <returns>Значение true, если именованный ключ существует в заданном поставщике хранилища ключей; в противном случае — значение false.</returns>
      <param name="keyName">Имя ключа.</param>
      <param name="provider">KSP, проверяемый на наличие ключа.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keyName" /> или <paramref name="provider" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>Проверяет наличие именованного ключа в заданном поставщике хранилища ключей (KSP) в соответствии с заданными параметрами.</summary>
      <returns>Значение true, если именованный ключ существует в заданном поставщике хранилища ключей; в противном случае — значение false.</returns>
      <param name="keyName">Имя ключа.</param>
      <param name="provider">KSP, проверяемый на наличие ключа.</param>
      <param name="options">Битовая комбинация значений перечисления, определяющих параметры открытия ключа.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keyName" /> или <paramref name="provider" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Экспортирует ключевой материал в большой двоичный объект в заданном формате.</summary>
      <returns>Большой двоичный объект, в котором содержится ключевой материал в заданном формате.</returns>
      <param name="format">Объект, задающий формат большого двоичного объекта ключа.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="format" /> имеет значение null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.Как правило, <see cref="P:System.Security.Cryptography.CngKey.ExportPolicy" /> не позволяет экспортировать ключ.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ExportPolicy">
      <summary>Получает политику экспорта, используемую ключом.</summary>
      <returns>Объект, задающий политику экспорта для ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>Получает свойство по заданному имени и набору параметров.</summary>
      <returns>Объект, в котором содержится необработанное значение заданного свойства.</returns>
      <param name="name">Имя требуемого свойства.</param>
      <param name="options">Битовая комбинация значений перечисления, определяющих параметры именованного свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Handle">
      <summary>Получает безопасный дескриптор, представляющий собственный ключ (NCRYPT_KEY_HANDLE). </summary>
      <returns>Безопасный дескриптор, представляющий ключ.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>Проверяет наличие заданного свойства для ключа.</summary>
      <returns>Значение true, если заданное свойство найдено; в противном случае — значение false.</returns>
      <param name="name">Имя свойства, наличие которого необходимо проверить.</param>
      <param name="options">Битовая комбинация значений перечисления, определяющих параметры именованного свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Создает новый ключ путем импорта заданного ключевого материала в KSP по умолчанию, используя заданный формат.</summary>
      <returns>Новый ключ.</returns>
      <param name="keyBlob">Массив, в котором содержатся данные ключа.</param>
      <param name="format">Объект, определяющий формат массива <paramref name="keyBlob" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keyBlob" /> или <paramref name="format" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)">
      <summary>Создает новый ключ путем импорта заданного ключевого материала в указанный KSP, используя заданный формат.</summary>
      <returns>Новый ключ.</returns>
      <param name="keyBlob">Массив, в котором содержатся данные ключа.</param>
      <param name="format">Объект, определяющий формат массива <paramref name="keyBlob" />.</param>
      <param name="provider">KSP.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" />, <paramref name="format" /> или <paramref name="provider" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsEphemeral">
      <summary>Получает сведения о постоянстве ключа.</summary>
      <returns>Значение true, если ключ является эфемерным; в противном случае — значение false. </returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsMachineKey">
      <summary>Получает область видимости ключа (для всех пользователей компьютера или только для текущего пользователя).</summary>
      <returns>Значение true, если ключ доступен для всех пользователей компьютера; значение false, если ключ доступен только для текущего пользователя.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyName">
      <summary>Получает имя ключа.</summary>
      <returns>Имя ключа.Если ключ является эфемерным, параметру присваивается значение null.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeySize">
      <summary>Получает размер ключа в битах.</summary>
      <returns>Размер ключа в битах.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyUsage">
      <summary>Получает криптографические операции, заданные ключом.</summary>
      <returns>Битовая комбинация значений перечисления, определяющих разрешенные варианты использования ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)">
      <summary>Создает экземпляр класса <see cref="T:System.Security.Cryptography.CngKey" />, используя дескриптор существующего ключа.</summary>
      <returns>Существующий ключ.</returns>
      <param name="keyHandle">Дескриптор существующего ключа.</param>
      <param name="keyHandleOpenOptions">Одно из значений перечисления, определяющее, представляет ли <paramref name="keyHandle" /> эфемерный или именованный ключ.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keyHandle" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyHandle" /> является недопустимым или имеет неверный формат либо уже закрыт.Это исключение также возникает в том случае, если ключ является эфемерным ключом, созданным средой CLR, но не задано значение <see cref="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String)">
      <summary>Создает экземпляр класса <see cref="T:System.Security.Cryptography.CngKey" />, который представляет существующий именованный ключ.</summary>
      <returns>Существующий ключ.</returns>
      <param name="keyName">Имя ключа.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keyName" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)">
      <summary>Создает экземпляр класса <see cref="T:System.Security.Cryptography.CngKey" />, который представляет существующий именованный ключ, используя заданного поставщика хранилища ключей (KSP).</summary>
      <returns>Существующий ключ.</returns>
      <param name="keyName">Имя ключа.</param>
      <param name="provider">KSP, в котором содержится ключ.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keyName" /> или <paramref name="provider" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>Создает экземпляр класса <see cref="T:System.Security.Cryptography.CngKey" />, который представляет существующий именованный ключ, используя заданного поставщика хранилища ключей (KSP) и параметры открытия ключа.</summary>
      <returns>Существующий ключ.</returns>
      <param name="keyName">Имя ключа.</param>
      <param name="provider">KSP, в котором содержится ключ.</param>
      <param name="openOptions">Битовая комбинация значений перечисления, определяющих параметры открытия ключа, такие как место открытия ключа (компьютер или хранилище пользователя) и необходимость подавления запросов пользовательского интерфейса.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keyName" /> или <paramref name="provider" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ParentWindowHandle">
      <summary>Получает или задает дескриптор окна (HWND), который необходимо использовать для запросов пользовательского интерфейса, отображаемых при доступе к ключу.</summary>
      <returns>Дескриптор родительского окна для ключа.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Provider">
      <summary>Получает поставщика хранилища ключей (KSP), управляющего ключом.</summary>
      <returns>KSP, управляющий ключом.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ProviderHandle">
      <summary>Получает собственный дескриптор (NCRYPT_PROV_HANDLE) поставщика хранилища ключей (KSP).</summary>
      <returns>Дескриптор KSP.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)">
      <summary>Задает именованное свойство для ключа.</summary>
      <param name="property">Свойство ключа, которое необходимо задать.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UIPolicy">
      <summary>Получает параметры, управляющие пользовательским интерфейсом для доступа к ключу.  </summary>
      <returns>Объект, в котором содержатся параметры конфигурации для отображения пользовательского интерфейса.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UniqueName">
      <summary>Получает уникальное имя ключа.</summary>
      <returns>Альтернативное имя ключа.Если ключ является эфемерным, параметру присваивается значение null.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyBlobFormat">
      <summary>Задает формат большого двоичного объекта ключа для использования с объектами Microsoft CNG. </summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />, используя заданный формат.</summary>
      <param name="format">Формат большого двоичного объекта ключа, подлежащий инициализации.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="format" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Длина значения параметра <paramref name="format" /> равна 0.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />, задающий большой двоичный объект закрытого ключа криптосистемы на эллиптических кривых (ECC).</summary>
      <returns>Объект, задающий большой двоичный объект закрытого ключа ECC.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />, задающий большой двоичный объект открытого ключа криптосистемы на эллиптических кривых (ECC).</summary>
      <returns>Объект, задающий большой двоичный объект открытого ключа ECC.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <returns>Значение true, если параметр <paramref name="obj" /> представляет объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />, который задает тот же самый формат большого двоичного объекта ключа, что и текущий объект; в противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object to the current <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> object.</summary>
      <returns>Значение true, если параметр <paramref name="other" /> задает тот же самый формат большого двоичного объекта ключа, что и текущий объект; в противном случае — значение false.</returns>
      <param name="other">Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Format">
      <summary>Получает имя формата большого двоичного объекта ключа, заданного текущим объектом <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />.</summary>
      <returns>Внедренное имя формата большого двоичного объекта ключа.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />, задающий универсальный большой двоичный объект закрытого ключа.</summary>
      <returns>Объект, задающий универсальный большой двоичный объект закрытого ключа.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />, задающий универсальный большой двоичный объект открытого ключа.</summary>
      <returns>Объект, задающий универсальный большой двоичный объект открытого ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode">
      <summary>Формирует хэш-значение имени формата большого двоичного объекта ключа, внедренного в текущий объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />.</summary>
      <returns>Хэш-значение внедренного формата большого двоичного объекта ключа. </returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> один и тот же формат большого двоичного объекта ключа.</summary>
      <returns>Значение true, если два объекта задают один и тот же формат большого двоичного объекта ключа; в противном случае — значение false.</returns>
      <param name="left">Объект, задающий большой двоичный объект ключа.</param>
      <param name="right">Второй объект, подлежащий сравнению с объектом, идентифицируемым параметром <paramref name="left" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> разные форматы большого двоичного объекта ключа.</summary>
      <returns>Значение true, если два объекта задают разные форматы большого двоичного объекта ключа; в противном случае — значение false.</returns>
      <param name="left">Объект, задающий большой двоичный объект ключа.</param>
      <param name="right">Второй объект, подлежащий сравнению с объектом, идентифицируемым параметром <paramref name="left" />.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />, задающий большой двоичный объект ключа непрозрачной передачи.</summary>
      <returns>Объект, задающий большой двоичный объект ключа непрозрачной передачи.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />, задающий большой двоичный объект ключа в соответствии со стандартом синтаксиса закрытых ключей (PKCS 8).</summary>
      <returns>Объект, задающий большой двоичный объект закрытого ключа PKCS 8.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.ToString">
      <summary>Получает имя формата большого двоичного объекта ключа, заданного текущим объектом <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" />.</summary>
      <returns>Внедренное имя формата большого двоичного объекта ключа.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationOptions">
      <summary>Задает параметры создания ключа.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.None">
      <summary>Параметры создания ключа не заданы.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.MachineKey">
      <summary>Создается ключ для всех пользователей компьютера.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.OverwriteExistingKey">
      <summary>При создании нового ключа существующий ключ перезаписывается.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationParameters">
      <summary>Содержит дополнительные свойства для создания ключа.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyCreationParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngKeyCreationParameters" /> class.</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy">
      <summary>Получает или задает политику экспорта ключа.</summary>
      <returns>Объект, задающий политику экспорта ключа.Значение по умолчанию равно null и показывает, что задана политика KSP по умолчанию для экспорта ключа.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions">
      <summary>Получает или задает параметры создания ключа.</summary>
      <returns>Объект, задающий параметры создания ключа.Значение по умолчанию равно null и показывает, что заданы параметры KSP по умолчанию для создания ключа.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyUsage">
      <summary>Получает или задает криптографические операции, применяемые к текущему ключу. </summary>
      <returns>Битовая комбинация значений перечисления, задающих параметры использования ключа.Значение по умолчанию равно null и показывает, что заданы параметры KSP по умолчанию для использования ключа.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Parameters">
      <summary>Позволяет создать объект <see cref="T:System.Security.Cryptography.CngKey" /> с дополнительными свойствами, которые устанавливаются до окончания создания ключа.</summary>
      <returns>Объект коллекции, содержащий любые дополнительные параметры, которые необходимо задать для объекта <see cref="T:System.Security.Cryptography.CngKey" /> во время создания ключа.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle">
      <summary>Получает или задает дескриптор окна, которое необходимо использовать в качестве родительского окна для диалоговых окон, создаваемых классами CNG.</summary>
      <returns>Дескриптор HWND родительского окна, используемый для диалоговых окон CNG.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Provider">
      <summary>Получает или задает поставщика хранилища ключей (KSP), в котором необходимо создать ключ.</summary>
      <returns>Объект, задающий поставщика хранилища ключей, в котором будет создан новый ключ.</returns>
      <exception cref="T:System.ArgumentNullException">Для свойства <see cref="P:System.Security.Cryptography.CngKeyCreationParameters.Provider" /> задано значение null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.UIPolicy">
      <summary>Получает или задает информацию о пользовательском интерфейсе, отображаемую при создании ключа или доступе к ключу.</summary>
      <returns>Объект, в котором содержатся сведения о пользовательском интерфейсе, отображаемом классами CNG при создании ключа или доступе к ключу.Значение null показывает, что задана политика KSP по умолчанию для пользовательского интерфейса.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyHandleOpenOptions">
      <summary>Задает параметры открытия дескрипторов ключа.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.None">
      <summary>Открываемый дескриптор ключа не определяет эфемерный ключ.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey">
      <summary>Открываемый дескриптор ключа определяет эфемерный ключ.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyOpenOptions">
      <summary>Задает параметры открытия ключа.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.None">
      <summary>Параметры открытия ключа не заданы.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.UserKey">
      <summary>Если не задано значение <see cref="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey" />, открывается ключ для текущего пользователя.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey">
      <summary>Открывается ключ для всех пользователей компьютера.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.Silent">
      <summary>Запросы пользовательского интерфейса подавляются.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyUsages">
      <summary>Задает криптографические операции, в которых может использоваться ключ CNG. </summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.None">
      <summary>Ключу не назначены значения использования.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Decryption">
      <summary>Ключ может использоваться для зашифрования и расшифрования.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Signing">
      <summary>Ключ может использоваться для создания и проверки подписи.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.KeyAgreement">
      <summary>Ключ может использоваться для формирования секретного соглашения и обмена ключами.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.AllUsages">
      <summary>Ключ может использоваться в любых операциях.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProperty">
      <summary>Инкапсулирует свойство ключа или поставщика CNG.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CngProperty" /> class.</summary>
      <param name="name">Имя свойства, которое необходимо инициализировать.</param>
      <param name="value">Значение свойства, которое необходимо инициализировать.</param>
      <param name="options">Битовая комбинация значений перечисления, определяющая способ сохранения свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Object)">
      <summary>Сравнивает заданный объект с текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.</summary>
      <returns>Значение true, если параметр <paramref name="obj" /> является объектом <see cref="T:System.Security.Cryptography.CngProperty" />, задающим то же самое свойство, что и текущий объект; в противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)">
      <summary>Сравнивает заданный объект <see cref="T:System.Security.Cryptography.CngProperty" /> с текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.</summary>
      <returns>Значение true, если параметр <paramref name="other" /> представляет то же самое свойство, что и текущий объект; в противном случае — значение false.</returns>
      <param name="other">Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetHashCode">
      <summary>Формирует хэш-значение для текущего объекта <see cref="T:System.Security.Cryptography.CngProperty" />.</summary>
      <returns>Хэш-значение текущего объекта <see cref="T:System.Security.Cryptography.CngProperty" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetValue">
      <summary>Получает значение свойства, заданное текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.</summary>
      <returns>Массив, представляющий сохраненное в свойстве значение.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Name">
      <summary>Получает имя свойства, заданное текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.</summary>
      <returns>Имя свойства, заданное в текущем объекте <see cref="T:System.Security.Cryptography.CngProperty" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngProperty" /> одинаковые имена, значения и параметры свойств.</summary>
      <returns>Значение true, если два объекта задают одно и то же свойство, в противном случае — значение false.</returns>
      <param name="left">Объект, задающий свойство ключа или поставщика CNG.</param>
      <param name="right">Второй объект, подлежащий сравнению с объектом, идентифицируемым параметром <paramref name="left" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngProperty" /> разные имена, значения и параметры свойств.</summary>
      <returns>Значение true, если два объекта задают разные свойства; в противном случае — значение false.</returns>
      <param name="left">Объект, задающий свойство ключа или поставщика CNG.</param>
      <param name="right">Второй объект, подлежащий сравнению с объектом, идентифицируемым параметром <paramref name="left" />.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Options">
      <summary>Получает параметры свойства, заданные текущим объектом <see cref="T:System.Security.Cryptography.CngProperty" />.</summary>
      <returns>Объект, определяющий параметры, заданные в текущем объекте <see cref="T:System.Security.Cryptography.CngProperty" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyCollection">
      <summary>Предоставляет строго типизированный набор свойств CNG.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngPropertyCollection.#ctor">
      <summary>Инициализирует новый объект <see cref="T:System.Security.Cryptography.CngPropertyCollection" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyOptions">
      <summary>Задает параметры свойств ключа CNG.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.None">
      <summary>Для указанного свойства не заданы параметры.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.CustomProperty">
      <summary>Это свойство не задано в CNG.Используйте этот параметр для предотвращения конфликтов имен свойств CNG в будущем.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.Persist">
      <summary>Это свойство должно быть сохранено.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProvider">
      <summary>Инкапсулирует имя поставщика хранилища ключей (KSP), используемое с объектами криптографии следующего поколения (CNG).</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngProvider" />.</summary>
      <param name="provider">Имя поставщика хранилища ключей (KSP) для инициализации.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="provider" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Длина значения параметра <paramref name="provider" /> равна 0.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Object)">
      <summary>Compares the specified object to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <returns>Значение true, если параметр <paramref name="obj" /> является объектом <see cref="T:System.Security.Cryptography.CngProvider" />, задающим того же поставщика хранилищ ключей, что и текущий объект; в противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngProvider" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)">
      <summary>Compares the specified <see cref="T:System.Security.Cryptography.CngProvider" /> object to the current <see cref="T:System.Security.Cryptography.CngProvider" /> object.</summary>
      <returns>Значение true, если параметр <paramref name="other" /> задает того же поставщика хранилищ ключей, что и текущий объект; в противном случае — значение false.</returns>
      <param name="other">Объект, который требуется сравнить с текущим объектом <see cref="T:System.Security.Cryptography.CngProvider" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.GetHashCode">
      <summary>Формирует значение хэша имени поставщика хранилищ ключей, внедренного в текущий объект <see cref="T:System.Security.Cryptography.CngProvider" />.</summary>
      <returns>Значение хэша внедренного имени поставщика хранилища ключей.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngProvider" />, задающий поставщика хранилищ ключей на базе смарт-карт (Microsoft). </summary>
      <returns>Объект, задающий поставщика хранилищ ключей на базе смарт-карт (Microsoft).</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider">
      <summary>Получает объект <see cref="T:System.Security.Cryptography.CngProvider" />, задающий программного поставщика хранилищ ключей (Microsoft).</summary>
      <returns>Объект , задающий программного поставщика хранилищ ключей (Microsoft).</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngProvider" /> одного и того же поставщика хранилищ ключей.</summary>
      <returns>Значение true, если два объекта представляют одинаковых поставщиков хранилищ ключей; в противном случае — значение false.</returns>
      <param name="left">Объект, задающий поставщика хранилищ ключей.</param>
      <param name="right">Второй объект, подлежащий сравнению с объектом, идентифицируемым параметром <paramref name="left" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>Определяет, задают ли два объекта <see cref="T:System.Security.Cryptography.CngProvider" /> различных поставщиков хранилищ ключей.</summary>
      <returns>Значение true, если два объекта представляют различных поставщиков хранилищ ключей; в противном случае — значение false.</returns>
      <param name="left">Объект, задающий поставщика хранилищ ключей.</param>
      <param name="right">Второй объект, подлежащий сравнению с объектом, идентифицируемым параметром <paramref name="left" />.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.Provider">
      <summary>Получает имя поставщика хранилищ ключей, задаваемого текущим объектом <see cref="T:System.Security.Cryptography.CngProvider" />.</summary>
      <returns>Внедренное имя поставщика хранилищ ключей.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.ToString">
      <summary>Получает имя поставщика хранилищ ключей, задаваемого текущим объектом <see cref="T:System.Security.Cryptography.CngProvider" />.</summary>
      <returns>Внедренное имя поставщика хранилищ ключей.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIPolicy">
      <summary>Инкапсулирует дополнительные параметры конфигурации для пользовательского интерфейса, отображаемого механизмом CNG при доступе к защищенному ключу.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngUIPolicy" />, используя заданный уровень защиты.</summary>
      <param name="protectionLevel">Битовая комбинация значений перечисления, задающих уровень защиты.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngUIPolicy" />, используя заданный уровень защиты и понятное имя.</summary>
      <param name="protectionLevel">Битовая комбинация значений перечисления, задающих уровень защиты.  </param>
      <param name="friendlyName">Понятное имя ключа, используемое в запросе пользовательского интерфейса.Чтобы использовать имя по умолчанию, укажите строку null.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngUIPolicy" />, используя заданный уровень защиты, понятное имя и описание.</summary>
      <param name="protectionLevel">Битовая комбинация значений перечисления, задающих уровень защиты.  </param>
      <param name="friendlyName">Понятное имя ключа, используемое в запросе пользовательского интерфейса.Чтобы использовать имя по умолчанию, укажите строку null.</param>
      <param name="description">Полнотекстовое описание ключа.Чтобы использовать описание по умолчанию, укажите строку null.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngUIPolicy" />, используя заданный уровень защиты, понятное имя, строку описания и контекст использования.</summary>
      <param name="protectionLevel">Битовая комбинация значений перечисления, задающих уровень защиты.  </param>
      <param name="friendlyName">Понятное имя ключа, используемое в запросе пользовательского интерфейса.Чтобы использовать имя по умолчанию, укажите строку null.</param>
      <param name="description">Полнотекстовое описание ключа.Чтобы использовать описание по умолчанию, укажите строку null.</param>
      <param name="useContext">Описание способа использования ключа.Чтобы использовать описание по умолчанию, укажите строку null.</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CngUIPolicy" />, используя заданный уровень защиты, понятное имя, строку описания, контекст использования и заголовок.</summary>
      <param name="protectionLevel">Битовая комбинация значений перечисления, задающих уровень защиты.  </param>
      <param name="friendlyName">Понятное имя ключа, используемое в запросе пользовательского интерфейса.Чтобы использовать имя по умолчанию, укажите строку null.</param>
      <param name="description">Полнотекстовое описание ключа.Чтобы использовать описание по умолчанию, укажите строку null.</param>
      <param name="useContext">Описание способа использования ключа.Чтобы использовать описание по умолчанию, укажите строку null.</param>
      <param name="creationTitle">Заголовок диалогового окна, в котором отображается запрос пользовательского интерфейса.Чтобы использовать заголовок по умолчанию, укажите строку null.</param>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.CreationTitle">
      <summary>Получает заголовок диалогового окна, отображаемого при запросе пользовательского интерфейса.</summary>
      <returns>Заголовок диалогового окна, отображаемого при доступе к ключу.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.Description">
      <summary>Получает строку описания, отображаемую в запросе пользовательского интерфейса.</summary>
      <returns>Текст описания для диалогового окна, отображаемого при доступе к ключу.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.FriendlyName">
      <summary>Получает понятное имя, отображаемое в запросе пользовательского интерфейса.</summary>
      <returns>Понятное имя, которое используется для описания ключа в диалоговом окне, отображаемом при доступе к ключу.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.ProtectionLevel">
      <summary>Получает уровень защиты пользовательского интерфейса для ключа.</summary>
      <returns>Объект, описывающий уровень защиты пользовательского интерфейса, который необходимо применить к ключу.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.UseContext">
      <summary>Получает описание способа использования ключа.</summary>
      <returns>Описание способа использования ключа.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIProtectionLevels">
      <summary>Задает уровень защиты ключа в скриптах запроса пользовательского интерфейса.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.None">
      <summary>Запрос пользовательского интерфейса не отображается при доступе к ключу.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ProtectKey">
      <summary>Запрос пользовательского интерфейса отображается при первом доступе к ключу в процессе.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ForceHighProtection">
      <summary>Запрос пользовательского интерфейса отображается каждый раз при доступе к ключу.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>Предоставляет абстрактный базовый класс, из которого создаются реализации алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).Этот класс предоставляет базовый набор операций, которые должны поддерживать все реализации алгоритма ECDH.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>Создает новый экземпляр реализации по умолчанию алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).</summary>
      <returns>Новый экземпляр реализации по умолчанию этого класса.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>Создает новый экземпляр заданной реализации по умолчанию алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).</summary>
      <returns>Новый экземпляр заданной реализации этого класса.Если заданное имя алгоритма не соответствует реализации ECDH, этот метод возвращает значение null.</returns>
      <param name="algorithm">Имя реализации алгоритма ECDH.Все следующие строки относятся к одной и той же реализации, являющейся единственной реализацией, которая в настоящее время поддерживается .NET Framework:"ECDH""ECDiffieHellman""ECDiffieHellmanCng""System.Security.Cryptography.ECDiffieHellmanCng"Пользователь может также предоставить имя собственной реализации алгоритма ECDH.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="algorithm" /> имеет значение null. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Получает последовательность байтов, которые могут использоваться в качестве ключа при заданном открытом ключе другой стороны.</summary>
      <returns>Ключевой материал, сформированный на основе открытого ключа другой стороны, участвующей в обмене ключами.</returns>
      <param name="otherPartyPublicKey">Открытый ключ другой стороны.</param>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>Получает имя алгоритма обмена ключами.</summary>
      <returns>Имя алгоритма обмена ключами. </returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>Получает открытый ключ, используемый текущим экземпляром ECDH.</summary>
      <returns>Открытая часть пары ключей ECDH, используемая этим экземпляром <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>Получает имя алгоритма подписи.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCng">
      <summary>Предоставляет реализацию CNG алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).Этот класс используется для выполнения криптографических операций.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class with a random key pair.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> парой случайных ключей, используя заданный размер ключа.</summary>
      <param name="keySize">Размер ключа.Допустимые размеры ключа: 256, 384 и 521 бит.</param>
      <exception cref="T:System.ArgumentException">Недопустимое значение параметра <paramref name="keySize" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <param name="key">Ключ, который будет подаваться на вход криптографических операций, выполняемых текущим объектом. </param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="key" /> не указывает группу алгоритмов, основанных на алгоритме Диффи-Хеллмана на эллиптических кривых (ECDH).</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)">
      <summary>Формирует ключевой материал из секретного соглашения, заключенного между двумя сторонами, используя заданный объект <see cref="T:System.Security.Cryptography.CngKey" />, в котором содержится открытый ключ второй стороны. </summary>
      <returns>Массив байтов, в котором содержится ключевой материал.Эта информация формируется из секретного соглашения, вычисляемого на основе закрытого ключа текущего объекта и указанного открытого ключа.</returns>
      <param name="otherPartyPublicKey">Получает объект, в котором содержится открытая часть ключа алгоритма Диффи-Хеллмана на эллиптических кривых (Elliptic Curve Diffie-Hellman, ECDH), переданная другой стороной в процессе обмена ключами.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="otherPartyPublicKey" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Недопустимое значение параметра <paramref name="otherPartyPublicKey" />.Значение его свойства <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> отлично от <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" /> или его размер ключа не соответствует размеру ключа данного экземпляра.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> данного объекта задает функцию формирования ключа <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />, но значение <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> или <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> равно null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Формирует ключевой материал из секретного соглашения, заключенного между двумя сторонами, используя заданный объект <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />, в котором содержится открытый ключ второй стороны. </summary>
      <returns>Массив байтов, в котором содержится ключевой материал.Эта информация формируется из секретного соглашения, вычисляемого на основе закрытого ключа текущего объекта и указанного открытого ключа.</returns>
      <param name="otherPartyPublicKey">Открытый ключ другой стороны, участвующей в обмене ключами.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="otherPartyPublicKey" /> не является ключом <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)">
      <summary>Получает дескриптор секретного соглашения, заключенного между двумя сторонами, используя заданный объект <see cref="T:System.Security.Cryptography.CngKey" />, в котором содержится открытый ключ второй стороны.</summary>
      <returns>Дескриптор секретного соглашения.Эта информация вычисляется на основе закрытого ключа текущего объекта и указанного открытого ключа.</returns>
      <param name="otherPartyPublicKey">Получает объект, в котором содержится открытая часть ключа алгоритма Диффи-Хеллмана на эллиптических кривых (Elliptic Curve Diffie-Hellman, ECDH), переданная другой стороной в процессе обмена ключами.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="otherPartyPublicKey" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="otherPartyPublicKey" /> не является ключом ECDH или имеет неверный размер.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Получает дескриптор секретного соглашения, согласованного между двумя сторонами, используя заданный объект <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />, в котором содержится открытый ключ второй стороны.</summary>
      <returns>Дескриптор секретного соглашения.Эта информация вычисляется на основе закрытого ключа текущего объекта и указанного открытого ключа.</returns>
      <param name="otherPartyPublicKey">Открытый ключ другой стороны, участвующей в обмене ключами.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> is not an <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> key. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String)">
      <summary>Этот метод не реализован.</summary>
      <param name="xmlString">Данные ключа в формате XML, подлежащие десериализации.</param>
      <exception cref="T:System.NotImplementedException">Этот метод не был переопределен для данного экземпляра.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Выполняет десериализацию данных ключа из XML-строки, используя указанный формат.</summary>
      <param name="xml">Данные ключа в формате XML, подлежащие десериализации.</param>
      <param name="format">Одно из значений перечисления, задающее формат XML-строки.В настоящее время поддерживается только формат <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="xml" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Неверный формат параметра <paramref name="xml" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра <paramref name="format" />.Единственным допустимым значением является <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm">
      <summary>Получает или задает хэш-алгоритм, используемый при генерации ключевого материала.</summary>
      <returns>Объект, задающий хэш-алгоритм.</returns>
      <exception cref="T:System.ArgumentNullException">Значение равно null..</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey">
      <summary>Получает или задает ключ HMAC, используемый при формировании ключевого материала.</summary>
      <returns>Ключ <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Key">
      <summary>Задает объект <see cref="T:System.Security.Cryptography.CngKey" />, который будет использоваться текущим объектом для выполнения криптографических операций.</summary>
      <returns>Пара ключей, используемая текущим объектом для выполнения криптографических операций.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction">
      <summary>Получает или задает функцию формирования ключа для класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" />: <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />, <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> или <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />.Значение по умолчанию — <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение перечисления вне диапазона.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Label">
      <summary>Получает или задает значение метки, используемое для формирования ключа.</summary>
      <returns>Значение метки.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey">
      <summary>Получает открытый ключ, который может использоваться другим объектом <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> для генерации секретного соглашения.</summary>
      <returns>Открытый ключ, связанный с этим экземпляром класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend">
      <summary>Получает или задает значение, добавляемое к концу секретного соглашения при генерации ключевого материала.</summary>
      <returns>Значение, добавляемое к концу секретного соглашения.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend">
      <summary>Получает или задает значение, добавляемое к началу секретного соглашения при формировании ключевого материала.</summary>
      <returns>Значение, добавляемое к началу секретного соглашения при формировании ключевого материала.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed">
      <summary>Получает или задает начальное значение, используемое при формировании ключевого материала.</summary>
      <returns>Начальное значение.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Boolean)">
      <summary>Этот метод не реализован.</summary>
      <returns>Не применимо.</returns>
      <param name="includePrivateParameters">Значение true для включения параметров с модификатором доступа private; в противном случае — значение false.</param>
      <exception cref="T:System.NotImplementedException">Этот метод не был переопределен для данного экземпляра.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Выполняет сериализацию данных ключа в XML-строку, используя указанный формат.</summary>
      <returns>Объект типа string, в котором содержатся данные ключа, сериализованные в XML-строку в соответствии с требуемым форматом.</returns>
      <param name="format">Одно из значений перечисления, задающее формат XML-строки.В настоящее время поддерживается только формат <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра <paramref name="format" />.Единственным допустимым значением является <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey">
      <summary>Получает значение, которое определяет, используется ли секретное соглашение в качестве ключа HMAC для формирования ключевого материала.</summary>
      <returns>Значение true, если секретное соглашение используется в качестве ключа HMAC для формирования ключевого материала; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey">
      <summary>Задает открытый ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH) для использования с классом <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" />.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.BlobFormat">
      <summary>Получает формат большого двоичного объекта ключа для объекта <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />.</summary>
      <returns>Формат, в котором представляется большой двоичный объект ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromByteArray(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>Преобразует массив байтов, в котором содержится открытый ключ, в объект <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> в соответствии с заданным форматом.</summary>
      <returns>Объект, в котором содержится открытый ключ ECDH, сериализованный в массив байтов.</returns>
      <param name="publicKeyBlob">Массив байтов, в котором содержится открытый ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).</param>
      <param name="format">Объект, задающий формат большого двоичного объекта ключа.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="publicKeyBlob" /> или <paramref name="format" />имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Для параметра <paramref name="publicKeyBlob" /> не задан ключ <see cref="T:System.Security.Cryptography.ECDiffieHellman" />. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromXmlString(System.String)">
      <summary>Преобразует XML-строку в объект <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />.</summary>
      <returns>Объект, в котором содержится открытый ключ ECDH, заданный указанной XML-строкой.</returns>
      <param name="xml">XML-строка, в которой содержится ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="xml" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Для параметра <paramref name="xml" /> не задан ключ <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.Import">
      <summary>Преобразует объект <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> в объект <see cref="T:System.Security.Cryptography.CngKey" />.</summary>
      <returns>Объект, в котором содержится ключ, представленный объектом <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ToXmlString">
      <summary>Выполняет сериализацию открытого ключа <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> в XML-строку формата RFC 4050.</summary>
      <returns>XML-строка, в которой содержится сериализованный открытый ключ <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
      <summary>Задает функцию формирования ключа, используемую классом <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> для преобразования секретного соглашения в ключевой материал.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash">
      <summary>Хэш-алгоритм, используемый для формирования ключевого материала.Свойство <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" /> задает имя алгоритма, который необходимо использовать.Если имя алгоритма не задано, используется алгоритм по умолчанию <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac">
      <summary>Для формирования ключевого материала используется алгоритм HMAC.Свойство <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" /> задает ключ, который необходимо использовать.Необходимо задать это свойство или задать для свойства <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" /> значение true; в противном случае при использовании <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> возникнет исключение <see cref="T:System.Security.Cryptography.CryptographicException" />.Если заданы оба свойства, секретное соглашение используется в качестве ключа HMAC.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls">
      <summary>Для формирования ключевого материала используется протокол TLS.Необходимо задать свойства <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> и <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" />; в противном случае при использовании <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> возникнет исключение <see cref="T:System.Security.Cryptography.CryptographicException" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>Абстрактный базовый класс, от которого должны наследоваться все реализации <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />. </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</summary>
      <param name="keyBlob">Массив байтов, представляющий объект <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="keyBlob" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> class and optionally releases the managed resources.</summary>
      <param name="disposing">Значение true позволяет освободить управляемые и неуправляемые ресурсы; значение false позволяет освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>Выполняет сериализацию большого двоичного объекта ключа <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> в массив байтов.</summary>
      <returns>Массив байтов, в котором содержится сериализованный открытый ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>Выполняет сериализацию открытого ключа <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> в XML-строку.</summary>
      <returns>XML-строка, в которой содержится сериализованный открытый ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>Предоставляет абстрактный базовый класс, инкапсулирующий алгоритм цифровой подписи DSA на эллиптических кривых (Elliptic Curve Digital Signature Algorithm, ECDSA).</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDsa" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>Создает новый экземпляр реализации по умолчанию алгоритма цифровой подписи DSA на эллиптических кривых (Elliptic Curve Digital Signature Algorithm, ECDSA).</summary>
      <returns>Новый экземпляр реализации по умолчанию (<see cref="T:System.Security.Cryptography.ECDsaCng" />) этого класса.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>Создает новый экземпляр заданной реализации алгоритма цифровой подписи DSA на эллиптических кривых (Elliptic Curve Digital Signature Algorithm, ECDSA).</summary>
      <returns>Новый экземпляр заданной реализации этого класса.Если заданное имя алгоритма не соответствует реализации ECDSA, этот метод возвращает значение null.</returns>
      <param name="algorithm">Имя реализации ECDSA.Все следующие строки относятся к одной и той же реализации, являющейся единственной реализацией, которая в настоящее время поддерживается .NET Framework:"ECDsa""ECDsaCng""System.Security.Cryptography.ECDsaCng"Также можно предоставить имя пользовательской реализации ECDSA.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="algorithm" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>Получает имя алгоритма обмена ключами.</summary>
      <returns>Always null.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>Получает имя алгоритма подписи.</summary>
      <returns>Строка "ECDsa".</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>Создает цифровую подпись для заданного хэш-значения. </summary>
      <returns>Цифровая подпись, которая представляет собой заданное хэш-значение, зашифрованное с помощью закрытого ключа.</returns>
      <param name="hash">Хэш-значение подписываемых данных.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hash" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Проверяет цифровую подпись по заданному хэш-значению. </summary>
      <returns>Значение true, если хэш-значение соответствует расшифрованной подписи; в противном случае — значение false.</returns>
      <param name="hash">Хэш-значение блока данных.</param>
      <param name="signature">Цифровая подпись, подлежащая проверке.</param>
    </member>
    <member name="T:System.Security.Cryptography.ECDsaCng">
      <summary>Обеспечивает реализацию CNG алгоритма цифровой подписи DSA на эллиптических кривых (Elliptic Curve Digital Signature Algorithm, ECDSA). </summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class with a random key pair.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDsaCng" /> парой случайных ключей, используя заданный размер ключа.</summary>
      <param name="keySize">Размер ключа.Допустимые размеры ключа: 256, 384 и 521 бит.</param>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимое значение параметра <paramref name="keySize" />. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.ECDsaCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" /> object.</summary>
      <param name="key">Ключ, который будет подаваться на вход криптографических операций, выполняемых текущим объектом.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="key" /> не указывает группу алгоритмов, основанных на алгоритме цифровой подписи DSA на эллиптических кривых (ECDSA).</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Классы криптографии следующего поколения (CNG) не поддерживаются данной системой.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)">
      <summary>Этот метод не реализован.</summary>
      <param name="xmlString">Данные ключа в формате XML, подлежащие десериализации.</param>
      <exception cref="T:System.NotImplementedException">Этот метод не был переопределен для данного экземпляра. </exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Выполняет десериализацию данных ключа из XML-строки, используя указанный формат.</summary>
      <param name="xml">Данные ключа в формате XML, подлежащие десериализации.</param>
      <param name="format">Одно из значений перечисления, задающее формат XML-строки.В настоящее время поддерживается только формат <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="xml" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра <paramref name="format" />.Единственным допустимым значением является <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.HashAlgorithm">
      <summary>Получает или задает хэш-алгоритм, используемый при подписывании и проверке данных.</summary>
      <returns>Объект, задающий хэш-алгоритм.</returns>
      <exception cref="T:System.ArgumentNullException">Значение равно null.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.Key">
      <summary>Получает или задает ключ, используемый при подписывании и проверке данных.</summary>
      <returns>Объект, задающий ключ.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])">
      <summary>Создает подпись для указанных данных.</summary>
      <returns>Цифровая подпись для указанных данных.</returns>
      <param name="data">Сообщение, которое необходимо подписать.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> имеет значение null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Для данных ключа, связанных с этим экземпляром, не существует закрытого ключа.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)">
      <summary>Создает цифровую подпись для фрагмента данных указанной длины, начиная с указанной позиции. </summary>
      <returns>Цифровая подпись для указанного фрагмента данных.</returns>
      <param name="data">Сообщение, которое необходимо подписать.</param>
      <param name="offset">Позиция в строке, с которой следует начать подписывание.</param>
      <param name="count">Длина строки в знаках, подлежащая подписыванию и отсчитываемая от позиции <paramref name="offset" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значения параметров <paramref name="count" /> или <paramref name="offset" /> вызвали выход за границы строки данных при чтении. </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Для данных ключа, связанных с этим экземпляром, не существует закрытого ключа.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)">
      <summary>Создает подпись для указанного потока данных, перемещая позицию чтения в конец потока.</summary>
      <returns>Цифровая подпись для указанного потока данных.</returns>
      <param name="data">Поток данных, которые необходимо подписать.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> имеет значение null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Для данных ключа, связанных с этим экземпляром, не существует закрытого ключа.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])">
      <summary>Создает подпись для указанного значения хэша.</summary>
      <returns>Цифровая подпись для указанного значения хэша.</returns>
      <param name="hash">Значение хэша подписываемых данных.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hash" /> имеет значение null.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Для данных ключа, связанных с этим экземпляром, не существует закрытого ключа.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)">
      <summary>Этот метод не реализован.</summary>
      <returns>Не применимо.</returns>
      <param name="includePrivateParameters">Значение true для включения параметров с модификатором доступа private; в противном случае — значение false.</param>
      <exception cref="T:System.NotImplementedException">Этот метод не реализован.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>Выполняет сериализацию данных ключа в XML-строку, используя указанный формат.</summary>
      <returns>Объект типа string, в котором содержатся данные ключа, сериализованные в XML-строку в соответствии с требуемым форматом.</returns>
      <param name="format">Одно из значений перечисления, задающее формат XML-строки.В настоящее время поддерживается только формат <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра <paramref name="format" />.Единственным допустимым значением является <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Все остальные ошибки.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])">
      <summary>Проверяет цифровую подпись указанных данных. </summary>
      <returns>Значение true, если подпись действительна; в противном случае — значение false.</returns>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Подпись, подлежащая проверке.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
      <summary>Проверяет подпись для фрагмента данных указанной длины, начиная с указанной позиции.</summary>
      <returns>Значение true, если подпись действительна; в противном случае — значение false.</returns>
      <param name="data">Подписанные данные.</param>
      <param name="offset">Позиция, с которой начинаются подписанные данные.</param>
      <param name="count">Длина подписанного фрагмента данных в знаках, отсчитываемая от позиции <paramref name="offset" />.</param>
      <param name="signature">Подпись, подлежащая проверке.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> или <paramref name="count" /> меньше нуля. -или-Значение параметра <paramref name="offset" /> или <paramref name="count" /> превышает длину массива байтов, задаваемого параметром <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])">
      <summary>Проверяет цифровую подпись для указанного потока данных, перемещая позицию чтения в конец потока.</summary>
      <returns>Значение true, если подпись действительна; в противном случае — значение false.</returns>
      <param name="data">Подписанный поток данных.</param>
      <param name="signature">Подпись, подлежащая проверке.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Проверяет указанную цифровую подпись в соответствии с указанным значением хэша.</summary>
      <returns>Значение true, если подпись действительна; в противном случае — значение false.</returns>
      <param name="hash">Значение хэша проверяемых данных.</param>
      <param name="signature">Цифровая подпись данных, проверяемых в соответствии со значением хэша.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hash" /> или <paramref name="signature" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECKeyXmlFormat">
      <summary>Определяет форматы сериализации ключей на эллиптических кривых в XML.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050">
      <summary>Формат сериализации в XML описывается в документе RFC 4050 "Using the Elliptic Curve Signature Algorithm (ECDSA) for XML Digital Signatures" ("Использование алгоритма цифровой подписи DSA на эллиптических кривых [ECDSA] для создания цифровых подписей XML").</summary>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformation">
      <summary>Предоставляет информацию о подписи манифеста. </summary>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.AuthenticodeSignature">
      <summary>Получает сведения о подписи Authenticode для манифеста. </summary>
      <returns>Объект <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" />, в котором содержатся сведения о подписи Authenticode для манифеста, или значение null, если подпись отсутствует.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.Manifest">
      <summary>Получает тип манифеста.</summary>
      <returns>Одно из значений <see cref="T:System.Security.ManifestKinds" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature">
      <summary>Получает сведения о подписи строгого имени для манифеста.</summary>
      <returns>Объект <see cref="P:System.Security.Cryptography.ManifestSignatureInformation.StrongNameSignature" />, в котором содержится подпись, или значение null, если подпись строгого имени отсутствует.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext)">
      <summary>Собирает и проверяет сведения о подписях манифестов, относящихся к заданному контексту активации.</summary>
      <returns>Коллекция, содержащая объект <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> для каждого проверяемого манифеста.</returns>
      <param name="application">Контекст активации манифеста.Контексты активации относятся к приложению и содержат несколько манифестов.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="application" /> — null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds)">
      <summary>Собирает и проверяет сведения о подписях манифестов, относящихся к заданному контексту активации и типу манифеста.</summary>
      <returns>Коллекция, содержащая объект <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> для каждого проверяемого манифеста.</returns>
      <param name="application">Контекст активации манифеста.Контексты активации относятся к приложению и содержат несколько манифестов.</param>
      <param name="manifests">Тип манифеста.Этот параметр определяет, какие манифесты в контексте активации необходимо проверить.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="application" /> — null.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ManifestSignatureInformation.VerifySignature(System.ActivationContext,System.Security.ManifestKinds,System.Security.Cryptography.X509Certificates.X509RevocationFlag,System.Security.Cryptography.X509Certificates.X509RevocationMode)">
      <summary>Собирает и проверяет сведения о подписях манифестов, относящихся к заданному контексту активации и типу манифеста, а также разрешает выбор сертификатов для отзыва.</summary>
      <returns>Коллекция, содержащая объект <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" /> для каждого проверяемого манифеста.</returns>
      <param name="application">Контекст активации манифестов.Контексты активации относятся к приложению и содержат несколько манифестов.</param>
      <param name="manifests">Тип манифеста.Этот параметр определяет, какие манифесты в контексте активации необходимо проверить.</param>
      <param name="revocationFlag">Одно из значений перечисления, указывающее, какие сертификаты в цепочке должны быть проверены на отзыв.Значение по умолчанию — <see cref="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.ExcludeRoot" />.</param>
      <param name="revocationMode">Определяет, требуется ли при проверке сертификатов X.509 обращение к интерактивным спискам отзыва сертификатов. </param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="application" /> — null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра <paramref name="revocationFlag" /> или <paramref name="revocationMode" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ManifestSignatureInformationCollection">
      <summary>Представляет коллекцию объектов <see cref="T:System.Security.Cryptography.ManifestSignatureInformation" />, доступную только для чтения.  </summary>
    </member>
    <member name="T:System.Security.Cryptography.MD5Cng">
      <summary>Предоставляет реализацию CNG алгоритма MD5 (Message Digest 5) для формирования 128-разрядных хэш-значений.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.MD5Cng" />. </summary>
      <exception cref="T:System.InvalidOperationException">Эта реализация не входит в состав криптографических алгоритмов, утвержденных в стандартах FIPS для платформы Windows.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MD5Cng.Initialize">
      <summary>Инициализирует или повторно инициализирует экземпляр хэш-алгоритма. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Cng">
      <summary>Предоставляет реализацию CNG алгоритма SHA.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA1Cng" />. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Cng.Initialize">
      <summary>Инициализирует или повторно инициализирует экземпляр хэш-алгоритма. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Cng">
      <summary>Предоставляет реализацию CNG алгоритма SHA для формирования 256-разрядных хэш-значений.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA256Cng" />. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Cng.Initialize">
      <summary>Инициализирует или повторно инициализирует экземпляр хэш-алгоритма. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA256" /> algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA256CryptoServiceProvider" />. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256CryptoServiceProvider.Initialize">
      <summary>Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Cng">
      <summary>Предоставляет реализацию CNG алгоритма SHA для формирования 384-разрядных хэш-значений.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA384Cng" />. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Cng.Initialize">
      <summary>Инициализирует или повторно инициализирует экземпляр хэш-алгоритма. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA384" /> algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA384CryptoServiceProvider" />. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384CryptoServiceProvider.Initialize">
      <summary>Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Cng">
      <summary>Предоставляет реализацию CNG алгоритма SHA для формирования 512-разрядных значений хэша.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA512Cng" />. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Cng.Initialize">
      <summary>Инициализирует или повторно инициализирует экземпляр хэш-алгоритма. </summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512CryptoServiceProvider">
      <summary>Defines a wrapper object to access the cryptographic service provider (CSP) implementation of the <see cref="T:System.Security.Cryptography.SHA512" /> algorithm. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA512CryptoServiceProvider" />. </summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512CryptoServiceProvider.Initialize">
      <summary>Инициализирует или повторно инициализирует экземпляр хэш-алгоритма.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureVerificationResult">
      <summary>Задает большинство кодов результата для проверки подписи. </summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.Valid">
      <summary>Результат проверки: сертификат является действительным.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.AssemblyIdentityMismatch">
      <summary>Идентификационные данные сборки, указанные в узле манифеста /asm:assembly/asm:assemblyIdentity не совпадают с идентификационными данными сборки в подписи Authenticode в узле /asm:assembly/ds:signature/ds:KeyInfo/msrel:RelData/r:license/r:grant/as:ManifestInformation/as:assemblyIdentity.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.ContainingSignatureInvalid">
      <summary>Не удается проверить подпись в объекте <see cref="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation" />. Поскольку подпись строгого имени охватывает подпись Authenticode, злоумышленник может попытаться подменить подпись Authenticode другой сигнатурой по своему выбору.Этот код ошибки возвращается, если не удается проверить подпись строгого имени (подмена части подписи строгого имени делает эту подпись недействительной).</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublicKeyTokenMismatch">
      <summary>маркер открытого ключа из идентификационных данных манифеста в узле /asm:assembly/asm:AssemblyIdentity не соответствует маркеру открытого ключа, используемого для подписи манифеста.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PublisherMismatch">
      <summary>Имя издателя, указанное в узле /asm:assembly/asmv2:publisherIdentity, не соответствует имени субъекта сертификата подписи или хэш ключа поставщика, указанный в том же узле publisherIdentity, не соответствует хэшу ключа сертификата подписи.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.SystemError">
      <summary>При проверке отношений доверия произошла ошибка.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidSignerCertificate">
      <summary>Сертификат подписавшего сообщение не найден или является недопустимым.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCountersignature">
      <summary>Одна из сигнатур второго уровня является недопустимой.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateSignature">
      <summary>Невозможно проверить подпись сертификата.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimestamp">
      <summary>Невозможно проверить отметку времени или сертификат либо отметка времени/сертификат имеет неверный формат.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadDigest">
      <summary>Цифровая подпись объекта не проверена.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BasicConstraintsNotObserved">
      <summary>Расширение основных ограничений сертификата не было просмотрено.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownTrustProvider">
      <summary>Для сертификата задан неизвестный поставщик доверия.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownVerificationAction">
      <summary>Для сертификата задана неизвестная операция проверки.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.BadSignatureFormat">
      <summary>Недопустимый формат подписи.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateNotExplicitlyTrusted">
      <summary>Сертификат явно помечен как ненадежный.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.MissingSignature">
      <summary>Отсутствует подпись.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExpired">
      <summary>Срок действия сертификата истек.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidTimePeriodNesting">
      <summary>Сертификат был выпущен после истечения срока действия сертификата.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateRole">
      <summary>Сертификат имеет недопустимую роль.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.PathLengthConstraintViolated">
      <summary>Нарушено ограничение длины цепочки сертификатов.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UnknownCriticalExtension">
      <summary>В сертификате содержится неизвестное расширение, помеченное как критическое.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateUsageNotAllowed">
      <summary>Невозможно использовать данный сертификат для создания и проверки подписи.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.IssuerChainingError">
      <summary>Родительский сертификат данного сертификата не издавал этот дочерний сертификат.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateMalformed">
      <summary>Сертификат отсутствует, или в нем не задано значение для важного поля, такого как "Имя субъекта" или "Имя поставщика".</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedRootCertificate">
      <summary>Нет доверия к корневому сертификату.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CouldNotBuildChain">
      <summary>Невозможно создать цепочку.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.GenericTrustFailure">
      <summary>Общее недоверие к сертификату.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateRevoked">
      <summary>Сертификат был отозван.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedTestRootCertificate">
      <summary>Нет доверия к тестовому корневому сертификату.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.RevocationCheckFailure">
      <summary>Проверка отзыва закончилась неудачей.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateUsage">
      <summary>Сертификат имеет недопустимое назначение.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.CertificateExplicitlyDistrusted">
      <summary>Сертификат был явно помечен пользователем как ненадежный.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.UntrustedCertificationAuthority">
      <summary>Цепочка сертификатов обработана правильно, но поставщик политики не доверяет одному из сертификатов ЦС.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificatePolicy">
      <summary>Сертификат имеет недопустимую политику.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SignatureVerificationResult.InvalidCertificateName">
      <summary>Сертификат имеет недопустимое имя.Это имя не включено в список разрешенных имен или явно исключено из данного списка.</summary>
    </member>
    <member name="T:System.Security.Cryptography.StrongNameSignatureInformation">
      <summary>Содержит сведения о подписи строгого имени для манифеста.</summary>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HashAlgorithm">
      <summary>Получает хэш-алгоритм для вычисления подписи строгого имени.</summary>
      <returns>Имя хэш-алгоритма для вычисления подписи строгого имени.</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.HResult">
      <summary>Получает значение HRESULT кода результата.</summary>
      <returns>Значение HRESULT кода результата.</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.IsValid">
      <summary>Получает значение, определяющее, верна ли подпись строгого имени.</summary>
      <returns>Значение true, если подпись строгого имени верна; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.PublicKey">
      <summary>Получает открытый ключ, используемый для проверки подписи.</summary>
      <returns>Открытый ключ, используемый для проверки подписи. </returns>
    </member>
    <member name="P:System.Security.Cryptography.StrongNameSignatureInformation.VerificationResult">
      <summary>Получает результат проверки подписи строгого имени.</summary>
      <returns>Коды результата проверки подписи.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation">
      <summary>Предоставляет информацию о подписи Authenticode для манифеста. </summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Description">
      <summary>Получает описание сертификата для подписи.</summary>
      <returns>Описание сертификата для подписи.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.DescriptionUrl">
      <summary>Получает URL-адрес сертификата для подписи.</summary>
      <returns>URL-адрес описания сертификата для подписи.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HashAlgorithm">
      <summary>Получает хэш-алгоритм, который используется для расчета подписи.</summary>
      <returns>Хэш-алгоритм, который используется для расчета подписи.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.HResult">
      <summary>Возвращает значение HRESULT, получаемое в результате проверки подписи.</summary>
      <returns>Значение HRESULT, получаемое в результате проверки подписи.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SignatureChain">
      <summary>Получает цепочку сертификатов, используемую для проверки подписи Authenticode.</summary>
      <returns>Объект <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" />, содержащий цепочку сертификатов.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.SigningCertificate">
      <summary>Получает сертификат, подписавший манифест.</summary>
      <returns>Объект <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />, представляющий сертификат.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.Timestamp">
      <summary>Получает отметку времени, которая была применена к подписи Authenticode.</summary>
      <returns>Объект <see cref="T:System.Security.Cryptography.X509Certificates.TimestampInformation" />, содержащий отметку времени подписи.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.TrustStatus">
      <summary>Получает достоверность подписи Authenticode.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.X509Certificates.TrustStatus" /> values. </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation.VerificationResult">
      <summary>Получает результат проверки подписи Authenticode.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.SignatureVerificationResult" /> values.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TimestampInformation">
      <summary>Предоставляет подробные сведения об отметке времени, которая была применена к подписи Authenticode манифеста. </summary>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HashAlgorithm">
      <summary>Получает хэш-алгоритм, который используется для расчета подписи отметки времени.</summary>
      <returns>Хэш-алгоритм, который используется для расчета подписи отметки времени.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.HResult">
      <summary>Возвращает значение HRESULT, получаемое проверкой подписи.</summary>
      <returns>Значение HRESULT, получаемое проверкой подписи.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.IsValid">
      <summary>Получает значение, определяющее, является ли допустимой отметка о времени.</summary>
      <returns>Значение true, если отметка о времени является допустимой; в противном случае — значение false . </returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SignatureChain">
      <summary>Получает цепочку сертификатов, используемую для проверки отметки времени подписи.</summary>
      <returns>Объект <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" />, представляющий цепочку сертификатов.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.SigningCertificate">
      <summary>Получает сертификат, подписавший отметку времени.</summary>
      <returns>Объект <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />, представляющий сертификат.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.Timestamp">
      <summary>Получает отметку времени, которая была применена к подписи.</summary>
      <returns>Объект <see cref="T:System.DateTime" />, представляющий отметку времени.</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.TimestampInformation.VerificationResult">
      <summary>Получает результат проверки подписи отметки времени.</summary>
      <returns>One of the <see cref="T:System.Security.Cryptography.SignatureVerificationResult" /> values.</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.TrustStatus">
      <summary>Идентифицирует уровень достоверности, назначенный подписи манифеста.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Untrusted">
      <summary>Подпись 
                    создана издателем, не входящим в список надежных.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.UnknownIdentity">
      <summary>Неизвестная идентификация и недопустимая подпись.Невозможно определить идентификацию, так как отсутствует проверенная подпись.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.KnownIdentity">
      <summary>Известная идентификация и допустимая подпись.Идентификацию обеспечивает допустимая подпись Authenticode.</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.TrustStatus.Trusted">
      <summary>Подпись создана явно доверенным издателем и является допустимой.</summary>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>Указывает, можно ли несколько раз войти в блокировку из одного и того же потока.</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>Если поток пытается войти в блокировку рекурсивно, выдается ошибка.Некоторые классы могут допускать определенные виды рекурсий при активированном параметре.</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>Допускается рекурсивный вход потока в блокировку.Некоторые классы могут игнорировать эту возможность.</summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>Представляет блокировку, используемую для управления доступом к ресурсу, которая позволяет нескольким потокам производить считывание или получать монопольный доступ на запись.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.ReaderWriterLockSlim" /> class with default property values.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.ReaderWriterLockSlim" /> с указанием политики рекурсии блокировки.</summary>
      <param name="recursionPolicy">Одно из значений перечисления, определяющее политику рекурсии блокировки. </param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>Возвращает общее количество уникальных потоков, вошедших в блокировку в режиме чтения.</summary>
      <returns>Количество уникальных потоков, вошедших в блокировку в режиме чтения.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Threading.ReaderWriterLockSlim" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>Пытается выполнить вход в блокировку в режиме чтения.</summary>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в режим чтения. -или-Глубина рекурсии превышает емкость счетчика.Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>Пытается выполнить вход в блокировку в обновляемом режиме.</summary>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку в любом из режимов. -или-Текущий поток вошел в режим чтения, поэтому попытка войти в обновляемый режим создаст возможность взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика.Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>Пытается выполнить вход в блокировку в режиме записи.</summary>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку в любом из режимов. -или-Текущий поток вошел в режим чтения, поэтому попытка войти в блокировку в обновляемом режиме создаст риск взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика.Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>Уменьшает счетчик глубины рекурсии для режима чтения, и выходит из режима чтения, если значение счетчик принял значение 0 (нуль).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Текущий поток не вошел в блокировку в режиме чтения.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>Уменьшает счетчик глубины рекурсии для обновляемого режима, и выходит из обновляемого режима, если счетчик принял значение 0 (нуль).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Текущий поток не вошел в блокировку в обновляемом режиме.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>Уменьшает счетчик глубины рекурсии для режима записи, и выходит из режима записи, если счетчик принял значение 0 (нуль).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Текущий поток не вошел в блокировку в режиме записи.</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>Возвращает значение, указывающее, вошел ли текущий поток в блокировку в режиме чтения.</summary>
      <returns>Значение true, если текущий поток вошел в режим чтения, в противном случае – false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>Возвращает значение, указывающее, вошел ли текущий поток в блокировку в обновляемом режиме. </summary>
      <returns>Значение true, если текущий поток вошел в обновляемый режим, противном случае – false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>Возвращает значение, указывающее, вошел ли текущий поток в блокировку в режиме записи.</summary>
      <returns>Значение true, если текущий поток вошел в режим записи, в противном случае – false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>Возвращает значение, указывающее политику рекурсии для текущего объекта <see cref="T:System.Threading.ReaderWriterLockSlim" />.</summary>
      <returns>Одно из значений перечисления, определяющее политику рекурсии блокировки.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>Возвращает количество раз, которые текущий поток входил в блокировку в режиме чтения, как показатель рекурсии.</summary>
      <returns>0 (нуль), если текущий поток не вошел в режим чтения, 1, если поток вошел в режим чтения, но не вошел в него рекурсивно, или n, если поток вошел в блокировку рекурсивно n - 1 раз.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>Возвращает количество раз, которые текущий поток входил в блокировку в обновляемом режиме, как показатель рекурсии.</summary>
      <returns>0 (нуль), если текущий поток не вошел в обновляемый режим, 1, если поток вошел в обновляемый режим, но не вошел в него рекурсивно, или n, если поток вошел в обновляемый режим рекурсивно n - 1 раз.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>Возвращает количество раз, которые текущий поток входил в блокировку в режиме записи, как показатель рекурсии.</summary>
      <returns>0 (нуль), если текущий поток, не вошел в режим записи, 1, если поток вошел в режим записи, но не вошел в него рекурсивно, или n, если поток вошел в режим записи рекурсивно n - 1 раз.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>Пытается войти в блокировку в режиме чтения с необязательным указанием времени ожидания целым числом.</summary>
      <returns>Значение true, если вызывающий поток вошел в режим чтения, иначе — false.</returns>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или -1 (<see cref="F:System.Threading.Timeout.Infinite" />) для неограниченного времени ожидания.</param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Глубина рекурсии превышает емкость счетчика.Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>Пытается войти в блокировку в режиме чтения с необязательным указанием времени ожидания.</summary>
      <returns>Значение true, если вызывающий поток вошел в режим чтения, иначе — false.</returns>
      <param name="timeout">Период ожидания или значение -1 миллисекунда для ожидания неограниченное время. </param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Глубина рекурсии превышает емкость счетчика.Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> отрицательное, но оно не равно -1 миллисекунде, которое является единственным допустимым отрицательным значением.-или-Значение <paramref name="timeout" /> больше <see cref="F:System.Int32.MaxValue" /> миллисекунд. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>Пытается войти в блокировку в обновляемом режиме с необязательным указанием времени ожидания.</summary>
      <returns>Значение true, если вызывающий поток вошел в обновляемый режим, иначе — false.</returns>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или -1 (<see cref="F:System.Threading.Timeout.Infinite" />) для неограниченного времени ожидания.</param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Текущий поток изначально вошел в блокировку в режиме чтения, поэтому попытка войти в обновляемый режим создаст возможность взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика.Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>Пытается войти в блокировку в обновляемом режиме с необязательным указанием времени ожидания.</summary>
      <returns>Значение true, если вызывающий поток вошел в обновляемый режим, иначе — false.</returns>
      <param name="timeout">Период ожидания или значение -1 миллисекунда для ожидания неограниченное время.</param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Текущий поток изначально вошел в блокировку в режиме чтения, поэтому попытка войти в обновляемый режим создаст возможность взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика.Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> отрицательное, но оно не равно -1 миллисекунде, которое является единственным допустимым отрицательным значением.-или-Значение <paramref name="timeout" /> больше <see cref="F:System.Int32.MaxValue" /> миллисекунд. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>Пытается войти в блокировку в режиме записи с необязательным указанием времени ожидания.</summary>
      <returns>Значение true, если вызывающий поток вошел в режим записи, иначе — false.</returns>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или -1 (<see cref="F:System.Threading.Timeout.Infinite" />) для неограниченного времени ожидания.</param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Текущий поток изначально вошел в блокировку в режиме чтения, поэтому попытка войти в режим записи создаст возможность взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика.Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of <paramref name="millisecondsTimeout" /> is negative, but it is not equal to <see cref="F:System.Threading.Timeout.Infinite" /> (-1), which is the only negative value allowed. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>Пытается войти в блокировку в режиме записи с необязательным указанием времени ожидания.</summary>
      <returns>Значение true, если вызывающий поток вошел в режим записи, иначе — false.</returns>
      <param name="timeout">Период ожидания или значение -1 миллисекунда для ожидания неограниченное время.</param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Текущий поток изначально вошел в блокировку в режиме чтения, поэтому попытка войти в режим записи создаст возможность взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика.Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> отрицательное, но оно не равно -1 миллисекунде, которое является единственным допустимым отрицательным значением.-или-Значение <paramref name="timeout" /> больше <see cref="F:System.Int32.MaxValue" /> миллисекунд. </exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>Возвращает общее количество потоков, ожидающих вхождения в блокировку в режиме чтения.</summary>
      <returns>Общее количество потоков, ожидающих вхождения в режим чтения.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>Возвращает общее количество потоков, ожидающих входа в блокировку в обновляемом режиме.</summary>
      <returns>Общее количество потоков, ожидающих входа в обновляемый режим.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>Возвращает общее количество потоков, ожидающих входа в блокировку в режиме записи.</summary>
      <returns>Общее количество потоков, ожидающих входа в режим записи.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Предоставляет набор статических методов (Shared в Visual Basic) для работы с определенными типами экземпляров <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Распаковывает задачу, возвращающую другую задачу.</summary>
      <returns>Задача {Task{TResult}}, представляющая асинхронную операцию предоставленной Task{Task{TResult}}.</returns>
      <param name="task">Задача Task{Task{TResult}} для распаковки.</param>
      <typeparam name="TResult"></typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, если аргумент <paramref name="task" /> равен null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Создает прокси-объект <see cref="T:System.Threading.Tasks.Task" />, представляющий асинхронную операцию Task{Task}.</summary>
      <returns>Задача, представляющая асинхронную операцию предоставленной Task{Task}.</returns>
      <param name="task">Задача Task{Task} для распаковки.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, если аргумент <paramref name="task" /> равен null.</exception>
    </member>
  </members>
</doc>